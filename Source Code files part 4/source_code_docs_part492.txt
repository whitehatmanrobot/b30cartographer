mmary>Status message before beginning the compression or extraction of a folder in the cabinet.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.PartialFolder">
            <summary>Status message (possibly reported multiple times) during the process of compressing or extracting a folder in the cabinet.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.FinishFolder">
            <summary>Status message after completion of the compression or extraction of an individual file.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.StartCab">
            <summary>Status message before beginning the compression or extraction of a cabinet file.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.PartialCab">
            <summary>Status message (possibly reported multiple times) during the process of compressing or extracting a cabinet file.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.FinishCab">
            <summary>Status message after completion of the compression or extraction of an individual file.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.Analyzing">
            <summary>Status message sent while analyzing input parameters before compresion.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.Deconstructing">
            <summary>Status message sent while deconstructing files before compresion.</summary>
        </member>
        <member name="F:Microsoft.Cab.CabinetStatusType.Reconstructing">
            <summary>Status message sent while reconstructing files after decompression.</summary>
        </member>
        <member name="T:Microsoft.Cab.CabinetStatus">
            <summary>
            Contains the data reported in a cabinet status message.
            </summary>
        </member>
        <member name="M:Microsoft.Cab.CabinetStatus.#ctor(Microsoft.Cab.CabinetStatusType,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int16,System.Int16,System.Int64,System.Int64,System.String,System.Int16,System.Int16,System.Int64,System.Int64)">
            <summary>Creates a new CabinetStatus object.</summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.StatusType">
            <summary>
            The type of status message.
            </summary>
            <remarks>
            The handler may choose to ignore some types of message types.  For example, if the handler
            will only list each file as it is compressed/extracted, it can ignore messages that
            are not of type <see cref="F:Microsoft.Cab.CabinetStatusType.FinishFile"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentFileName">
            <summary>
            The name of the file being processed. (The name of the file within the cabinet; not the external
            file path.) Also includes the internal path of the file, if any.  Valid for
            <see cref="F:Microsoft.Cab.CabinetStatusType.StartFile"/>, <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFile"/>,
            and <see cref="F:Microsoft.Cab.CabinetStatusType.FinishFile"/> messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentFileNumber">
            <summary>
            The number of the current file being processed. The first file is number 0, and the last file
            is <see cref="P:Microsoft.Cab.CabinetStatus.TotalFiles"/>-1. Valid for <see cref="F:Microsoft.Cab.CabinetStatusType.StartFile"/>,
            <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFile"/>, and <see cref="F:Microsoft.Cab.CabinetStatusType.FinishFile"/> messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.TotalFiles">
            <summary>
            The total number of files to be processed.  Valid for all message types.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentFileBytesProcessed">
            <summary>
            The number of bytes processed so far when compressing or extracting a file.  Valid for
            <see cref="F:Microsoft.Cab.CabinetStatusType.StartFile"/>, <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFile"/>,
            and <see cref="F:Microsoft.Cab.CabinetStatusType.FinishFile"/> messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentFileTotalBytes">
            <summary>
            The total number of bytes in the current file.  Valid for <see cref="F:Microsoft.Cab.CabinetStatusType.StartFile"/>,
            <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFile"/>, and <see cref="F:Microsoft.Cab.CabinetStatusType.FinishFile"/> messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentFolderNumber">
            <summary>
            The number of the current folder being processed. The first folder is number 0, and the last folder
            is <see cref="P:Microsoft.Cab.CabinetStatus.TotalFolders"/>-1. (Simple cabinets only have one folder.) Valid for
            <see cref="F:Microsoft.Cab.CabinetStatusType.StartFile"/>, <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFile"/>,
            <see cref="F:Microsoft.Cab.CabinetStatusType.FinishFile"/>, <see cref="F:Microsoft.Cab.CabinetStatusType.StartFolder"/>,
            <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFolder"/>, and <see cref="F:Microsoft.Cab.CabinetStatusType.FinishFolder"/> messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.TotalFolders">
            <summary>
            The total number folders to be processed.  Valid for all message types.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentFolderBytesProcessed">
            <summary>
            The number of bytes processed so far when flushing a folder.  Valid for
            <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFolder"/> compression status messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentFolderTotalBytes">
            <summary>
            The total number of bytes to be processed when flushing a folder.  Valid for
            <see cref="F:Microsoft.Cab.CabinetStatusType.PartialFolder"/> compression status messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentCabinetName">
            <summary>
            The name of the current cabinet.  Not necessarily the name of the cabinet on disk.
            Valid for all message types.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentCabinetNumber">
            <summary>
            The current cabinet number, when processing a chained set of cabinets. The first cabinet is
            number 0, and the last cabinet is <see cref="P:Microsoft.Cab.CabinetStatus.TotalCabinets"/>-1. Valid for all message types.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.TotalCabinets">
            <summary>
            The total number of cabinets in a chained set. Valid for all message types.  However when
            using the compression feature to auto-split into multiple cabinets based on data size,
            this value will not be accurate until the end.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentCabinetBytesProcessed">
            <summary>
            The number of compressed bytes processed so far during an extraction. Valid for all
            extraction messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.CurrentCabinetTotalBytes">
            <summary>
            The total number of compressed bytes to be processed during an extraction. Valid for all
            extraction messages.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.FileBytesProcessed">
            <summary>
            The number of uncompressed file bytes processed so far. Valid for all message types.  When
            compared to <see cref="P:Microsoft.Cab.CabinetStatus.TotalFileBytes"/>, this can be used as a measure of overall progress.
            </summary>
        </member>
        <member name="P:Microsoft.Cab.CabinetStatus.TotalFileBytes">
            <summary>
            The total number of uncompressed file bytes to be processed.  Valid for all message types.
            </summary>
        </member>
        <member name="T:Microsoft.Cab.DuplicateStream">
            <summary>
            Duplicates a source stream by maintaining a separate position.
            </summary>
            <remarks>
            WARNING: duplicate streams are not thread-safe with respect to each other or the original stream.
            If multiple threads use duplicate copies of the same stream, they must synchronize for any operations.
            </remarks>
        </member>
        <member name="M:Microsoft.Cab.DuplicateStream.Close">
            <summary>
            Closes the underlying stream, effectively closing ALL duplicates.
            </summary>
        </member>
        <member name="T:Microsoft.Cab.OffsetStream">
            <summary>
            Wraps a source stream and offsets all read/write/seek calls by a given value.
            </summary>
        </member>
        <member name="M:Microsoft.Cab.OffsetStream.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\BinScope\2.10\Microsoft.WindowsInstaller.Package.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.WindowsInstaller.Package</name>
    </assembly>
    <members>
        <member name="T:Microsoft.WindowsInstaller.InstallPackageMessageHandler">
            <summary>
            Handles status messages generated when operations are performed on an
            <see cref="T:Microsoft.WindowsInstaller.InstallPackage"/> or <see cref="T:Microsoft.WindowsInstaller.PatchPackage"/>.
            </summary>
            <example>
            <c>installPackage.Message += new InstallPackageMessageHandler(Console.WriteLine);</c>
            </example>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallPackage">
            <summary>
            Provides access to powerful build, maintenance, and analysis operations on an
            installation package (.MSI or .MSM).
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.#ctor(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode)">
            <summary>
            Creates a new InstallPackage object.  The file source directory and working
            directory are the same as the location as the package file.
            </summary>
            <param name="packagePath">Path to the install package to be created or opened</param>
            <param name="openMode">Open mode for the database</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.#ctor(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode,System.String,System.String)">
            <summary>
            Creates a new InstallPackage object, specifying an alternate file source
            directory and/or working directory.
            </summary>
            <param name="packagePath">Path to the install package to be created or opened</param>
            <param name="openMode">Open mode for the database</param>
            <param name="sourceDir">Location to obtain source files and cabinets when extracting
            or updating files in the working directory. This is often the location of an original
            copy of the package that is not meant to be modified. If this parameter is null, it
            defaults to the directory of <paramref name="packagePath"/>.</param>
            <param name="workingDir">Location where files will be extracted to/updated from. Also
            the location where a temporary folder is created during some operations. If this
            parameter is null, it defaults to the directory of <paramref name="packagePath"/>.</param>
            <remarks>If the source location is different than the working directory, then
            no files will be modified at the source location.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.LogMessage(System.String,System.Object[])">
            <summary>
            Sends a message to the <see cref="E:Microsoft.WindowsInstaller.InstallPackage.Message"/> event-handler.
            </summary>
            <param name="format">Message string, containing 0 or more format items</param>
            <param name="args">Items to be formatted</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.FindFiles(System.String)">
            <summary>
            Gets the list of file keys that have the specified long file name.
            </summary>
            <param name="longFileName">File name to search for (case-insensitive)</param>
            <returns>Array of file keys, or a 0-length array if none are found</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.FindFiles(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the list of file keys whose long file names match a specified
            regular-expression search pattern.
            </summary>
            <param name="pattern">Regular expression search pattern</param>
            <returns>Array of file keys, or a 0-length array if none are found</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.ExtractFiles">
            <summary>
            Extracts all files to the <see cref="P:Microsoft.WindowsInstaller.InstallPackage.WorkingDirectory"/>. The files are extracted
            to the relative directory matching their <see cref="P:Microsoft.WindowsInstaller.InstallPath.SourcePath"/>.
            </summary>
            <remarks>If any files have the uncompressed attribute, they will be copied
            from the <see cref="P:Microsoft.WindowsInstaller.InstallPackage.SourceDirectory"/>.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.ExtractFiles(System.Collections.IList)">
            <summary>
            Extracts a specified list of files to the <see cref="P:Microsoft.WindowsInstaller.InstallPackage.WorkingDirectory"/>. The files
            are extracted to the relative directory matching their <see cref="P:Microsoft.WindowsInstaller.InstallPath.SourcePath"/>.
            </summary>
            <param name="fileKeys">List of file key strings to extract</param>
            <remarks>If any files have the uncompressed attribute, they will be copied
            from the <see cref="P:Microsoft.WindowsInstaller.InstallPackage.SourceDirectory"/>.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.UpdateFiles">
            <summary>
            Updates the install package with new files from the <see cref="P:Microsoft.WindowsInstaller.InstallPackage.WorkingDirectory"/>.  The
            files must be in the relative directory matching their <see cref="P:Microsoft.WindowsInstaller.InstallPath.SourcePath"/>.
            This method re-compresses and packages the files if necessary, and also updates the
            following data: File.FileSize, File.Version, File.Language, MsiFileHash.HashPart*
            </summary>
            <remarks>
            The cabinet compression level used during re-cabbing can be configured with the
            <see cref="P:Microsoft.WindowsInstaller.InstallPackage.CompressionLevel"/> property.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.UpdateFiles(System.Collections.IList)">
            <summary>
            Updates the install package with new files from the <see cref="P:Microsoft.WindowsInstaller.InstallPackage.WorkingDirectory"/>.  The
            files must be in the relative directory matching their <see cref="P:Microsoft.WindowsInstaller.InstallPath.SourcePath"/>.
            This method re-compresses and packages the files if necessary, and also updates the
            following data: File.FileSize, File.Version, File.Language, MsiFileHash.HashPart?.
            </summary>
            <param name="fileKeys">List of file key strings to update</param>
            <remarks>
            This method does not change the media structure of the package, so it may require extracting
            and re-compressing a large cabinet just to update one file.
            <p>The cabinet compression level used during re-cabbing can be configured with the
            <see cref="P:Microsoft.WindowsInstaller.InstallPackage.CompressionLevel"/> property.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.Consolidate(System.String)">
            <summary>
            Consolidates a package by combining and re-compressing all files into a single
            internal or external cabinet.
            </summary>
            <param name="mediaCabinet"></param>
            <remarks>If an installation package was built from many merge modules, this
            method can somewhat decrease package size, complexity, and installation time.
            <p>This method will also convert a package with all or mostly uncompressed
            files into a package where all files are compressed.</p>
            <p>If the package contains any not-yet-applied binary file patches (for
            example, a package generated by a call to <see cref="M:Microsoft.WindowsInstaller.InstallPackage.ApplyPatch(Microsoft.WindowsInstaller.PatchPackage,System.String)"/>) then
            this method will apply the patches before compressing the updated files.</p>
            <p>This method edits the database summary information and the File, Media
            and Patch tables as necessary to maintain a valid installation package.</p>
            <p>The cabinet compression level used during re-cabbing can be configured with the
            <see cref="P:Microsoft.WindowsInstaller.InstallPackage.CompressionLevel"/> property.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.UpdateDirectories">
            <summary>
            Rebuilds the cached directory structure information accessed by the
            <see cref="P:Microsoft.WindowsInstaller.InstallPackage.Directories"/> and <see cref="P:Microsoft.WindowsInstaller.InstallPackage.Files"/> properties. This
            should be done after modifying the File, Component, or Directory
            tables, or else the cached information may no longer be accurate.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPackage.ApplyPatch(Microsoft.WindowsInstaller.PatchPackage,System.String)">
            <summary>
            Applies a patch package to the database, resulting in an installation package that
            has the patch built-in.
            </summary>
            <param name="patchPackage">The patch package to be applied</param>
            <param name="transform">Optional name of the specific transform to apply.
            This parameter is usually left null, which causes the patch to be searched for
            a transform that is valid to apply to this database.</param>
            <remarks>
            If the patch contains any binary file patches, they will not immediately be applied
            to the target files, though they will at installation time.
            <p>After calling this method you can use <see cref="M:Microsoft.WindowsInstaller.InstallPackage.Consolidate(System.String)"/> to apply
            the file patches immediately and also discard any outdated files from the package.</p>
            </remarks>
        </member>
        <member name="E:Microsoft.WindowsInstaller.InstallPackage.Message">
            <summary>
            Handle this event to receive status messages when operations are performed
            on the install package.
            </summary>
            <example>
            <c>installPackage.Message += new InstallPackageMessageHandler(Console.WriteLine);</c>
            </example>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPackage.SourceDirectory">
            <summary>
            Gets or sets the location to obtain source files and cabinets when
            extracting or updating files in the working directory. This is often
            the location of an original copy of the package that is not meant
            to be modified.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPackage.WorkingDirectory">
            <summary>
            Gets or sets the location where files will be extracted to/updated from. Also
            the location where a temporary folder is created during some operations.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPackage.Directories">
            <summary>
            Gets a mapping from Directory keys to source/target paths.
            </summary>
            <remarks>
            If the Directory table is modified, this mapping
            will be outdated until you call <see cref="M:Microsoft.WindowsInstaller.InstallPackage.UpdateDirectories"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPackage.Files">
            <summary>
            Gets a mapping from File keys to source/target paths.
            </summary>
            <remarks>
            If the File, Component, or Directory tables are modified, this mapping
            may be outdated until you call <see cref="M:Microsoft.WindowsInstaller.InstallPackage.UpdateDirectories"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPackage.CompressionLevel">
            <summary>
            Gets or sets the compression level used by <see cref="M:Microsoft.WindowsInstaller.InstallPackage.UpdateFiles"/>
            and <see cref="M:Microsoft.WindowsInstaller.InstallPackage.Consolidate(System.String)"/>.
            </summary>
            <remarks>
            If the Directory table is modified, this mapping will be outdated
            until you close and reopen the install package.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPackage.Property">
            <summary>
            Accessor for getting and setting properties of the InstallPackage database.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallPackageProperties">
            <summary>
            Accessor for getting and setting properties of the <see cref="T:Microsoft.WindowsInstaller.InstallPackage"/> database.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPackageProperties.Item(System.String)">
            <summary>
            Gets or sets a property in the database. When getting a property
            that does not exist in the database, an empty string is returned.
            Similarly, to remove a property from the database, set it to an empty string.
            </summary>
            <remarks>
            This has the same results as direct SQL queries on the Property table; it's only
            meant to be a more convenient way of access.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallPath">
            <summary>
            Represents the installation path of a file or directory from an installer product database.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPath.#ctor(System.String)">
            <summary>
            Creates a new InstallPath, specifying a filename.
            </summary>
            <param name="name">The name of the file or directory.  Not a full path.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPath.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new InstallPath, parsing out either the short or long filename.
            </summary>
            <param name="name">The name of the file or directory, in short|long syntax for a filename
            or targetshort|targetlong:sourceshort|sourcelong syntax for a directory.</param>
            <param name="useShortNames">true to parse the short part of the combined filename; false to parse the long part</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPath.ToString">
            <summary>
            Gets the full source path.
            </summary>
            <returns><see cref="P:Microsoft.WindowsInstaller.InstallPath.SourcePath"/></returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPath.ParentPath">
            <summary>
            Gets the path of the parent directory.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPath.ChildPaths">
            <summary>
            Gets the set of child paths if this InstallPath object represents a a directory.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPath.SourceName">
            <summary>
            Gets or sets the source name of the InstallPath.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPath.TargetName">
            <summary>
            Gets or sets the target name of the install path.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPath.SourcePath">
            <summary>
            Gets the full source path.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPath.TargetPath">
            <summary>
            Gets the full target path.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallPathCollection">
            <summary>
            Represents a collection of InstallPaths that are the child paths of the same parent directory.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.Add(Microsoft.WindowsInstaller.InstallPath)">
            <summary>
            Adds a new child path to the collection.
            </summary>
            <param name="childPath">The InstallPath to add.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.Remove(Microsoft.WindowsInstaller.InstallPath)">
            <summary>
            Removes a child path to the collection.
            </summary>
            <param name="childPath">The InstallPath to remove.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.IndexOf(Microsoft.WindowsInstaller.InstallPath)">
            <summary>
            Gets the index of a child path in the collection.
            </summary>
            <param name="childPath">The InstallPath to search for.</param>
            <returns>The index of the childPath, or -1 if not found.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.Insert(System.Int32,Microsoft.WindowsInstaller.InstallPath)">
            <summary>
            Inserts a child path into the collection.
            </summary>
            <param name="index">The insertion index.</param>
            <param name="childPath">The InstallPath to insert.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.Contains(Microsoft.WindowsInstaller.InstallPath)">
            <summary>
            Tests if the collection contains a child path.
            </summary>
            <param name="childPath">The InstallPath to search for.</param>
            <returns>true if the childPath is found; false otherwise</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.CopyTo(Microsoft.WindowsInstaller.InstallPath[],System.Int32)">
            <summary>
            Copies the collection into an array.
            </summary>
            <param name="array">The array to copy into.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Implements insertion.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Implements setting an element.
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Implements removing an element.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathCollection.OnClear">
            <summary>
            Implements clearing the list.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPathCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallPathMap">
            <summary>
            Represents a mapping of install paths for all directories, components, or files in
            an installation database.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.BuildFilePathMap(Microsoft.WindowsInstaller.Database,Microsoft.WindowsInstaller.InstallPathMap,System.Boolean)">
            <summary>
            Builds a mapping from File keys to installation paths.
            </summary>
            <param name="db">Installation database.</param>
            <param name="componentPathMap">Component mapping returned by <see cref="M:Microsoft.WindowsInstaller.InstallPathMap.BuildComponentPathMap(Microsoft.WindowsInstaller.Database,Microsoft.WindowsInstaller.InstallPathMap)"/>.</param>
            <param name="useShortNames">true to use short file names; false to use long names</param>
            <returns>An InstallPathMap with the described mapping.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.BuildComponentPathMap(Microsoft.WindowsInstaller.Database,Microsoft.WindowsInstaller.InstallPathMap)">
            <summary>
            Builds a mapping from Component keys to installation paths.
            </summary>
            <param name="db">Installation database.</param>
            <param name="directoryPathMap">Directory mapping returned by <see cref="M:Microsoft.WindowsInstaller.InstallPathMap.BuildDirectoryPathMap(Microsoft.WindowsInstaller.Database,System.Boolean)"/>.</param>
            <returns>An InstallPathMap with the described mapping.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.BuildDirectoryPathMap(Microsoft.WindowsInstaller.Database,System.Boolean)">
            <summary>
            Builds a mapping from Directory keys to installation paths.
            </summary>
            <param name="db">Installation database.</param>
            <param name="useShortNames">true to use short directory names; false to use long names</param>
            <returns>An InstallPathMap with the described mapping.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.BuildDirectoryPathMap(Microsoft.WindowsInstaller.Database,System.Boolean,System.String,System.String)">
            <summary>
            Builds a mapping of Directory keys to directory paths, specifying root directories
            for the source and target paths.
            </summary>
            <param name="db">Database containing the Directory table.</param>
            <param name="useShortNames">true to use short directory names; false to use long names</param>
            <param name="sourceRootDir">The root directory path of all source paths, or null to leave them relative.</param>
            <param name="targetRootDir">The root directory path of all source paths, or null to leave them relative.</param>
            <returns>An InstallPathMap with the described mapping.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.#ctor">
            <summary>
            Creates a new empty InstallPathMap.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.Add(System.String,Microsoft.WindowsInstaller.InstallPath)">
            <summary>
            Sets an install path for a direcotry, component, or file key.
            </summary>
            <param name="key">Depending on the type of InstallPathMap, this is the primary key from the
            either the Directory, Component, or File table.</param>
            <param name="installPath">The install path of the key item.</param>
            <remarks>
            Changing an install path does not modify the Database used to generate this InstallPathMap.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.Remove(System.String)">
            <summary>
            Removes an install path from the map.
            </summary>
            <param name="key">Depending on the type of InstallPathMap, this is the primary key from the
            either the Directory, Component, or File table.</param>
            <remarks>
            Changing an install path does not modify the Database used to generate this InstallPathMap.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.Contains(System.String)">
            <summary>
            Tests whether a direcotry, component, or file key exists in the map.
            </summary>
            <param name="key">Depending on the type of InstallPathMap, this is the primary key from the
            either the Directory, Component, or File table.</param>
            <returns>true if the key is found; false otherwise</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.CopyTo(Microsoft.WindowsInstaller.InstallPath[],System.Int32)">
            <summary>
            Copies the entire InsatllPathMap to an array.
            </summary>
            <param name="array">The destination array for the copy.</param>
            <param name="index">Starting index in the destination array.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallPathMap.OnValidate(System.Object,System.Object)">
            <summary>
            Restricts the type of items that can be inserted into the InstallPathMap.
            </summary>
            <param name="key">Must be a string</param>
            <param name="value">Must be an InstallPath</param>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPathMap.Item(System.String)">
            <summary>
            Gets or sets an install path for a direcotry, component, or file key.
            </summary>
            <param name="key">Depending on the type of InstallPathMap, this is the primary key from the
            either the Directory, Component, or File table.</param>
            <remarks>
            Changing an install path does not modify the Database used to generate this InstallPathMap.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPathMap.Keys">
            <summary>
            Gets the collection of keys in the InstallPathMap. Depending on the type of InstallPathMap,
            they are all directory, component, or file key strings.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallPathMap.Values">
            <summary>
            Gets the collection of InstallPath values in the InstallPathMap.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.PatchPackage">
            <summary>
            Provides access to convenient properties and operations on a patch package (.MSP).
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.#ctor(System.String)">
            <summary>
            Creates a new patch package object; opening the patch database in read-only mode.
            </summary>
            <param name="packagePath">Path to the patch package (.MSP)</param>
            <remarks>The PatchPackage object only opens the patch database in read-only mode, because
            transforms (sub-storages) cannot be read if the database is open in read-write mode.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.LogMessage(System.String,System.Object[])">
            <summary>
            Sends a message to the <see cref="E:Microsoft.WindowsInstaller.PatchPackage.Message"/> event-handler.
            </summary>
            <param name="format">Message string, containing 0 or more format items</param>
            <param name="args">Items to be formatted</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetReplacedPatchCodes">
            <summary>
            Gets the list of patch codes that are replaced by this patch package.
            </summary>
            <returns>Array of replaced patch codes (GUIDs)</returns>
            <remarks>
            The list of replaced patch codes is stored in the RevisionNumber field of the patch summary information.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetTargetProductCodes">
            <summary>
            Gets the list of product codes of products targeted by this patch package.
            </summary>
            <returns>Array of product codes (GUIDs)</returns>
            <remarks>
            The list of target product codes is stored in the Template field of the patch summary information.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetTransforms">
            <summary>
            Gets the names of the transforms included in the patch package.
            </summary>
            <returns>Array of transform names</returns>
            <remarks>
            The returned list does not include the &quot;patch special transforms&quot; that are prefixed with &quot;#&quot;
            <p>The list of transform names is stored in the LastSavedBy field of the patch summary information.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetTransforms(System.Boolean)">
            <summary>
            Gets the names of the transforms included in the patch package.
            </summary>
            <param name="includeSpecialTransforms">Specifies whether to include the
            &quot;patch special transforms&quot; that are prefixed with &quot;#&quot;</param>
            <returns>Array of transform names</returns>
            <remarks>
            The list of transform names is stored in the LastSavedBy field of the patch summary information.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetTransformsInfo">
            <summary>
            Gets information about the transforms included in the patch package.
            </summary>
            <returns>Array containing information about each transform</returns>
            <remarks>
            The returned info does not include the &quot;patch special transforms&quot; that are prefixed with &quot;#&quot;
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetTransformsInfo(System.Boolean)">
            <summary>
            Gets information about the transforms included in the patch package.
            </summary>
            <param name="includeSpecialTransforms">Specifies whether to include the
            &quot;patch special transforms&quot; that are prefixed with &quot;#&quot;</param>
            <returns>Array containing information about each transform</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetTransformInfo(System.String)">
            <summary>
            Gets information about a transforms included in the patch package.
            </summary>
            <param name="transform">Name of the transform to extract; this may optionally be a
            special transform prefixed by &quot;#&quot;</param>
            <returns>Information about the transform</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.GetValidTransforms(Microsoft.WindowsInstaller.InstallPackage)">
            <summary>
            Analyzes the transforms included in the patch package to find the ones that
            are applicable to an install package.
            </summary>
            <param name="installPackage">The install package to validate the transforms against</param>
            <returns>Array of valid transform names</returns>
            <remarks>
            The returned list does not include the &quot;patch special transforms&quot; that
            are prefixed with &quot;#&quot; If a transform is valid, then its corresponding
            special transform is assumed to be valid as well.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.PatchPackage.ExtractTransform(System.String,System.String)">
            <summary>
            Extracts a transform (.MST) from a patch package.
            </summary>
            <param name="transform">Name of the transform to extract; this may optionally be a
            special transform prefixed by &quot;#&quot;</param>
            <param name="extractFile">Location where the transform will be extracted</param>
        </member>
        <member name="E:Microsoft.WindowsInstaller.PatchPackage.Message">
            <summary>
            Handle this event to receive status messages when operations are performed on the patch package.
            </summary>
            <example>
            <c>patchPackage.Message += new InstallPackageMessageHandler(Console.WriteLine);</c>
            </example>
        </member>
        <member name="P:Microsoft.WindowsInstaller.PatchPackage.PatchCode">
            <summary>
            Gets the patch code (GUID) of the patch package.
            </summary>
            <remarks>
            The patch code is stored in the RevisionNumber field of the patch summary information.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.TransformInfo">
            <summary>
            Contains properties of a transform package (.MST).
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.TransformInfo.#ctor(System.String)">
            <summary>
            Reads transform information from a transform package.
            </summary>
            <param name="mstFile">Path to a transform package (.MST file).</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.TransformInfo.#ctor(System.String,Microsoft.WindowsInstaller.SummaryInfo)">
            <summary>
            Reads transform information from the summary information of a transform package.
            </summary>
            <param name="name">Filename of the transform (optional).</param>
            <param name="transformSummaryInfo">Handle to the summary information of a transform package (.MST file).</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.TransformInfo.ToString">
            <summary>
            Returns the name of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.Name">
            <summary>
            Gets the filename of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.TargetProductCode">
            <summary>
            Gets the target product code of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.TargetProductVersion">
            <summary>
            Gets the target product version of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.UpgradeProductCode">
            <summary>
            Gets the upgrade product code of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.UpgradeProductVersion">
            <summary>
            Gets the upgrade product version of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.UpgradeCode">
            <summary>
            Gets the upgrade code of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.TargetPlatform">
            <summary>
            Gets the target platform of the transform.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.TargetLanguage">
            <summary>
            Gets the target language of the transform, or 0 if the transform is language-neutral.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TransformInfo.ValidateFlags">
            <summary>
            Gets the validation flags specified when the transform was generated.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\BinScope\2.10\Microsoft.WindowsInstaller.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.WindowsInstaller</name>
    </assembly>
    <members>
        <member name="T:Microsoft.WindowsInstaller.ColumnInfo">
            <summary>
            Defines a single column of a table in an installer database.
            </summary>
            <remarks>Once created, a ColumnInfo object is immutable.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.ColumnInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new column definition.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="colDef"><see cref="P:Microsoft.WindowsInstaller.ColumnInfo.ColumnDefinitionString"/></param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.ColumnInfo.ToString">
            <summary>
            Gets the name of the column.
            </summary>
            <returns>Name of the column.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.Type">
            <summary>
            Gets the type of the column as a System.Type.  This is one of the following: Int16, Int32, String, or Stream
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.DbType">
            <summary>
            Gets the type of the column as a System.Data.DbType.  This is one of the following: Int16, Int32, String, or Binary
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.Size">
            <summary>
            Gets the size of the column.  For integer columns this is either 2 or 4.  For string columns this is the maximum
            recommended length of the string, or 0 for unlimited string length.  For stream columns, 0 is returned.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.IsRequired">
            <summary>
            Gets a value indicating whether the column must be non-null when inserting a record.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.IsTemporary">
            <summary>
            Gets a value indicating whether the column is temporary. Temporary columns are not persisted
            when the database is saved to disk.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.IsLocalizable">
            <summary>
            Gets a value indicating whether the column is a string column that is localizable.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.SqlCreateString">
            <summary>
            Gets an SQL fragment that can be used to create this column within a CREATE TABLE statement.
            </summary>
            <remarks>
            Examples:
            <list type="bullet">
            <item>LONG</item>
            <item>SHORT TEMPORARY</item>
            <item>CHAR(0) LOCALIZABLE</item>
            <item>CHAR(72) NOT NULL LOCALIZABLE</item>
            <item>OBJECT</item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ColumnInfo.ColumnDefinitionString">
            <summary>
            Gets a short string defining the type and size of the column. The definition string consists
            of a single letter representing the data type followed by the width of the column (in characters
            when applicable, bytes otherwise). A width of zero designates an unbounded width (for example,
            long text fields and streams). An uppercase letter indicates that null values are allowed in
            the column.
            </summary>
            <remarks>
            <list>
            <item>s? - String, variable length (?=1-255)</item>
            <item>s0 - String, variable length</item>
            <item>i2 - Short integer</item>
            <item>i4 - Long integer</item>
            <item>v0 - Binary Stream</item>
            <item>g? - Temporary string (?=0-255)</item>
            <item>j? - Temporary integer (?=0,1,2,4)</item>
            <item>l? - Localizable string, variable length (?=1-255)</item>
            <item>l0 - Localizable string, variable length</item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Database">
            <summary>
            Accesses a Windows Installer database.
            </summary>
            <remarks>
            The <see cref="M:Microsoft.WindowsInstaller.Database.Commit"/> method must be called before the Database is closed to write out all
            persistent changes. If the Commit method is not called, the installer performs an implicit
            rollback upon object destruction.
            <para>The client can use the following procedure for data access:<list type="number">
            <item><description>Obtain a Database object by calling the
            	<see cref="M:Microsoft.WindowsInstaller.Installer.OpenDatabase(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode)"/> method.</description></item> 
            <item><description>Initiate a query using a SQL string by calling the <see cref="M:Microsoft.WindowsInstaller.Database.OpenView(System.String,System.Object[])"/>
            	method of the Database.</description></item> 
            <item><description>Set query parameters in a <see cref="T:Microsoft.WindowsInstaller.Record"/> and execute the database
            	query by calling the <see cref="M:Microsoft.WindowsInstaller.View.Execute(Microsoft.WindowsInstaller.Record)"/> method of the <see cref="T:Microsoft.WindowsInstaller.View"/>. This
            	produces a result that can be fetched or updated.</description></item> 
            <item><description>Call the <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/> method of the View repeatedly to return
            	Records.</description></item> 
            <item><description>Update database rows of a Record object obtained by the Fetch method using
            	one of the <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> methods of the View.</description></item> 
            <item><description>Release the query and any unfetched records by calling the <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>
            	method of the View.</description></item> 
            <item><description>Persist any database updates by calling the Commit method of the Database.
            	</description></item> 
            </list></para>
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallerHandle">
            <summary>
            Base class for Windows Installer handle types (Database, View, Record, SummaryInfo).
            </summary>
            <remarks>
            These classes implement the <see cref="T:System.IDisposable"/> interface, because they
            hold unmanaged resources (MSI handles) that should be properly disposed
            when no longer needed.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerHandle.Dispose">
            <summary>
            Closes the handle.  After closing a handle, further method calls may throw an <see cref="T:Microsoft.WindowsInstaller.InvalidHandleException"/>.
            </summary>
            <remarks>
            The finalizer of this class will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no longer needed,
            as leaving lots of unused handles open can degrade performance.
            </remarks>
            <seealso cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerHandle.Dispose(System.Boolean)">
            <summary>
            Closes the handle.  After closing a handle, further method calls may throw an <see cref="T:Microsoft.WindowsInstaller.InvalidHandleException"/>.
            </summary>
            <param name="disposing">If true, the method has been called directly or indirectly by a user's code,
            so managed and unmanaged resources will be disposed. If false, the method has been called by the 
            runtime from inside the finalizer, and only unmanaged resources will be disposed.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerHandle.Close">
            <summary>
            Closes the handle.  After closing a handle, further method calls may throw an <see cref="T:Microsoft.WindowsInstaller.InvalidHandleException"/>.
            </summary>
            <remarks>
            The finalizer of this class will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no longer needed,
            as leaving lots of unused handles open can degrade performance.
            <para>This method is merely an alias for the <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Dispose"/> method.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerHandle.Finalize">
            <summary>
            Finalizer for handle objects.  Closes the native handle if not already closed.
            </summary>
            <remarks>
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no longer needed,
            as leaving lots of unused handles open can degrade performance.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerHandle.Equals(System.Object)">
            <summary>
            Tests whether this handle object is equal to another handle object.  Two handle objects are equal
            if their types are the same and their native integer handles are the same.
            </summary>
            <param name="obj">The handle object to compare with the current handle object.</param>
            <returns>true if the specified handle object is equal to the current handle object; otherwise false</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerHandle.GetHashCode">
            <summary>
            Gets a hash value for the handle object.
            </summary>
            <returns>A hash code for the handle object.</returns>
            <remarks>The hash code is derived from the native integer handle.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerHandle.#ctor(System.IntPtr)">
            <summary>
            Constructs a handle object from a native integer handle.
            </summary>
            <param name="handle">Native integer handle.</param>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallerHandle.Handle">
            <summary>
            Gets the native integer handle.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.#ctor(System.IntPtr)">
            <summary>
            Creates a new Database object from an integer database handle.
            </summary>
            <remarks>
            This constructor is only provided for interop purposes.  A Database object
            should normally be obtained by calling <see cref="M:Microsoft.WindowsInstaller.Installer.OpenDatabase(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode)"/>
            or <see cref="P:Microsoft.WindowsInstaller.Session.Database"/>.
            </remarks>
            <param name="handle">Integer database handle</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.#ctor(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode)">
            <summary>
            Opens an existing database or creates a new one.
            </summary>
            <param name="filePath">Path to the database file. If an empty string
            is supplied, a temporary database is created that is not persisted.</param>
            <param name="mode">Open mode for the database</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the database could not be created/opened</exception>
            <remarks>
            To make and save changes to a database first open the database in transaction,
            create or, or direct mode. After making the changes, always call the Commit method
            before closing the database handle. The Commit method flushes all buffers.
            <para>Always call the Commit method on a database that has been opened in direct
            mode before closing the database. Failure to do this may corrupt the database.</para>
            <para>Because this constructor initiates database access, it cannot be used with a
            running installation.</para>
            <para>The Database object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Dispose(System.Boolean)">
            <summary>
            Closes the database handle.  After closing a handle, further method calls may throw <see cref="T:Microsoft.WindowsInstaller.InvalidHandleException"/>.
            </summary>
            <param name="disposing">If true, the method has been called directly or indirectly by a user's code,
            so managed and unmanaged resources will be disposed. If false, the method has been called by the 
            runtime from inside the finalizer, and only unmanaged resources will be disposed.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.DeleteOnClose(System.String)">
            <summary>
            Schedules a file or directory for deletion after the database handle is closed.
            </summary>
            <param name="path">File or directory path to be deleted. All files and subdirectories
            under a directory are deleted.</param>
            <remarks>
            Once an item is scheduled, it cannot be unscheduled.
            <p>The items cannot be deleted if the Database object is auto-disposed by the
            garbage collector; the handle must be explicitly closed.</p>
            <p>Files which are read-only or otherwise locked at the time of closure will not
            be deleted.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.OpenView(System.String,System.Object[])">
            <summary>
            Gets a View object representing the query specified by a SQL string.
            </summary>
            <param name="sqlFormat">SQL query string, which may contain format items</param>
            <param name="args">Zero or more objects to format</param>
            <returns>A View object representing the query specified by a SQL string</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            The <paramref name="sqlFormat"/> parameter is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>.
            <para>The returned View object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.OpenView(System.String)">
            <summary>
            Gets a View object representing the query specified by a SQL string.
            </summary>
            <param name="sql">SQL query string</param>
            <returns>A View object representing the query specified by a SQL string</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Execute(System.String,System.Object[])">
            <summary>
            Executes the query specified by a SQL string.  The query may not be a SELECT statement.
            </summary>
            <param name="sqlFormat">SQL query string, which may contain format items</param>
            <param name="args">Zero or more objects to format</param>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>The <paramref name="sqlFormat"/> parameter is formatted using
            <see cref="M:System.String.Format(System.String,System.Object)"/>.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Execute(System.String,Microsoft.WindowsInstaller.Record)">
            <summary>
            Executes the query specified by a SQL string.  The query may not be a SELECT statement.
            </summary>
            <param name="sql">SQL query string</param>
            <param name="record">Optional Record object containing the values that replace
            the parameter tokens (?) in the SQL query.</param>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the specified SQL SELECT query and returns the first value from the results.
            </summary>
            <param name="sqlFormat">SQL query string, which may contain format items</param>
            <param name="args">Zero or more objects to format</param>
            <returns>The first value from the results</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>The <paramref name="sqlFormat"/> parameter is formatted using
            <see cref="M:System.String.Format(System.String,System.Object)"/>.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ExecuteScalar(System.String,Microsoft.WindowsInstaller.Record)">
            <summary>
            Executes the specified SQL SELECT query and returns the first value from the results.
            </summary>
            <param name="sql">SQL SELECT query string</param>
            <param name="record">Optional Record object containing the values that replace
            the parameter tokens (?) in the SQL query.</param>
            <returns>The first value from the results</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ExecuteVector(System.String,System.Object[])">
            <summary>
            Executes the specified SQL SELECT query and returns all results in an array.
            </summary>
            <param name="sqlFormat">SQL query string, which may contain format items</param>
            <param name="args">Zero or more objects to format</param>
            <returns>All results combined into an array</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            If the selected columns all have the same data type, then the returned array will
            have that type as its base type.  Otherwise the base type of the array will be Object.
            <p>The <paramref name="sqlFormat"/> parameter is formatted using
            <see cref="M:System.String.Format(System.String,System.Object)"/>.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ExecuteVector(System.String,Microsoft.WindowsInstaller.Record)">
            <summary>
            Executes the specified SQL SELECT query and returns all results in an array.
            </summary>
            <param name="sql">SQL SELECT query string</param>
            <param name="record">Optional Record object containing the values that replace
            the parameter tokens (?) in the SQL query.</param>
            <returns>All results combined into an array</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            If the selected columns all have the same data type, then the returned array will
            have that type as its base type.  Otherwise the base type of the array will be Object.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Merge(Microsoft.WindowsInstaller.Database,System.String)">
            <summary>
            Merges another database with this database.
            </summary>
            <param name="otherDatabase">The database to be merged into this database</param>
            <param name="errorTable">Optional name of table to contain the names of the tables containing
            merge conflicts, the number of conflicting rows within the table, and a reference to the table
            with the merge conflict.</param>
            <exception cref="T:Microsoft.WindowsInstaller.MergeException">merge failed due to a schema difference or data conflict</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            Merge does not copy over embedded cabinet files or embedded transforms from the
            reference database into the target database. Embedded data streams that are listed in the
            Binary table or Icon table are copied from the reference database to the target database.
            Storage embedded in the reference database are not copied to the target database.
            <para>The Merge method merges the data of two databases. These databases must have the same
            codepage. The merge fails if any tables or rows in the databases conflict. A conflict exists
            if the data in any row in the first database differs from the data in the corresponding row
            of the second database. Corresponding rows are in the same table of both databases and have
            the same primary key in both databases. The tables of non-conflicting databases must have
            the same number of primary keys, same number of columns, same column types, same column names,
            and the same data in rows with identical primary keys. Temporary columns however don't matter
            in the column count and corresponding tables can have a different number of temporary columns
            without creating conflict as long as the persistent columns match.</para>
            <para>If the number, type, or name of columns in corresponding tables are different, the
            schema of the two databases are incompatible and the installer will stop processing tables
            and the merge fails. The installer checks that the two databases have the same schema before
            checking for row merge conflicts. If the schemas are incompatible, the databases have be
            modified.</para>
            <para>If the data in particular rows differ, this is a row merge conflict, the merge fails
            and creates a new table with the specified name. The first column of this table is the name
            of the table having the conflict. The second column gives the number of rows in the table
            having the conflict.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Merge(Microsoft.WindowsInstaller.Database)">
            <summary>
            Merges another database with this database.
            </summary>
            <param name="otherDatabase">The database to be merged into this database</param>
            <exception cref="T:Microsoft.WindowsInstaller.MergeException">merge failed due to a schema difference or data conflict</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            MsiDatabaseMerge does not copy over embedded cabinet files or embedded transforms from
            the reference database into the target database. Embedded data streams that are listed in
            the Binary table or Icon table are copied from the reference database to the target database.
            Storage embedded in the reference database are not copied to the target database.
            <para>The Merge method merges the data of two databases. These databases must have the same
            codepage. The merge fails if any tables or rows in the databases conflict. A conflict exists
            if the data in any row in the first database differs from the data in the corresponding row
            of the second database. Corresponding rows are in the same table of both databases and have
            the same primary key in both databases. The tables of non-conflicting databases must have
            the same number of primary keys, same number of columns, same column types, same column names,
            and the same data in rows with identical primary keys. Temporary columns however don't matter
            in the column count and corresponding tables can have a different number of temporary columns
            without creating conflict as long as the persistent columns match.</para>
            <para>If the number, type, or name of columns in corresponding tables are different, the
            schema of the two databases are incompatible and the installer will stop processing tables
            and the merge fails. The installer checks that the two databases have the same schema before
            checking for row merge conflicts. If the schemas are incompatible, the databases have be
            modified.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.TableExists(System.String)">
            <summary>
            Checks whether a table exists in the database.
            </summary>
            <param name="table">The table to the checked</param>
            <returns>true if the take exists in the database (even if the table is not persistent); false otherwise</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.TablePersistent(System.String)">
            <summary>
            Checks whether a table exists and is persistent in the database.
            </summary>
            <param name="table">The table to the checked</param>
            <returns>true if the table exists and is persistent in the database; false otherwise</returns>
            <exception cref="T:System.ArgumentException">the table is unknown</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.RowExists(System.String,System.String)">
            <summary>
            Checks whether a table contains a row that matches a specified condition.
            </summary>
            <param name="table">The table to the checked</param>
            <param name="where">Conditional expression, such as could be placed on the end of a SQL WHERE clause</param>
            <returns>true if one or more rows exists in the table that satisfy the condition; false otherwise</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL WHERE syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ColumnExists(System.String,System.String)">
            <summary>
            Checks whether a table contains a column with a given name.
            </summary>
            <param name="table">The table to the checked</param>
            <param name="column">The name of the column to be checked</param>
            <returns>true if the column exists in the table; false otherwise</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.PrimaryKeys(System.String)">
            <summary>
            Gets the names of the columns that are primary keys of a table.
            </summary>
            <param name="table">Name of the table to be queried</param>
            <returns>Names of the columns that are primary keys of the table</returns>
            <exception cref="T:System.ArgumentException">the table is unknown</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.CountRows(System.String)">
            <summary>
            Gets the count of all rows in the table.
            </summary>
            <param name="table">Name of the table whose rows are to be counted</param>
            <returns>The count of all rows in the table</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.CountRows(System.String,System.String)">
            <summary>
            Gets the count of all rows in the table that satisfy a given condition.
            </summary>
            <param name="table">Name of the table whose rows are to be counted</param>
            <param name="where">Conditional expression, such as could be placed on the end of a SQL WHERE clause</param>
            <returns>The count of all rows in the table satisfying the condition</returns>
            <exception cref="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">the SQL WHERE syntax is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.TableInformation(System.String)">
            <summary>
            Gets information about the columns in a table.
            </summary>
            <param name="table">Name of the table to be queried</param>
            <returns>A structure containing information about the columns in the table</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.SummaryInformation(System.Int32)">
            <summary>
            Gets a SummaryInfo object that can be used to examine, update, and add properties
            to the summary information stream.
            </summary>
            <param name="maxProperties">The maximum number of properties to be added or modified. This
            parameter is required and used to allocate sufficient working memory during the stream
            generation. It is not required to store this number of properties. A value of zero must be
            used if the database is opened read-only to prevent the stream from being updated.</param>
            <returns>A SummaryInfo object that can be used to examine, update, and add properties
            to the summary information stream</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            If a value of maxProperties greater than 0 is used to open an existing summary information
            stream, the <see cref="M:Microsoft.WindowsInstaller.SummaryInfo.Persist"/> method must be called before closing the object.
            Failing to do this will lose the existing stream information.
            <para>The returned SummaryInfo object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Commit">
            <summary>
            Finalizes the persistent form of the database. All persistent data is written
            to the writeable database, and no temporary columns or rows are written.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            This method has no effect on a database opened as read-only. This method can be called multiple
            times to save the current state of tables loaded into memory. When the database is finally closed,
            any changes made subsequent to the last Commit are rolled back. This method is normally called
            prior to shutdown when all database changes have been finalized.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Export(System.String,System.String)">
            <summary>
            Copies the structure and data from a specified table to a text archive file.
            </summary>
            <param name="table">Name of the table to be exported</param>
            <param name="filePath">Path to the file to be created</param>
            <exception cref="T:System.IO.FileNotFoundException">the file path is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.Import(System.String)">
            <summary>
            Imports a database table from a text archive file, dropping any existing table.
            </summary>
            <param name="filePath">Path to the file to be imported. 
            The table name is specified within the file.</param>
            <exception cref="T:System.IO.FileNotFoundException">the file path is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ExportAll(System.String)">
            <summary>
            Exports all database tables, streams, and summary information to archive files.
            </summary>
            <param name="directoryPath">Path to the directory where archive files will be created</param>
            <exception cref="T:System.IO.FileNotFoundException">the directory path is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ImportAll(System.String)">
            <summary>
            Imports all database tables, streams, and summary information from archive files.
            </summary>
            <param name="directoryPath">Path to the directory from which archive files will be imported</param>
            <exception cref="T:System.IO.FileNotFoundException">the directory path is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.GenerateTransform(Microsoft.WindowsInstaller.Database,System.String)">
            <summary>
            Creates a transform that, when applied to the object database, results in the reference database.
            </summary>
            <param name="referenceDatabase">Database that does not include the changes</param>
            <param name="transformFile">Name of the generated transform file, or null to only
            check whether or not the two database are identical</param>
            <returns>true if a transform is generated, or false if a transform is not generated
            because there are no differences between the two databases.</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the transform could not be generated</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">a Database handle is invalid</exception>
            <remarks>
            A transform can add non-primary key columns to the end of a table. A transform cannot
            be created that adds primary key columns to a table. A transform cannot be created that
            changes the order, names, or definitions of columns.
            <para>If the transform is to be applied during an installation you must use the
            <see cref="M:Microsoft.WindowsInstaller.Database.CreateTransformSummaryInfo(Microsoft.WindowsInstaller.Database,System.String,Microsoft.WindowsInstaller.TransformErrors,Microsoft.WindowsInstaller.TransformValidateFlags)"/> method to populate the
            summary information stream.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.CreateTransformSummaryInfo(Microsoft.WindowsInstaller.Database,System.String,Microsoft.WindowsInstaller.TransformErrors,Microsoft.WindowsInstaller.TransformValidateFlags)">
            <summary>
            Creates and populates the summary information stream of an existing transform file, and
            fills in the properties with the base and reference ProductCode and ProductVersion.
            </summary>
            <param name="referenceDatabase">Database that does not include the changes</param>
            <param name="transformFile">Name of the generated transform file</param>
            <param name="errorConditions">Error conditions that should be suppressed
            when the transform is applied</param>
            <param name="validationConditions">Defines which properties should be validated
            to verify that this transform can be applied to a database.</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the transform summary info could not be
            generated</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">a Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ViewTransform(System.String)">
            <summary>
            Apply a transform to the database, recording the changes in the "_TransformView" table.
            </summary>
            <param name="transformFile">Path to the transform file</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the transform could not be applied</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ApplyTransform(System.String)">
            <summary>
            Apply a transform to the database, suppressing any error conditions
            specified by the transform's summary information.
            </summary>
            <param name="transformFile">Path to the transform file</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the transform could not be applied</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ApplyTransform(System.String,Microsoft.WindowsInstaller.TransformErrors)">
            <summary>
            Apply a transform to the database, specifying error conditions to suppress.
            </summary>
            <param name="transformFile">Path to the transform file</param>
            <param name="errorConditionsToSuppress">Error conditions that are to be suppressed</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the transform could not be applied</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.IsTransformValid(System.String)">
            <summary>
            Checks whether a transform is valid for this Database, according to its validation data and flags.
            </summary>
            <param name="transformFile">Path to the transform file</param>
            <returns>true if the transform can be validly applied to this Database; false otherwise</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the transform could not be applied</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.IsTransformValid(Microsoft.WindowsInstaller.SummaryInfo)">
            <summary>
            Checks whether a transform is valid for this Database, according to its SummaryInfo data.
            </summary>
            <param name="transformSummaryInfo">SummaryInfo data of a transform file</param>
            <returns>true if the transform can be validly applied to this Database; false otherwise</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">error processing summary info</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database or SummaryInfo handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Database.ToString">
            <summary>
            Returns the file path of this database, or the handle value if a file path was not specified.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Database.IsWritable">
            <summary>
            Gets a value indicating whether the database can accept persistent changes.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Database.CodePage">
            <summary>
            Gets or sets the code page of the Database.
            </summary>
            <exception cref="T:System.IO.IOException">error exporting/importing the codepage data</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Database handle is invalid</exception>
            <remarks>
            Getting or setting the code page is a slow operation because it involves an export or import
            of the codepage data to/from a temporary file.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Database.FilePath">
            <summary>
            Gets the file path the Database was originally opened from, or null if not known.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Database.OpenMode">
            <summary>
            Gets the open mode for the database.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallUILevel">
            <summary>
            Level of the installation user interface, specified with <see cref="M:Microsoft.WindowsInstaller.Installer.SetInternalUI(Microsoft.WindowsInstaller.InstallUILevel,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.NoChange">
            <summary>Does not change UI level.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.Default">
            <summary>Uses Default UI level.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.None">
            <summary>Silent installation.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.Basic">
            <summary>Simple progress and error handling.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.Reduced">
            <summary>Authored UI, wizard dialogs suppressed.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.Full">
            <summary>Authored UI with wizards, progress, and errors.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.EndDialog">
            <summary>
            If combined with any above value, the installer displays a modal dialog box at the end of a
            successful installation or if there has been an error. No dialog box is displayed if the user cancels.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallUILevel.ProgressOnly">
            <summary>
            If combined with the <see cref="F:Microsoft.WindowsInstaller.InstallUILevel.Basic"/> value, the installer displays progress dialog boxes but
            does not display any modal dialog boxes or error dialog boxes.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallMessage">
            <summary>
            Type of message to be processed by <see cref="M:Microsoft.WindowsInstaller.Session.Message(Microsoft.WindowsInstaller.InstallMessage,Microsoft.WindowsInstaller.Record)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.FatalExit">
            <summary>Premature termination, possibly fatal OOM.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.Error">
            <summary>Formatted error message.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.Warning">
            <summary>Formatted warning message.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.User">
            <summary>User request message.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.Info">
            <summary>Informative message for log.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.FilesInUse">
            <summary>List of files in use that need to be replaced.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.ResolveSource">
            <summary>Request to determine a valid source location.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.OutOfDiskSpace">
            <summary>Insufficient disk space message.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.ActionStart">
            <summary>Start of action: action name &amp; description.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.ActionData">
            <summary>Formatted data associated with individual action item.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.Progress">
            <summary>Progress gauge info: units so far, total.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.CommonData">
            <summary>Product info for dialog: language Id, dialog caption.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.Initialize">
            <summary>Sent prior to UI initialization, no string data.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.Terminate">
            <summary>Sent after UI termination, no string data.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMessage.ShowDialog">
            <summary>Sent prior to display or authored dialog or wizard.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallLogModes">
            <summary>
            Log modes available for <see cref="M:Microsoft.WindowsInstaller.Installer.EnableLog(Microsoft.WindowsInstaller.InstallLogModes,System.String)"/> and <see cref="M:Microsoft.WindowsInstaller.Installer.SetExternalUI(Microsoft.WindowsInstaller.ExternalUIHandler,Microsoft.WindowsInstaller.InstallLogModes,System.Object)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.None">
            <summary>Disable logging.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.FatalExit">
            <summary>Log out of memory or fatal exit information.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.Error">
            <summary>Log error messages.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.Warning">
            <summary>Log warning messages.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.User">
            <summary>Log user requests.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.Info">
            <summary>Log status messages that are not displayed.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.ResolveSource">
            <summary>Log request to determine a valid source location.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.OutOfDiskSpace">
            <summary>Log insufficient disk space error.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.ActionStart">
            <summary>Log the start of installation actions.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.ActionData">
            <summary>Log the data record for installation actions.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.CommonData">
            <summary>Log parameters for user-interface initialization.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.PropertyDump">
            <summary>Log the property values at termination.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.Verbose">
            <summary>
            Sends large amounts of information to log file not generally useful to users.
            May be used for support.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.Progress">
            <summary>
            Log progress bar information. This message includes information on units so far and total number
            of units. See <see cref="M:Microsoft.WindowsInstaller.Session.Message(Microsoft.WindowsInstaller.InstallMessage,Microsoft.WindowsInstaller.Record)"/> for an explanation of the message format. This message
            is only sent to an external user interface and is not logged.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.Initialize">
            <summary>
            If this is not a quiet installation, then the basic UI has been initialized. If this is a full
            UI installation, the Full UI is not yet initialized. This message is only sent to an external
            user interface and is not logged.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.Terminate">
            <summary>
            If a full UI is being used, the full UI has ended. If this is not a quiet installation, the basic
            UI has not yet ended. This message is only sent to an external user interface and is not logged.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallLogModes.ShowDialog">
            <summary>
            Sent prior to display of the Full UI dialog. This message is only sent to an external user
            interface and is not logged.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallProperty">
            <summary>
            InstallProperties available for <see cref="M:Microsoft.WindowsInstaller.Installer.ProductInfo(System.String,Microsoft.WindowsInstaller.InstallProperty)"/> and <see cref="M:Microsoft.WindowsInstaller.Installer.PatchInfo(System.String,Microsoft.WindowsInstaller.InstallProperty)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallProperty.#ctor(System.String)">
            <summary>
            Creates a new InstallProperty from a string property name.  Ordinarily you should use one
            of the predefined property values instead of creating a new property objet.
            </summary>
            <param name="propertyName">one of the predefined installer property names</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallProperty.Equals(System.Object)">
            <summary>
            Checks whether this install property is equal to another object.
            </summary>
            <param name="obj">Other install property object.</param>
            <returns>true if the other install property is the same property; false otherwise</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallProperty.GetHashCode">
            <summary>
            Gets a hash code for the install property.
            </summary>
            <returns>A hash code based on the name of the property.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallProperty.ToString">
            <summary>
            Gets a string representation of the install property.
            </summary>
            <returns>The name of the install property.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.ProductCode">
            <summary>Product code. Only used by <see cref="M:Microsoft.WindowsInstaller.Installer.GetProductInfoFromScript(System.String,Microsoft.WindowsInstaller.InstallProperty)"/>.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.PackageName">
            <summary>Name of the original installation package.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.Transforms">
            <summary>Transforms.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.Language">
            <summary>Product language.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.ProductName">
            <summary>Human readable product name.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.AssignmentType">
            <summary>Equals 0 if product is advertised or installed per-user. Equals 1 if product is
            advertised or installed per-machine for all users.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.PackageCode">
            <summary>Identifier of the package this product was installed from.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.Version">
            <summary>Product version derived from ProductVersion property.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.ProductIcon">
            <summary>Primary Icon for the package.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.InstalledProductName">
            <summary>Installed product name.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.VersionString">
            <summary>Product version.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.HelpLink">
            <summary>Support link.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.HelpTelephone">
            <summary>Support telephone.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.InstallLocation">
            <summary>Installation location.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.InstallSource">
            <summary>Installation source.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.InstallDate">
            <summary>Installation date.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.Publisher">
            <summary>Publisher.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.LocalPackage">
            <summary>Local cached package.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.UrlInfoAbout">
            <summary>URL information.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.UrlUpdateInfo">
            <summary>URL update information.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.VersionMinor">
            <summary>Minor product version derived from ProductVersion property.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.VersionMajor">
            <summary>Major product version derived from ProductVersion property.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.ProductID">
            <summary>Product identifier for the product.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.RegOwner">
            <summary>Individual registered to use the product.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.RegCompany">
            <summary>Company registered to use the product.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.InstanceType">
            <summary>Indicates whether the product is installed using a multi-instance transform.</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.Uninstallable">
            <summary>Is the patch uninstallable</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.State">
            <summary>Product or patch installation state</summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.LastUsedSource">
            <summary></summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.LastUsedType">
            <summary></summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.MediaPackagePath">
            <summary></summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallProperty.DiskPrompt">
            <summary></summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallState">
            <summary>
            Installed state of a Component or Feature.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.NotUsed">
            <summary>The component is disabled.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.BadConfig">
            <summary>The installation configuration data is corrupt.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Incomplete">
            <summary>The installation is suspended or in progress.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.SourceAbsent">
            <summary>Component is set to run from source, but source is unavailable.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.MoreData">
            <summary>The buffer overflow is returned.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.InvalidArgument">
            <summary>An invalid parameter was passed to the function.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Unknown">
            <summary>An unrecognized product or feature name was passed to the function.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Broken">
            <summary>The component is broken.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Advertised">
            <summary>The feature is advertised.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Removed">
            <summary>The component is being removed. In action state and not settable.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Absent">
            <summary>The component is not installed, or action state is absent but clients remain.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Local">
            <summary>The component is installed on the local drive.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Source">
            <summary>The component will run from the source, CD, or network.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallState.Default">
            <summary>The component will be installed in the default location: local or source.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallRunMode">
            <summary>
            Specifies the run mode for <see cref="P:Microsoft.WindowsInstaller.Session.Mode"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Admin">
            <summary>The administrative mode is installing, or the product is installing.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Advertise">
            <summary>The advertisements are installing or the product is installing or updating.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Maintenance">
            <summary>An existing installation is being modified or there is a new installation.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.RollbackEnabled">
            <summary>Rollback is enabled.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.LogEnabled">
            <summary>The log file is active. It was enabled prior to the installation session.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Operations">
            <summary>Execute operations are spooling or they are in the determination phase.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.RebootAtEnd">
            <summary>A reboot is necessary after a successful installation (settable).</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.RebootNow">
            <summary>A reboot is necessary to continue the installation (settable).</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Cabinet">
            <summary>Files from cabinets and Media table files are installing.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.SourceShortNames">
            <summary>The source LongFileNames is suppressed through the PID_MSISOURCE summary property.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.TargetShortNames">
            <summary>The target LongFileNames is suppressed through the SHORTFILENAMES property.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Windows9x">
            <summary>The operating system is Windows 95, Windows 98, or Windows ME.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.ZawEnabled">
            <summary>The operating system supports demand installation.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Scheduled">
            <summary>A custom action called from install script execution.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Rollback">
            <summary>A custom action called from rollback execution script.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallRunMode.Commit">
            <summary>A custom action called from commit execution script.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.DatabaseOpenMode">
            <summary>
            Specifies the open mode for <see cref="M:Microsoft.WindowsInstaller.Installer.OpenDatabase(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DatabaseOpenMode.ReadOnly">
            <summary>Open a database read-only, no persistent changes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DatabaseOpenMode.Transact">
            <summary>Open a database read/write in transaction mode.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DatabaseOpenMode.Direct">
            <summary>Open a database direct read/write without transaction.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DatabaseOpenMode.Create">
            <summary>Create a new database, transact mode read/write.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DatabaseOpenMode.CreateDirect">
            <summary>Create a new database, direct mode read/write.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DatabaseOpenMode.Patch">
            <summary>Add this flag to indicate a patch file.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ViewModifyMode">
            <summary>
            Specifies the modify mode for <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Seek">
            <summary>
            Refreshes the information in the supplied record without changing the position
            in the result set and without affecting subsequent fetch operations.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Refresh">
            <summary>Refreshes the data in a Record.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Insert">
            <summary>Inserts a Record into the view.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Update">
            <summary>Updates the View with new data from the Record.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Assign">
            <summary>Updates or inserts a Record into the View.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Replace">
            <summary>Updates or deletes and inserts a Record into the View.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Merge">
            <summary>Inserts or validates a record.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Delete">
            <summary>Deletes a Record from the View.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.InsertTemporary">
            <summary>Inserts a Record into the View.  The inserted data is not persistent.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.Validate">
            <summary>Validates a record.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.ValidateNew">
            <summary>Validates a new record.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.ValidateField">
            <summary>Validates fields of a fetched or new record. Can validate one or more fields of an incomplete record.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ViewModifyMode.ValidateDelete">
            <summary>Validates a record that will be deleted later.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.TransformValidateFlags">
            <summary>
            Transform validation flags available for <see cref="M:Microsoft.WindowsInstaller.Database.CreateTransformSummaryInfo(Microsoft.WindowsInstaller.Database,System.String,Microsoft.WindowsInstaller.TransformErrors,Microsoft.WindowsInstaller.TransformValidateFlags)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.None">
            <summary>Validate no properties.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.Language">
            <summary>Default language must match base database.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.Product">
            <summary>Product must match base database.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.MajorVersion">
            <summary>Check major version only.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.MinorVersion">
            <summary>Check major and minor versions only.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.UpdateVersion">
            <summary>Check major, minor, and update versions.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.NewLessBaseVersion">
            <summary>Installed version &lt; base version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.NewLessEqualBaseVersion">
            <summary>Installed version &lt;= base version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.NewEqualBaseVersion">
            <summary>Installed version = base version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.NewGreaterEqualBaseVersion">
            <summary>Installed version &gt;= base version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.NewGreaterBaseVersion">
            <summary>Installed version &gt; base version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformValidateFlags.UpgradeCode">
            <summary>UpgradeCode must match base database.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.TransformErrors">
            <summary>
            Transform error conditions available for <see cref="M:Microsoft.WindowsInstaller.Database.CreateTransformSummaryInfo(Microsoft.WindowsInstaller.Database,System.String,Microsoft.WindowsInstaller.TransformErrors,Microsoft.WindowsInstaller.TransformValidateFlags)"/> or
            <see cref="M:Microsoft.WindowsInstaller.Database.ApplyTransform(System.String)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.None">
            <summary>No error conditions.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.AddExistingRow">
            <summary>Adding a row that already exists.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.DelMissingRow">
            <summary>Deleting a row that doesn't exist.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.AddExistingTable">
            <summary>Adding a table that already exists.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.DelMissingTable">
            <summary>Deleting a table that doesn't exist.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.UpdateMissingRow">
            <summary>Updating a row that doesn't exist.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.ChangeCodePage">
            <summary>Transform and database code pages do not match and neither code page is neutral.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TransformErrors.ViewTransform">
            <summary>Create the temporary _TransformView table when applying the transform.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ValidationMessageType">
            <summary>
            Type of a <see cref="T:Microsoft.WindowsInstaller.ValidationMessage"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationMessageType.Unknown">
            <summary>Unknown validation message type.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationMessageType.Failure">
            <summary>Validation failure message.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationMessageType.Error">
            <summary>Validation error message.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationMessageType.Warning">
            <summary>Validation warning message.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationMessageType.Info">
            <summary>Validation information message.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ActionResult">
            <summary>
            Specifies a return status value for custom actions.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ActionResult.Success">
            <summary>Action completed successfully.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ActionResult.SkipRemainingActions">
            <summary>Skip remaining actions, not an error.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ActionResult.UserExit">
            <summary>User terminated prematurely.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ActionResult.Failure">
            <summary>Unrecoverable error or unhandled exception occurred.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ActionResult.NotExecuted">
            <summary>Action not executed.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.MessageResult">
            <summary>
            Specifies a return status value for message handlers.  These values are returned by
            <see cref="M:Microsoft.WindowsInstaller.Session.Message(Microsoft.WindowsInstaller.InstallMessage,Microsoft.WindowsInstaller.Record)"/> and <see cref="T:Microsoft.WindowsInstaller.ExternalUIHandler"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.Error">
            <summary>An error was found in the message handler.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.None">
            <summary>No action was taken.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.OK">
            <summary>IDOK</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.Cancel">
            <summary>IDCANCEL</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.Abort">
            <summary>IDABORT</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.Retry">
            <summary>IDRETRY</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.Ignore">
            <summary>IDIGNORE</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.Yes">
            <summary>IDYES</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.MessageResult.No">
            <summary>IDNO</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallMode">
            <summary>
            Specifies the install mode for <see cref="M:Microsoft.WindowsInstaller.Installer.ProvideComponent(System.String,System.String,System.String,Microsoft.WindowsInstaller.InstallMode)"/> or <see cref="M:Microsoft.WindowsInstaller.Installer.ProvideQualifiedComponent(System.String,System.String,Microsoft.WindowsInstaller.InstallMode,System.String)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMode.NoSourceResolution">
            <summary>Provide the component only if the feature's installation state is <see cref="F:Microsoft.WindowsInstaller.InstallState.Local"/>.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMode.NoDetection">
            <summary>Only check that the component is registered, without verifying that the key file of the component exists.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMode.Existing">
            <summary>Provide the component only if the feature exists.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallMode.Default">
            <summary>Provide the component and perform any installation necessary to provide the component.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ReinstallModes">
            <summary>
            Specifies the reinstall mode for <see cref="M:Microsoft.WindowsInstaller.Installer.ReinstallFeature(System.String,System.String,Microsoft.WindowsInstaller.ReinstallModes)"/> or <see cref="M:Microsoft.WindowsInstaller.Installer.ReinstallProduct(System.String,Microsoft.WindowsInstaller.ReinstallModes)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.FileMissing">
            <summary>Reinstall only if file is missing.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.FileOlderVersion">
            <summary>Reinstall if file is missing, or older version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.FileEqualVersion">
            <summary>Reinstall if file is missing, or equal or older version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.FileExact">
            <summary>Reinstall if file is missing, or not exact version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.FileVerify">
            <summary>Checksum executables, reinstall if missing or corrupt.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.FileReplace">
            <summary>Reinstall all files, regardless of version.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.MachineData">
            <summary>Insure required machine reg entries.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.UserData">
            <summary>Insure required user reg entries.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.Shortcut">
            <summary>Validate shortcuts items.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ReinstallModes.Package">
            <summary>Use re-cache source install package.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ValidationError">
            <summary>
            Defines the type of error encountered by the <see cref="M:Microsoft.WindowsInstaller.View.Validate(Microsoft.WindowsInstaller.Record)"/>, <see cref="M:Microsoft.WindowsInstaller.View.ValidateNew(Microsoft.WindowsInstaller.Record)"/>,
            or <see cref="M:Microsoft.WindowsInstaller.View.ValidateField(Microsoft.WindowsInstaller.Record)"/> methods of the <see cref="T:Microsoft.WindowsInstaller.View"/> class.  The extended error information
            can be retrieved with the <see cref="M:Microsoft.WindowsInstaller.View.GetValidationErrors"/> method.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.DuplicateKey">
            <summary>The new record duplicates primary keys of the existing record in a table.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.Required">
            <summary>There are no null values allowed, or the column is about to be deleted but is referenced by another row.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadLink">
            <summary>The corresponding record in a foreign table was not found.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.Overflow">
            <summary>The data is greater than the maximum value allowed.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.Underflow">
            <summary>The data is less than the minimum value allowed.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.NotInSet">
            <summary>The data is not a member of the values permitted in the set.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadVersion">
            <summary>An invalid version string was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadCase">
            <summary>The case was invalid. The case must be all uppercase or all lowercase.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadGuid">
            <summary>An invalid GUID was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadWildCard">
            <summary>An invalid wildcard file name was supplied, or the use of wildcards was invalid.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadIdentifier">
            <summary>An invalid identifier was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadLanguage">
            <summary>Invalid language IDs were supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadFilename">
            <summary>An invalid file name was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadPath">
            <summary>An invalid path was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadCondition">
            <summary>An invalid conditional statement was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadFormatted">
            <summary>An invalid format string was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadTemplate">
            <summary>An invalid template string was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadDefaultDir">
            <summary>An invalid string was supplied in the DefaultDir column of the Directory table.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadRegPath">
            <summary>An invalid registry path string was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadCustomSource">
            <summary>An invalid string was supplied in the CustomSource column of the CustomAction table.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadProperty">
            <summary>An invalid property string was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.MissingData">
            <summary>The _Validation table is missing a reference to a column.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadCategory">
            <summary>The category column of the _Validation table for the column is invalid.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadKeyTable">
            <summary>The table in the Keytable column of the _Validation table was not found or loaded.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadMaxMinValues">
            <summary>The value in the MaxValue column of the _Validation table is less than the value in the MinValue column.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadCabinet">
            <summary>An invalid cabinet name was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadShortcut">
            <summary>An invalid shortcut target name was supplied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.StringOverflow">
            <summary>The string is too long for the length specified by the column definition.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ValidationError.BadLocalizeAttrib">
            <summary>An invalid localization attribute was supplied. (Primary keys cannot be localized.)</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallType">
            <summary>
            Specifies the type of installation for <see cref="M:Microsoft.WindowsInstaller.Installer.ApplyPatch(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallType.Default">
            <summary>Searches system for products to patch.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallType.NetworkImage">
            <summary>Indicates a administrative installation.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallType.SingleInstance">
            <summary>Indicates a particular instance.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallContext">
            <summary>
            Specifies the installation context for <see cref="T:Microsoft.WindowsInstaller.Product"/>s,
            <see cref="T:Microsoft.WindowsInstaller.Patch"/>es, and <see cref="M:Microsoft.WindowsInstaller.Installer.DetermineApplicablePatches(System.String,System.String[],Microsoft.WindowsInstaller.InapplicablePatchHandler,System.Object)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallContext.None">
            <summary>Invalid context for a product</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallContext.UserManaged">
            <summary>User managed install context</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallContext.UserUnmanaged">
            <summary>User non-managed context</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallContext.Machine">
            <summary>Per-machine context</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallContext.All">
            <summary>All contexts, or all valid values</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.InstallContext.AllUserManaged">
            <summary>All user-managed contexts</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.PatchStates">
            <summary>
            Indicates the installation <see cref="P:Microsoft.WindowsInstaller.Patch.State"/> of a <see cref="T:Microsoft.WindowsInstaller.Patch"/>.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.PatchStates.Invalid">
            <summary>Patch is in an invalid/broken state.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.PatchStates.Applied">
            <summary>Patch is applied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.PatchStates.Superseded">
            <summary>Patch is applied but superseded.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.PatchStates.Obsoleted">
            <summary>Patch is applied but obsoleted.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.PatchStates.Registered">
            <summary>Patch is registered but not applied.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.PatchStates.All">
            <summary>Patch is registered, applied, superseeded, or obsoleted.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SourceType">
            <summary>
            Defines the type of source media for a product or patch.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.SourceType.Unknown">
            <summary>Unknown source type</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.SourceType.Network">
            <summary>Nnetwork file share</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.SourceType.Url">
            <summary>Internet url</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.SourceType.Media">
            <summary>Removable media</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.FileAttributes">
            <summary>
            Available values for the Attributes column of the File table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.ReadOnly">
            <summary>Read-only.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.Hidden">
            <summary>Hidden.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.System">
            <summary>System.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.Vital">
            <summary>The file is vital for the proper operation of the component to which it belongs.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.Checksum">
            <summary>The file contains a valid checksum. A checksum is required to repair a file that has become corrupted.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.PatchAdded">
            <summary>This bit must only be added by a patch and if the file is being added by the patch.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.Noncompressed">
            <summary>
            The file's source type is uncompressed. If set, ignore the WordCount summary information property. If neither
            Noncompressed nor Compressed are set, the compression state of the file is specified by the WordCount summary
            information property. Do not set both Noncompressed and Compressed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FileAttributes.Compressed">
            <summary>
            The file's source type is compressed. If set, ignore the WordCount summary information property. If neither
            Noncompressed or Compressed are set, the compression state of the file is specified by the WordCount summary
            information property. Do not set both Noncompressed and Compressed.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ComponentAttributes">
            <summary>
            Available values for the Attributes column of the Component table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.LocalOnly">
            <summary>
            Component cannot be run from source. 
            </summary>
            <remarks>
            Set this bit for all components belonging to a feature to prevent the feature from being run-from-network or
            run-from-source. Note that if a feature has no components, the feature always shows run-from-source and
            run-from-my-computer as valid options.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.SourceOnly">
            <summary>
            Component can only be run from source.
            </summary>
            <remarks>
            Set this bit for all components belonging to a feature to prevent the feature from being run-from-my-computer.
            Note that if a feature has no components, the feature always shows run-from-source and run-from-my-computer
            as valid options.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.Optional">
            <summary>
            Component can run locally or from source.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.RegistryKeyPath">
            <summary>
            If this bit is set, the value in the KeyPath column is used as a key into the Registry table.
            </summary>
            <remarks>
            If the Value field of the corresponding record in the Registry table is null, the Name field in that record
            must not contain "+", "-", or "*". For more information, see the description of the Name field in Registry
            table.
            <p>Setting this bit is recommended for registry entries written to the HKCU hive. This ensures the installer
            writes the necessary HKCU registry entries when there are multiple users on the same machine.</p>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.SharedDllRefCount">
            <summary>
            If this bit is set, the installer increments the reference count in the shared DLL registry of the component's
            key file. If this bit is not set, the installer increments the reference count only if the reference count
            already exists.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.Permanent">
            <summary>
            If this bit is set, the installer does not remove the component during an uninstall. The installer registers
            an extra system client for the component in the Windows Installer registry settings.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.OdbcDataSource">
            <summary>
            If this bit is set, the value in the KeyPath column is a key into the ODBCDataSource table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.Transitive">
            <summary>
            If this bit is set, the installer reevaluates the value of the statement in the Condition column upon a reinstall.
            If the value was previously False and has changed to true, the installer installs the component. If the value
            was previously true and has changed to false, the installer removes the component even if the component has
            other products as clients.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.NeverOverwrite">
            <summary>
            If this bit is set, the installer does not install or reinstall the component if a key path file or a key path
            registry entry for the component already exists. The application does register itself as a client of the component.
            </summary>
            <remarks>
            Use this flag only for components that are being registered by the Registry table. Do not use this flag for
            components registered by the AppId, Class, Extension, ProgId, MIME, and Verb tables.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ComponentAttributes.SixtyFourBit">
            <summary>
            Set this bit to mark this as a 64-bit component. This attribute facilitates the installation of packages that
            include both 32-bit and 64-bit components. If this bit is not set, the component is registered as a 32-bit component.
            </summary>
            <remarks>
            If this is a 64-bit component replacing a 32-bit component, set this bit and assign a new GUID in the
            ComponentId column.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.FeatureAttributes">
            <summary>
            Available values for the Attributes column of the Feature table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FeatureAttributes.FavorLocal">
            <summary>
            Components of this feature that are not marked for installation from source are installed locally.
            </summary>
            <remarks>
            A component shared by two or more features, some of which are set to FavorLocal and some to FavorSource,
            is installed locally. Components marked <see cref="F:Microsoft.WindowsInstaller.ComponentAttributes.SourceOnly"/> in the Component
            table are always run from the source CD/server. The bits FavorLocal and FavorSource work with features not
            listed by the ADVERTISE property.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FeatureAttributes.FavorSource">
            <summary>
            Components of this feature not marked for local installation are installed to run from the source
            CD-ROM or server.
            </summary>
            <remarks>
            A component shared by two or more features, some of which are set to FavorLocal and some to FavorSource,
            is installed to run locally. Components marked <see cref="F:Microsoft.WindowsInstaller.ComponentAttributes.LocalOnly"/> in the
            Component table are always installed locally. The bits FavorLocal and FavorSource work with features
            not listed by the ADVERTISE property.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FeatureAttributes.FollowParent">
            <summary>
            Set this attribute and the state of the feature is the same as the state of the feature's parent.
            You cannot use this option if the feature is located at the root of a feature tree.
            </summary>
            <remarks>
            Omit this attribute and the feature state is determined according to DisallowAdvertise and
            FavorLocal and FavorSource.
            <p>To guarantee that the child feature's state always follows the state of its parent, even when the
            child and parent are initially set to absent in the SelectionTree control, you must include both
            FollowParent and UIDisallowAbsent in the attributes of the child feature.</p>
            <p>Note that if you set FollowParent without setting UIDisallowAbsent, the installer cannot force
            the child feature out of the absent state. In this case, the child feature matches the parent's
            installation state only if the child is set to something other than absent.</p>
            <p>Set FollowParent and UIDisallowAbsent to ensure a child feature follows the state of the parent feature.</p>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FeatureAttributes.FavorAdvertise">
            <summary>
            Set this attribute and the feature state is Advertise.
            </summary>
            <remarks>
            If the feature is listed by the ADDDEFAULT property this bit is ignored and the feature state is determined
            according to FavorLocal and FavorSource.
            <p>Omit this attribute and the feature state is determined according to DisallowAdvertise and FavorLocal
            and FavorSource.</p>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FeatureAttributes.DisallowAdvertise">
            <summary>
            Set this attribute to prevent the feature from being advertised.
            </summary>
            <remarks>
            Note that this bit works only with features that are listed by the ADVERTISE property.
            <p>Set this attribute and if the listed feature is not a parent or child, the feature is installed according to
            FavorLocal and FavorSource.</p>
            <p>Set this attribute for the parent of a listed feature and the parent is installed.</p>
            <p>Set this attribute for the child of a listed feature and the state of the child is Absent.</p>
            <p>Omit this attribute and if the listed feature is not a parent or child, the feature state is Advertise.</p>
            <p>Omit this attribute and if the listed feature is a parent or child, the state of both features is Advertise.</p>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FeatureAttributes.UIDisallowAbsent">
            <summary>
            Set this attribute and the user interface does not display an option to change the feature state
            to Absent. Setting this attribute forces the feature to the installation state, whether or not the
            feature is visible in the UI.
            </summary>
            <remarks>
            Omit this attribute and the user interface displays an option to change the feature state to Absent.
            <p>Set FollowParent and UIDisallowAbsent to ensure a child feature follows the state of the parent feature.</p>
            <p>Setting this attribute not only affects the UI, but also forces the feature to the install state whether
            the feature is visible in the UI or not.</p>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsInstaller.FeatureAttributes.NoUnsupportedAdvertise">
            <summary>
            Set this attribute and advertising is disabled for the feature if the operating system shell does not
            support Windows Installer descriptors. 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.DialogAttributes">
            <summary>
            Defines flags for the Attributes column of the Dialog table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.Visible">
            <summary>If this bit is set, the dialog is originally created as visible, otherwise it is hidden.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.Modal">
            <summary>If this bit is set, the dialog box is modal, other dialogs of the same application cannot be put on top of it, and the dialog keeps the control while it is running.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.Minimize">
            <summary>If this bit is set, the dialog box can be minimized. This bit is ignored for modal dialog boxes, which cannot be minimized.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.SysModal">
            <summary>If this style bit is set, the dialog box will stop all other applications and no other applications can take the focus.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.KeepModeless">
            <summary>If this bit is set, the other dialogs stay alive when this dialog box is created.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.TrackDiskSpace">
            <summary>If this bit is set, the dialog box periodically calls the installer. If the property changes, it notifies the controls on the dialog.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.UseCustomPalette">
            <summary>If this bit is set, the pictures on the dialog box are created with the custom palette (one per dialog received from the first control created).</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.RightToLeftReadingOrder">
            <summary>If this style bit is set the text in the dialog box is displayed in right-to-left-reading order.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.RightAligned">
            <summary>If this style bit is set, the text is aligned on the right side of the dialog box.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.LeftScroll">
            <summary>If this style bit is set, the scroll bar is located on the left side of the dialog box.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.Bidirectional">
            <summary>This is a combination of the RightToLeftReadingOrder, RightAligned, and the LeftScroll dialog style bits.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.DialogAttributes.Error">
            <summary>If this bit is set, the dialog box is an error dialog.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ControlAttributes">
            <summary>
            Defines flags for the Attributes column of the Control table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Visible">
            <summary>If this bit is set, the control is visible on the dialog box.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Enabled">
            <summary>specifies if the given control is enabled or disabled. Most controls appear gray when disabled.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Sunken">
            <summary>If this bit is set, the control is displayed with a sunken, three dimensional look.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Indirect">
            <summary>The Indirect control attribute specifies whether the value displayed or changed by this control is referenced indirectly.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Integer">
            <summary>If this bit is set on a control, the associated property specified in the Property column of the Control table is an integer.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.RightToLeftReadingOrder">
            <summary>If this bit is set the text in the control is displayed in a right-to-left reading order.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.RightAligned">
            <summary>If this style bit is set, text in the control is aligned to the right.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.LeftScroll">
            <summary>If this bit is set, the scroll bar is located on the left side of the control, otherwise it is on the right.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Bidirectional">
            <summary>This is a combination of the RightToLeftReadingOrder, RightAligned, and LeftScroll attributes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Transparent">
            <summary>If this bit is set on a text control, the control is displayed transparently with the background showing through the control where there are no characters.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.NoPrefix">
            <summary>If this bit is set on a text control, the occurrence of the character "&amp;" in a text string is displayed as itself.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.NoWrap">
            <summary>If this bit is set the text in the control is displayed on a single line.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.FormatSize">
            <summary>If this bit is set for a text control, the control will automatically attempt to format the displayed text as a number representing a count of bytes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.UsersLanguage">
            <summary>If this bit is set, fonts are created using the user's default UI code page. Otherwise it is created using the database code page.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Multiline">
            <summary>If this bit is set on an Edit control, the installer creates a multiple line edit control with a vertical scroll bar.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.PasswordInput">
            <summary>This attribute creates an edit control for entering passwords. The control displays each character as an asterisk (*) as they are typed into the control.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Progress95">
            <summary>If this bit is set on a ProgressBar control, the bar is drawn as a series of small rectangles in Microsoft Windows 95-style. Otherwise it is drawn as a single continuous rectangle.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.RemovableVolume">
            <summary>If this bit is set, the control shows removable volumes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.FixedVolume">
            <summary>If this bit is set, the control shows fixed internal hard drives.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.RemoteVolume">
            <summary>If this bit is set, the control shows remote volumes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.CdromVolume">
            <summary>If this bit is set, the control shows CD-ROM volumes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.RamDiskVolume">
            <summary>If this bit is set, the control shows RAM disk volumes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.FloppyVolume">
            <summary>If this bit is set, the control shows floppy volumes.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.ShowRollbackCost">
            <summary>Specifies whether or not the rollback backup files are included in the costs displayed by the VolumeCostList control.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Sorted">
            <summary>If this bit is set, the items listed in the control are displayed in a specified order. Otherwise, items are displayed in alphabetical order.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.ComboList">
            <summary>If this bit is set on a combo box, the edit field is replaced by a static text field. This prevents a user from entering a new value and requires the user to choose only one of the predefined values.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.ImageHandle">
            <summary></summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.PushLike">
            <summary>If this bit is set on a check box or a radio button group, the button is drawn with the appearance of a push button, but its logic stays the same.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Bitmap">
            <summary>If this bit is set, the text in the control is replaced by a bitmap image. The Text column in the Control table is a foreign key into the Binary table.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.Icon">
            <summary>If this bit is set, text is replaced by an icon image and the Text column in the Control table is a foreign key into the Binary table.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.FixedSize">
            <summary>If this bit is set, the picture is cropped or centered in the control without changing its shape or size.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.IconSize16">
            <summary>Specifies which size of the icon image to load. If none of the bits are set, the first image is loaded.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.IconSize32">
            <summary>Specifies which size of the icon image to load. If none of the bits are set, the first image is loaded.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.IconSize48">
            <summary>Specifies which size of the icon image to load. If none of the bits are set, the first image is loaded.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ControlAttributes.HasBorder">
            <summary>If this bit is set, the RadioButtonGroup has text and a border displayed around it.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.CustomActionTypes">
            <summary>
            Defines flags for the Type column of the CustomAction table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Dll">
            <summary>Target = entry point name</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Exe">
            <summary>Target = command line args</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.TextData">
            <summary>Target = text string to be formatted and set into property</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.JScript">
            <summary>Target = entry point name, null if none to call</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.VBScript">
            <summary>Target = entry point name, null if none to call</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Install">
            <summary>Target = property list for nested engine initialization</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.BinaryData">
            <summary>Source = Binary.Name, data stored in stream</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.SourceFile">
            <summary>Source = File.File, file part of installation</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Directory">
            <summary>Source = Directory.Directory, folder containing existing file</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Property">
            <summary>Source = Property.Property, full path to executable</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Continue">
            <summary>Ignore action return status, continue running</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Async">
            <summary>Run asynchronously</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.FirstSequence">
            <summary>Skip if UI sequence already run</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.OncePerProcess">
            <summary>Skip if UI sequence already run in same process</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.ClientRepeat">
            <summary>Run on client only if UI already run on client</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.InScript">
            <summary>Queue for execution within script</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Rollback">
            <summary>In conjunction with InScript: queue in Rollback script</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.Commit">
            <summary>In conjunction with InScript: run Commit ops from script on success</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.NoImpersonate">
            <summary>No impersonation, run in system context</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.TSAware">
            <summary>Impersonate for per-machine installs on TS machines</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.SixtyFourBitScript">
            <summary>Script requires 64bit process</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.CustomActionTypes.HideTarget">
            <summary>Don't record the contents of the Target field in the log file</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.IniFileAction">
            <summary>
            Defines values for the Action column of the IniFile and RemoveIniFile tables.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.IniFileAction.AddLine">
            <summary>Creates or updates a .ini entry.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.IniFileAction.CreateLine">
            <summary>Creates a .ini entry only if the entry does not already exist.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.IniFileAction.RemoveLine">
            <summary>Deletes .ini entry.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.IniFileAction.AddTag">
            <summary>Creates a new entry or appends a new comma-separated value to an existing entry.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.IniFileAction.RemoveTag">
            <summary>Deletes a tag from a .ini entry.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.RegistryRoot">
            <summary>
            Defines values for the Root column of the Registry, RemoveRegistry, and RegLocator tables.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RegistryRoot.UserOrMachine">
            <summary>HKEY_CURRENT_USER for a per-user installation,
            or HKEY_LOCAL_MACHINE for a per-machine installation.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RegistryRoot.ClassesRoot">
            <summary>HKEY_CLASSES_ROOT</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RegistryRoot.CurrentUser">
            <summary>HKEY_CURRENT_USER</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RegistryRoot.LocalMachine">
            <summary>HKEY_LOCAL_MACHINE</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RegistryRoot.Users">
            <summary>HKEY_USERS</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.RemoveFileInstallModes">
            <summary>
            Defines values for the InstallMode column of the RemoveFile table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RemoveFileInstallModes.OnInstall">
            <summary>Remove only when the associated component is being installed (install state = local or source).</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RemoveFileInstallModes.OnRemove">
            <summary>Remove only when the associated component is being removed (install state = absent).</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.RemoveFileInstallModes.OnBoth">
            <summary>Remove when the associated component is being either installed or removed.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ServiceControlEvents">
            <summary>
            Defines values for the Event column of the ServiceControl table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceControlEvents.Start">
            <summary>During an install, starts the service during the StartServices action.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceControlEvents.Stop">
            <summary>During an install, stops the service during the StopServices action.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceControlEvents.Delete">
            <summary>During an install, deletes the service during the DeleteServices action.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceControlEvents.UninstallStart">
            <summary>During an uninstall, starts the service during the StartServices action.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceControlEvents.UninstallStop">
            <summary>During an uninstall, stops the service during the StopServices action.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceControlEvents.UninstallDelete">
            <summary>During an uninstall, deletes the service during the DeleteServices action.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ServiceInstallFlags">
            <summary>
            Defines values for the ServiceType, StartType, and ErrorControl columns of the ServiceInstall table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.OwnProcess">
            <summary>A Win32 service that runs its own process.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.ShareProcess">
            <summary>A Win32 service that shares a process.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.Interactive">
            <summary>A Win32 service that interacts with the desktop.
            This value cannot be used alone and must be added to either
            <see cref="F:Microsoft.WindowsInstaller.ServiceInstallFlags.OwnProcess"/> or <see cref="F:Microsoft.WindowsInstaller.ServiceInstallFlags.ShareProcess"/>.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.AutoStart">
            <summary>Service starts during startup of the system.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.DemandStart">
            <summary>Service starts when the service control manager calls the StartService function.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.Disabled">
            <summary>Specifies a service that can no longer be started.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.ErrorIgnore">
            <summary>Logs the error and continues with the startup operation.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.ErrorNormal">
            <summary>Logs the error, displays a message box and continues the startup operation.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.ErrorCritical">
            <summary>Logs the error if it is possible and the system is restarted with the last configuration
            known to be good. If the last-known-good configuration is being started, the startup operation fails.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.ServiceInstallFlags.ErrorControlVital">
            <summary>When combined with other error flags, specifies that the overall install should fail if
            the service cannot be installed into the system.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.TextStyles">
            <summary>
            Defines values for the StyleBits column of the TextStyle table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TextStyles.Bold">
            <summary>Bold</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TextStyles.Italic">
            <summary>Italic</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TextStyles.Underline">
            <summary>Underline</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.TextStyles.Strike">
            <summary>Strike out</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.UpgradeAttributes">
            <summary>
            Defines values for the Attributes column of the Upgrade table.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.UpgradeAttributes.MigrateFeatures">
            <summary>Migrates feature states by enabling the logic in the MigrateFeatureStates action.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.UpgradeAttributes.OnlyDetect">
            <summary>Detects products and applications but does not remove.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.UpgradeAttributes.IgnoreRemoveFailure">
            <summary>Continues installation upon failure to remove a product or application.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.UpgradeAttributes.VersionMinInclusive">
            <summary>Detects the range of versions including the value in VersionMin.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.UpgradeAttributes.VersionMaxInclusive">
            <summary>Dectects the range of versions including the value in VersionMax.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.UpgradeAttributes.LanguagesExclusive">
            <summary>Detects all languages, excluding the languages listed in the Language column.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.LocatorType">
            <summary>
            Defines values for the Type column of the CompLocator, IniLocator, and RegLocator tables.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.LocatorType.Directory">
            <summary>Key path is a directory.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.LocatorType.FileName">
            <summary>Key path is a file name.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.LocatorType.RawValue">
            <summary>Key path is a registry value.</summary>
        </member>
        <member name="F:Microsoft.WindowsInstaller.LocatorType.SixtyFourBit">
            <summary>Set this bit to have the installer search the 64-bit portion of the registry.</summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallerException">
            <summary>
            Base class for Windows Installer exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new InstallerException with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the
            innerException parameter is not a null reference (Nothing in Visual Basic), the current exception
            is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerException.#ctor(System.String)">
            <summary>
            Creates a new InstallerException with a specified error message.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerException.#ctor">
            <summary>
            Creates a new InstallerException.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InstallerException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallerException.GetErrorRecord">
            <summary>
            Gets extended information about the error, or null if no further information
            is available.
            </summary>
            <returns>A Record object. Field 1 of the Record contains the installer
            message code. Other fields contain data specific to the particular error.</returns>
            <remarks>
            If the record is passed to <see cref="M:Microsoft.WindowsInstaller.Session.Message(Microsoft.WindowsInstaller.InstallMessage,Microsoft.WindowsInstaller.Record)"/>, it is formatted
            by looking up the string in the current database. If there is no installation
            session, the format string may be obtained by a query on the Error table using
            the error code, followed by a call to <see cref="M:Microsoft.WindowsInstaller.Record.ToString(Microsoft.WindowsInstaller.Session)"/>.
            Alternatively, the standard MSI message can by retrieved by calling the
            <see cref="M:Microsoft.WindowsInstaller.Installer.GetErrorMessage(System.Int32)"/> method.
            <para>The following properties and methods may report extended error data:
            <list type="bullet">
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.ApplyTransform(System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.Commit"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.Execute(System.String,System.Object[])"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.ExecuteScalar(System.String,System.Object[])"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.ExecuteVector(System.String,System.Object[])"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.Export(System.String,System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.ExportAll(System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.GenerateTransform(Microsoft.WindowsInstaller.Database,System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.Import(System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.ImportAll(System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.Merge(Microsoft.WindowsInstaller.Database,System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.OpenView(System.String,System.Object[])"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.SummaryInformation(System.Int32)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Database"/>.<see cref="M:Microsoft.WindowsInstaller.Database.ViewTransform(System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Installer"/>.<see cref="M:Microsoft.WindowsInstaller.Installer.OpenDatabase(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Installer"/>.<see cref="M:Microsoft.WindowsInstaller.Installer.SummaryInformation(System.String,System.Int32)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Record"/>.<see cref="M:Microsoft.WindowsInstaller.Record.SetStream(System.String,System.String)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Session"/>.<see cref="P:Microsoft.WindowsInstaller.Session.ComponentCurrentState"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Session"/>.<see cref="P:Microsoft.WindowsInstaller.Session.FeatureCurrentState"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Session"/>.<see cref="P:Microsoft.WindowsInstaller.Session.FeatureValidStates"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Session"/>.<see cref="M:Microsoft.WindowsInstaller.Session.GetFeatureCost(System.String,System.Boolean,System.Boolean,Microsoft.WindowsInstaller.InstallState)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Session"/>.<see cref="M:Microsoft.WindowsInstaller.Session.SetInstallLevel(System.Int32)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Session"/>.<see cref="P:Microsoft.WindowsInstaller.Session.SourcePath"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.Session"/>.<see cref="P:Microsoft.WindowsInstaller.Session.TargetPath"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Assign(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Delete(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Execute(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Insert(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.InsertTemporary(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Merge(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Refresh(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Replace(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Seek(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Update(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.Validate(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.ValidateField(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.ValidateDelete(Microsoft.WindowsInstaller.Record)"/></item>
            <item><see cref="T:Microsoft.WindowsInstaller.View"/>.<see cref="M:Microsoft.WindowsInstaller.View.ValidateNew(Microsoft.WindowsInstaller.Record)"/></item>
            </list></para>
            <para>The returned Record object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallerException.ErrorCode">
            <summary>
            Gets the system error code that resulted in this exception, or 0 if not applicable.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallerException.Message">
            <summary>
            Gets a message that describes the exception.  This message may contain detailed
            formatted error data if it was available.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallCanceledException">
            <summary>
            User Canceled the installation.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new InstallCanceledException with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the
            innerException parameter is not a null reference (Nothing in Visual Basic), the current exception
            is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallCanceledException.#ctor(System.String)">
            <summary>
            Creates a new InstallCanceledException with a specified error message.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallCanceledException.#ctor">
            <summary>
            Creates a new InstallCanceledException.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InstallCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InstallCanceledException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.WindowsInstaller.BadQuerySyntaxException">
            <summary>
            A bad SQL query string was passed to <see cref="M:Microsoft.WindowsInstaller.Database.OpenView(System.String,System.Object[])"/> or <see cref="M:Microsoft.WindowsInstaller.Database.Execute(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.BadQuerySyntaxException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new BadQuerySyntaxException with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the
            innerException parameter is not a null reference (Nothing in Visual Basic), the current exception
            is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.BadQuerySyntaxException.#ctor(System.String)">
            <summary>
            Creates a new BadQuerySyntaxException with a specified error message.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.BadQuerySyntaxException.#ctor">
            <summary>
            Creates a new BadQuerySyntaxException.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.BadQuerySyntaxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the BadQuerySyntaxException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InvalidHandleException">
            <summary>
            A method was called on an invalid installer handle.  The handle may have been already closed.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InvalidHandleException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new InvalidHandleException with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the
            innerException parameter is not a null reference (Nothing in Visual Basic), the current exception
            is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InvalidHandleException.#ctor(System.String)">
            <summary>
            Creates a new InvalidHandleException with a specified error message.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InvalidHandleException.#ctor">
            <summary>
            Creates a new InvalidHandleException.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.InvalidHandleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidHandleException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.WindowsInstaller.MergeException">
            <summary>
            A failure occurred when executing <see cref="M:Microsoft.WindowsInstaller.Database.Merge(Microsoft.WindowsInstaller.Database,System.String)"/>.  The exception may contain
            details about the merge conflict.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.MergeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new MergeException with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the
            innerException parameter is not a null reference (Nothing in Visual Basic), the current exception
            is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.MergeException.#ctor(System.String)">
            <summary>
            Creates a new MergeException with a specified error message.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.MergeException.#ctor">
            <summary>
            Creates a new MergeException.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.MergeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MergeException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.MergeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.WindowsInstaller.MergeException.ConflictTables">
            <summary>
            Gets the list of tables containing merge conflicts.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.MergeException.ConflictCounts">
            <summary>
            Gets the number of merge conflicts in each table, corresponding to the tables returned by
            <see cref="P:Microsoft.WindowsInstaller.MergeException.ConflictTables"/>.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.MergeException.Message">
            <summary>
            Gets a message that describes the merge conflits.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Installer">
            <summary>
            Provides access to top-level objects and functions for working with the Windows Installer.
            </summary>
            <remarks>
            NOTE ABOUT THIS DOCUMENTATION:
            <p>The documentation for the classes in this namespace is not meant to be a complete replacement for
            the docmentation from the Windows Installer SDK.  Documentation for the class APIs has been partially
            copied from the SDK documentation and modified as appropriate, to ease the transition from native
            to managed APIs.  But for extensive documentation on the concepts of the Windows Installer you need
            to refer back to those SDK docs.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.SetInternalUI(Microsoft.WindowsInstaller.InstallUILevel,System.IntPtr@)">
            <summary>
            Enables the installer's internal user interface. Then this user interface is used
            for all subsequent calls to user-interface-generating installer functions in this process.
            </summary>
            <param name="uiLevel">Specifies the level of complexity of the user interface</param>
            <param name="windowHandle">Handle to a window, which becomes the owner of any user interface created.
            A pointer to the previous owner of the user interface is returned.</param>
            <returns>The previous user interface level</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.SetInternalUI(Microsoft.WindowsInstaller.InstallUILevel)">
            <summary>
            Enables the installer's internal user interface. Then this user interface is used
            for all subsequent calls to user-interface-generating installer functions in this process.
            The owner of the user interface does not change.
            </summary>
            <param name="uiLevel">Specifies the level of complexity of the user interface</param>
            <returns>The previous user interface level</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.SetExternalUI(Microsoft.WindowsInstaller.ExternalUIHandler,Microsoft.WindowsInstaller.InstallLogModes,System.Object)">
            <summary>
            Enables an external user-interface handler. This external UI handler is called before the
            normal internal user-interface handler. The external UI handler has the option to suppress
            the internal UI by returning a non-zero value to indicate that it has handled the messages.
            </summary>
            <param name="uiHandler">A callback delegate that handles the UI messages</param>
            <param name="messageFilter">Specifies which messages to handle using the external message handler.
            If the external handler returns a non-zero result, then that message will not be sent to the UI,
            instead the message will be logged if logging has been enabled.</param>
            <param name="context">A context object that is passed to the callback</param>
            <returns>The previously set external handler, or null if there was no previously set handler</returns>
            <remarks>
            To restore the previous UI handler, a second call is made to SetExternalUI using the
            ExternalUIHandler returned by the first call to SetExternalUI and specifying
            <see cref="F:Microsoft.WindowsInstaller.InstallLogModes.None"/> as the message filter.
            <para>The external user interface handler does not have full control over the external user
            interface unless <see cref="M:Microsoft.WindowsInstaller.Installer.SetInternalUI(Microsoft.WindowsInstaller.InstallUILevel,System.IntPtr@)"/> is called with the uiLevel parameter set to
            <see cref="F:Microsoft.WindowsInstaller.InstallUILevel.None"/>. If SetInternalUI is not called, the internal user
            interface level defaults to <see cref="F:Microsoft.WindowsInstaller.InstallUILevel.Basic"/>. As a result, any message not
            handled by the external user interface handler is handled by Windows Installer. The initial
            "Preparing to install. . ." dialog always appears even if the external user interface
            handler handles all messages.</para>
            <para>Although it is possible to call SetExternalUI from within a custom action, this is not
            recommended. The recommended practice is to call SetExternalUI from a bootstrapping application.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.EnableLog(Microsoft.WindowsInstaller.InstallLogModes,System.String)">
            <summary>
            Enables logging of the selected message type for all subsequent install sessions in
            the current process space.
            </summary>
            <param name="logModes">One or more mode flags specifying the type of messages to log</param>
            <param name="logFile">Full path to the log file.  A null path disables logging,
            in which case the logModes paraneter is ignored.</param>
            <exception cref="T:System.ArgumentException">an invalid log mode was specified</exception>
            <remarks>This method takes effect on any new installation processes.  Calling this
            method from within a custom action will not start logging for that installation.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.EnableLog(Microsoft.WindowsInstaller.InstallLogModes,System.String,System.Boolean,System.Boolean)">
            <summary>
            Enables logging of the selected message type for all subsequent install sessions in
            the current process space.
            </summary>
            <param name="logModes">One or more mode flags specifying the type of messages to log</param>
            <param name="logFile">Full path to the log file.  A null path disables logging,
            in which case the logModes paraneter is ignored.</param>
            <param name="append">If true, the log lines will be appended to any existing file content.
            If false, the log file will be truncated if it exists.  The default is false.</param>
            <param name="flushEveryLine">If true, the log will be flushed after every line.
            If false, the log will be flushed every 20 lines.  The default is true.</param>
            <exception cref="T:System.ArgumentException">an invalid log mode was specified</exception>
            <remarks>This method takes effect on any new installation processes.  Calling this
            method from within a custom action will not start logging for that installation.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.FileVersion(System.String)">
            <summary>
            Gets the version string of the path specified using the format that the installer
            expects to find it in in the database.
            </summary>
            <param name="path">Path to the file</param>
            <returns>Version string in the "#.#.#.#" format, or an empty string if the file
            does not contain version information</returns>
            <exception cref="T:System.IO.FileNotFoundException">the file does not exist or could not be read</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.FileLanguage(System.String)">
            <summary>
            Gets the language string of the path specified using the format that the installer
            expects to find them in in the database.
            </summary>
            <param name="path">Path to the file</param>
            <returns>Language string in the form of a decimal language ID, or an empty string if the file
            does not contain a language ID</returns>
            <exception cref="T:System.IO.FileNotFoundException">the file does not exist or could not be read</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.FileSize(System.String)">
            <summary>
            Gets the size of the specified file.
            </summary>
            <param name="path">Path to the file</param>
            <returns>Size of the file</returns>
            <exception cref="T:System.IO.FileNotFoundException">the file does not exist</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.FileHash(System.String)">
            <summary>
            Gets a 128-bit hash of the specified file.
            </summary>
            <param name="path">Path to the file</param>
            <returns>
            The values returned in the Record object correspond to the four 32-bit parts of
            the file hash. The numbering of the four fields is 1-based. Field 1 corresponds to the
            HashPart1 column of the MsiFileHash table, field 2 corresponds to the HashPart2 column,
            field 3 corresponds to the HashPart3 column, and field 4 corresponds to the HashPart4 column.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">the file does not exist or could not be read</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.SummaryInformation(System.String,System.Int32)">
            <summary>
            Gets a SummaryInfo object that can be used to examine, update, and add
            properties to the summary information stream of a package or transform.
            </summary>
            <param name="packagePath">Path to the package (database) or transform</param>
            <param name="maxProperties">Maximum number of properties to be added or modified.
            Used solely to allocate sufficient working memory during the stream generation.
            It is not required to actually store this number of properties. A value of zero prevents
            the stream from being updated and must be used if the database is opened as read-only.</param>
            <returns>SummaryInfo object allowing access to the summary information stream of the package or transform</returns>
            <exception cref="T:System.IO.FileNotFoundException">the package does not exist or could not be read</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the package is an invalid format</exception>
            <remarks>
            If a value of maxProperties greater than 0 is used to open an existing summary information
            stream, the <see cref="M:Microsoft.WindowsInstaller.SummaryInfo.Persist"/> method must be called before closing the object.
            Failing to do this will lose the existing stream information.
            <para>The returned SummaryInfo object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.OpenDatabase(System.String,Microsoft.WindowsInstaller.DatabaseOpenMode)">
            <summary>
            Opens an existing database or creates a new one, returning a Database object.
            </summary>
            <param name="filePath">Path to the database file. If an empty string
            is supplied, a temporary database is created that is not persisted.</param>
            <param name="mode">Open mode for the database</param>
            <returns>Database object representing the created or opened database</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the database could not be created/opened</exception>
            <remarks>
            To make and save changes to a database first open the database in transaction,
            create or, or direct mode. After making the changes, always call the Commit method
            before closing the database handle. The Commit method flushes all buffers.
            <para>Always call the Commit method on a database that has been opened in direct
            mode before closing the database. Failure to do this may corrupt the database.</para>
            <para>Because this method initiates database access, it cannot be used with a
            running installation.</para>
            <para>The returned Database object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.OpenDatabase(System.String,System.String)">
            <summary>
            Opens an existing database with another database as output.
            </summary>
            <param name="filePath">Path to the database to be read.</param>
            <param name="outputPath">Open mode for the database</param>
            <returns>Database object representing the created or opened database</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the database could not be created/opened</exception>
            <remarks>
            When a database is opened as the output of another database, the summary information stream
            of the output database is actually a read-only mirror of the original database and thus cannot
            be changed. Additionally, it is not persisted with the database. To create or modify the
            summary information for the output database it must be closed and re-opened.
            <para>The returned Database object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ComponentClients(System.String)">
            <summary>
            Gets the set of client products of a specified component.
            </summary>
            <param name="componentCode">A GUID that represents the component code of the component.
            The component codes are specified in the ComponentId column of the Component table.</param>
            <returns>An array of client product codes</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            Because clients are not ordered, any new component has an arbitrary index.
            This means that the function may return clients in any order.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ComponentState(System.String,System.String)">
            <summary>
            Gets the installed state of a component in a product.
            </summary>
            <param name="productCode">product code of the product</param>
            <param name="componentCode">component id of the component to be queried</param>
            <returns>the installed state of the component</returns>
            <remarks>
            The ComponentState function might return <see cref="F:Microsoft.WindowsInstaller.InstallState.Absent"/> or
            <see cref="F:Microsoft.WindowsInstaller.InstallState.Unknown"/>, for the following reasons:<list type="bullet">
            <item>Absent: the application did not properly ensure that the feature was installed by calling
            UseFeature and, if necessary, ConfigureFeature.</item>
            <item>Unknown: the feature is not published. The application should have determined this
            earlier by calling <see cref="M:Microsoft.WindowsInstaller.Installer.FeatureState(System.String,System.String)"/> or <see cref="M:Microsoft.WindowsInstaller.Installer.Features(System.String)"/>. The application makes
            these calls while it initializes. An application should only use features that are known to be
            published. Since Unknown should have been returned by <see cref="M:Microsoft.WindowsInstaller.Installer.UseFeature(System.String,System.String,Microsoft.WindowsInstaller.InstallMode)"/> as well, either
            UseFeature was not called, or its return value was not properly checked.</item></list>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ComponentPath(System.String,System.String)">
            <summary>
            Gets the full path to an installed component. If the key path for the component is a
            registry key then the registry key is returned.
            </summary>
            <param name="productCode">product code of the client product</param>
            <param name="componentCode">component ID of the component to be located</param>
            <returns>file or registry keypath to the component</returns>
            <exception cref="T:System.ArgumentException">An unknown product or component was specified</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            If the component is a registry key, the registry roots are represented numerically.
            For example, a registry path of "HKEY_CURRENT_USER\SOFTWARE\Microsoft" would be returned
            as "01:\SOFTWARE\Microsoft". The registry roots returned are defined as follows:
            HKEY_CLASSES_ROOT=00, HKEY_CURRENT_USER=01, HKEY_LOCAL_MACHINE=02, HKEY_USERS=03,
            HKEY_PERFORMANCE_DATA=04
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ComponentQualifiers(System.String)">
            <summary>
            Gets the set of registered qualifiers for the specified component.
            </summary>
            <param name="componentCode">A GUID that represents the category of component.</param>
            <returns>A dictionary object containing qualifiers and descriptions. The keys in the
            dictionary are the qualifier names, while the values are the application-specified
            data about the qualifiers.</returns>
            <exception cref="T:System.ArgumentException">An unknown category was specified</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            Because qualifiers are not ordered, any new qualifier has an arbitrary index,
            meaning the function can return qualifiers in any order.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.Features(System.String)">
            <summary>
            Gets the set of published features for the specified product.
            </summary>
            <param name="productCode">The product code of the product.</param>
            <returns>Array of published features for the product.</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            Because features are not ordered, any new feature has an arbitrary index, meaning the
            function can return features in any order. 
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.FeatureState(System.String,System.String)">
            <summary>
            Gets the installed state of a feature of a product.
            </summary>
            <param name="productCode">The product code of the product that contains the feature.</param>
            <param name="feature">The feature.</param>
            <returns>The installed state of the feature.</returns>
            <remarks>
            The FeatureState property does not validate that the feature is accessible.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.UseFeature(System.String,System.String,Microsoft.WindowsInstaller.InstallMode)">
            <summary>
            increments the usage count for a particular feature and returns the installation state for
            that feature. This method should be used to indicate an application's intent to use a feature.
            </summary>
            <param name="productCode">The product code of the product.</param>
            <param name="feature">The feature to be used.</param>
            <param name="installMode">Must have the value <see cref="F:Microsoft.WindowsInstaller.InstallMode.NoDetection"/>.</param>
            <returns>The installed state of the feature.</returns>
            <remarks>
            The UseFeature method should only be used on features known to be published. The application
            should determine the status of the feature by calling either the FeatureState method or
            Features method.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetShortcutTarget(System.String)">
            <summary>
            Examines a shortcut and returns its product, feature name, and component if available.
            </summary>
            <param name="shortcut">Full path to a shortcut</param>
            <returns>ShortcutTarget structure containing target product code, feature, and component code</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetRelatedProducts(System.String)">
            <summary>
            Gets the set of all products with a specified upgrade code. This method lists the
            currently installed and advertised products that have the specified UpgradeCode
            property in their Property table.
            </summary>
            <param name="upgradeCode">Upgrade code of related products</param>
            <returns>Array of product codes</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetProductCode(System.String)">
            <summary>
            Gets the product code of an application by using the component code of an installed
            or advertised component of the application. During initialization, an application
            must determine under which product code it has been installed or advertised.
            </summary>
            <param name="component">Component code of a component that has been installed by the
            application. This will be typically the component code of the component containing
            the executable file of the application. </param>
            <returns>Product code that installed the component</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ProductInfo(System.String,Microsoft.WindowsInstaller.InstallProperty)">
            <summary>
            Gets the value of the specified attribute for an installed or published product.
            </summary>
            <param name="productCode">Product code of the installed product that contains the attribute of interest</param>
            <param name="productProperty">The attribute to be retrieved</param>
            <returns>The value of the specified attribute</returns>
            <exception cref="T:System.ArgumentException">An unknown product was requested</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ProductState(System.String)">
            <summary>
            Gets the installed state of a product.
            </summary>
            <param name="productCode">The product code of the product.</param>
            <returns>The installed state of the product.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.Patches(System.String)">
            <summary>
            Gets the set of all the patches applied to a product.
            </summary>
            <param name="productCode">The product code</param>
            <returns>An array of GUID patch codes that identify the patches applied to the product</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.PatchInfo(System.String,Microsoft.WindowsInstaller.InstallProperty)">
            <summary>
            Gets information about a patch.
            </summary>
            <param name="patchCode">The patch code for the patch</param>
            <param name="patchProperty">The patch attribute to be retrieved</param>
            <returns>The value of the specified attribute</returns>
            <exception cref="T:System.ArgumentException">An unknown patch was requested</exception>
            <exception cref="T:System.ArgumentException">An unknown patch property was requested</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            The only patch property currently defined is <see cref="P:Microsoft.WindowsInstaller.InstallProperty.LocalPackage"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.OpenPackage(System.String,System.Boolean)">
            <summary>
            Opens an installer package for use with functions that access the product database and install engine,
            returning an Session object.
            </summary>
            <param name="packagePath">Path to the package</param>
            <param name="ignoreMachineState">Specifies whether or not the create a Session object that ignores the
            computer state and that is incapable of changing the current computer state. A value of false yields
            the normal behavior.  A value of true creates a "safe" Session object that cannot change of the current
            machine state.</param>
            <returns>A Session object allowing access to the product database and install engine</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The product could not be opened</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            Note that only one Session object can be opened by a single process. OpenPackage cannot be used in a
            custom action because the active installation is the only session allowed.
            <para>A "safe" Session object ignores the current computer state when opening the package and prevents
            changes to the current computer state.</para>
            <para>The returned Session object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.OpenPackage(Microsoft.WindowsInstaller.Database,System.Boolean)">
            <summary>
            Opens an installer package for use with functions that access the product database and install engine,
            returning an Session object.
            </summary>
            <param name="database">Database used to create the session</param>
            <param name="ignoreMachineState">Specifies whether or not the create a Session object that ignores the
            computer state and that is incapable of changing the current computer state. A value of false yields
            the normal behavior.  A value of true creates a "safe" Session object that cannot change of the current
            machine state.</param>
            <returns>A Session object allowing access to the product database and install engine</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The product could not be opened</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            Note that only one Session object can be opened by a single process. OpenPackage cannot be used in a
            custom action because the active installation is the only session allowed.
            <para>A "safe" Session object ignores the current computer state when opening the package and prevents
            changes to the current computer state.</para>
            <para>The returned Session object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.OpenProduct(System.String)">
            <summary>
            Opens an installer package for an installed product using the product code.
            </summary>
            <param name="productCode">Product code of the installed product</param>
            <returns>A Session object allowing access to the product database and install engine</returns>
            <exception cref="T:System.ArgumentException">An unknown product was requested</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The product could not be opened</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
            <remarks>
            Note that only one Session object can be opened by a single process. OpenProduct cannot be
            used in a custom action because the active installation is the only session allowed.
            <para>The returned Session object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.AddSource(System.String,System.String,System.String)">
            <summary>
            Adds a source to the list of valid network sources in the source list for a product.
            </summary>
            <param name="productCode">Product code of the source list</param>
            <param name="userName">User name for per-user installation, or null for per-machine installation</param>
            <param name="source">Specifies the source to be added</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ClearSourceList(System.String,System.String)">
            <summary>
            Removes all network sources from the source list for a product.
            </summary>
            <param name="productCode">Product code of the source list</param>
            <param name="userName">User name for per-user installation, or null for per-machine installation</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ForceSourceListResolution(System.String,System.String)">
            <summary>
            Forces the installer to search the source list for a valid product source the next time a
            source is needed, such as when the installer performs an installation or a reinstallation,
            or when it needs the path for a component set to run from source.
            </summary>
            <param name="productCode">Product code of the source list.</param>
            <param name="userName">User name for per-user installation, or null for per-machine installation</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetFeatureUsage(System.String,System.String)">
            <summary>
            Gets the usage metrics for a product feature.
            </summary>
            <param name="product">Product code for the product containing the feature</param>
            <param name="feature">Feature name for the feature for which metrics are to be returned</param>
            <returns>FeatureUsageData structure containing the use count and last-used date</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.CollectUserInfo(System.String)">
            <summary>
            Obtains and stores the user information and product ID from an installation wizard.
            </summary>
            <param name="productCode">Product code of the product for which the user information is collected</param>
            <remarks>
            This method is typically called by an application during the first run of the application. The application
            first calls <see cref="M:Microsoft.WindowsInstaller.Installer.ProductInfo(System.String,Microsoft.WindowsInstaller.InstallProperty)"/> with <see cref="P:Microsoft.WindowsInstaller.InstallProperty.ProductID"/> or
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.RegOwner"/>. If that call fails, the application calls CollectUserInfo.
            CollectUserInfo opens the product's installation package and invokes a wizard sequence that collects
            user information. Upon completion of the sequence, user information is registered. Since this API requires
            an authored user interface, the user interface level should be set to full by calling <see cref="M:Microsoft.WindowsInstaller.Installer.SetInternalUI(Microsoft.WindowsInstaller.InstallUILevel,System.IntPtr@)"/>
            as <see cref="F:Microsoft.WindowsInstaller.InstallUILevel.Full"/>.
            <p>The CollectUserInfo method invokes a FirstRun dialog from the product installation database.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.VerifyPackage(System.String)">
            <summary>
            Verifies that the given file is an installation package.
            </summary>
            <param name="packagePath">Path to the package</param>
            <returns>True if the file is an installation package; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.IsProductElevated(System.String)">
            <summary>
            Checks whether the product is installed with elevated privileges. An application is called
            a "managed application" if elevated (system) privileges are used to install the application.
            </summary>
            <param name="productCode">Product code of the product</param>
            <returns>True if the product is elevated; false otherwise</returns>
            <remarks>
            Note that this method does not take into account policies such as AlwaysInstallElevated,
            but verifies that the local system owns the product's registry data.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.AdvertiseProduct(System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Advertises a product to the local computer.
            </summary>
            <param name="packagePath">Path to the package of the product being advertised</param>
            <param name="perUser">True if the product is user-assigned; false if it is machine-assigned.</param>
            <param name="transforms">Semi-colon delimited list of transforms to be applied. This parameter may be null.</param>
            <param name="locale">The language to use if the source supports multiple languages</param>
            <seealso cref="M:Microsoft.WindowsInstaller.Installer.GenerateAdvertiseScript(System.String,System.String,System.String,System.Int32)"/>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GenerateAdvertiseScript(System.String,System.String,System.String,System.Int32)">
            <summary>
            Generates an advertise script. The method enables the installer to write to a 
            script the registry and shortcut information used to assign or publish a product.
            </summary>
            <param name="packagePath">Path to the package of the product being advertised</param>
            <param name="scriptFilePath">path to script file to be created with the advertise information</param>
            <param name="transforms">Semi-colon delimited list of transforms to be applied. This parameter may be null.</param>
            <param name="locale">The language to use if the source supports multiple languages</param>
            <seealso cref="M:Microsoft.WindowsInstaller.Installer.AdvertiseProduct(System.String,System.Boolean,System.String,System.Int32)"/>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GenerateAdvertiseScript(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Generates an advertise script. The method enables the installer to write to a 
            script the registry and shortcut information used to assign or publish a product.
            </summary>
            <param name="packagePath">Path to the package of the product being advertised</param>
            <param name="scriptFilePath">path to script file to be created with the advertise information</param>
            <param name="transforms">Semi-colon delimited list of transforms to be applied. This parameter may be null.</param>
            <param name="locale">The language to use if the source supports multiple languages</param>
            <param name="platform">Platform identifier: 1=x86, 2=ia64, 4=amd64</param>
            <seealso cref="M:Microsoft.WindowsInstaller.Installer.AdvertiseProduct(System.String,System.Boolean,System.String,System.Int32)"/>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GenerateAdvertiseScript(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Generates an advertise script. The method enables the installer to write to a 
            script the registry and shortcut information used to assign or publish a product.
            </summary>
            <param name="packagePath">Path to the package of the product being advertised</param>
            <param name="scriptFilePath">path to script file to be created with the advertise information</param>
            <param name="transforms">Semi-colon delimited list of transforms to be applied. This parameter may be null.</param>
            <param name="locale">The language to use if the source supports multiple languages</param>
            <param name="platform">Platform identifier: 1=x86, 2=ia64, 4=amd64</param>
            <param name="multiInstance">Advertises a new instance of the product. Requires that the
            <paramref name="transforms"/> parameter includes the instance transform that changes
            the product code.</param>
            <seealso cref="M:Microsoft.WindowsInstaller.Installer.AdvertiseProduct(System.String,System.Boolean,System.String,System.Int32)"/>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.AdvertiseScript(System.String,System.Int32,System.Boolean)">
            <summary>
            Copies an advertise script file to the local computer.
            </summary>
            <param name="scriptFile">Path to a script file generated by <see cref="M:Microsoft.WindowsInstaller.Installer.GenerateAdvertiseScript(System.String,System.String,System.String,System.Int32)"/></param>
            <param name="flags">Flags controlling advertisement</param>
            <param name="removeItems">True if specified items are to be removed instead of being created</param>
            <remarks>
            The process calling this function must be running under the LocalSystem account. To advertise an
            application for per-user installation to a targeted user, the thread that calls this function must
            impersonate the targeted user. If the thread calling this function is not impersonating a targeted
            user, the application is advertised to all users for installation with elevated privileges.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ProcessAdvertiseScript(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Processes an advertise script file into the specified locations.
            </summary>
            <param name="scriptFile">Path to a script file generated by <see cref="M:Microsoft.WindowsInstaller.Installer.GenerateAdvertiseScript(System.String,System.String,System.String,System.Int32)"/></param>
            <param name="iconFolder">An optional path to a folder in which advertised icon files and transform
            files are located. If this parameter is null, no icon or transform files are written.</param>
            <param name="shortcuts">True if shortcuts should be created</param>
            <param name="removeItems">True if specified items are to be removed instead of created</param>
            <remarks>
            The process calling this function must be running under the LocalSystem account. To advertise an
            application for per-user installation to a targeted user, the thread that calls this function must
            impersonate the targeted user. If the thread calling this function is not impersonating a targeted
            user, the application is advertised to all users for installation with elevated privileges.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetProductInfoFromScript(System.String,Microsoft.WindowsInstaller.InstallProperty)">
            <summary>
            Gets product information for an installer script file.
            </summary>
            <param name="scriptFile">Path to a script file generated by <see cref="M:Microsoft.WindowsInstaller.Installer.GenerateAdvertiseScript(System.String,System.String,System.String,System.Int32)"/></param>
            <param name="productProperty">The product property requested.  Possible values are
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.ProductCode"/>, <see cref="P:Microsoft.WindowsInstaller.InstallProperty.Language"/>,
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.VersionString"/>, <see cref="P:Microsoft.WindowsInstaller.InstallProperty.ProductName"/>,
            or <see cref="P:Microsoft.WindowsInstaller.InstallProperty.PackageName"/>.</param>
            <returns>Requested product information value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">An invalid product property was requested</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ProvideComponent(System.String,System.String,System.String,Microsoft.WindowsInstaller.InstallMode)">
            <summary>
            Gets the full component path, performing any necessary installation. This method prompts for source if
            necessary and increments the usage count for the feature.
            </summary>
            <param name="product">Product code for the product that contains the feature with the necessary component</param>
            <param name="feature">Feature ID of the feature with the necessary component</param>
            <param name="component">Component code of the necessary component</param>
            <param name="installMode">Installation mode; this can also include bits from <see cref="T:Microsoft.WindowsInstaller.ReinstallModes"/></param>
            <returns>Path to the component</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ProvideQualifiedComponent(System.String,System.String,Microsoft.WindowsInstaller.InstallMode,System.String)">
            <summary>
            Gets the full component path for a qualified component that is published by a product and
            performs any necessary installation. This method prompts for source if necessary and increments
            the usage count for the feature.
            </summary>
            <param name="component">Specifies the component ID for the requested component. This may not be the
            GUID for the component itself but rather a server that provides the correct functionality, as in the
            ComponentId column of the PublishComponent table.</param>
            <param name="qualifier">Specifies a qualifier into a list of advertising components (from PublishComponent Table).</param>
            <param name="installMode">Installation mode; this can also include bits from <see cref="T:Microsoft.WindowsInstaller.ReinstallModes"/></param>
            <param name="product">Optional; specifies the product to match that has published the qualified component.</param>
            <returns>Path to the component</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ProvideAssembly(System.String,System.String,Microsoft.WindowsInstaller.InstallMode,System.Boolean)">
            <summary>
            Gets the full path to a Windows Installer component containing an assembly. This method prompts for a source and
            increments the usage count for the feature.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="appContext">Set to null for global assemblies. For private assemblies, set to the full path of the
            application configuration file (.cfg file) or executable file (.exe) of the application to which the assembly
            has been made private.</param>
            <param name="installMode">Installation mode; this can also include bits from <see cref="T:Microsoft.WindowsInstaller.ReinstallModes"/></param>
            <param name="isWin32Assembly">True if this is a Win32 assembly, false if it is a .NET assembly</param>
            <returns>Path to the assembly</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.InstallMissingComponent(System.String,System.String,Microsoft.WindowsInstaller.InstallState)">
            <summary>
            Installs files that are unexpectedly missing.
            </summary>
            <param name="product">Product code for the product that owns the component to be installed</param>
            <param name="component">Component to be installed</param>
            <param name="installState">Specifies the way the component should be installed.</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.InstallMissingFile(System.String,System.String)">
            <summary>
            Installs files that are unexpectedly missing.
            </summary>
            <param name="product">Product code for the product that owns the file to be installed</param>
            <param name="file">File to be installed</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.LocateComponent(System.String)">
            <summary>
            Gets the full path to an installed component without a product code. This method attempts to
            determine the product using <see cref="M:Microsoft.WindowsInstaller.Installer.GetProductCode(System.String)"/>, but is not guaranteed to find the
            correct product for the caller. <see cref="M:Microsoft.WindowsInstaller.Installer.ComponentPath(System.String,System.String)"/> should always be called when possible.
            </summary>
            <param name="component">Component ID of the component to be located</param>
            <returns>Path to the installed component, or null if the component is not installed (absent) or disabled</returns>
            <exception cref="T:System.ArgumentException">An unknown or unpublished component was specified</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The component is installed to run from source, but the source could not be located</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ReinstallFeature(System.String,System.String,Microsoft.WindowsInstaller.ReinstallModes)">
            <summary>
            Reinstalls a feature.
            </summary>
            <param name="product">Product code for the product containing the feature to be reinstalled</param>
            <param name="feature">Feature to be reinstalled</param>
            <param name="reinstallModes">Reinstall modes</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ReinstallProduct(System.String,Microsoft.WindowsInstaller.ReinstallModes)">
            <summary>
            Reinstalls a product.
            </summary>
            <param name="product">Product code for the product to be reinstalled</param>
            <param name="reinstallModes">Reinstall modes</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.InstallProduct(System.String,System.String)">
            <summary>
            Opens an installer package and initializes an install session.
            </summary>
            <param name="packagePath">path to the patch package</param>
            <param name="commandLine">command line property settings</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">There was an error installing the product</exception>
            <remarks>
            To completely remove a product, set REMOVE=ALL in <paramRef name="commandLine"/>.
            <p>This method displays the user interface with the current settings and
            log mode. You can change user interface settings with the <see cref="M:Microsoft.WindowsInstaller.Installer.SetInternalUI(Microsoft.WindowsInstaller.InstallUILevel,System.IntPtr@)"/>
            and <see cref="M:Microsoft.WindowsInstaller.Installer.SetExternalUI(Microsoft.WindowsInstaller.ExternalUIHandler,Microsoft.WindowsInstaller.InstallLogModes,System.Object)"/> functions. You can set the log mode with the
            <see cref="M:Microsoft.WindowsInstaller.Installer.EnableLog(Microsoft.WindowsInstaller.InstallLogModes,System.String)"/> function.</p>
            <p>The <see cref="P:Microsoft.WindowsInstaller.Installer.RebootRequired"/> and <see cref="P:Microsoft.WindowsInstaller.Installer.RebootInitiated"/> properties should be
            tested after calling this method.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ConfigureProduct(System.String,System.Int32,Microsoft.WindowsInstaller.InstallState,System.String)">
            <summary>
            Installs or uninstalls a product.
            </summary>
            <param name="productCode">Product code of the product to be configured.</param>
            <param name="installLevel">Specifies the default installation configuration of the
            product. The <paramref name="installLevel"/> parameter is ignored and all features
            are installed if the <paramref name="installState"/> parameter is set to any other
            value than <see cref="F:Microsoft.WindowsInstaller.InstallState.Default"/>. This parameter must be either 0
            (install using authored feature levels), 65535 (install all features), or a value
            between 0 and 65535 to install a subset of available features.																																											   </param>
            <param name="installState">Specifies the installation state for the product.</param>
            <param name="commandLine">Specifies the command line property settings. This should
            be a list of the format Property=Setting Property=Setting.</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">There was an error configuring the product</exception>
            <remarks>
            This method displays the user interface with the current settings and
            log mode. You can change user interface settings with the <see cref="M:Microsoft.WindowsInstaller.Installer.SetInternalUI(Microsoft.WindowsInstaller.InstallUILevel,System.IntPtr@)"/>
            and <see cref="M:Microsoft.WindowsInstaller.Installer.SetExternalUI(Microsoft.WindowsInstaller.ExternalUIHandler,Microsoft.WindowsInstaller.InstallLogModes,System.Object)"/> functions. You can set the log mode with the
            <see cref="M:Microsoft.WindowsInstaller.Installer.EnableLog(Microsoft.WindowsInstaller.InstallLogModes,System.String)"/> function.
            <p>The <see cref="P:Microsoft.WindowsInstaller.Installer.RebootRequired"/> and <see cref="P:Microsoft.WindowsInstaller.Installer.RebootInitiated"/> properties should be
            tested after calling this method.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ConfigureFeature(System.String,System.String,Microsoft.WindowsInstaller.InstallState)">
            <summary>
            Configures the installed state for a product feature.
            </summary>
            <param name="productCode">Product code of the product to be configured.</param>
            <param name="feature">Specifies the feature ID for the feature to be configured.</param>
            <param name="installState">Specifies the installation state for the feature.</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">There was an error configuring the feature</exception>
            <remarks>
            The <see cref="P:Microsoft.WindowsInstaller.Installer.RebootRequired"/> and <see cref="P:Microsoft.WindowsInstaller.Installer.RebootInitiated"/> properties should be
            tested after calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ApplyPatch(System.String,System.String)">
            <summary>
            For each product listed by the patch package as eligible to receive the patch, ApplyPatch invokes
            an installation and sets the PATCH property to the path of the patch package.
            </summary>
            <param name="patchPackage">path to the patch package</param>
            <param name="commandLine">optional command line property settings</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">There was an error applying the patch</exception>
            <remarks>
            The <see cref="P:Microsoft.WindowsInstaller.Installer.RebootRequired"/> and <see cref="P:Microsoft.WindowsInstaller.Installer.RebootInitiated"/> properties should be
            tested after calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ApplyPatch(System.String,System.String,Microsoft.WindowsInstaller.InstallType,System.String)">
            <summary>
            For each product listed by the patch package as eligible to receive the patch, ApplyPatch invokes
            an installation and sets the PATCH property to the path of the patch package.
            </summary>
            <param name="patchPackage">path to the patch package</param>
            <param name="installPackage">path to the product to be patched, if installType
            is set to <see cref="F:Microsoft.WindowsInstaller.InstallType.NetworkImage"/></param>
            <param name="installType">type of installation to patch</param>
            <param name="commandLine">optional command line property settings</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">There was an error applying the patch</exception>
            <remarks>
            The <see cref="P:Microsoft.WindowsInstaller.Installer.RebootRequired"/> and <see cref="P:Microsoft.WindowsInstaller.Installer.RebootInitiated"/> properties should be
            tested after calling this method.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetErrorMessage(System.Int32)">
            <summary>
            Gets a Windows Installer error message in the system default language.
            </summary>
            <param name="errorNumber">The error number.</param>
            <returns>The message string, or null if the error message is not found.</returns>
            <remarks>
            The returned string may have tokens such as [2] and [3] that are meant to be substituted
            with context-specific values.
            <para>Error numbers greater than 2000 refer to MSI "internal" errors, and are always
            returned in English.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetErrorMessage(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Gets a Windows Installer error message in a specified language.
            </summary>
            <param name="errorNumber">The error number.</param>
            <param name="culture">The locale for the message.</param>
            <returns>The message string, or null if the error message or locale is not found.</returns>
            <remarks>
            The returned string may have tokens such as [2] and [3] that are meant to be substituted
            with context-specific values.
            <para>Error numbers greater than 2000 refer to MSI "internal" errors, and are always
            returned in English.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetErrorMessage(Microsoft.WindowsInstaller.Record)">
            <summary>
            Gets a formatted Windows Installer error message in the system default language.
            </summary>
            <param name="errorRecord">Error record containing the error number in the first field, and
            error-specific parameters in the other fields.</param>
            <returns>The message string, or null if the error message is not found.</returns>
            <remarks>
            Error numbers greater than 2000 refer to MSI "internal" errors, and are always
            returned in English.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetErrorMessage(Microsoft.WindowsInstaller.Record,System.Globalization.CultureInfo)">
            <summary>
            Gets a formatted Windows Installer error message in a specified language.
            </summary>
            <param name="errorRecord">Error record containing the error number in the first field, and
            error-specific parameters in the other fields.</param>
            <param name="culture">The locale for the message.</param>
            <returns>The message string, or null if the error message or locale is not found.</returns>
            <remarks>
            Error numbers greater than 2000 refer to MSI "internal" errors, and are always
            returned in English.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.RemovePatches(System.String[],System.String,System.String)">
            <summary>
            [MSI 3.0] Removes one or more patches from a single product. To remove a patch from
            multiple products, RemovePatches must be called for each product.
            </summary>
            <param name="patches">List of patches to remove. Each patch can be specified by the GUID
            of the patch or the full path to the patch package.</param>
            <param name="productCode">The ProductCode (GUID) of the product from which the patches
            are removed.  This parameter cannot be null.</param>
            <param name="commandLine">optional command line property settings</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">There was an error removing the patches</exception>
            <remarks>
            Available beginning with Windows Installer version 3.0.
            <para>The <see cref="P:Microsoft.WindowsInstaller.Installer.RebootRequired"/> and <see cref="P:Microsoft.WindowsInstaller.Installer.RebootInitiated"/> properties should be
            tested after calling this method.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.DetermineApplicablePatches(System.String,System.String[],Microsoft.WindowsInstaller.InapplicablePatchHandler,System.Object)">
            <summary>
            [MSI 3.0] Determines which patches apply to a specified product MSI and in what sequence.
            </summary>
            <param name="productPackage">Full path to an MSI file that is the target product
            for the set of patches.</param>
            <param name="patches">An array of strings specifying the patches to be checked.  Each item
            may be the path to an MSP file, the path an XML file, or just an XML blob.</param>
            <param name="errorHandler">Callback to be invoked for each inapplicable patch, reporting the
            reason the patch is not applicable.  This value may be left null if that information is not
            desired.</param>
            <param name="errorContext">Optional user context data to be passed to the callback.</param>
            <returns>An array of selected patch strings from <paramref name="patches"/>, indicating
            the set of applicable patches.  The items are re-ordered to be in the best sequence.</returns>
            <remarks>
            Available beginning with Windows Installer version 3.0.
            <para>If an item in <paramref name="patches"/> is a file path but does not end in .MSP or .XML,
            it is assumed to be an MSP file.</para>
            <para>As this overload uses InstallContext.None, it does not consider the current state of
            the system.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.DetermineApplicablePatches(System.String,System.String[],Microsoft.WindowsInstaller.InapplicablePatchHandler,System.Object,System.String,Microsoft.WindowsInstaller.InstallContext)">
            <summary>
            [MSI 3.0] Determines which patches apply to a specified product and in what sequence.  If
            the product is installed, this method accounts for patches that have already been applied to
            the product and accounts for obsolete and superceded patches.
            </summary>
            <param name="product">The product that is the target for the set of patches.  This may be
            either a ProductCode (GUID) of a product that is currently installed, or the path to a an
            MSI file.</param>
            <param name="patches">An array of strings specifying the patches to be checked.  Each item
            may be the path to an MSP file, the path an XML file, or just an XML blob.</param>
            <param name="errorHandler">Callback to be invoked for each inapplicable patch, reporting the
            reason the patch is not applicable.  This value may be left null if that information is not
            desired.</param>
            <param name="errorContext">Optional user context data to be passed to the callback.</param>
            <param name="userSid">Specifies a security identifier (SID) of a user. This parameter restricts
            the context of enumeration for this user account. This parameter cannot be the special SID
            strings s-1-1-0 (everyone) or s-1-5-18 (local system). If <paramref name="installContext"/> is set to
            <see cref="F:Microsoft.WindowsInstaller.InstallContext.None"/> or <see cref="F:Microsoft.WindowsInstaller.InstallContext.Machine"/>, then
            <paramref name="userSid"/> must be null. For the current user context, <paramref name="userSid"/>
            can be null and <paramref name="installContext"/> can be set to <see cref="F:Microsoft.WindowsInstaller.InstallContext.UserManaged"/>
            or <see cref="F:Microsoft.WindowsInstaller.InstallContext.UserUnmanaged"/>.</param>
            <param name="installContext">Restricts the enumeration to a per-user-unmanaged, per-user-managed,
            or per-machine context, or (if referring to an MSI) to no system context at all.  This
            parameter can be <see cref="F:Microsoft.WindowsInstaller.InstallContext.Machine"/>, <see cref="F:Microsoft.WindowsInstaller.InstallContext.UserManaged"/>,
            <see cref="F:Microsoft.WindowsInstaller.InstallContext.UserUnmanaged"/>, or <see cref="F:Microsoft.WindowsInstaller.InstallContext.None"/>.</param>
            <returns>An array of selected patch strings from <paramref name="patches"/>, indicating
            the set of applicable patches.  The items are re-ordered to be in the best sequence.</returns>
            <remarks>
            Available beginning with Windows Installer version 3.0.
            <para>If an item in <paramref name="patches"/> is a file path but does not end in .MSP or .XML,
            it is assumed to be an MSP file.</para>
            <para>Passing an InstallContext of None only analyzes the MSI file; it does not consider the
            current state of the system. You cannot use InstallContext.None with a ProductCode GUID.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ApplyMultiplePatches(System.String[],System.String,System.String)">
            <summary>
            [MSI 3.0] Applies one or more patches to products that are eligible to receive the patch.
            For each product listed by the patch package as eligible to receive the patch, ApplyPatch invokes
            an installation and sets the PATCH property to the path of the patch package.
            </summary>
            <param name="patchPackages">The set of patch packages to be applied.
            Each item is the full path to an MSP file.</param>
            <param name="productCode">Provides the ProductCode of the product being patched. If this parameter
            is null, the patches are applied to all products that are eligible to receive these patches.</param>
            <param name="commandLine">optional command line property settings</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetPatches(System.String,System.String,Microsoft.WindowsInstaller.InstallContext)">
            <summary>
            [MSI 3.0] Gets an array of Patch objects.
            </summary>
            <param name="productCode">ProductCode (GUID) of the product to be enumerated. Only
            instances of products within the scope of the context specified by the
            <paramref name="userSid"/> and <paramref name="installContext"/> parameters will be
            enumerated. This parameter may be set to null to enumerate all products in the specified
            context.</param>
            <param name="userSid">Specifies a security identifier (SID) that restricts the context
            of enumeration. A SID value other than s-1-1-0 is considered a user SID and restricts
            enumeration to the current user or any user in the system. The special SID string
            s-1-1-0 (Everyone) specifies enumeration across all users in the system. This parameter
            can be set to null to restrict the enumeration scope to the current user. When
            <paramref name="installContext"/> is set to the machine context only,
            <paramref name="userSid"/> must be null.</param>
            <param name="installContext">Specifies the user context.</param>
            <returns>An array of patch objects for patches found on the enumerated products.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.GetProducts(System.String,System.String,Microsoft.WindowsInstaller.InstallContext)">
            <summary>
            [MSI 3.0] Gets an array of Product objects.
            </summary>
            <param name="productCode">ProductCode (GUID) of the product instances to be enumerated. Only
            instances of products within the scope of the context specified by the
            <paramref name="userSid"/> and <paramref name="installContext"/> parameters will be
            enumerated. This parameter may be set to null to enumerate all products in the specified
            context.</param>
            <param name="userSid">Specifies a security identifier (SID) that restricts the context
            of enumeration. A SID value other than s-1-1-0 is considered a user SID and restricts
            enumeration to the current user or any user in the system. The special SID string
            s-1-1-0 (Everyone) specifies enumeration across all users in the system. This parameter
            can be set to null to restrict the enumeration scope to the current user. When
            <paramref name="installContext"/> is set to the machine context only,
            <paramref name="userSid"/> must be null.</param>
            <param name="installContext">Specifies the user context.</param>
            <returns>An array of product objects for enumerated product instances.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Installer.ExtractPatchXmlData(System.String)">
            <summary>
            Extracts information from a patch that can be used to determine whether the
            patch applies on a target system. The method returns an XML string that can
            be provided to <see cref="M:Microsoft.WindowsInstaller.Installer.DetermineApplicablePatches(System.String,System.String[],Microsoft.WindowsInstaller.InapplicablePatchHandler,System.Object)"/> instead of the full
            patch file.
            </summary>
            <param name="patchPath">Full path to the patch being queried.</param>
            <returns>XML string containing patch data.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Installer.Version">
            <summary>
            Gets the current version of the installer.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Installer.Components">
            <summary>
            Gets the set of installed components for all products.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Installer.Products">
            <summary>
            Gets the set of all products installed or advertised for the current user and machine.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Installer.RebootRequired">
            <summary>
            Indicates whether a system reboot is required after running an installation or configuration operation.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Installer.RebootInitiated">
            <summary>
            Indicates whether a system reboot has been initiated after running an installation or configuration operation.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InapplicablePatchHandler">
            <summary>
            [MSI 3.0] Receives an exception from <see cref="M:Microsoft.WindowsInstaller.Installer.DetermineApplicablePatches(System.String,System.String[],Microsoft.WindowsInstaller.InapplicablePatchHandler,System.Object)"/> indicating
            the reason a particular patch is not applicable to a product.
            </summary>
            <param name="patch">MSP file path, XML file path, or XML blob that was passed to 
            <see cref="M:Microsoft.WindowsInstaller.Installer.DetermineApplicablePatches(System.String,System.String[],Microsoft.WindowsInstaller.InapplicablePatchHandler,System.Object)"/></param>
            <param name="exception">exception indicating the reason the patch is not applicable</param>
            <param name="context">optional user context data</param>
            <remarks>
            If <paramref name="exception"/> is an <see cref="T:Microsoft.WindowsInstaller.InstallerException"/> or subclass, then
            its <see cref="P:Microsoft.WindowsInstaller.InstallerException.ErrorCode"/> and <see cref="P:Microsoft.WindowsInstaller.InstallerException.Message"/>
            properties will indicate a more specific reason the patch was not applicable.
            <para>The <paramref name="exception"/> could also be a FileNotFoundException if the
            patch string was a file path.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ExternalUIHandler">
            <summary>
            Defines a callback function that the installer calls for progress notification and error messages.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ShortcutTarget">
            <summary>
            Holds information about the target of a shortcut file.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ShortcutTarget.ProductCode">
            <summary>
            Gets the target product code of the shortcut, or null if not available.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ShortcutTarget.Feature">
            <summary>
            Gets the name of the target feature of the shortcut, or null if not available.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ShortcutTarget.ComponentCode">
            <summary>
            Gets the target component code of the shortcut, or null if not available.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.FeatureUsageData">
            <summary>
            Holds data about the usage of a feature.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.FeatureUsageData.UseCount">
            <summary>
            Gets count of the number of times the feature has been used.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.FeatureUsageData.LastUsedDate">
            <summary>
            Gets the date the feature was last used.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Instance">
            <summary>
            [MSI 3.0] Subclasses of this abstract class represent a unique instance of a
            registered product or patch.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Instance.SourceListAddMediaDisk(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a disk of the media source for the product or patch.
            </summary>
            <param name="diskId">ID of the disk being added or updated</param>
            <param name="volumeLabel">label of the disk being added or updated.
            An update overwrites the existing volume label in the registry.</param>
            <param name="diskPrompt">disk prompt of the disk being added or updated</param>
            <remarks>
            To change the disk prompt only, get the existing volume label from the
            registry and provide it in this call along with the new disk prompt.
            Passing a null or empty string for <paramref name="volumeLabel"/>
            registers an empty string as the volume label.
            <para>To change the volume label only, get the existing disk prompt
            that is registered and provide it when calling SourceListAddMediaDisk
            along with the new volume label. Passing null or an empty string
            registers an empty string as the disk prompt.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Instance.SourceListClearMediaDisk(System.Int32)">
            <summary>
            Removes a specified disk from the set of registered disks.
            </summary>
            <param name="diskId">ID of the disk to remove</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Instance.SourceListAddSource(System.String,Microsoft.WindowsInstaller.SourceType,System.Int32)">
            <summary>
            Adds or reorders a network or URL source for the product or patch.
            </summary>
            <param name="sourcePath">Path to the source to be added. This parameter is
            expected to contain only the path without the filename.</param>
            <param name="type">Type of source to be added:
            <see cref="F:Microsoft.WindowsInstaller.SourceType.Network"/> or <see cref="F:Microsoft.WindowsInstaller.SourceType.Url"/>.</param>
            <param name="index">Specifies the priority order in which the source
            will be inserted</param>
            <remarks>
            If SourceListAddSource is called with a new source and <paramref name="index"/>
            is set to 0, the installer adds the source to the end of the source list. 
            <para>If this method is called with a source already existing in the source
            list and <paramref name="index"/> is set to 0, the installer retains the
            source's existing index.</para>
            <para>If the method is called with an existing source in the source list
            and <paramref name="index"/> is set to a non-zero value, the source is
            removed from its current location in the list and inserted at the position
            specified by Index, before any source that already exists at that position.</para>
            <para>If the method is called with a new source and Index is set to a
            non-zero value, the source is inserted at the position specified by
            <paramref name="index"/>, before any source that already exists at
            that position. The index value for all sources in the list after the
            index specified by Index are updated to ensure unique index values and
            the pre-existing order is guaranteed to remain unchanged.</para>
            <para>If <paramref name="index"/> is greater than the number of sources
            in the list, the source is placed at the end of the list with an index
            value one larger than any existing source.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Instance.SourceListClearSource(System.String,Microsoft.WindowsInstaller.SourceType)">
            <summary>
            Removes a network or URL source.
            </summary>
            <param name="sourcePath">Path to the source to be removed</param>
            <param name="type">Type of source to be removed:
            <see cref="F:Microsoft.WindowsInstaller.SourceType.Network"/> or <see cref="F:Microsoft.WindowsInstaller.SourceType.Url"/>.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Instance.SourceListClearAll(Microsoft.WindowsInstaller.SourceType)">
            <summary>
            Clears the complete source list of all sources of the specified type. 
            </summary>
            <param name="type">Type of sources to be cleared, such as
            <see cref="F:Microsoft.WindowsInstaller.SourceType.Network"/>, <see cref="F:Microsoft.WindowsInstaller.SourceType.Url"/>, or
            <see cref="F:Microsoft.WindowsInstaller.SourceType.Media"/>.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Instance.SourceListForceResolution">
            <summary>
            Forces the installer to search the source list for a valid
            source the next time a source is required. For example, when the
            installer performs an installation or reinstallation, or when it
            requires the path for a component that is set to run from source.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Instance.UserSid">
            <summary>
            Gets the user security identifier (SID) under which this product or patch
            instance is available.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Instance.Context">
            <summary>
            Gets the user context of this product or patch instance.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Instance.Sources">
            <summary>
            Gets the sources in the source list of the patch or product instance.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Instance.MediaDisks">
            <summary>
            Gets the list of disks registered for the media source of
            the patch or product instance.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Instance.SourceListInfo">
            <summary>
            Accessor for getting and setting information about the
            source list for the product or patch.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.MediaDisk">
            <summary>
            Represents a media disk source of a product or a patch.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.MediaDisk.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new media disk.
            </summary>
            <param name="diskId"></param>
            <param name="volumeLabel"></param>
            <param name="diskPrompt"></param>
        </member>
        <member name="P:Microsoft.WindowsInstaller.MediaDisk.DiskId">
            <summary>
            Gets or sets the disk id of the media disk.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.MediaDisk.VolumeLabel">
            <summary>
            Gets or sets the volume label of the media disk.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.MediaDisk.DiskPrompt">
            <summary>
            Gets or sets the disk prompt of the media disk.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstanceSourceListProperties">
            <summary>
            Accessor for getting or setting source list properties of
            a product or patch instance.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstanceSourceListProperties.Item(Microsoft.WindowsInstaller.InstallProperty)">
            <summary>
            Accessor for getting or setting source list properties of
            a product or patch instance.
            </summary>
            <param name="sourceListProperty">Property to get or set.  One of the following values:
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.MediaPackagePath"/>, <see cref="P:Microsoft.WindowsInstaller.InstallProperty.DiskPrompt"/>,
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.LastUsedSource"/>, <see cref="P:Microsoft.WindowsInstaller.InstallProperty.PackageName"/>,
            or <see cref="P:Microsoft.WindowsInstaller.InstallProperty.LastUsedType"/>.
            </param>
            <remarks>
            The <see cref="P:Microsoft.WindowsInstaller.InstallProperty.LastUsedType"/> property can be retrieved but cannot be set.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Product">
            <summary>
            [MSI 3.0] Represents a unique instance of a product that
            is either advertised, installed or unknown.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Product.#ctor(System.String,System.String,Microsoft.WindowsInstaller.InstallContext)">
            <summary>
            [MSI 3.0] Creates a new Product object.
            </summary>
            <param name="productCode">ProductCode (GUID) of the product.</param>
            <param name="userSid">The specific user, when working in a user context.  This
            parameter may be null to indicate the current user.  The parameter must be null
            when working in a machine context.</param>
            <param name="context">The user context. The calling process must have administrative
            privileges to get information for a product installed for a user other than the
            current user.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Product.InstallProperty(Microsoft.WindowsInstaller.InstallProperty)">
            <summary>
            Gets information about a specific instance of a product. 
            </summary>
            <param name="productProperty"></param>
            <returns>The string value of the product property.</returns>
            <exception cref="T:System.ArgumentException">An unknown product was requested</exception>
            <exception cref="T:System.ArgumentException">An unknown product property was requested</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Product.FeatureState(System.String)">
            <summary>
            Gets the installed state for a product feature.
            </summary>
            <param name="feature">The feature being queried; identifier from the
            Feature table</param>
            <returns>Installation state of the feature for the product instance: either
            <see cref="F:Microsoft.WindowsInstaller.InstallState.Local"/>, <see cref="F:Microsoft.WindowsInstaller.InstallState.Source"/>,
            or <see cref="F:Microsoft.WindowsInstaller.InstallState.Advertised"/>.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Product.ComponentState(System.String)">
            <summary>
            Gets the installed state for a product component.
            </summary>
            <param name="component">The component being queried; GUID of the component
            as found in the ComponentID column of the Component table.</param>
            <returns>Installation state of the component for the product instance: either
            <see cref="F:Microsoft.WindowsInstaller.InstallState.Local"/> or <see cref="F:Microsoft.WindowsInstaller.InstallState.Source"/>.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Product.ProductCode">
            <summary>
            Gets the ProductCode (GUID) of the product.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Patch">
            <summary>
            [MSI 3.0] The Patch object represents a unique instance of a patch that has been
            registered or applied.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Patch.#ctor(System.String,System.String,System.String,Microsoft.WindowsInstaller.InstallContext)">
            <summary>
            [MSI 3.0] Creates a new Patch object.
            </summary>
            <param name="patchCode">Registered patch code (GUID) of the patch.</param>
            <param name="productCode">ProductCode (GUID) the patch has been applied to.
            This parameter may be null for patches that are registered only and not yet
            applied to any product.</param>
            <param name="userSid">The specific user, when working in a user context.  This
            parameter may be null to indicate the current user.  The parameter must be null
            when working in a machine context.</param>
            <param name="context">The user context. The calling process must have administrative
            privileges to get information for a product installed for a user other than the
            current user.</param>
            <remarks>If the <paramref name="productCode"/> is null, the Patch object may
            only be used to read and update the patch's SourceList information.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Patch.PatchProperty(Microsoft.WindowsInstaller.InstallProperty)">
            <summary>
            Gets information about a specific patch applied to a specific instance of a product. 
            </summary>
            <param name="patchInstallProperty">One of the following values:
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.LocalPackage"/>, <see cref="P:Microsoft.WindowsInstaller.InstallProperty.Transforms"/>,
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.InstallDate"/>, <see cref="P:Microsoft.WindowsInstaller.InstallProperty.Uninstallable"/>, or
            <see cref="P:Microsoft.WindowsInstaller.InstallProperty.State"/>.
            </param>
            <returns>The string value of the patch property.</returns>
            <exception cref="T:System.ArgumentException">An unknown patch was requested</exception>
            <exception cref="T:System.ArgumentException">An unknown patch property was requested</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Patch.PatchCode">
            <summary>
            Gets the patch code (GUID) of the patch.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Patch.ProductCode">
            <summary>
            Gets the ProductCode (GUID) of the product.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Patch.State">
            <summary>
            Gets the installation state of this instance of the patch.
            </summary>
            <exception cref="T:System.ArgumentException">An unknown patch was requested</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The installer configuration data is corrupt</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Record">
            <summary>
            The Record object is a container for holding and transferring a variable number of values.
            Fields within the record are numerically indexed and can contain strings, integers, streams,
            and null values. Record fields are indexed starting with 1.  Field 0 is a special format field.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.#ctor(System.Int32)">
            <summary>
            Creates a new record object with the requested number of fields.
            </summary>
            <param name="fieldCount">Required number of fields, which may be 0.
            The maximum number of fields in a record is limited to 65535.</param>
            <remarks>
            The Record object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.#ctor(System.Object[])">
            <summary>
            Creates a new record object, providing values for an arbitrary number of fields.
            </summary>
            <param name="fields">The values of the record fields.  The parameters should be of type Int16, Int32 or String</param>
            <remarks>
            The Record object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.ClearData">
            <summary>
            Sets all fields in a record to null.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.IsNull(System.Int32)">
            <summary>
            Reports whether a record field is null.
            </summary>
            <param name="field">Specifies the field to check.</param>
            <returns>True if the field is null, false otherwise.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.DataSize(System.Int32)">
            <summary>
            Gets the length of a record field. The count does not include the terminating null.
            </summary>
            <param name="field">Specifies a field of the record.</param>
            <returns>The length of the field. The method returns 0 if the field is null, non-existent,
            or an internal object pointer. The method also returns 0 if the handle is not a valid
            Record handle.
            <p>If the data is in integer format, the function returns sizeof(int).</p>
            <p>If the data is in string format, the function returns the character count
            (not including the NULL terminator).</p>
            <p>If the data is in stream format, the function returns the byte count.</p>
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.GetStream(System.String,System.String)">
            <summary>
            Reads a record stream field into a file.
            </summary>
            <param name="fieldName">Specifies the field of the Record to get.</param>
            <param name="filePath">Specifies the path to the file to contain the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The field name does not match a known
            field in the Record.</exception>
            <exception cref="T:System.NotSupportedException">Attempt to extract a storage from a database open
            in read-write mode, or from a database without an associated file path</exception>
            <remarks>
            This method is capable of directly extracting substorages. To do so, first select both the
            `Name` and `Data` column of the `_Storages` table, then get the stream of the `Data` field.
            However, substorages may only be extracted from a database that is open in read-only mode.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.GetStream(System.Int32,System.String)">
            <summary>
            Reads a record stream field into a file.
            </summary>
            <param name="field">Specifies the field of the Record to get.</param>
            <param name="filePath">Specifies the path to the file to contain the stream.</param>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
            <exception cref="T:System.NotSupportedException">Attempt to extract a storage from a database open
            in read-write mode, or from a database without an associated file path</exception>
            <remarks>
            This method is capable of directly extracting substorages. To do so, first select both the
            `Name` and `Data` column of the `_Storages` table, then get the stream of the `Data` field.
            However, substorages may only be extracted from a database that is open in read-only mode.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.GetStream(System.String)">
            <summary>
            Gets a record stream field.
            </summary>
            <param name="fieldName">Specifies the field of the Record to get.</param>
            <returns>A Stream that reads the field data.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The field name does not match a known
            field in the Record.</exception>
            <remarks>This method is not capable of reading substorages. To extract a substorage,
            use <see cref="M:Microsoft.WindowsInstaller.Record.GetStream(System.String,System.String)"/>.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.GetStream(System.Int32)">
            <summary>
            Gets a record stream field.
            </summary>
            <param name="field">Specifies the field of the Record to get.</param>
            <returns>A Stream that reads the field data.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
            <remarks>This method is not capable of reading substorages. To extract a substorage,
            use <see cref="M:Microsoft.WindowsInstaller.Record.GetStream(System.Int32,System.String)"/>.</remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.SetStream(System.String,System.String)">
            <summary>
            Sets a record stream field from a file. Stream data cannot be inserted into temporary fields.
            </summary>
            <param name="fieldName">Specifies the field name of the Record to set.</param>
            <param name="filePath">Specifies the path to the file containing the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The field name does not match a known
            field in the Record.</exception>
            <remarks>
            The contents of the specified file are read into a stream object. The stream persists if
            the Record is inserted into the Database and the Database is committed.
            <p>To reset the stream to its beginning you must pass in null for filePath.
            Do not pass an empty string, "", to reset the stream.</p>
            <p>Setting a stream with this method is more efficient than setting a field to a
            FileStream object.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.SetStream(System.Int32,System.String)">
            <summary>
            Sets a record stream field from a file. Stream data cannot be inserted into temporary fields.
            </summary>
            <param name="field">Specifies the field of the Record to set.</param>
            <param name="filePath">Specifies the path to the file containing the stream.</param>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
            <remarks>
            The contents of the specified file are read into a stream object. The stream persists if
            the Record is inserted into the Database and the Database is committed.
            <p>To reset the stream to its beginning you must pass in null for filePath.
            Do not pass an empty string, "", to reset the stream.</p>
            <p>Setting a stream with this method is more efficient than setting a field to a
            FileStream object.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.SetStream(System.String,System.IO.Stream)">
            <summary>
            Sets a record stream field from a Stream object. Stream data cannot be inserted into temporary fields.
            </summary>
            <param name="fieldName">Specifies the field name of the Record to set.</param>
            <param name="stream">Specifies the stream data.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The field name does not match a known
            field in the Record.</exception>
            <remarks>
            The stream persists if the Record is inserted into the Database and the Database is committed.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.SetStream(System.Int32,System.IO.Stream)">
            <summary>
            Sets a record stream field from a Stream object. Stream data cannot be inserted into temporary fields.
            </summary>
            <param name="field">Specifies the field of the Record to set.</param>
            <param name="stream">Specifies the stream data.</param>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
            <remarks>
            The stream persists if the Record is inserted into the Database and the Database is committed.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.ToString">
            <summary>
            Gets a formatted string representation of the Record.
            </summary>
            <returns>A formatted string representation of the Record.</returns>
            <remarks>
            If field 0 of the Record is set to a nonempty string, it is used to format the data in the Record.
            <seealso cref="P:Microsoft.WindowsInstaller.Record.FormatString"/>
            <seealso cref="M:Microsoft.WindowsInstaller.Session.FormatRecord(Microsoft.WindowsInstaller.Record)"/>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Record.ToString(System.String)">
            <summary>
            Gets a formatted string representation of the Record.
            </summary>
            <param name="format">String to be used to format the data in the Record,
            instead of the Record's format string.</param>
            <returns>A formatted string representation of the Record.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.FieldCount">
            <summary>
            Gets the number of fields in a record.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.Item(System.String)">
            <summary>
            Gets or sets a record field value.
            </summary>
            <param name="fieldName">Specifies the name of the field of the Record to get or set.</param>
            <exception cref="T:System.IndexOutOfRangeException">The name does not match any known field of the Record.</exception>
            <remarks>
            When getting a field, the type of the object returned depends on the type of the Record field.
            The object will be one of: Int16, Int32, String, Stream, or null.
            <p>When setting a field, the type of the object provided will be converted to match the View
            query that returned the record, or if Record was not returned from a view then the type of
            the object provided will determine the type of the Record field. The object should be one of:
            Int16, Int32, String, Stream, or null.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.Item(System.Int32)">
            <summary>
            Gets or sets a record field value.
            </summary>
            <param name="field">Specifies the field of the Record to get or set.</param>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
            <exception cref="T:System.InvalidCastException">When setting an integer or Stream field, the value
            cannot be converted to the type of the field.</exception>
            <remarks>
            Record fields are indexed starting with 1.  Field 0 is a special format field.
            <p>When getting a field, the type of the object returned depends on the type of the Record field.
            The object will be one of: Int16, Int32, String, Stream, or null.  If the Record was returned
            from a View, the type will match that of the field from the View query.  Otherwise, the type
            will match the type of the last value set for the field.</p>
            <p>When setting a field, the type of the object provided will be converted to match the View
            query that returned the Record, or if Record was not returned from a View then the type of
            the object provided will determine the type of the Record field. The object should be one of:
            Int16, Int32, String, Stream, or null.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.IntegerData">
            <summary>
            Gets an accessor for getting and setting Record integer fields.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.StringData">
            <summary>
            Gets an accessor for getting and setting Record string fields.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.FormatString">
            <summary>
            Gets or sets field 0 of the Record, which is the format string.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.Columns">
            <summary>
            Gets information about the columns in the Record.
            </summary>
            <remarks>
            If the Record was returned from a View, the column information will match the View query.
            Otherwise, some columns may be undefined (null) if they have not been set.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Record.View">
            <summary>
            Gets the View that created this Record, or null
            if this Record was not returned by a call to <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/>.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.RecordIntegerData">
            <summary>
            Accessor for getting and setting Record integer fields.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.RecordIntegerData.Item(System.Int32)">
            <summary>
            Gets or sets a record integer field value.
            </summary>
            <param name="field">Specifies the field of the Record to get or set.</param>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
            <exception cref="T:System.InvalidCastException">The value
            cannot be converted to the type of the field.</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.RecordStringData">
            <summary>
            Accessor for getting and setting Record string fields.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.RecordStringData.Item(System.Int32)">
            <summary>
            Gets or sets a record string field value.
            </summary>
            <param name="field">Specifies the field of the Record to get or set.</param>
            <exception cref="T:System.IndexOutOfRangeException">The field is less than 0 or greater than the
            number of fields in the Record.</exception>
            <exception cref="T:System.InvalidCastException">The value
            cannot be converted to the type of the field.</exception>
            <remarks>
            Getting a null field will return an empty string ("").
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.CustomActionAttribute">
            <summary>
            Marks a method as a custom action entry point.
            </summary>
            <remarks>
            A custom action method must be defined as public and static,
            take a single <see cref="T:Microsoft.WindowsInstaller.Session"/> object as a parameter,
            and return an <see cref="T:Microsoft.WindowsInstaller.ActionResult"/> enumeration value.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.CustomActionAttribute.#ctor">
            <summary>
            Marks a method as a custom action entry point.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.CustomActionAttribute.#ctor(System.String)">
            <summary>
            Marks a method as a custom action entry point.
            </summary>
            <param name="name">Name of the function to be exported,
            defaults to the name of this method</param>
        </member>
        <member name="P:Microsoft.WindowsInstaller.CustomActionAttribute.Name">
            <summary>
            Gets or sets the name of the function to be exported.  A null
            value defaults to the name of the method.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.CustomActionAttribute.DynamicLoad">
            <summary>
            Gets or sets a flag indicating whether custom action assemblies
            will be loaded dynamically in-memory without being extracted to
            files first. Set ths property to false if the custom action
            will be using XML serialization or web services. The default
            value is true.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.CustomActionAttribute.NativeDependencies">
            <summary>
            Gets or sets a semicolon-delimited list of native dependency
            filenames that are carried by the custom action.  By default,
            this list is empty (null).  If this list is nonempty, then the
            <see cref="P:Microsoft.WindowsInstaller.CustomActionAttribute.DynamicLoad"/> property is automatically false.
            </summary>
            <remarks>
            Set this property when your custom action interops with a
            native DLL.  Then include the native dependencies as (cabbed)
            resources in the CA package.  The files in this list will be
            saved to the same temporary location as the CA assemblies, so
            at install time the assemblies may bind properly to a native DLL.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Session">
            <summary>
            The Session object controls the installation process. It opens the
            install database, which contains the installation tables and data.
            </summary>
            <remarks><p>This object is associated with a standard set of action functions,
            each performing particular operations on data from one or more tables. Additional
            custom actions may be added for particular product installations. The basic engine
            function is a sequencer that fetches sequential records from a designated sequence
            table, evaluates any specified condition expression, and executes the designated
            action. Actions not recognized by the engine are deferred to the UI handler object
            for processing, usually dialog box sequences.</p>
            <p>Note that only one Session object can be opened by a single process.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.#ctor(System.IntPtr)">
            <summary>
            Creates a new Session object from an integer session handle.
            </summary>
            <remarks>
            This constructor is only provided for interop purposes.  A Session object
            should normally be obtained by calling <see cref="M:Microsoft.WindowsInstaller.Installer.OpenPackage(System.String,System.Boolean)"/>
            or <see cref="M:Microsoft.WindowsInstaller.Installer.OpenProduct(System.String)"/>.
            </remarks>
            <param name="sessionHandle">Integer session handle</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.Dispose(System.Boolean)">
            <summary>
            Closes the session handle.  Also closes the active database handle, if it is open.
            After closing a handle, further method calls may throw an <see cref="T:Microsoft.WindowsInstaller.InvalidHandleException"/>.
            </summary>
            <param name="disposing">If true, the method has been called directly or indirectly by a user's code,
            so managed and unmanaged resources will be disposed. If false, the method has been called by the 
            runtime from inside the finalizer, and only unmanaged resources will be disposed.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.Message(Microsoft.WindowsInstaller.InstallMessage,Microsoft.WindowsInstaller.Record)">
            <summary>
            Performs any enabled logging operations and defers execution to the UI handler
            object associated with the engine.
            </summary>
            <param name="messageType">Type of message to be processed</param>
            <param name="record">Contains message-specific fields</param>
            <returns>A message-dependent return value</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session or Record handle is invalid</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">an invalid message kind is specified</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the message-handler failed for an unknown reason</exception>
            <remarks>
            Logging may be selectively enabled for the various message types.
            See the <see cref="M:Microsoft.WindowsInstaller.Installer.EnableLog(Microsoft.WindowsInstaller.InstallLogModes,System.String)"/> method.
            <para>If record field 0 contains a formatting string, it is used to format the data in
            the other fields. Else if the message is an error, warning, or user message, an attempt
            is made to find a message template in the Error table for the current database using the
            error number found in field 1 of the record for message types and return values.</para>
            <para>The <paramref name="messageType"/> parameter may also include message-box flags from
            the following enumerations: System.Windows.Forms.MessageBoxButtons,
            System.Windows.Forms.MessageBoxDefaultButton, System.Windows.Forms.MessageBoxIcon.  These
            flags can be combined with the InstallMessage with a bitwise OR.</para>
            <para>Note, this method never returns Cancel or Error values.  Instead, appropriate
            exceptions are thrown in those cases.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.Log(System.String)">
            <summary>
            Writes a message to the log, if logging is enabled.
            </summary>
            <param name="msg">The line to be written to the log</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.Log(System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log, if logging is enabled.
            </summary>
            <param name="format">The line to be written to the log, containing 0 or more format specifiers</param>
            <param name="args">An array containing 0 or more objects to be formatted</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.EvaluateCondition(System.String)">
            <summary>
            Evaluates a logical expression containing symbols and values.
            </summary>
            <param name="condition">conditional expression</param>
            <returns>The result of the condition evaluation</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentNullException">the condition is null or empty</exception>
            <exception cref="T:System.ArgumentException">the conditional expression is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.EvaluateCondition(System.String,System.Boolean)">
            <summary>
            Evaluates a logical expression containing symbols and values, specifying a default
            value to be returned in case the condition is empty.
            </summary>
            <param name="condition">conditional expression</param>
            <param name="defaultValue">value to return if the condition is empty</param>
            <returns>The result of the condition evaluation</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">the conditional expression is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.FormatRecord(Microsoft.WindowsInstaller.Record)">
            <summary>
            Returns a formatted string from record data.
            </summary>
            <param name="record">Record object containing a template and data to be formatted.
            The template string must be set in field 0 followed by any referenced data parameters.</param>
            <returns>A formatted string containing the record data</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Record handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.FormatRecord(Microsoft.WindowsInstaller.Record,System.String)">
            <summary>
            Returns a formatted string from record data using a specified format.
            </summary>
            <param name="record">Record object containing a template and data to be formatted</param>
            <param name="format">Format string to be used instead of field 0 of the Record</param>
            <returns>A formatted string containing the record data</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Record handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.ProductProperty(System.String)">
            <summary>
            Retrieves product properties from the product database.
            </summary>
            <param name="name">Name of the property to retrieve.</param>
            <returns>Value of the property, or an empty string if the property is not set.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.GetFeatureCost(System.String,System.Boolean,System.Boolean,Microsoft.WindowsInstaller.InstallState)">
            <summary>
            Calculates the disk space required by a feature and its selected children and parent features.
            </summary>
            <param name="feature">Name of the feature</param>
            <param name="includeParents">If true, the parent features are included in the cost.</param>
            <param name="includeChildren">If true, the child features are included in the cost.</param>
            <param name="installState">Specifies the installation state.</param>
            <returns>The disk space requirement in bytes.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.VerifyDiskSpace">
            <summary>
            Checks to see if sufficient disk space is present for the current installation.
            </summary>
            <returns>True if there is sufficient disk space; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.GetTotalCost">
            <summary>
            Gets the total disk space per drive required for the installation.
            </summary>
            <returns>An array of InstallCost structures, specifying the cost for each drive</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.GetComponentCost(System.String,Microsoft.WindowsInstaller.InstallState)">
            <summary>
            Gets disk space per drive required to install a component.
            </summary>
            <param name="component">Component's name, from the Component column of the Component table</param>
            <param name="installState">Requested component state</param>
            <returns>An array of InstallCost structures, specifying the cost for each drive for the component</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.SetInstallLevel(System.Int32)">
            <summary>
            Sets the install level for the current installation to a specified value and
            recalculates the Select and Installed states for all features in the Feature
            table. Also sets the Action state of each component in the Component table based
            on the new level.
            </summary>
            <param name="installLevel">New install level</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <remarks>
            The SetInstallLevel method sets the following:<list type="bullet">
            <item><description>The installation level for the current installation to a specified value</description></item>
            <item><description>The Select and Installed states for all features in the Feature table</description></item>
            <item><description>The Action state of each component in the Component table, based on the new level</description></item>
            </list>
            <para>If 0 or a negative number is passed in the ilnstallLevel parameter,
            the current installation level does not change, but all features are still
            updated based on the current installation level.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.DoAction(System.String)">
            <summary>
            Executes a built-in action, custom action, or user-interface wizard action.
            </summary>
            <param name="action">Name of the action to execute.  Case-sensitive.</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
            <remarks>
            The DoAction method executes the action that corresponds to the name supplied. If the
            name is not recognized by the installer as a built-in action or as a custom action in
            the CustomAction table, the name is passed to the user-interface handler object, which
            can invoke a function or a dialog box. If a null action name is supplied, the installer
            uses the upper-case value of the ACTION property as the action to perform. If no property
            value is defined, the default action is performed, defined as "INSTALL".
            <para>Actions that update the system, such as the InstallFiles and WriteRegistryValues
            actions, cannot be run by calling MsiDoAction. The exception to this rule is if DoAction
            is called from a custom action that is scheduled in the InstallExecuteSequence table
            between the InstallInitialize and InstallFinalize actions. Actions that do not update the
            system, such as AppSearch or CostInitialize, can be called.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Session.DoActionSequence(System.String)">
            <summary>
            Executes an action sequence described in the specified table.
            </summary>
            <param name="sequenceTable">Name of the table containing the action sequence.</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
            <remarks>
            This method queries the specified table, ordering the actions by the numbers in the Sequence column.
            For each row retrieved, an action is executed, provided that any supplied condition expression does
            not evaluate to FALSE.
            <para>An action sequence containing any actions that update the system, such as the InstallFiles and
            WriteRegistryValues actions, cannot be run by calling DoActionSequence. The exception to this rule is if
            DoActionSequence is called from a custom action that is scheduled in the InstallExecuteSequence table
            between the InstallInitialize and InstallFinalize actions. Actions that do not update the system, such
            as AppSearch or CostInitialize, can be called.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.Database">
            <summary>
            Gets the Database for the install session.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the Database cannot be accessed</exception>
            <remarks>
            Normally there is no need to close this Database object.  The same object can be
            used throughout the lifetime of the Session, and it will be closed when the Session
            is closed.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.Property">
            <summary>
            Accessor for getting and setting Session properties.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.ComponentCurrentState">
            <summary>
            Accessor for getting the current installed state of Components.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.ComponentRequestState">
            <summary>
            Accessor for getting or setting the action state of Components.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.FeatureCurrentState">
            <summary>
            Accessor for getting the current installed state of Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.FeatureRequestState">
            <summary>
            Accessor for getting or setting the action state of Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.FeatureValidStates">
            <summary>
            Accessor for getting the valid installation states for Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.FeatureAttributes">
            <summary>
            Accessor for getting or setting attributes of Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.Language">
            <summary>
            Gets the numeric language ID used by the current install session.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.Mode">
            <summary>
            Accessor for getting or setting various mode flags of the current install session.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.SourcePath">
            <summary>
            Accessor for getting the source paths of directories.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.Session.TargetPath">
            <summary>
            Accessor for getting the target paths of directories.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionComponentCurrentStates">
            <summary>
            Accessor for getting the current installed state of Components.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionComponentCurrentStates.Item(System.String)">
            <summary>
            Gets the current install state of the designated Component.
            </summary>
            <param name="component">Name of the Component, primary key into the Component table</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Component was requested</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionComponentRequestStates">
            <summary>
            Accessor for getting or setting the action state of Components.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionComponentRequestStates.Item(System.String)">
            <summary>
            Gets or sets the action state of the designated Component.
            </summary>
            <param name="component">Name of the Component, primary key into the Component table</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Component was requested</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InstallCanceledException">the user exited the installation</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionFeatureCurrentStates">
            <summary>
            Accessor for getting the current installed state of Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionFeatureCurrentStates.Item(System.String)">
            <summary>
            Gets the current install state of the designated Feature.
            </summary>
            <param name="feature">Name of the Feature, primary key into the Feature table</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Feature was requested</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionFeatureRequestStates">
            <summary>
            Accessor for getting or setting the action state of Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionFeatureRequestStates.Item(System.String)">
            <summary>
            Gets or sets the action state of the designated Feature.
            </summary>
            <param name="feature">Name of the Feature, primary key into the Feature table</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Feature was requested</exception>
            <remarks>
            When changing a Feature action, the action state of all the Components linked to the changed
            Feature records are also updated appropriately, based on the new feature Select state.
            All Features can be configured at once by specifying the keyword ALL instead of a specific feature name.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionFeatureValidStates">
            <summary>
            Accessor for getting the valid installation states for Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionFeatureValidStates.Item(System.String)">
            <summary>
            Gets an integer representing bit flags with each relevant bit representing
            a valid installation state for the specified Feature.
            </summary>
            <param name="feature">Name of the Feature whose valid installation states are to be retreived</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Feature was requested</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionFeatureAttributes">
            <summary>
            Accessor for getting or setting attributes for Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionFeatureAttributes.Item(System.String)">
            <summary>
            Gets or sets the attributes of a Feature.
            </summary>
            <param name="feature">Name of the Feature</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Feature was requested</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionFeatureTitles">
            <summary>
            Accessor for getting or titles of Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionFeatureTitles.Item(System.String)">
            <summary>
            Gets or sets the attributes of a Feature.
            </summary>
            <param name="feature">Name of the Feature</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Feature was requested</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionFeatureDescriptions">
            <summary>
            Accessor for getting or descriptions of Features.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionFeatureDescriptions.Item(System.String)">
            <summary>
            Gets or sets the attributes of a Feature.
            </summary>
            <param name="feature">Name of the Feature</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentException">an unknown Feature was requested</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionModes">
            <summary>
            Accessor for getting or setting various mode flags of the current install session.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionModes.Item(Microsoft.WindowsInstaller.InstallRunMode)">
            <summary>
            Gets or sets the designated mode flag for the current install session.
            </summary>
            <param name="modeFlag">The mode flag to be retrieved or set</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">an invalid mode flag was specified</exception>
            <exception cref="T:System.InvalidOperationException">the mode cannot not be set</exception>
            <remarks>
            Note that only the following run modes are available to read from
            a deferred custom action:<list type="bullet">
            <item><description><see cref="F:Microsoft.WindowsInstaller.InstallRunMode.Scheduled"/></description></item>
            <item><description><see cref="F:Microsoft.WindowsInstaller.InstallRunMode.Rollback"/></description></item>
            <item><description><see cref="F:Microsoft.WindowsInstaller.InstallRunMode.Commit"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionProperties">
            <summary>
            Accessor for getting and setting Session properties.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionProperties.Item(System.String)">
            <summary>
            Gets or sets the string value of a named installer property, as maintained by the
            Session object in the in-memory Property table, or, if it is prefixed with a percent
            sign (%), the value of a system environment variable for the current process.
            </summary>
            <param name="name">The name of the property to be retrieved or set</param>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionSourcePaths">
            <summary>
            Accessor for getting the source paths of Directories.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionSourcePaths.Item(System.String)">
            <summary>
            Gets the full path to the designated folder on the source media or server image.
            </summary>
            <param name="folder">The case-sensitive name of the Directory to be retrieved,
            primary key into the Directory table</param>
            <exception cref="T:System.ArgumentException">the folder was not found in the Directory table</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SessionTargetPaths">
            <summary>
            Accessor for getting or setting the target paths of Directories.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SessionTargetPaths.Item(System.String)">
            <summary>
            Gets or sets the full path to the designated folder on the installation target drive.
            </summary>
            <param name="folder">The case-sensitive name of the Directory to be retrieved or set,
            primary key into the Directory table</param>
            <exception cref="T:System.ArgumentException">the folder was not found in the Directory table</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the Session handle is invalid</exception>
            <remarks>
            Setting the target path of a directory changes the path specification for the directory
            in the in-memory Directory table. Also, the path specifications of all other path objects
            in the table that are either subordinate or equivalent to the changed path are updated
            to reflect the change. The properties for each affected path are also updated.
            <para>If an error occurs in this function, all updated paths and properties revert to
            their previous values. Therefore, it is safe to treat errors returned by this function
            as non-fatal.</para>
            <para>Do not attempt to configure the target path if the components using those paths
            are already installed for the current user or for a different user. Check the
            ProductState property before setting the target path to determine if the product
            containing this component is installed.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.InstallCost">
            <summary>
            Represents a per-drive disk space cost for an installation.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallCost.DriveName">
            <summary>
            The name of the drive this cost data applies to.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallCost.Cost">
            <summary>
            The installation cost on this drive, as a number of bytes.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.InstallCost.TempCost">
            <summary>
            The temporary disk space required on this drive, as a number of bytes.
            This temporary space requirement is space needed only for the duration
            of the installation, over the final footprint on disk.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.SummaryInfo">
            <summary>
            Provides access to summary information of a Windows Installer database.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.SummaryInfo.Persist">
            <summary>
            Formats and writes the previously stored properties into the standard summary information stream.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">The stream cannot be successfully written.</exception>
            <remarks>
            This method may only be called once after all the property values have been set. Properties may
            still be read after the stream is written.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.PropertyCount">
            <summary>
            Gets the current number of property values in the summary information object, taking
            into account properties that have been added, deleted, or replaced.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Title">
            <summary>Gets or sets the Title summary information property.</summary>
            <remarks>
            The Title summary information property briefly describes the type of installer package. Phrases
            such as "Installation Database" or "Transform" or "Patch" may be used for this property.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Subject">
            <summary>Gets or sets the Subject summary information property.</summary>
            <remarks>
            The Subject summary information property conveys to a file browser the product that can be installed using
            the logic and data in this installer database. For example, the value of the summary property for
            Microsoft Office 97 would be "Microsoft Office 97 Professional". This value is typically set from the
            installer property ProductName.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Author">
            <summary>Gets or sets the Author summary information property.</summary>
            <remarks>
            The Author summary information property conveys to a file browser the manufacturer of the installation
            database. This value is typically set from the installer property Manufacturer.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Keywords">
            <summary>Gets or sets the Keywords summary information property.</summary>
            <remarks>
            The Keywords summary information property is used by file browsers to hold keywords that permit the
            database file to be found in a keyword search. The set of keywords typically includes "Installer" as
            well as product-specific keywords, and may be localized.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Comments">
            <summary>Gets or sets the Comments summary information property.</summary>
            <remarks>
            The Comments summary information property conveys the general purpose of the installer database. By convention,
            the value for this summary property is set to the following:
            <p>"This installer database contains the logic and data required to install &lt;product name&gt;."</p>
            <p>where &lt;product name&gt; is the name of the product being installed. In general the value for this summary
            property only changes in the product name, nothing else.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Template">
            <summary>Gets or sets the Template summary information property.</summary>
            <remarks>
            The Template summary information propery indicates the platform and language versions supported by the database.
            <p>The syntax of the Template Summary property information is:</p>
            <p>[platform property][,platform property][,...];[language id][,language id][,...].</p>
            <p>For example, the following are all valid values for the Template Summary property:</p>
            <list type="bullet">
            <item>Intel;1033</item>
            <item>Intel64;1033</item>
            <item>;1033</item>
            <item>;</item>
            <item>Intel ;1033,2046</item>
            <item>Intel64;1033,2046</item>
            <item>Intel;0</item>
            </list>
            <p>If this is a 64-bit Windows Installer, enter Intel64 in the Template summary information property. Note that an
            installation package cannot have both the Intel and Intel64 properties set.</p>
            <p>If the current platform does not match one of the platforms specified then the installer will not process the
            package. Not specifying a platform implies that the package is platform-independent.</p>
            <p>Entering 0 in the language ID field of the Template summary information property, or leaving this field empty,
            indicates that the package is language neutral.</p>
            <p>There are variations of this property depending on whether it is in a source installer database or a transform.</p>
            <p>Source Installer Database - Only one language can be specified in a source installer database. Merge Modules are
            the only packages that may have multiple languages. For more information, see Multiple Language Merge Modules.</p>
            <p>Transform - In a transform file, only one language may be specified. The specified platform and language determine
            whether a transform can be applied to a particular database. The platform property and the language property can
            be left blank if no transform restriction relies on them to validate the transform.</p>
            <p>This summary property is REQUIRED.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.LastSavedBy">
            <summary>Gets or sets the LastSavedBy summary information property.</summary>
            <remarks>
            The installer sets the Last Saved By summary information property to the value of the LogonUser property during
            an administrative installation. The installer never uses this property and a user never needs to modify it.
            Developers of a database editing tool may use this property to track the last person to modify the database.
            This property should be left set to null in a final shipping database.
            <p>In a transform, this summary property contains the platform and language ID(s) that a database should have
            after it has been transformed. The property specifies to what the Template should be set in the new database.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.RevisionNumber">
            <summary>Gets or sets the RevisionNumber summary information property.</summary>
            <remarks>
            The Revision Number summary information property contains the package code for the installer package. The
            package code is a unique identifier of the installer package. 
            <p>The Revision Number summary information  property of a patch package specifies the GUID patch code for
            the patch. This is followed by a list of patch code GUIDs for obsolete patches that are removed when this
            patch is applied. The patch codes are concatenated with no delimiters separating GUIDs in the list.</p>
            <p>The Revision Number summary information  property of a transform package lists the product code GUIDs
            and version of the new and original products and the upgrade code GUID. The list is separated with
            semicolons as follows.</p>
            <p>Original-Product-Code Original-Product-Version ; New-Product Code New-Product-Version; Upgrade-Code</p>
            <p>This summary property is REQUIRED.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.CreatingApp">
            <summary>Gets or sets the CreatingApp summary information property.</summary>
            <remarks>
            The CreatingApp summary information property conveys which application created the installer database.
            In general the value for this summary property is the name of the software used to author this database.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.LastPrintTime">
            <summary>Gets or sets the LastPrintTime summary information property.</summary>
            <remarks>
            The LastPrintTime summary information property can be set to the date and time during an administrative
            installation to record when the administrative image was created. For non-administrative installations
            this property is the same as the CreateTime summary information property.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.CreateTime">
            <summary>Gets or sets the CreateTime summary information property.</summary>
            <remarks>
            The CreateTime summary information property conveys when the installer database was created.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.LastSaveTime">
            <summary>Gets or sets the LastSaveTime summary information property.</summary>
            <remarks>
            The LastSaveTime summary information property conveys when the last time the installer database was
            modified. Each time a user changes an installation the value for this summary property is updated to
            the current system time/date at the time the installer database was saved. Initially the value for
            this summary property is set to null to indicate that no changes have yet been made.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Codepage">
            <summary>Gets or sets the Codepage summary information property.</summary>
            <remarks>
            The Codepage summary information property is the numeric value of the ANSI code page used for any
            strings that are stored in the summary information. Note that this is not the same code page for
            strings in the installation database. The Codepage summary information property is used to translate
            the strings in the summary information into Unicode when calling the Unicode API functions. The
            Codepage summary information property must be set before any string properties are set in the
            summary information.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.PageCount">
            <summary>Gets or sets the PageCount summary information property.</summary>
            <remarks>
            For an installation package, the PageCount summary information property contains the minimum
            installer version required. For Windows Installer version 1.0, this property must be set to the
            integer 100. For 64-bit Windows Installer Packages, this property must be set to the integer 200.
            <p>For a transform package, the PageCount summary information property contains minimum installer
            version required to process the transform. Set to the greater of the two PageCount summary information
            property values belonging to the databases used to generate the transform.</p>
            <p>The PageCount summary information property is set to null in patch packages.</p>
            <p>This summary property is REQUIRED.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.WordCount">
            <summary>Gets or sets the WordCount summary information property.</summary>
            <remarks>
            The WordCount summary information property indicates the type of source file image. If this property is
            not present, it defaults to 0. Note that this property is stored in place of the standard Count property.
            <p>This property is a bit field. New bits may be added in the future. At present the following bits are
            available.</p>
            <list type="bullet">
            <item>Bit 0: 0 = long file names, 1 = short file names</item>
            <item>Bit 1: 0 = source is uncompressed, 1 = source is compressed</item>
            <item>Bit 2: 0 = source is original media, 1 = source is administrative installation</item>
            </list>
            <p>These are combined to give the WordCount summary information property one of the following values
            indicating a type of source file image.</p>
            <list type="bullet">
            <item>0 - Original source using long file names. Matches tree in Directory table.</item>
            <item>1 - Original source using short file names. Matches tree in Directory table.</item>
            <item>2 - Compressed source files using long file names. Matches cabinets and files in the Media table.</item>
            <item>3 - Compressed source files using short file names. Matches cabinets and files in the Media table.</item>
            <item>4 - Administrative image using long file names. Matches tree in Directory table.</item>
            <item>5 - Administrative image using short file names. Matches tree in Directory table.</item>
            </list>
            <p>Note that if the package is marked as compressed (bit 1 is set), the installer only installs files
            located at the root of the source. In this case, even files marked as uncompressed in the File table must
            be located at the root to be installed. To specify a source image that has both a cabinet file (compressed
            files) and uncompressed files that match the tree in the Directory table, mark the package as uncompressed
            by leaving bit 1 unset (value=0) in the WordCount summary information property and set
            <see cref="F:Microsoft.WindowsInstaller.FileAttributes.Compressed"/> (value=16384) in the Attributes column of the File table
            for each file in the cabinet.</p>
            <p>For a patch package, the WordCount summary information property specifies the patch engine that was used
            to create the patch files. The default value is 1 and indicates that MSPATCH was used to create the patch
            A value of "2" means that the patch is using smaller, optimized, files available only with Windows Installer
            version 1.2 or later. A patch with a WordCount of "2" fails immediately if used with a Windows Installer
            version earlier than 1.2. A patch with a WordCount of "3" fails immediately if used with a Windows Installer
            version earlier than 2.0.</p>
            <p>This summary property is REQUIRED.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.CharacterCount">
            <summary>Gets or sets the CharacterCount summary information property.</summary>
            <remarks>
            The CharacterCount summary information property is only used in transforms. This part of the summary
            information stream is divided into two 16-bit words. The upper word contains the transform validation
            flags. The lower word contains the transform error condition flags.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsInstaller.SummaryInfo.Security">
            <summary>Gets or sets the Security summary information property.</summary>
            <remarks>
            The Security summary information property conveys whether the package should be opened as read-only. The database
            editing tool should not modify a read-only enforced database and should issue a warning at attempts to modify a
            read-only recommended database. The following values of this property are applicable to Windows Installer files.
            <list type="bullet">
            <item>0 - no restriction</item>
            <item>2 - read only recommended</item>
            <item>4 - read only enforced</item>
            </list>
            <p>This property should be set to read-only recommended (2) for an installation database and to read-only
            enforced (4) for a transform or patch.</p>
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.TableInfo">
            <summary>
            Defines a table in an installation database.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.TableInfo.#ctor(System.String,Microsoft.WindowsInstaller.ColumnInfo[],System.String[])">
            <summary>
            Creates a table definition.
            </summary>
            <param name="table">Name of the table.</param>
            <param name="columns">Columns in the table.</param>
            <param name="primaryKeys">The primary keys of the table.</param>
        </member>
        <member name="M:Microsoft.WindowsInstaller.TableInfo.ToString">
            <summary>
            Gets a string representation of the table.
            </summary>
            <returns>The name of the table.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TableInfo.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TableInfo.Columns">
            <summary>
            Gets the definitions of the columns of the table.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TableInfo.PrimaryKeys">
            <summary>
            Gets the primary keys of the table.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TableInfo.SqlCreateString">
            <summary>
            Gets an SQL CREATE string that can be used to create the table.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.TableInfo.SqlSelectString">
            <summary>
            Gets an SQL SELECT string that can be used to select all columns of the table.
            </summary>
            <remarks>
            The columns are listed explicitly in the SELECT string, as opposed to using "SELECT *".
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ValidationHandler">
            <summary>
            Handles error, warning, and information messages generated during the validation process.
            </summary>
            <param name="msg">The validation message.</param>
            <param name="context">User context object.</param>
            <returns>true if validation should be continued; false to abort the validation process</returns>
        </member>
        <member name="T:Microsoft.WindowsInstaller.Validation">
            <summary>
            Provides methods for validating an installer database.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Validation.BeginValidateDatabase(System.String,System.String,Microsoft.WindowsInstaller.ValidationHandler,System.Object)">
            <summary>
            Begins an asynchronous validation of an installer database.
            </summary>
            <param name="dbFile">The database file to validate.</param>
            <param name="cubFile">The .CUB file containing validation code.</param>
            <param name="validationHandler">Handler for validation messages.</param>
            <param name="context">User context object.</param>
            <returns>An IAsyncResult that references the asynchronous validation process.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Validation.EndValidateDatabase(System.IAsyncResult)">
            <summary>
            Ends an asynchronous validation of an installer database.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous validation process to wait for.</param>
            <returns>True if the database was successfully validated; false if there were validation errors.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.Validation.ValidateDatabase(System.String,System.String,Microsoft.WindowsInstaller.ValidationHandler,System.Object)">
            <summary>
            Validates an installer database.
            </summary>
            <param name="dbFile">The database file to validate.</param>
            <param name="cubFile">The .CUB file containing validation code.</param>
            <param name="validationHandler">Handler for validation messages.</param>
            <param name="context">User context object.</param>
            <returns>True if the database was successfully validated; false if there were validation errors.</returns>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ValidationMessage">
            <summary>
            Contains details about an error, warning, or information validation message.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.ValidationMessage.#ctor(Microsoft.WindowsInstaller.ValidationMessageType,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates a new custom validation message.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.ValidationMessage.Equals(Microsoft.WindowsInstaller.ValidationMessage)">
            <summary>
            Tests if this validation message equals another validation message.
            </summary>
            <param name="msg">The validation message to compare to.</param>
            <returns>true if the other message equals this message; false otherwise</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.ValidationMessage.Equals(System.Object)">
            <summary>
            Tests if this validation message equals another validation message.
            </summary>
            <param name="obj">The validation message to compare to.</param>
            <returns>true if the other message equals this message; false otherwise</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.ValidationMessage.GetHashCode">
            <summary>
            Gets a hash code for the validation message.
            </summary>
            <returns>A hash code based on the message data.</returns>
        </member>
        <member name="M:Microsoft.WindowsInstaller.ValidationMessage.ToString">
            <summary>
            Gets a string representation of the validation message.
            </summary>
            <returns>A string including the ICE name, message type, and description.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationMessage.IceName">
            <summary>
            Gets the name of the ICE that generated the message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationMessage.Type">
            <summary>
            Gets the type of validation message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationMessage.Description">
            <summary>
            Gets a description of the validation message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationMessage.Help">
            <summary>
            Gets help text for the validation message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationMessage.Table">
            <summary>
            Gets the name of the table the validation message refers to.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationMessage.Column">
            <summary>
            Gets the name of the column the validation message refers to.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationMessage.Row">
            <summary>
            Gets the string values of the primary keys of the row the validation message refers to.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsInstaller.View">
            <summary>
            A View represents a result set obtained when processing a query using the
            <see cref="M:Microsoft.WindowsInstaller.Database.OpenView(System.String,System.Object[])"/> method of a <see cref="P:Microsoft.WindowsInstaller.View.Database"/>. Before any data can be
            transferred, the query must be executed using the <see cref="M:Microsoft.WindowsInstaller.View.Execute(Microsoft.WindowsInstaller.Record)"/> method, passing to
            it all replaceable parameters designated within the SQL query string.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Execute(Microsoft.WindowsInstaller.Record)">
            <summary>
            Executes a SQL View query and supplies any required parameters. The query uses the
            question mark token to represent parameters as described in SQL Syntax. The values of
            these parameters are passed in as the corresponding fields of a parameter record.
            </summary>
            <param name="executeParams">Optional Record that supplies the parameters. This
            Record contains values to replace the parameter tokens in the SQL query.</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Execute">
            <summary>
            Executes a SQL View query.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View could not be executed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Fetch">
            <summary>
            Fetches the next sequential record from the view, or null if there are no more records.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View is not in an active state</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            The returned Record object should be <see cref="M:Microsoft.WindowsInstaller.InstallerHandle.Close"/>d after use.
            The finalizer will close the handle if it is still open, however due to the nondeterministic
            nature of finalization it is best that the handle be closed manually as soon as it is no
            longer needed, as leaving lots of unused handles open can degrade performance.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)">
            <summary>
            Updates a fetched Record.
            </summary>
            <param name="mode">specifies the modify mode</param>
            <param name="record">the Record to modify</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the modification failed,
            or a validation was requested and the data did not pass</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            You can update or delete a record immediately after inserting, or seeking provided you
            have NOT modified the 0th field of the inserted or sought record.
            <para>To execute any SQL statement, a View must be created. However, a View that does not
            create a result set, such as CREATE TABLE, or INSERT INTO, cannot be used with any of
            the Modify methods to update tables though the view.</para>
            <para>You cannot fetch a record containing binary data from one database and then use
            that record to insert the data into another database. To move binary data from one database
            to another, you should export the data to a file and then import it into the new database
            using a query and the <see cref="M:Microsoft.WindowsInstaller.Record.SetStream(System.String,System.String)"/>. This ensures that each database has
            its own copy of the binary data.</para>
            <para>Note that custom actions can only add, modify, or remove temporary rows, columns,
            or tables from a database. Custom actions cannot modify persistent data in a database,
            such as data that is a part of the database stored on disk.</para>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Refresh(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Insert(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Update(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Assign(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Replace(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Delete(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.InsertTemporary(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Seek(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Merge(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.Validate(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.ValidateNew(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.ValidateField(Microsoft.WindowsInstaller.Record)"/>
            <seealso cref="M:Microsoft.WindowsInstaller.View.ValidateDelete(Microsoft.WindowsInstaller.Record)"/>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Refresh(Microsoft.WindowsInstaller.Record)">
            <summary>
            Refreshes the data in a Record.
            </summary>
            <param name="record">the Record to be refreshed</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the refresh failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            The Record must have been obtained by calling <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/>. Fails with
            a deleted Record. Works only with read-write Records.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Insert(Microsoft.WindowsInstaller.Record)">
            <summary>
            Inserts a Record into the view.
            </summary>
            <param name="record">the Record to be inserted</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the insertion failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Fails if a row with the same primary keys exists. Fails with a read-only database.
            This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Update(Microsoft.WindowsInstaller.Record)">
            <summary>
            Updates the View with new data from the Record.
            </summary>
            <param name="record">the new data</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the update failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Only non-primary keys can be updated. The Record must have been obtained by calling
            <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/>. Fails with a deleted Record. Works only with read-write Records.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Assign(Microsoft.WindowsInstaller.Record)">
            <summary>
            Updates or inserts a Record into the View.
            </summary>
            <param name="record">the Record to be assigned</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the assignment failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Updates record if the primary keys match an existing row and inserts if they do not match.
            Fails with a read-only database. This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Replace(Microsoft.WindowsInstaller.Record)">
            <summary>
            Updates or deletes and inserts a Record into the View.
            </summary>
            <param name="record">the Record to be replaced</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the replacement failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            The Record must have been obtained by calling <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/>. Updates record if the
            primary keys are unchanged. Deletes old row and inserts new if primary keys have changed.
            Fails with a read-only database. This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Delete(Microsoft.WindowsInstaller.Record)">
            <summary>
            Deletes a Record from the View.
            </summary>
            <param name="record">the Record to be deleted</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the deletion failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            The Record must have been obtained by calling <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/>. Fails if the row has been
            deleted. Works only with read-write records. This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.InsertTemporary(Microsoft.WindowsInstaller.Record)">
            <summary>
            Inserts a Record into the View.  The inserted data is not persistent.
            </summary>
            <param name="record">the Record to be inserted</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the insertion failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Fails if a row with the same primary key exists. Works only with read-write records.
            This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Seek(Microsoft.WindowsInstaller.Record)">
            <summary>
            Refreshes the information in the supplied record without changing the position
            in the result set and without affecting subsequent fetch operations.
            </summary>
            <param name="record">the Record to be filled with the result of the seek</param>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the seek failed</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            After seeking, the Record may then be used for subsequent Update, Delete, and Refresh
            operations.  All primary key columns of the table must be in the query and the Record must
            have at least as many fields as the query. Seek cannot be used with multi-table queries.
            This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Merge(Microsoft.WindowsInstaller.Record)">
            <summary>
            Inserts or validates a record.
            </summary>
            <param name="record">the Record to be merged</param>
            <returns>true if the record was inserted or validated, false if there is an existing
            record with the same primary keys that is not identical</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the merge failed (for a reason other than invalid data)</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Works only with read-write records. This method cannot be used with a
            View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.Validate(Microsoft.WindowsInstaller.Record)">
            <summary>
            Validates a record.
            </summary>
            <param name="record">the Record to be validated</param>
            <returns>true if the record was validated, false if there is an existing
            record with the same primary keys that has conflicting data</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the validation failed (for a reason other than invalid data)</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            The Record must have been obtained by calling <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/>.
            Works with read-write and read-only records. This method cannot be used
            with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.ValidateNew(Microsoft.WindowsInstaller.Record)">
            <summary>
            Validates a new record.
            </summary>
            <param name="record">the Record to be validated</param>
            <returns>true if the record was validated, false if there is an existing
            record with the same primary keys</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the validation failed (for a reason other than invalid data)</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Checks for duplicate keys. The Record must have been obtained by
            calling <see cref="M:Microsoft.WindowsInstaller.View.Fetch"/>. Works with read-write and read-only records.
            This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.ValidateField(Microsoft.WindowsInstaller.Record)">
            <summary>
            Validates fields of a fetched or new record. Can validate one or more fields of an
            incomplete record.
            </summary>
            <param name="record">the Record to be validated</param>
            <returns>true if the record was validated, false if there is an existing
            record with the same primary keys that has conflicting data</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the validation failed (for a reason other than invalid data)</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Works with read-write and read-only records. This method cannot be used with
            a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.ValidateDelete(Microsoft.WindowsInstaller.Record)">
            <summary>
            Validates a record that will be deleted later.
            </summary>
            <param name="record">the Record to be validated</param>
            <returns>true if the record is safe to delete, false if another row refers to
            the primary keys of this row</returns>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the validation failed (for a reason other than invalid data)</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
            <remarks>
            Validation does not check for the existence of the primary keys of this row in properties
            or strings. Does not check if a column is a foreign key to multiple tables. Works with
            read-write and read-only records. This method cannot be used with a View containing joins.
            <para>See <see cref="M:Microsoft.WindowsInstaller.View.Modify(Microsoft.WindowsInstaller.ViewModifyMode,Microsoft.WindowsInstaller.Record)"/> for more remarks.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsInstaller.View.GetValidationErrors">
            <summary>
            Returns information about the errors encountered by the <see cref="M:Microsoft.WindowsInstaller.View.Validate(Microsoft.WindowsInstaller.Record)"/>, <see cref="M:Microsoft.WindowsInstaller.View.ValidateNew(Microsoft.WindowsInstaller.Record)"/>,
            or <see cref="M:Microsoft.WindowsInstaller.View.ValidateField(Microsoft.WindowsInstaller.Record)"/> methods.
            </summary>
            <returns>An array of error information structures, or null if no errors were encountered.</returns>
        </member>
        <member name="P:Microsoft.WindowsInstaller.View.Database">
            <summary>
            Gets the Database on which this View was opened.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.View.QueryString">
            <summary>
            Gets the SQL query string used to open this View.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.View.QueryTables">
            <summary>
            Gets the set of tables that were included in the query for this View,
            or null if this view is not a SELECT query.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.View.Columns">
            <summary>
            Gets the set of columns that were included in the query for this View,
            or null if this view is not a SELECT query.
            </summary>
            <exception cref="T:Microsoft.WindowsInstaller.InstallerException">the View is not in an active state</exception>
            <exception cref="T:Microsoft.WindowsInstaller.InvalidHandleException">the View handle is invalid</exception>
        </member>
        <member name="T:Microsoft.WindowsInstaller.ValidationErrorInfo">
            <summary>
            Contains specific information about an error encountered by the <see cref="M:Microsoft.WindowsInstaller.View.Validate(Microsoft.WindowsInstaller.Record)"/>,
            <see cref="M:Microsoft.WindowsInstaller.View.ValidateNew(Microsoft.WindowsInstaller.Record)"/>, or <see cref="M:Microsoft.WindowsInstaller.View.ValidateField(Microsoft.WindowsInstaller.Record)"/> methods of the
            <see cref="T:Microsoft.WindowsInstaller.View"/> class.  Theis extended error information can be retrieved with the
            <see cref="M:Microsoft.WindowsInstaller.View.GetValidationErrors"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationErrorInfo.Error">
            <summary>
            Gets the type of validation error encountered.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsInstaller.ValidationErrorInfo.Column">
            <summary>
            Gets the column containing the error, or null if the error applies to the whole row.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\bin\vs9sp1\x86-amd64\vcvarsx86_amd64.txt ===
@if "%VSINSTALLDIR%"=="" goto error_no_VSINSTALLDIR
@if "%VCINSTALLDIR%"=="" goto error_no_VCINSTALLDIR

@echo Setting environment for using Microsoft Visual Studio 2008 Beta2 x64 cross tools.

@call :GetWindowsSdkDir

@if not "%WindowsSdkDir%" == "" (
	set "PATH=%WindowsSdkDir%bin;%PATH%"
	set "INCLUDE=%WindowsSdkDir%include;%INCLUDE%"
	set "LIB=%WindowsSdkDir%lib\x64;%LIB%"
)


@rem
@rem Root of Visual Studio IDE installed files.
@rem
@set DevEnvDir=%VSINSTALLDIR%\Common7\IDE

@set PATH=%DevEnvDir%;%VCINSTALLDIR%\BIN\x86_amd64;%VCINSTALLDIR%\BIN;%VSINSTALLDIR%\Common7\Tools;%VSINSTALLDIR%\Common7\Tools\bin;%FrameworkDir%\%Framework35Version%;%FrameworkDir%\%Framework35Version%\Microsoft .NET Framework 3.5 (Pre-Release Version);%FrameworkDir%\%FrameworkVersion%;%VCINSTALLDIR%\VCPackages;%PATH%
@set INCLUDE=%VCINSTALLDIR%\ATLMFC\INCLUDE;%VCINSTALLDIR%\INCLUDE;%INCLUDE%
@set LIB=%VCINSTALLDIR%\ATLMFC\LIB\amd64;%VCINSTALLDIR%\LIB\amd64;%LIB%

@set LIBPATH=%FrameworkDir%64\%Framework35Version%;%FrameworkDir%64\%FrameworkVersion%;%FrameworkDir%\%Framework35Version%;%FrameworkDir%\%FrameworkVersion%;%VCINSTALLDIR%\ATLMFC\LIB\amd64;%VCINSTALLDIR%\LIB\amd64;%LIBPATH%

@goto end

:GetWindowsSdkDir
@call :GetWindowsSdkDirHelper HKLM > nul 2>&1
@if errorlevel 1 call :GetWindowsSdkDirHelper HKCU > nul 2>&1
@if errorlevel 1 echo WindowsSdkDir not found
@exit /B 0

:GetWindowsSdkDirHelper
@SET WindowsSdkDir=
@for /F "tokens=1,2*" %%i in ('reg query "%1\SOFTWARE\Microsoft\Microsoft SDKs\Windows" /v "CurrentInstallFolder"') DO (
	if "%%i"=="CurrentInstallFolder" (
		SET "WindowsSdkDir=%%k"
	)
)
@if "%WindowsSdkDir%"=="" exit /B 1
@exit /B 0

:error_no_VSINSTALLDIR
@echo ERROR: VSINSTALLDIR variable is not set. 
@goto end

:error_no_VCINSTALLDIR
@echo ERROR: VCINSTALLDIR variable is not set. 
@goto end

:end
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\BuildTracker\Api\3.6\Microsoft.BuildTracker.Client.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.BuildTracker.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.BuildTracker.Client.Branch">
            <summary>
            Represents a BuildTracker branch
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.#ctor(Microsoft.BuildTracker.Client.Product,Microsoft.BuildTracker.Contracts.BranchData)">
            <summary>
            Creates an instance of Branch connected to an existing server-side branch
            </summary>
            <param name="parentProduct">Product that is the parent of the branch being created</param>
            <param name="branchData">BranchData object containing field values for this branch</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.BranchData)">
            <summary>
            Creates an instance of Branch connected to an existing server-side branch
            </summary>
            <param name="buildTracker">A reference to the BuildTracker service that is being used</param>
            <param name="branchData">BranchData object containing field values for this branch</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.Refresh">
            <summary>
            Reloads the fields
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.Save">
            <summary>
            Saves the fields
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.CreateBuildJobDefinition(System.String)">
            <summary>
            Creates a new job definition
            </summary>
            <param name="jobDefinitionName">The name of the new job. Needs to be unique within all jobs under the same branch.</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.Delete">
            <summary>
            Deletes this branch
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.GetProduct">
            <summary>
             Gets the parent product
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.GetJobDefinition(System.String)">
            <summary>
            Gets a job definition by name
            </summary>
            <param name="jobDefinitionName">The name of the job definition to get.</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.QueryJobInstances(System.String,Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses)">
            <summary>
            Simplified Job Instance querying using requestedBy and status only.
            Gets all job instances under this branch, for the given requester id and with the given statuses.
            </summary>
            <param name="requestedBy">name of the users who created the jobs</param>
            <param name="jobInstanceQueryStatuses">status of the included job instances</param>
            <returns>Collection of JobInstances with the matching status</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.GetBuildShareGroups">
            <summary>
            Returns collection of associated BuildShareGroups
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.GetBuildShareGroup(System.String)">
            <summary>
            Gets a BuildShareGroup by name
            </summary>
            <param name="buildShareGroupName">The name of the BuildShareGroup to lookup</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.CreateBuildShareGroup(System.String,System.String,System.String,System.String)">
            <summary>
            Creates BuildShareGroup with default systemwide retention job definition
            </summary>
            <param name="buildShareGroupName">name of the build share group</param>
            <param name="buildShareGroupType">Type of BuildShare, e.g. Official, Buddy etc.</param>
            <param name="dropSharePath">path for drop folder, location where drop folder should be created </param>
            <param name="sourceSharePath">path for source folder, location where source folder should be created </param>
            <returns>object of BuildShareGroup which was created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.CreateBuildShareGroup(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates BuildShareGroup
            </summary>
            <param name="buildShareGroupName">name of the build share group</param>
            <param name="buildShareGroupType">Type of BuildShare, e.g. Official, Buddy etc.</param>
            <param name="dropSharePath">path for drop folder, location where drop folder should be created </param>
            <param name="sourceSharePath">path for source folder, location where source folder should be created </param>
            <param name="retentionJobDefinitionId">Id of the systemwide retention job definition, which will be associated with BuildShareGroup</param>
            <returns>object of BuildShareGroup which was created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.GetJobSchedules">
            <summary>
            Gets all of the JobSchedules for this Branch
            </summary>
            <returns>A collection of JobSchedule objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this branch
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.GetBuildJobDefinitions">
            <summary>
            Gets all build job definitions for this branch
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A Branch object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Branch.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.Name">
            <summary>
            Name of the branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.Id">
            <summary>
            BuildTracker Id value of the branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.CreateTime">
            <summary>
            DateTime when the branch was created
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.ProductId">
            <summary>
            BuildTracker Id value of the parent product of this branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.RunAsAlias">
            <summary>
            Account to run legs under, unless overridden
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this branch.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.Owners">
            <summary>
            List of aliases that are owners for this branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.Wcf">
            <summary>
            Shortcut to wcf
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.EnlistmentSettings">
            <summary>
            Enlistment configuration settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.InheritBuildDropParameters">
            <summary>
            A value of true indicates that this branch inherits BuildDropParameter definitions from it's parent product.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Branch.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this branch
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildDrop">
            <summary>
            Represents a build drop (an output of a build job)
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.AddRemark(Microsoft.BuildTracker.Contracts.RemarkType,System.String)">
            <summary>
            Adds a new build drop remark
            </summary>
            <param name="text">the text of the remark to add</param>
            <param name="type">the type of the remark to add</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.GetRemarks">
            <summary>
            Gets all remarks associated with the given build drop
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.GetBuildJobInstances">
            <summary>
            Gets all related build job instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.GetDropJobInstances">
            <summary>
            Gets all related drop job instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.GetRetentionJobInstances">
            <summary>
            Gets all related retention job instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.ChangeRetentionStatus(Microsoft.BuildTracker.Contracts.BuildDropRetentionStatus)">
            <summary>
            changes the retention status for a given build drop
            </summary>
            <param name="newStatus">the new status to set the build drop to</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.Backup">
            <summary>
            Requests a backup of this build drop
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.Preserve">
            <summary>
            Marks this build drop to be preserved (no retention policies will touch it).
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.Unpreserve">
            <summary>
            Unpreserves a previously preserved build drop.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.RequestDeletion">
            <summary>
            Requests this build drop to be deleted.
            </summary>
            <remarks>The deletion can actually take a little bit to actually happen 
            as the deletion is handled by a background process.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.Refresh">
            <summary>
            Refreshes the properties of this BuildDrop with the data that is stored in BuildTracker
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.Save">
            <summary>
            Saves parameter changes back to the BuildTracker service
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A BuildDrop object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDrop.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.Wcf">
            <summary>
            Shortcut to get to the WCF
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.Id">
            <summary>
            Id of this BuildDrop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.BuildShareGroupId">
            <summary>
            Id of a BuildShareGroup that contains this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.Name">
            <summary>
            The name of this build drop as defined in the build's scripts.
            Typically this is the version string.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.SourcePath">
            <summary>
            Path to the Sources location of this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.DropPath">
            <summary>
            Path to the Drop location of this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.LogsPath">
            <summary>
            Path to the Logs location of this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.StartedTime">
            <summary>
            The moment when the build drop started being copied to its BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.DroppedTime">
            <summary>
            The moment when the build drop was dropped to the BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.DeletedTime">
            <summary>
            The moment when the build drop was deleted from the BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.Size">
            <summary>
            The size of the build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.RetentionStatus">
            <summary>
            Indicates the retentions status (deleted, preserved, etc. ...)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.RetentionMessage">
            <summary>
            Any retention related messages go here.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.RetentionExceptionOccurred">
            <summary>
            Indicates if there were any issues while processing retention for this build drop.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.Result">
            <summary>
            Overall build result. This is an aggregation of all BuildJobInstance statuses for this BuildDrop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.IsDeleted">
            <summary>
            Indicates if this build drop is deleted.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDrop.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this BuildDrop
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildDropQuery">
            <summary>
            Defines the elements of a query that selects a set of BuildDrops.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropQuery.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropQuery.#ctor(Microsoft.BuildTracker.Contracts.BuildDropQueryData)">
            <summary>
            Constructor
            </summary>
            <param name="buildDropQueryData">BuildDropQueryData object containing values to filter by</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.DateFrom">
            <summary>
            Start of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.DateTo">
            <summary>
            End of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.ProductId">
            <summary>
            Filter to build drops under the given product only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.BranchId">
            <summary>
            Filter to build drops under the given branch only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.BuildShareGroupId">
            <summary>
            Filter to build drops under the given build share group only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.SubmittedBy">
            <summary>
            Filter only builds submitted by this user
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.ParameterName">
            <summary>
            Filter only builds with this parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.ParameterValue">
            <summary>
            Filter only builds with this value for the parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.JobDefinitionId">
            <summary>
            Filter only builds from this job definition.  
            If both both JobDefinitionID and JobDefinitionName are supplied, JobDefinitionId takes precedence.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.JobDefinitionName">
            <summary>
            Filter only builds from this job definition.  
            If both both JobDefinitionID and JobDefinitionName are supplied, JobDefinitionId takes precedence.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.JobTypes">
            <summary>
            Filter only builds having these types
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.IncludeDeleted">
            <summary>
            Return deleted builds in the results
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.FailedOnly">
            <summary>
            Only return failed builds in the results
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropQuery.TopN">
            <summary>
            Limit results to this number of builds
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildShareGroup">
            <summary>
            Logical grouping of Build Shares (typically, a Drop Share path and a Source Share path) for which Build Retention Policies and Build Drop Policies can be defined.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.BuildShareGroupData)">
            <summary>
            Constructor to assign BuildShareGroupData values to this client class
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetRetentionJobDefinitions">
            <summary>
            Collection of RetentionJob definitions available for this buildshare group.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetRetentionJobDefinition(System.String)">
            <summary>
            Get a retention job definition by name.
            </summary>
            <param name="jobName">Name of the desired retention job definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.CreateRetentionJobDefinition(System.String)">
            <summary>
            Creates a retentionJobDefinition specific to this buildsharegroup
            </summary>
            <param name="retentionJobDefinitionName">name of RetentionJobDefinition</param>
            <returns>object of RetentionJobDefinition, created by this operation</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetRetentionPolicies">
            <summary>
            Gets a collection of all local retention policies defined for this BSG.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.CreateRetentionPolicy(System.Int32,System.Boolean,System.Int32,Microsoft.BuildTracker.Contracts.RetentionCondition)">
            <summary>
            Creates a new local retention policy, specific to this build share group
            </summary>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="quantity">Worked with Condition property, mandatory field, Value in this property will be replaced with Number in Condition property</param>
            <param name="retentionCondition">Condition for the execution of this policy</param>
            <returns>object of RetentionPolicy, which is created</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetAdminRetentionPolicies">
            <summary>
            Only a lab admin can create admin policies. These are forced on a given BSG. And cannot be opted out of.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.CreateAdminRetentionPolicy(System.Int32,System.Boolean,System.Int32,Microsoft.BuildTracker.Contracts.RetentionCondition)">
            <summary>
            Creates an Admin Retention policy for this build share group
            Only Admin can create Admin Retention policies
            </summary>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="quantity">Worked with Condition property, mandatory field, Value in this property will be replaced with Number in Condition property</param>
            <param name="retentionCondition">Condition for the execution of this policy</param>
            <returns>An admin RetentionPolicy which is associated with this BSG.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetDropJobDefinitions">
            <summary>
            Collection of drop job definitions available for this buildshare group.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetDropJobDefinition(System.String)">
            <summary>
            Get a drop job definition by name.
            </summary>
            <param name="jobName">Name of the desired drop job definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.CreateDropJobDefinition(System.String)">
            <summary>
            Creates a local DropJobDefinition - specific to this buildsharegroup
            </summary>
            <param name="dropJobDefinitionName">name of DropJobDefinition</param>
            <returns>object of DropJobDefinition, created by this operation</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetDropPolicies">
            <summary>
            Gets a collection of all local drop policies defined for this BSG.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.CreateDropPolicy(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a local (BSG - specific) drop policy.
            </summary>
            <param name="dropJobId">Id of the DropJobDefinition</param>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="runOnAutoDiscoveredBuild">Policy will execute auto discovered build</param>
            <returns>object of DropPolicy created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetExcludedSystemDropPolicies">
            <summary>
            System wide drop policies which are opted out of/excluded for this BSG.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.IncludeSystemPolicy(System.Int32)">
            <summary>
            Includes a system wide policy, which was previously excluded for this BSG.
            </summary>
            <param name="systemPolicyId">Id of the system policy, which will be included</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.ExcludeSystemPolicy(System.Int32)">
            <summary>
            Excludes a system wide policy for this BSG.
            </summary>
            <param name="systemPolicyId">Id of a system policy, which will be excluded</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetExcludedSystemRetentionPolicies">
            <summary>
            System wide retention policies which are opted out of/excluded for this BSG.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetAdminDropPolicies">
            <summary>
            Only a lab admin can create admin policies. These are forced on a given BSG. And cannot be opted out of.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.CreateAdminDropPolicy(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates an Admin drop policy for this build share group
            Only Admin can create Admin Drop policies
            Admin policies will be executed under admin account only.
            </summary>
            <param name="dropJobId">Id of the DropJobDefinition</param>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="runOnAutoDiscoveredBuild">Policy will execute auto discovered build</param>
            <returns>object of DropPolicy created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetBuildDrops(System.Boolean)">
            <summary>
            Gets the build drops for this BuildShareGroup
            </summary>
            <param name="excludeDeletedBuilds">Flag indicating whether deleted BuildDrops should be excluded in the retruned collection.</param>
            <returns>A collection of BuildDrop objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetBuildDrop(System.String)">
            <summary>
            Returns the BuildDrop for this BuildShareGroup with the given name
            </summary>
            <param name="buildDropName">Name of the build drop to get.</param>
            <returns>A BuildDrop object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.Save">
            <summary>
            Method to save changes of build share group properties.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.Delete">
            <summary>
            Method to delete Build share group.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.Refresh">
            <summary>
            Method makes call to backend and refreshes class properties
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this BuildShareGroup
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A BuildShareGroup object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildShareGroup.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.Name">
            <summary>
            Name of this BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.Id">
            <summary>
            unique Id
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.ParentId">
            <summary>
            Id of the parent item, Only Product or Branch can be parent of a BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.Description">
            <summary>
            Description of BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.BuildShareGroupType">
            <summary>
            Type of BuildShareGroup, e.g. Official, Buddy etc.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.DropSharePath">
            <summary>
            path for drop folder, location where drop folder should be created 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.SourceSharePath">
            <summary>
            path for source folder, location where source folder should be created 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.RunAsAlias">
            <summary>
            Specific user's Alias. If set, retention and drop jobs will run under this account.
            If not specified, default user's credentials will be used.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this BuildShareGroup.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.DiscoverBuilds">
            <summary>
            Builds are auto-discovered if they exist on a Build Share, or marked as deleted if they do not exist on a Build Share.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.PreserveBuilds">
            <summary>
            If specified, discovered builds will be preserved.
            Preserved builds are excluded from any Build Retention Policies.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.RetentionJobDefinitionId">
            <summary>
            Id of RetentionJobDefinition which will be associated with this BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.RetentionRequiresOwnerApproval">
            <summary>
            Build retention policy instances can only queue retention jobs in pending state at queue time.
            A Build Share Group owner needs to approve the job execution.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.EnlistmentSettings">
            <summary>
            Enlistment configuration settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.InheritBuildDropParameters">
            <summary>
            A value of true indicates that this BuildShareGroup inherits BuildDropParameter definitions from it's parent product or branch.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildShareGroup.Wcf">
            <summary>
            Shortcut to get to the Wcf object of IBuildShareGroup
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildDropCollection">
            <summary>
            BuildDrops
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.NamedItemCollection`1">
            <summary>
            Base collection class for all Client collections.
            All common client-collection specific methods will be added here as needed.
            Indexing, getting by name, id are examples ...
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.NamedItemCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.NamedItemCollection`1.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">An object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.NamedItemCollection`1.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.NamedItemCollection`1.ModifiableCollection">
            <summary>
            The modifiable underlying list
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.AffinityCollection">
            <summary>
            A collection of Affinities
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.UnnamedItemCollection`1">
            <summary>
            Base collection class for Client classes that are not named items
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnnamedItemCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnnamedItemCollection`1.#ctor(System.Collections.ObjectModel.Collection{`0})">
            <summary>
            Creates an UnnamedItemCollection from a Collection of T
            </summary>
            <param name="itemList">Collection of T</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnnamedItemCollection`1.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">An object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnnamedItemCollection`1.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.AffinityCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.AffinityCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.AffinityData})">
            <summary>
            Constructor
            </summary>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
            <param name="affinitiesData">Collection of AffinityData</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildShareGroupCollection">
            <summary>
            BuildShareGroups
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildDropParameterCollection">
            <summary>
            A collection of BuildDropParameters
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropParameterCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropParameterCollection.#ctor(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.ParameterDefinitionData})">
            <summary>
            Constructor
            </summary>
            <param name="parametersData">Collection of ParameterDefinitionData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropParameterCollection.#ctor(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.ParameterInstanceData})">
            <summary>
            Constructor
            </summary>
            <param name="parametersData">Collection of ParameterDefinitionData</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobServiceCollection">
            <summary>
            A collection of machines
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobServiceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobServiceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.JobServiceData})">
            <summary>
            Creates a JobServiceCollection from a list of JobServiceData (from WCF)
            </summary>
            <param name="jobServiceDataList">Collection of JobServiceData</param>
            <param name="parent">the BuildTrackerService</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobScheduleCollection">
            <summary>
            A collection of build jobs
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RetentionPolicyCollection">
            <summary>
            RetentionPolicies
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DropPolicyCollection">
            <summary>
            DropPolicies
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ParameterValueCollection">
            <summary>
            A collection of Parameters
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterValueCollection.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterValueCollection.#ctor(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Client.ParameterValue})">
            <summary>
            Constructor
            </summary>
            <param name="parameterValues">collection of ParameterValues</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ServiceIntervalCollection">
            <summary>
            A collection of ServiceIntervals
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ServiceIntervalCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.ServiceIntervalData})">
            <summary>
            Creates a ServiceIntervalCollection from a list of ServiceIntervalData (from WCF)
            </summary>
            <param name="serviceIntervalDataList"></param>
            <param name="parent"></param>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceIntervalCollection.Item(System.String)">
            <summary>
            Indexer to return a ServiceInterval from the collection based on it's name
            </summary>
            <param name="name">Name of the ServiceInterval to return</param>
            <returns>A ServiceInterval object</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ParameterCollection">
            <summary>
            A collection of Parameters
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterCollection.#ctor(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.ParameterDefinitionData})">
            <summary>
            Constructor
            </summary>
            <param name="parametersData">Collection of ParameterDefinitionData</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DiskCollection">
            <summary>
            A collection of Disks
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DiskCollection.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A DiskCollection object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DiskCollection.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.AccountNameCollection">
            <summary>
            A collection of Owners
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.AccountNameCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.AccountNameCollection.#ctor(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Creates a AccountNameCollection from a Collection of string
            </summary>
            <param name="ownerList">Collection of owners</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.AccountNameCollection.Contains(System.String)">
            <summary>
            Case-insensitive Contains method
            </summary>
            <param name="owner">The owner to find in the collection</param>
            <returns>True if the owner is found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.AccountNameCollection.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">An AccountNameCollection object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.AccountNameCollection.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.MachineGroupCollection">
            <summary>
            A collection of MachineGroups
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroupCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.MachineGroupData})">
            <summary>
            Creates a MachineGroupCollection from a list of MachineGroupData (from WCF)
            </summary>
            <param name="machineGroupDataList"></param>
            <param name="parent"></param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.MachineCollection">
            <summary>
            A collection of machines
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.MachineData})">
            <summary>
            Creates a MachineCollection from a list of MachineData (from WCF)
            </summary>
            <param name="machineDataList"></param>
            <param name="parent"></param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DropJobDefinitionCollection">
            <summary>
            A collection of drop jobs
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DropJobInstanceCollection">
            <summary>
            JobInstances
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropJobInstanceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.DropJobInstanceData})">
            <summary>
            Creates a DropJobInstanceCollection from a collection of DropJobInstanceData (from WCF)
            </summary>
            <param name="dropJobInstanceDataCollection">Collection of Contracts.DropJobInstanceData objects</param>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropJobInstanceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.JobInstanceData})">
            <summary>
            Creates a JobInstanceCollection from a list of JobInstanceData (from WCF)
            </summary>
            <param name="jobInstanceDataCollection">Collection of Contracts.JobInstanceData objects</param>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegInstanceExecutionCollection">
            <summary>
            a collection of LegInstanceExecutions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegInstanceExecutionDataPointCollection">
            <summary>
            a collection of LegInstanceExecutionDataPoints
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RemarkCollection">
            <summary>
            A collection of remarks
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RemarkCollection.#ctor(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.RemarkData})">
            <summary>
            Creates a RemarkCollection from a list of RemarkData (from WCF)
            </summary>
            <param name="remarkDataList"></param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RetentionJobDefinitionCollection">
            <summary>
            A collection of retention jobs
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RetentionJobInstanceCollection">
            <summary>
            JobInstances
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionJobInstanceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.RetentionJobInstanceData})">
            <summary>
            Creates a RetentionJobInstanceCollection from a collection of RetentionJobInstanceData (from WCF)
            </summary>
            <param name="retentionJobInstanceDataCollection">Collection of Contracts.RetentionJobInstanceData objects</param>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionJobInstanceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.JobInstanceData})">
            <summary>
            Creates a JobInstanceCollection from a list of JobInstanceData (from WCF)
            </summary>
            <param name="jobInstanceDataCollection">Collection of Contracts.JobInstanceData objects</param>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.Affinity">
            <summary>
            An affinity between BuildTracker items and MachineGroups
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService)">
            <summary>
            Private Constructor
            </summary>
            <param name="buildTracker">Object of BuildTrackerService</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Int32)">
            <summary>
            Instantiates a Affinity object by looking it up by ID
            </summary>
            <param name="id"></param>
            <param name="buildTracker"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.AffinityData)">
            <summary>
            Creates an instance initializing its data to the one passed in
            </summary>
            <param name="buildTracker"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.Save">
            <summary>
            Persists the changes in this class to the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.Refresh">
            <summary>
            Gets the latest data for this class from the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.Delete">
            <summary>
            Deletes this affinity
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.Equals(System.Object)">
            <summary>
            Override of Object.Equals method
            </summary>
            <param name="obj">A Affinity object to compare to.</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>True if the Affinity objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Affinity.GetHashCode">
            <summary>
            Override of Object.GetHashCode
            </summary>
            <returns>A hashcode value for this Affinity object.</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.BuildTrackerService">
            <summary>
            The parent BuildTrackerService this Affinity belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.Data">
            <summary>
            Data of affinity
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.Id">
            <summary>
            Affinity's Id
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.MachineGroupId">
            <summary>
            Id of the MachineGroup to affinity with
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.ResourceId">
            <summary>
            Id of the resource to be affinitied
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.ResourceType">
            <summary>
            Type of resource to affinity to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.AffinityType">
            <summary>
            The type of affinity relationship
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.JobType">
            <summary>
            Type of job afffinity applies to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.AlternateParentId">
            <summary>
            Id of the parent to use for the affinity when the affinity is set to a system-level resource
            </summary>
            <remarks>
            When the affinity is system-level, this contains the Id of the BuildShareGroup that is the parent
            of the drop/retention job.  Otherwise this value is null.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Affinity.WcfAffinity">
            <summary>
            Shortcut to get to the WCF IAffinity
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.Disk">
            <summary>
            A disk that belongs to a machine
            Contains information about enlisting, logging and alert settings for the disk.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Disk.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.DiskData)">
            <summary>
            Creates an instance initializing its data to the one passed in
            </summary>
            <param name="buildTracker"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Disk.Save">
            <summary>
            Persists the changes in this class to the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Disk.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">Disk object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Disk.GetHashCode">
            <summary>
            Gets a hashcode value
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.BuildTrackerService">
            <summary>
            The parent BuildTrackerService this Disk belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.Data">
            <summary>
            Data of disk
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.DriveLetter">
            <summary>
            Drive letter of this disk.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.CanEnlist">
            <summary>
            Indicates if BuildTracker can use this disk for enlistments.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.AllowLogs">
            <summary>
            Indicates if BUildTracker can store logs on this disk.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.FreeSpacePercentageErrorLevel">
            <summary>
            Errors are triggered if free space is below this % level
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.FreeSpacePercentageWarningLevel">
            <summary>
            Warnings are triggered if free space is below this % level
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.FreeSpacePercentageRequiredLevel">
            <summary>
            BuildTracker will cleanup disk space (enlistements, logs) if free space is below this % level.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.FreeSpaceRequiredMB">
            <summary>
            Mb required of free space. If less free space is requested, cleanup will start.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.TotalSize">
            <summary>
            Total disk size in Mb
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.AvailableSize">
            <summary>
            Available disk size in Mb
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.AvailablePercentage">
            <summary>
            Available disk percentage
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Disk.WcfDisk">
            <summary>
            Shortcut to get to the WCF IDisk
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DropPolicy">
            <summary>
            Defines a condition upon which a drop job gets queued up
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobPolicy">
            <summary>
            Defines basic condition upon which a job gets queued up
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobPolicy.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="id">Id of the policy</param>
            <param name="buildShareGroupId">Id of the owner BuildShareGroup. Should be 0 for systemwide policies.</param>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobPolicy.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.PolicyData)">
            <summary>
            Constructor to assign PolicyData values to this client class
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobPolicy.Delete">
            <summary>
            Deletes a job policy
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobPolicy.Save">
            <summary>
            Save Policy.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobPolicy.Refresh">
            <summary>
            Refreshes the fields value of this class
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobPolicy.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A JobPolicy object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobPolicy.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobPolicy.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobPolicy.Id">
            <summary>
            Id of the policy
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobPolicy.BuildShareGroupId">
            <summary>
            Id of the owner BuildShareGroup. Value will be 0 for systemwide policies.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobPolicy.MinutesDelayAfterBuildJobCompletes">
            <summary>
            starting time of this policy after build completed
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobPolicy.Enabled">
            <summary>
            This instance of the Policy is enabled
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobPolicy.BuildShareGroupType">
            <summary>
            Used for system wide policies to target specific BSG types only.
            Ignored for BSG-specific policies.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropPolicy.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            RetentionPolicyData overloaded constructor
            </summary>
            <param name="id">Id of the policy</param>
            <param name="buildShareGroupId">Id of the owner BuildShareGroup</param>
            <param name="dropJobId">Id of the drop job, which will be associated with this policy</param>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="runOnAutoDiscoveredBuild">Policy will execute auto discovered build</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropPolicy.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            RetentionPolicyData overloaded constructor
            </summary>
            <param name="buildShareGroupId">Id of the owner BuildShareGroup</param>
            <param name="dropJobId">Id of the drop job, which will be associated with this policy</param>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="runOnAutoDiscoveredBuild">Policy will execute auto discovered build</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropPolicy.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.DropPolicyData)">
            <summary>
            Constructor to convert DropPolicyData to DropPolicy 
            </summary>
            <param name="buildTrackerService">Object of BuildTrackerService</param>
            <param name="dropPolicyData">object of DropPolicyData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropPolicy.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A DropPolicy object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropPolicy.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.DropPolicy.DropJobId">
            <summary>
            Id of the drop job which will be executed under this policy
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.DropPolicy.RunOnAutoDiscoveredBuild">
            <summary>
            Policy will execute auto discovered build
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.EnlistmentSettings">
            <summary>
            Stores generic enlistment settings, BuidlTracker uses when assigning real enlistments on disk or creating new enlistments
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnlistmentSettings.#ctor">
            <summary>
            Creates a new instance with inheriting all settings from parent
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnlistmentSettings.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="fixedEnlistmentPath">value to set unique enilistment configuration in place of auto-enlistment</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnlistmentSettings.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">EnlistmentSettings to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnlistmentSettings.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.EnlistmentSettings.Clean">
            <summary>
            If specified, removes any pending changes before the leg command is run.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.EnlistmentSettings.InheritClean">
            <summary>
            Allows to inherit Parent's Clean settings, local Clean settings will be ignored
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.EnlistmentSettings.FixedEnlistmentPath">
            <summary>
            To set fixed enlistment path, or static enlistment
            If specified, All other settings are ignored
            If left blank, BuildTracker will attempt to auto-enlist using the specified SourceDepot, SDX, Folder and TFS settings when running a Leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.EnlistmentSettings.InheritFixedEnlistmentPath">
            <summary>
            Allows to inherit Parent's FixedEnlistmentPath settings, local FixedEnlistmentPath settings will be ignored
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.EnlistmentSettings.DisableAclReset">
            <summary>
            Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.FolderEnlistmentSettings">
            <summary>
            Stores Enlistment settings for folder enlistment on a disk
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.FolderEnlistmentSettings.#ctor">
            <summary>
            Creates a new instance with inheriting all settings from parent
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.FolderEnlistmentSettings.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="fixedEnlistmentPath">value to set unique enilistment configuration in place of auto-enlistment</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.FolderEnlistmentSettings.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">FolderEnlistmentSettings to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.FolderEnlistmentSettings.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.SdxEnlistmentSettings">
            <summary>
            Stores enlistment settings for SDX source control
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.#ctor">
            <summary>
            To set default enlistment settings, Inherit from Parent
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance with inheriting all settings from parent
            </summary>
            <param name="fixedEnlistmentPath">value to set unique enilistment configuration in place of auto-enlistment</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="codeBase">The SDX CodeBase. Ignored if Fix Enlistment Path is set</param>
            <param name="projects">A list of projects. If not specified, -a will be passed to sdx enlist when creating new enlistments. Ignored if Fix Enlistment Path is set</param>
            <param name="branch">The SDX Branch. Ignored if Fixed Enlistment Path is set</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">SdxEnlistmentSettings to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.CodeBase">
            <summary>
            The SDX CodeBase. Ignored if Fix Enlistment Path is set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.InheritCodeBase">
            <summary>
            Allows to inherit Parent's CodeBase settings, local CodeBase settings will be ignonred.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.Projects">
            <summary>
            A list of projects. If not specified, -a will be passed to sdx enlist when creating new enlistments. Ignored if Fix Enlistment Path is set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.InheritProject">
            <summary>
            Allows to inherit Parent's Projects settings, local Projects settings will be ignonred.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.Branch">
            <summary>
            The SDX Branch. Ignored if Fix Enlistment Path is set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SdxEnlistmentSettings.InheritBranch">
            <summary>
            Allows to inherit Parent's Branch settings, local Branch settings will be ignonred.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings">
            <summary>
            Stores enlistment settings for Source Depot control
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.#ctor">
            <summary>
            Creates a new instance with inheriting all settings from parent
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To Set properties values if FixedEnlistmentPath Root is defined
            </summary>
            <param name="fixedEnlistmentPath">value to set unique enilistment configuration in place of auto-enlistment</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="serverName">Source Depot server name and port number to use to Auto-Enlist on build machines</param>
            <param name="proxyServerName">Source Depot proxy server name and port number to use for fetching source files during a build jobs</param>
            <param name="clientView">Source Depot client view to use to Auto-Enlist on build machines. Use the [CLIENT] keyword to denote the client name that is auto-generated</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">SourceDepotEnlistmentSettings to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.ServerName">
            <summary>
            Source Depot server name and port number to use to Auto-Enlist on build machines.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.InheritServerName">
            <summary>
            Allows to inherit Parent's ServerName, local ServerName will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.ProxyServerName">
            <summary>
            Source Depot proxy server name and port number to use for fetching source files during a build jobs.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.InheritProxyServerName">
            <summary>
            Allows to inherit Parent's ProxyServerName, local ProxyServerName will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.ClientView">
            <summary>
            Source Depot client view to use to Auto-Enlist on build machines. Use the [CLIENT] keyword to denote the client name that is auto-generated.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.InheritClientView">
            <summary>
            Allows to inherit Parent's ClientView, local ClientView will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.ClientOptions">
            <summary>
            Source Depot client options used when creating an enlistment on build machines. If empty, the default client options are used: noallwrite clobber nocompress locked nomodtime rmdir
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.SourceDepotEnlistmentSettings.InheritClientOptions">
            <summary>
            Allows to inherit Parent's ClientOptions, local ClientOptions will be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings">
            <summary>
            Stores enlistment settings for TFS source control
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.#ctor">
            <summary>
            Creates a new instance with inheriting all settings from parent
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To Set properties values if FixedEnlistmentPath Root is defined
            </summary>
            <param name="fixedEnlistmentPath">value to set unique enilistment configuration in place of auto-enlistment</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To Set properties values
            </summary>
            <param name="teamFoundationServerName">Team Foundation Server URL, Optional when an Enlistment Root is specified</param>
            <param name="workspaceMapping">Similar to what tf.exe workfold would return in your workspace. Use [CLIENT] to specify the root directory that BuildTracker will automatically create when auto-enlisting</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">TeamFoundationServerEnlistmentSettings to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.ServerName">
            <summary>
            Team Foundation Server URL, Optional when Fixed Enlistment Path is specified
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.InheritServerName">
            <summary>
            Allows to inherit Parent's TeamFoundationServerName settings, local TeamFoundationServerName settings will be ignored
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.WorkspaceMapping">
            <summary>
            Similar to what tf.exe workfold would return in your workspace. Use [CLIENT] to specify the root directory that BuildTracker will automatically create when auto-enlisting.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.TeamFoundationServerEnlistmentSettings.InheritWorkspaceMapping">
            <summary>
            Allows to inherit Parent's WorkspaceMapping settings, local WorkspaceMapping settings will be ignored
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.UnauthorizedException">
            <summary>
            Exception to be thrown for fail authorization of the user 
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ApiException">
            <summary>
            Base class for all BuildTracker Client Api exception
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization Constructor for ApiException class
            </summary>
            <param name="serializationInfo">Stores all the data needed to serialize or deserialize an object</param>
            <param name="streamingContext">Describes the source and destination of a given serialized stream</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ApiException.#ctor(System.ServiceModel.FaultException{Microsoft.BuildTracker.Contracts.ApiFault})">
            <summary>
            Constructor
            </summary>
            <param name="apiFault">ApiFault exception from Api service</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ApiException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
            <param name="stackTrace">Inner exception details</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ApiException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ApiException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
            <param name="exception">Inner exception</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ApiException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ApiException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Method to set SerializationInfo with the information of exception 
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object</param>
            <param name="context">Describes the source and destination of a given serialized stream</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ApiException.Message">
            <summary>
            Message that describes the exception
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ApiException.StackTrace">
            <summary>
            Inner exception details
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnauthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization Constructor for UnauthorizedException class
            </summary>
            <param name="serializationInfo">Stores all the data needed to serialize or deserialize an object</param>
            <param name="streamingContext">Describes the source and destination of a given serialized stream</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnauthorizedException.#ctor(System.ServiceModel.FaultException{Microsoft.BuildTracker.Contracts.AccessDeniedFault})">
            <summary>
            Constructor to convert AccessDeniedFault to UnauthorizedException
            </summary>
            <param name="accessDeniedFault">AccessDeniedFault thrown by the Api service</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnauthorizedException.#ctor(System.String,System.String)">
            <summary>
            Constructor to take message and stackTrace as input parameters
            </summary>
            <param name="message">exception message to be shown</param>
            <param name="stackTrace">exception stackTrace details</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnauthorizedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Method to set SerializationInfo with the information of exception 
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object</param>
            <param name="context">Describes the source and destination of a given serialized stream</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnauthorizedException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnauthorizedException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="message">excpetion message to be shown</param>
            <param name="exception">actual exception</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.UnauthorizedException.#ctor(System.String)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="message">exception message to be shown</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ExceptionExtension.ConvertToClientException(System.Exception)">
            <summary>
            Method to convert FaultException to specific Client Exception
            </summary>
            <param name="exception">thrown exception</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildJobInstance">
            <summary>
            Build Job Instance
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobInstance">
            <summary>
            An instance of a job. Instances are the entities that track execution of a job.
            </summary>
            <remarks>In pre BT v3.5 world they were called JobQueues</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.GetJobDefinition">
            <summary>
            Gets the GetJobDefinition this JobInstance is based on
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.GetRemarks">
            <summary>
            Gets all remarks associated with this JobInstance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.Abort">
            <summary>
            Aborts this JobInstance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.Retry(System.Boolean)">
            <summary>
            Retries this JobInstance
            </summary>
            <param name="resetSyncTime">Indicates whether the SyncTime should be reset to now.</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.Approve">
            <summary>
            Approves this job instance.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.Deny">
            <summary>
            Denies this job instance.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.Refresh">
            <summary>
            Refreshes the fields from the backend service
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.Delete">
            <summary>
            Cancels this Job Instance. This method can only be called if the JobInstance is not running yet.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.ChangePriority(Microsoft.BuildTracker.Contracts.JobPriority)">
            <summary>
            Method to change scheduling Priority of JobInstance
            </summary>
            <param name="jobSchedulingPriority">new job scheduling priority</param>
            <returns>Updated object of JobInstance</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.GetLegInstances">
            <summary>
            Gets leg instances this job instance consists of
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.ChangeParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Mehtod to update existing parameterInstances's selected value
            </summary>
            <param name="parameterAndValues">Collection of KeyValue pair. Key should be any exisitng ParameterInstance name, value would be new selected value</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.AddRemark(Microsoft.BuildTracker.Contracts.RemarkType,System.String)">
            <summary>
            Adds a new job instance remark
            </summary>
            <param name="text">the text of the remark to add</param>
            <param name="type">the type of the remark to add</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">JobInstance to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstance.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Name">
            <summary>
            Name of the GetJobDefinition for this JobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Id">
            <summary>
            The Id for this JobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Priority">
            <summary>
            priority Id
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.JobScheduleId">
            <summary>
            id of the schedule that started this JobInstance
            if the job was started manually this field is not set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.JobDefinitionId">
            <summary>
            Id of the parent job definition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.ParentJobInstanceId">
            <summary>
            ID of the parent job instance. 
            Applicable only to child jobs of job legs.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.StartDateTime">
            <summary>
            the date and time when this JobInstance was started
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.CompletedDateTime">
            <summary>
            the date and time when this JobInstance was completed
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.SubmittedBy">
            <summary>
            user name who submitted the job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.SequenceDateTime">
            <summary>
            the date and time when this JobInstance was sequenced
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Simulate">
            <summary>
            Should this be a simulated job?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Status">
            <summary>
            Status of this JobInstance (queued, running, failed, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.NotifyRequester">
            <summary>
            Indicates if the requester should be notified when this jobInstance completes.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Sync">
            <summary>
            Sync
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.SyncDateTime">
            <summary>
            sync to the given point in time
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Parameters">
            <summary>
            Collection of Parameter Instances, Parameters assign to JobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.Wcf">
            <summary>
            Shortcut to get to the Wcf object of IJobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.BuildDropId">
            <summary>
            ID of the build drop associated with this JobInstance, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.IsStarted">
            <summary>
            To check if JobInstance is under Started status category
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstance.IsFinished">
            <summary>
            To check if JobInstance under Finished status category
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobInstance.GetJobDefinition">
            <summary>
            Gets the parent (BuildJobDefinition)
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobInstance.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">BuildJobInstance to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobInstance.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildJobInstance.ProductId">
            <summary>
            Id of a Product this BuildJobInstance belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildJobInstance.BranchId">
            <summary>
            Id of a Branch this BuildJobInstance belongs to
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToContractData(Microsoft.BuildTracker.Client.ParameterCollection)">
            <summary>
            Method to convert 'Collection of Parameter' to 'Collection of ParameterDefinitionData'
            </summary>
            <param name="parameterCollection">Collection of parameters</param>
            <returns>Collection of ParameterDefinitionData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToContractData(Microsoft.BuildTracker.Client.BuildDropParameterCollection)">
            <summary>
            Method to convert 'Collection of Parameter' to 'Collection of ParameterDefinitionData'
            </summary>
            <param name="parameterCollection">Collection of parameters</param>
            <returns>Collection of ParameterDefinitionData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToParameterInstanceContractData(Microsoft.BuildTracker.Client.BuildDropParameterCollection)">
            <summary>
            Method to convert 'Collection of Parameter' to 'Collection of ParameterDefinitionData'
            </summary>
            <param name="parameterCollection">Collection of parameters</param>
            <returns>Collection of ParameterDefinitionData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToContractData(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Client.LegParameterMapping},System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.LegParameterMappingData})">
            <summary>
            Method to convert 'Collection of LegParameterMapping' to 'Collection of LegParameterMappingData'
            </summary>
            <param name="legParameterMappingCollection">Collection of LegParameterMapping</param>
            <param name="legParameterMappingDataCollection">Collection of LegParameterMappingData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToContractData(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Client.LegJobParameterMapping},System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.LegParameterMappingData})">
            <summary>
            Method to convert 'Collection of LegJobParameterMapping' to 'Collection of LegParameterMappingData'
            </summary>
            <param name="legJobParameterMappingCollection">Collection of LegJobParameterMapping</param>
            <param name="legParameterMappingDataCollection">Collection of LegJobParameterMappingData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToClient(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.LegParameterMappingData},System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Client.LegParameterMapping})">
            <summary>
            Method to convert 'Collection of LegParameterMappingData' to 'Collection of LegParameterMapping'
            </summary>
            <param name="legParameterMappingCollection">Collection of LegParameterMapping</param>
            <param name="legParameterMappingDataCollection">Collection of LegParameterMappingData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToClient(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.LegParameterMappingData},System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Client.LegJobParameterMapping})">
            <summary>
            Method to convert 'Collection of LegParameterMappingData' to 'Collection of LegJobParameterMapping'
            </summary>
            <param name="legJobParameterMappingCollection">Collection of LegJobParameterMapping</param>
            <param name="legParameterMappingDataCollection">Collection of LegJobParameterMappingData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ClientExtensions.ToClient(System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Client.Parameter},System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.ParameterInstanceData})">
            <summary>
            Method to convert 'Collection of ParameterInstanceData' to 'Collection of ParameterInstance'
            </summary>
            <param name="parameterDefinitionCollection">Collection of ParameterDefinition object</param>
            <param name="parameterInstanceDataCollection">Collection of ParameterInstanceData object</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.EnumerationException">
            <summary>
            EnumerationException: Client Api exception
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnumerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for EnumerationException class
            </summary>
            <param name="serializationInfo">Stores all the data needed to serialize or deserialize an object</param>
            <param name="streamingContext">Describes the source and destination of a given serialized stream</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnumerationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnumerationException.#ctor(System.ServiceModel.FaultException{Microsoft.BuildTracker.Contracts.EnumerationFault})">
            <summary>
            Constructor
            </summary>
            <param name="enumerationFault">EnumerationFault exception from Api service</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnumerationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnumerationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
            <param name="exception">Inner exception</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.EnumerationException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
            <param name="stackTrace">Inner exception</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ItemNotFoundException">
            <summary>
            ItemNotFoundException: Client Api exception
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ItemNotFoundException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ItemNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor to take acutal exception and custom exception message.
            </summary>
            <param name="message">excpetion message to be shown</param>
            <param name="exception">actual exception</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ItemNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization Constructor for ItemNotFoundException class
            </summary>
            <param name="serializationInfo">Stores all the data needed to serialize or deserialize an object</param>
            <param name="streamingContext">Describes the source and destination of a given serialized stream</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ItemNotFoundException.#ctor(System.ServiceModel.FaultException{Microsoft.BuildTracker.Contracts.ItemNotFoundFault})">
            <summary>
            Overloaded Constructor with ItemNotFoundFault
            </summary>
            <param name="itemNotFoundFault">ItemNotFoundFault exception from Api service</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ItemNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
            <param name="parameterName">parameter value which was not found and caused the excpetion</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ItemNotFoundException.#ctor(System.String)">
            <summary>
            Overloaded Constructor
            </summary>
            <param name="message">Message that describes the exception</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildJobInstanceCollection">
            <summary>
            JobInstances
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobInstanceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.BuildJobInstanceData})">
            <summary>
            Creates a BuildJobInstanceCollection from a collection of BuildJobInstanceData (from WCF)
            </summary>
            <param name="buildJobInstanceDataCollection">Collection of Contracts.BuildJobInstanceData objects</param>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobInstanceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.JobInstanceData})">
            <summary>
            Creates a JobInstanceCollection from a list of JobInstanceData (from WCF)
            </summary>
            <param name="jobInstanceDataCollection">Collection of Contracts.JobInstanceData objects</param>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobInstanceQuery">
            <summary>
            Structure containing all of the fields that will be used to form a query to select JobInstances.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstanceQuery.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstanceQuery.#ctor(Microsoft.BuildTracker.Contracts.JobInstanceQueryData)">
            <summary>
            Constructor
            </summary>
            <param name="jobInstanceQueryData">JobInstanceQueryData object containing field values for this branch</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstanceQuery.#ctor(System.String,Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses)">
            <summary>
            Constructor
            </summary>
            <param name="requestedBy">Name of the user who created the jobs</param>
            <param name="jobInstanceQueryStatuses">Filter on JobInstance status. Multiple statuses can be provided in the filter</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.OnlyLatestForEachJobDefinition">
            <summary>
            True for only latest records of each JobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.DateFrom">
            <summary>
            Start of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.DateFromQueryType">
            <summary>
            Database column where DateFrom condition should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.DateToQueryType">
            <summary>
            Database column name where DateTo condition should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.DateTo">
            <summary>
            End of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.Status">
            <summary>
            Filter on JobInstance status. Multiple statuses can be provided in the filter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.OrderBy">
            <summary>
            Sets the sort order. Used in the "top N" scenario -> in conjuntion with the .TopN field
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.SortDirection">
            <summary>
            data sorting direction
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.TopN">
            <summary>
            Return the top N instances only.
            Sort using the .OrderBy and .SortDirection fields.
            
            Positive number - sort ascending
            Negative number - sort descending
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.Overdue">
            <summary>
            Filter for overdue, not-overdue, don't care
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.RequestedBy">
            <summary>
            Filter to only the instances submitted by the given user
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.ProductId">
            <summary>
            Filter to instances under the given product only
            ProductId is having least priority
            ProductId would be included in query filter condition if JobDefinitionId, JobScheduleId and BranchId are not having values
            ProductId value won't be included in query if anyother Id field is having value.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.BranchId">
            <summary>
            Filter to instances under the given branch only
            BranchId is having second least priority
            BranchId would be included in query, if JobDefinitionId, JobScheduleId are not having values
            ProductId value won't be included in the query if BranchId is having value
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.JobDefinitionId">
            <summary>
            Filter to instances of the given job definition
            JobDefinitionId has highest priority
            JobScheduleId, BranchId and ProductId won't be included in query filter condition if JobDefinitionId is having value
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.JobScheduleId">
            <summary>
            Filter to instances of the given job schedule
            JobScheduleId is having second highest priority.
            BranchId and ProductId won't be included in query filter condition if JobScheduleId is having value
            if JobDefinitionId is also having value, JobScheduleId won't be included in query filter condition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobInstanceQuery.JobTypes">
            <summary>
            Type of the JobDefinition that is parent to the JobInstance
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegInstanceExecution">
            <summary>
            An execution of a LegInstance.
            </summary>
            <remarks>
            When a LegInstance finishes running on a job service machine, a LegInstanceExecution is created to
            store information about its execution. Since a LegInstance can be restarted any number of times, 
            a new LegInstanceExecution is created each time a LegInstance completes to store information about
            its execution.
            A LegInstance cannot be created, updated, or deleted. It exists for historical analysis only.
            </remarks>    
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstanceExecution.GetDataPoints">
            <summary>
            Gets the LegInstanceExecutionDataPoints for a LegInstanceExecution
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.Id">
            <summary>
            Id for this LegInstanceExecution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.LegInstanceId">
            <summary>
            The parent LegInstance Id for this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.RestartNumber">
            <summary>
            Restart Number for this leg instance execution
            </summary>
            <remarks>
            The RestartNumber is incremented each time a LegInstance is restarted (resumed). If a LegInstance is never
            restarted, its RestartNumber will be 0.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.WaitingStartedTime">
            <summary>
            Date and time that this leg instance execution started waiting for dependencies
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.ReadyStartedTime">
            <summary>
            Date and time that the leg instance execution was ready to run (e.g. satisfied all leg dependencies
            and was only waiting for a free job service machine to be executed on).
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.PreparingStartedTime">
            <summary>
            Date and time that this leg instance execution started the preparation stage (e.g. enlistment preparation,
            such as creating/syncing a workspace).
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.ExecutingStartedTime">
            <summary>
            Date and time the execution stage started (e.g. the leg command script began running on a 
            job service machine).
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.FinishedTime">
            <summary>
            Date and time that this this leg instance execution finished
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.Status">
            <summary>
            Finished LegInstance State of the leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.ExitCode">
            <summary>
            Exit code (e.g. errorlevel) of the leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.MachineId">
            <summary>
            ID of the machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.MachineName">
            <summary>
            Name of the machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.RemoteMachineId">
            <summary>
            For remote legs, this is the Id of the target machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.RemoteMachineName">
            <summary>
            For remote legs, this is the name of the target machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.EstimatedExecutionTime">
            <summary>
            Estimated execution time of this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.OverdueState">
            <summary>
            OverDue state of this leg instance execution
            </summary>
            <remarks>
            This value can be OnTime, Delayed, or OverDue, depending on the duration of the execution time.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.LogFileLocalPath">
            <summary>
            the local file path of the log file for this leg instance execution, on the machine it ran on
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.NewEnlistmentCreated">
            <summary>
            Was a new enlistment created for this leg instance?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecution.LogUrl">
            <summary>
            The URL of the log for this leg instance execution
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegInstanceExecutionDataPoint">
            <summary>
            A data point of a LegInstanceExecution.
            </summary>
            <remarks>
            When a LegInstance finishes running on a job service machine, BuildTracker scans the environmental variables
            in the execution environment for those variables with the prefix "BuildTracker.DataPoint.". 
            These environmental variables are recorded as LegExecutionDataPoints for each execution of a LegInstance 
            (e.g. a new set of data points will be collected each time a LegInstance is restarted and finishes).
            Data points are commonly used to store instrumentation or statistics about the LegInstance's command execution.
            A LegInstanceExecutionDataPoint cannot be created, updated, or deleted. It exists for historical analysis only.
            </remarks>    
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecutionDataPoint.Name">
            <summary>
            The Name of the datapoint
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceExecutionDataPoint.Value">
            <summary>
            The Value of the datapoint
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RetentionJobInstance">
            <summary>
            Retention Job Instance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionJobInstance.GetJobDefinition">
            <summary>
            Gets the parent (RetentionJobDefinition)
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionJobInstance.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">RetentionJobInstance to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionJobInstance.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DropJobInstance">
            <summary>
            Drop Job Instance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropJobInstance.GetJobDefinition">
            <summary>
            Gets the parent (DropJobDefinition)
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropJobInstance.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">DropJobInstance to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropJobInstance.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobSchedule">
            <summary>
            JobSchedule defines all the metadata needed for scheduling a job
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobSchedule.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.JobScheduleData)">
            <summary>
            Constructor to assign JobScheduleData values to this client class
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobSchedule.Save">
            <summary>
             Save changes to the properties to BuildTracker
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobSchedule.Refresh">
            <summary>
            Get the data for this JobSchedule from BuildTracker and repopulate the properties
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobSchedule.Delete">
            <summary>
            Deletes this JobSchedule
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobSchedule.SetChangeDetectionRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Specify the credentials of the RunAs account to use to check for last enlistment changes 
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobSchedule.Equals(System.Object)">
            <summary>
            Compares two JobSchedules
            </summary>
            <param name="obj">JobSchedule to compare to.</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields of the objects match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobSchedule.GetHashCode">
            <summary>
            Gets a hashcode 
            </summary>
            <returns>Hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Id">
            <summary>
            BuildTracker ID of the JobSchedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.BuildJobDefinitionId">
            <summary>
            ID of the job that is to be scheduled.
            </summary>
            <remarks>
            If null, this JobSchedule will become a template that everyone can use to create other JobSchedules
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Name">
            <summary>
            Name for this JobSchedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Description">
            <summary>
            Descriptive text for this JobSchedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Priority">
            <summary>
            Priority to give to the JobInstances created by this Job Schedule.
            If null, Priority of the Job is used.
            </summary>
            <remarks>
            A priority of "Highest" is invalid for a JobSchedule.  Attempting set the priority to "Highest"
            will cause an exception. 
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Enabled">
            <summary>
            If true, the job gets queued to run as specified by the settings.
            If false, the job won't get queued and previously created JobInstances that have not started yet are canceled. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.DaysOfWeek">
            <summary>
            The Day(s) of the week for scheduling the job.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.StartDate">
            <summary>
            Jobs won't be scheduled before this date.
            </summary>
            <remarks>
            This property specifies a particular date value only, an exception will be thrown if the time portion of the DateTime is not zero.
            Date values are considered to be relative to the timezone of the BuildTracker database and should not be in UTC because that indicates 
            a particular point in time independent of timezone.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.EndDate">
            <summary>
            If not null, no new JobInstances will be created for this Job Schedule after the specified date.  If it is null,
            JobInstances will continue to be created by this JobSchedule without end.
            </summary>
            <remarks>
            This property specifies a particular date value only, an exception will be thrown if the time portion of the DateTime is not zero.
            Date values are considered to be relative to the timezone of the BuildTracker database and should not be in UTC because that indicates 
            a particular point in time independent of timezone.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.DailyStartTime">
            <summary>
             The time of day when you want the job to first get scheduled each day. 
            </summary>
            <remarks>
            The TimeSpan value assigned to this property specifies the time of day as the amount of time that has elapsed since midnight.
            Consequently, negative values and TimeSpans longer than 24 hours are not allowed.  Time values are considered to be relative to
            the timezone of the BuildTracker database.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.DailyEndTime">
            <summary>
            If not null, jobs are not re-scheduled past this time of the day.  If it is null, jobs may be rescheduled through the end of the day.
            This only applies for Job Schedules that include Rescheduling and/or Synchronization to a Job Schedule or Enlistment.
            </summary>
            <remarks>
            The TimeSpan value assigned to this property specifies the time of day as the amount of time that has elapsed since midnight.
            Consequently, negative values and TimeSpans longer than 24 hours are not allowed.  Time values are considered to be relative to
            the timezone of the BuildTracker database.  BuildTracker only stores times to the nearest millisecond.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Rescheduling">
            <summary>
            Queue the job several times per day.
            The Start Time and End Time define the window of opportunity where new JobQueues can be scheduled.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.ReschedulingTimeSpan">
            <summary>
            Time period to add to the previous JobInstance start or completion.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Sync">
            <summary>
            Indicates whether the enlistment needs to be synchronized before running Command LegInstances.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.SyncTo">
            <summary>
            The conditions to use to determine the point at which to synchronize the enlistment
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.SyncReferenceJobScheduleId">
            <summary>
            The Job Schedule that the current Job Schedule should use as its SyncTime reference
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.ChangeDetectionEnlistmentSettings">
            <summary>
            These are the enlistments settings to use for detecting a change 
            </summary>
            <remarks>
            Enlistment settings may need to be configured to exclude the version file and perhaps internal team documentation folders. 
            This helps avoid unnecessary builds being triggered by non-code changes.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.ChangeDetectionRunAsAlias">
            <summary>
            Check for last Enlistment changes under specified credentials.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.EffectiveChangeDetectionRunAsAlias">
            <summary>
            Account that will be inherited if the ChangeDetection Credentials are not set on this JobSchedule.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Parameters">
            <summary>
            Name-value pairs of the Job Parameters and values to be passed to Job Instances created for this job schedule.
            Multi-valued parameter values are specified with a comma delimited string.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobSchedule.Wcf">
            <summary>
            Shortcut to wcf
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobService">
            <summary>
            Windows service that runs job's legs, such as BuildQ and BuildRemoteExec
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobService.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.JobServiceData)">
            <summary>
            Constructor to assign JobServiceData values to this client class
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobService.Save">
            <summary>
             Save changes to the properties to BuildTracker
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobService.Refresh">
            <summary>
            Get the data for this JobService from BuildTracker and repopulate the properties
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobService.Delete">
            <summary>
            Deletes this JobService
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobService.Equals(System.Object)">
            <summary>
            Compares two JobServices
            </summary>
            <param name="obj">JobService to compare to.</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields of the objects match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobService.GetHashCode">
            <summary>
            Gets a hashcode 
            </summary>
            <returns>Hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.Id">
            <summary>
            ID of the JobService
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.AllowedJobTypes">
            <summary>
            Defines the list of types of Jobs (Build, BuildRetention, Drop) a given Job Service is allowed to run. 
            If None is selected then this Job Service will not process any Jobs
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.MachineId">
            <summary>
            ID of the machine where the Job Service is installed
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.MaximumWorkerThreads">
            <summary>
            Lists the maximum number of LegInstances the given Job Service can process concurrently
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.RequestedState">
            <summary>
            An administrator can request for that a service enter the following states by setting the RequestedState. 
            After the RequestedState is saved BuildTracker will process the request and apply it to the JobSevice. 
            Once applied the State property will reflect the requested state.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.State">
            <summary>
            The state that the JobService is currently in
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.JobServiceType">
            <summary>
            The type of the JobService, as specified by the type of legs that it runs.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobService.Wcf">
            <summary>
            Shortcut to wcf
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LabConfiguration">
            <summary>
            Settings to fine-tune lab's operation.
            For security reasons, some values are only populated for BT Administrators.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.Save">
            <summary>
            Saves any updates to this configuration to the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.Refresh">
            <summary>
            Populates the LabConfiguration object with current data from the BuildTracker server.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.GetDefaultRetentionJob">
            <summary>
            A default retention job is created during install. It can be edited by lab administrators for custom actions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.GetBackupJob">
            <summary>
            Returns the special built-in job "BuildTracker: Build Backup" that belongs to and must be configured by the lab. 
            Out of the box, this job has no legs. It is up to the lab to add leg(s) to the job that will actually perform the backup. 
            BuildTracker itself does not provide the actual mechanism for doing the backup, it merely exposes the backup mechanism via 
            the built-in backup job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.SetDefaultRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Sets the given credentials as the default RunAs account for this BuildTracker Lab
            </summary>
            <remarks>
            This will be the default user for running jobs.
            </remarks>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.SetLabManagementCredentials(System.String,System.Security.SecureString)">
            <summary>
            Sets the given credentials as the account of the Lab Management User.
            </summary>
            <remarks>
            This will be the user used by services for managing the lab.
            </remarks>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.Equals(System.Object)">
            <summary>
            Override of Object.Equals method
            </summary>
            <param name="obj">A Machine object to compare to.</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>True if the LabConfiguration objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LabConfiguration.GetHashCode">
            <summary>
            Override of Object.GetHashCode
            </summary>
            <returns>A hashcode value for this LabConfiguration object.</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.BuildTrackerService">
            <summary>
            BT service object this configuration belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.TimeZone">
            <summary>
            The time zone of the BuildTracker system. 
            </summary>
            <remarks>This field is currently set to the DB server TZ during the setup.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.AllowJobsToRunWithAdminPrivileges">
            <summary>
            Allow jobs to run under accounts which have admin privileges on build machines.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepDaysOfLegLogs">
            <summary>
            The number of days of leg instance logs history to keep.
            Minimum value = 0, recommend value = 14.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepMonthsOfJobInstanceHistory">
            <summary>
            Number of months of job instance history to keep. 
            Minimum value = 1. Recommended value = 12.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepMonthsOfBuildHistory">
            <summary>
            Number of Months of Deleted Build History to Keep 
            Minimum value = 2. Recommended value = 12.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepMonthsOfEnlistmentHistory">
            <summary>
            Number of Months of Deleted Enlistment History to Keep 
            Minimum value = 1. Recommended value = 3.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepMonthsOfEnlistmentLogs">
            <summary>
            Number of Months of Enlistment Logs to Keep 
            Minimum value = 1. Recommended value = 3.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepMonthsOfJobDefinitionCopies">
            <summary>
            Number of months of versioned Job copies (i.e. snapshot of the job definition at a given time) to retain. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepWeeksOfNotificationHistory">
            <summary>
            Number of Weeks of Notifications History to Keep
            </summary>
            <remarks>Max value: 51</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeepWeeksOfEmailHistory">
            <summary>
            Number of Weeks of E-mail History to Keep
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.MinimumAllowedJobPriority">
            <summary>
            Minimum Priority Required for a JobInstance to Run Used to prevent job instances of lower priority from running. 
            Only Job instances of identical or higher priority will go from Submitted to Sequenced.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.DatabaseMachine">
            <summary>
            The name of the machine that has the BuildTracker Database.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.InstalledOn">
            <summary>
            The date the latest installation or upgrade took place. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.DomainName">
            <summary>
            The domain name the database machine belong to.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.KeyManagementMachine">
            <summary>
            Location of the machine that runs BuildK - the Key Management service.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.Leaf">
            <summary>
            An optional free-formed HTML document that describes your BuildTracker instance. 
            The file should not exceed 20Kb. Its contents will be shown on the top left of each BuildTracker page. 
            Please ensure that the HTML syntax is correct and that your leaf does not break the layout of the pages.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.LabStatusLeaf">
            <summary>
            An optional free-formed HTML document that describes your BuildTracker instance current status. 
            The file should not exceed 20Kb. Its contents will be shown on the top of each BuildTracker page. 
            Please ensure that the HTML syntax is correct and that your leaf does not break the layout of the pages.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.SmtpServer">
            <summary>
            Use SMTPHost on MS corpnet unless you're in a domain which cannot access it.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.MailStyleSheet">
            <summary>
            Stylesheet used when sending e-mail notifications.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.SchedulerMachine">
            <summary>
            The name of the machine hosting the Scheduler (BuildS) service.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.VstsShares">
            <summary>
            A semi-colon delimited list of shares from which BuildTracker will try to copy the necessary 
            TFS files (tf.exe, etc.) when enlisting from web. 
            The enlistment script will try using the first share in the list, then the second, etc.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.SourceDepotShares">
            <summary>
            A semi-colon delimited list of shares that BuildTracker will try to copy sd.exe from when enlisting from web. 
            The enlistment script will try using the first share in the list, then the second, etc.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.SdxScript">
            <summary>
            Location and filename of script to use when enlisting for Enlistment Managers of type sdx.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.Version">
            <summary>
            The latest version installed on this BuildTracker system.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.WebUrl">
            <summary>
            The base location of the main Web UI server.
            </summary>
            <remarks>This is often set to the load-balancer address.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.LabName">
            <summary>
            The name of the BuildTracker lab (e.g. Acme Products Build Lab). 
            The name will be shown on the top left of each BuildTracker page. 
            However, if a BuildTracker Leaf is also the defined the BuildTracker Leaf will be displayed instead.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.LabContacts">
            <summary>
            The contacts to communicate with about lab issues.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.Id">
            <summary>
            The unique ID of this instance of BuildTracker.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.AllowDataCollection">
            <summary>
            Indicates if information about this instance of BuildTracker can be tracked in the central registration
            database run by the BuildTracker team.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.SdkUrl">
            <summary>
            The main address of the legacy programmatic access to BuildTracker.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.ApiUrl">
            <summary>
            The main base address of the API service.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.EstimatedExecutionTimeThreshold">
            <summary>
            Minimum number of times a Leg instance must run before the execution time is checked against the 
            Estimated Execution Time to see if the Leg instance is overdue. 
            For example, if EET Threshold is set to 60 minutes, BuildTracker will not check to see if the Leg instance 
            is overdue until it has run for at least 60 minutes. 
            </summary>
            <remarks>Currently the granularity is minutes. Any fractions of minutes will be rounded down.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.EstimatedExecutionTimeDelayed">
            <summary>
            How much time over the EET that will trigger a delay warning. Default is 60 minutes. 
            </summary>
            <remarks>Currently the granularity is minutes. Any fractions of minutes will be rounded down.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.EstimatedExecutionTimeOverdue">
            <summary>
            The amount of time over the EET that will trigger an overdue warning. Default is 180 minutes. 
            </summary>
            <remarks>Currently the granularity is minutes. Any fractions of minutes will be rounded down.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.SourceControlRetryAttempts">
            <summary>
            The total number of times BuildTracker will attempt to connect to source control. 
            The minimum is 1 for the original connection attempt. 
            The default is 3 to allow 2 retry attempts. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.SourceControlRetryInterval">
            <summary>
            How long to wait in between source control connect attempts. The default is 10s.
            </summary>
            <remarks>Currently the value is rounded down to full seconds</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.BackupEnabled">
            <summary>
            By default, the backup feature in BuildTracker is not enabled. 
            See the How To Configure Backup section of the help for an explanation of the backup feature 
            and steps on customizing it for your lab. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.BackupPromptText">
            <summary>
            Use this field to add custom text about your custom lab backup job and policies. 
            BuildTracker will append this text to the confirmation dialog that is shown when the "Backup" button 
            is clicked on the Build Drops grid and when a product or branch owner creates a drop policy 
            to do automatic backup. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.BuildShareGroupTypes">
            <summary>
            The list of Build Share Group Types (e.g. categories of build shares, such as 'Official' and 'Buddy' build shares).
            System-wide policy instances (including Build Retention and Build Drop policy instances) 
            can be defined for all Build Share Groups of the same type
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.ServiceIntervals">
            <summary>
            This property helps determine whether the services in your lab are functioning normally. 
            Each listed task repeats at a specified interval. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.DefaultRunAsAlias">
            <summary>
            This will be the default user for running jobs.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.LabManagementAlias">
            <summary>
            This will be the user used by services for managing the lab.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LabConfiguration.ApiServerVersion">
            <summary>
            Indicates the version of the Api Server this client is connected to.
            </summary>
            <remarks>
            This version will stay the same while the ServiceVersion might change.
            Example: when a service Hotfix is installed.
            </remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.CredentialedLegDefinition">
            <summary>
            A leg definition that can be impersonated during execution (run-as)
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegDefinition">
            <summary>
            Defines a leg of a job. Based on this definition GetLegInstances get created during each execution of the GetJobDefinition/LegDefinition.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.GetJobDefinition">
            <summary>
            Parent Job Definition for this leg definition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.LegDefinitionData)">
            <summary>
            Creates an instance of a LegDefinition connected to an existing server-side Leg
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.#ctor(Microsoft.BuildTracker.Client.JobDefinition,Microsoft.BuildTracker.Contracts.LegDefinitionData)">
            <summary>
            Creates an instance of a LegDefinition connected to an existing server-side Leg.
            Sets the GetJobDefinition that is the parent for this LegDefinition.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.ResetEstimatedExecutionTime">
            <summary>
            Resets the EET to 0 (zero). This is useful and should be called when the definition of a leg changes drastically and the previous EET is no longer valid.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.Save">
            <summary>
            Submits the changes made to the fields to the BT backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.Refresh">
            <summary>
            Refreshes the fields from the backend BT.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.Delete">
            <summary>
            Deletes this LegDefinition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">LegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDefinition.GetHashCode">
            <summary>
            Gets a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.EnlistmentSettings">
            <summary>
            configuration Settings for enlistment
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.Name">
            <summary>
            Name of the leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.Id">
            <summary>
            ID of the leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.Description">
            <summary>
            Description of the leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.ParentJobId">
            <summary>
            ID of the job that this leg belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.Priority">
            <summary>
            For GetLegDefinitions that can be executed in parallel, those with the higher priority will be executed first
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.DependencyLogic">
            <summary>
            Require all prerequisite dependencies to evaluate to true, or require at least one to be true
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.SimulateResult">
            <summary>
            The result for this leg when running a simulated build
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.EstimatedExecutionTime">
            <summary>
            Length of time that it takes to run this leg, calculated based on past executions
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.Order">
            <summary>
            Order that this leg will be executed within a job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.WcfLegDefinition">
            <summary>
            Shortcut to WCF's ILegDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDefinition.Dependencies">
            <summary>
            Collection of LegDependency
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CredentialedLegDefinition.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this LegDefinition
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CredentialedLegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">CommandLegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CredentialedLegDefinition.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.CredentialedLegDefinition.RunAsAlias">
            <summary>
            Account to use when running this leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.CredentialedLegDefinition.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this leg definition.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobLegDefinition">
            <summary>
            Definition of a leg, which is a job (a child job).
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobLegDefinition.Save">
            <summary>
            Submits the changes made to the fields to the BT backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobLegDefinition.Refresh">
            <summary>
            Refreshes the fields from the backend BT.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobLegDefinition.GetChildJobDefinition">
            <summary>
            JobDefinition that is run by this leg
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobLegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">JobLegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobLegDefinition.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobLegDefinition.Parameters">
            <summary>
            Collection of Parameter mappings associated with this JobLegDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobLegDefinition.ChildJobDefinitionId">
            <summary>
            Id of job this leg will run 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobLegDefinition.ReportFailureToJob">
            <summary>
            Report failure to the job.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.CompleteLegDefinition">
            <summary>
            Definition for the Complete Leg
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CompleteLegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">CompleteLegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CompleteLegDefinition.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DeleteDropLegDefinition">
            <summary>
            Definition for the DeleteDrop Leg
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DeleteDropLegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">DeleteDropLegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DeleteDropLegDefinition.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.CommandLegDefinition">
            <summary>
            A command leg definition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CommandLegDefinition.Save">
            <summary>
            Submits the changes made to the fields to the BT backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CommandLegDefinition.Refresh">
            <summary>
            Refreshes the fields from the backend BT.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CommandLegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">CommandLegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.CommandLegDefinition.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.CommandLegDefinition.Command">
            <summary>
            Leg command.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.CommandLegDefinition.CommandParameters">
            <summary>
            Command parameters.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.CommandLegDefinition.Parameters">
            <summary>
            Collection of Parameter mappings associated with this JobLegDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.CommandLegDefinition.FailJobOnFailure">
            <summary>
            Report failure to the job.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildJobDefinition">
            <summary>
            Build Job Definitions live under a Branch
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobDefinition">
            <summary>
            GetJobDefinition defines all the metadata needed for all execution of this job
            </summary>
            <remarks>In pre 3.5 world this was called Job</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.GetLegDefinitions">
            <summary>
            Leg definitions for this job.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.Save">
            <summary>
            Saves the changes in the fields back to the BT backend
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.Refresh">
            <summary>
            Get data for this JobDefinition from BuildTracker and repopulate the properties
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.Delete">
            <summary>
            Deletes this job definittion
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.CreateCommandLegDefinition(System.String,System.String,System.String)">
            <summary>
            Creates a new command leg definition
            </summary>
            <param name="legDefinitionName">The name of the new leg definition</param>
            <param name="command">Command line to be executed by the job</param>
            <param name="parameters">Parameters to be passed to the command</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.CreateRemoteLegDefinition(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new remote leg definition
            </summary>
            <param name="legDefinitionName">The name of the new leg definition</param>
            <param name="command">Command line to be executed by the job</param>
            <param name="parameters">Parameters to be passed to the command</param>
            <param name="folderParameter">Name of a paramter whose value is the folder name in which to execute the command</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.CreateJobLegDefinition(System.String,Microsoft.BuildTracker.Client.JobDefinition)">
            <summary>
            Creates a new job leg definition
            </summary>
            <param name="legDefinitionName">The name of the new leg definition</param>
            <param name="jobDefinition">GetJobDefinition object that defines the job to be run by this leg</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.CreateSyncLegDefinition(System.String)">
            <summary>
            Creates a new sync leg definition
            </summary>
            <param name="legDefinitionName">The name of the new leg definition</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.CreateDeleteDropLegDefinition(System.String)">
            <summary>
            Creates a new DeleteDrop leg definition
            </summary>
            <param name="legDefinitionName">The name of the new leg definition</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.CreateCompleteLegDefinition(System.String)">
            <summary>
            Creates a new complete leg definition
            </summary>
            <param name="legDefinitionName">The name of the new leg definition</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.GetLegDefinition(System.String)">
            <summary>
            Gets a leg definition by name
            </summary>
            <param name="legDefinitionName">The name of the Leg Definition to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this JobDefinition
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.Equals(System.Object)">
            <summary>
            Compares two JobDefinitions
            </summary>
            <param name="obj">GetJobDefinition to compare to.</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields of the objects match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobDefinition.GetHashCode">
            <summary>
            Gets a hashcode 
            </summary>
            <returns>Hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.Id">
            <summary>
            Gets the Id of the GetJobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.Name">
            <summary>
            Gets/sets the name of the GetJobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.AllowConcurrent">
            <summary>
            Allow several instances of this job to execute simultaneously
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.Description">
            <summary>
            Description of the GetJobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.Priority">
            <summary>
            Id of a job priority value
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.SyncByDefault">
            <summary>
            Enable or disable synchronization by default for job requests
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.AllowSyncOption">
            <summary>
            Allow sync option for job requests.  Users may choose whether or not to synchronize before job execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.Wcf">
            <summary>
            Shortcut to wcf
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.Parameters">
            <summary>
            Collection of ParameterDefinitions associated with this GetJobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.BuildShareGroupId">
            <summary>
            ID of the BuildShareGroup for this job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.EnlistmentSettings">
            <summary>
            configuration Settings for enlistment
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.RunLegsOnSameMachine">
            <summary>
            If true -> causes all legs of this job definition to be executed on the same machine. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.RunAsAlias">
            <summary>
            Name (domain\username) for the RunAs user
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this job definition.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.JobDefinition.Owners">
            <summary>
            Collection of aliases that are owners of this GetJobDefinition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.Queue(System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            To Queue this Build Job
            </summary>
            <param name="desiredDateTime">DateTime job should be queued.  If null, uses current DateTime.</param>
            <param name="sync">Sync is required or not.  If null, defaults to job's sync value.</param>
            <param name="syncDateTime">Sync DateTime if sync is true.  If sync is false, should be null.</param>
            <param name="remark">Remarks for queuing job.  May be null.</param>
            <param name="notifyMe">To notify the user.  If null, defaults to false.</param>
            <param name="parameters">Dictionary of Parameter names with Values.  If null, no parameters are passed.</param>
            <returns>A BuildJobInstance object for the queued BuildJob</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.Queue">
            <summary>
            Queue this BuildJob
            </summary>
            <returns>A JobInstance object for the queued BuildJob</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.Save">
            <summary>
            To save BuildJobDefinition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.Refresh">
            <summary>
            Refreshes the fields by forcing a read from the BT backend
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.QueryJobInstances(System.String,Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses)">
            <summary>
            Simplified Job Instance querying using requestedBy and status only.
            Gets all job instances under this JobDefinition, for the given requester id and with the given statuses.
            </summary>
            <param name="requestedBy">name of the users who created the jobs</param>
            <param name="jobInstanceQueryStatuses">status of the included job instances</param>
            <returns>Collection of BuildJobInstanceCollection with the matching status</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.GetBranch">
            <summary>
            Retrieves the parent branch for this buildjob definition. 
            </summary>
            <returns>A Branch object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.GetJobSchedules">
            <summary>
            Gets all of the JobSchedules for this BuildJobDefintion
            </summary>
            <returns>A collection of JobSchedule objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.GetJobSchedule(System.String)">
            <summary>
            Gets a JobSchedule by name
            </summary>
            <param name="jobScheduleName">The name of the JobSchedule to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.CreateJobSchedule(System.String,Microsoft.BuildTracker.Contracts.DaysOfWeek,System.DateTime,System.Nullable{System.DateTime},System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Create a new JobSchedule with this BuildJobDefintion
            </summary>
            <param name="jobScheduleName">Name for this JobSchedule</param>
            <param name="daysOfWeek">The Day(s) of the week for scheduling the job.</param>
            <param name="startDate">Jobs won't be scheduled before this date.</param>
            <param name="endDate">If not null, no new JobInstances will be created for this Job Schedule after the specified date.</param>
            <param name="dailyStartTime">The time of day when you want the job to first get scheduled each day. </param>
            <param name="dailyEndTime">If not null, don't re-schedule past this time of the day.</param>
            <returns>A new JobSchedule object</returns>
            <remarks>
            startDate and endDate will be assumed to be DateTime values relative to the timezone of the BuildTracker server.
            If a date of 7/4/2012 is given for the startDate, the job will be scheduled to start running when it is 7/4/2012 in the timezone
            where the BuildTracker server is located.  This may be different than the date of the local machine if it is in a timezone different
            from the BuildTracker server's timezone.  The DateTime values should not be UTC, as the dates are intended to be specific to a certain 
            timezone.  startDate and endDate should contain date values only, with the time portion of the DateTime set to 12:00:00AM.
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.CreateJobSchedule(System.String,Microsoft.BuildTracker.Contracts.DaysOfWeek,System.DateTime,System.Nullable{System.DateTime},System.TimeSpan,System.Nullable{System.TimeSpan},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new JobSchedule with this BuildJobDefintion
            </summary>
            <param name="jobScheduleName">Name for this JobSchedule</param>
            <param name="daysOfWeek">The Day(s) of the week for scheduling the job.</param>
            <param name="startDate">Jobs won't be scheduled before this date.</param>
            <param name="endDate">If not null, no new JobInstances will be created for this Job Schedule after the specified date.</param>
            <param name="dailyStartTime">The time of day when you want the job to first get scheduled each day. </param>
            <param name="dailyEndTime">If not null, don't re-schedule past this time of the day.</param>
            <param name="parameters">Name-value pairs of the Job Parameters and values to be passed to Job Instances created for this job schedule</param>
            <returns>A new JobSchedule object</returns>
            <remarks>
            startDate and endDate will be assumed to be DateTime values relative to the timezone of the BuildTracker server.
            If a date of 7/4/2012 is given for the startDate, the job will be scheduled to start running when it is 7/4/2012 in the timezone
            where the BuildTracker server is located.  This may be different than the date of the local machine if it is in a timezone different
            from the BuildTracker server's timezone.  The DateTime values should not be UTC, as the dates are intended to be specific to a certain 
            timezone.  startDate and endDate should contain date values only, with the time portion of the DateTime set to 12:00:00AM.
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.CreateJobSchedule(Microsoft.BuildTracker.Client.JobSchedule)">
            <summary>
            Create a new JobSchedule with this BuildJobDefintion
            </summary>
            <returns>A new JobSchedule object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this BuildJobDefinition
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.Equals(System.Object)">
            <summary>
            Compares two BuildJobDefinitions
            </summary>
            <param name="obj">BuildJobDefinition to compare to.</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields of the objects match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildJobDefinition.GetHashCode">
            <summary>
            Gets a hashcode 
            </summary>
            <returns>Hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildJobDefinition.BranchId">
            <summary>
            The parent branch id 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildJobDefinition.JobRunners">
            <summary>
            List of aliases that can run this job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildJobDefinition.AutoDetectBuilds">
            <summary>
            Specifies whether BuildTracker should attempt to auto-detect the build produced by this build job.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildJobDefinition.SaveLogs">
            <summary>
            Specifies whether BuildTracker should save the logs for this Build Job in the build's drop folder. 
            A build must be auto-detected for the logs to be saved.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildJobDefinitionCollection">
            <summary>
            A collection of build jobs
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BranchCollection">
            <summary>
            Branches
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildTrackerService">
            <summary>
            The main entry point to interact with a BuildTracker service
            </summary>
            <remarks>In order to use any object in the BuildTracker Client library, one needs to first connect to a BuildTracker instance.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetProducts">
            <summary>
            Gets all products in this BT instance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetRegisteredProducts">
            <summary>
            Gets products registered to the caller
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.#ctor">
            <summary>
            This constructor used solely for testing
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.Connect(System.String,System.String,System.String,System.String)">
            <summary>
            Connects to a BuildTracker service using specified credentials
            </summary>
            <param name="baseAddress">WCF endpoint address that's exposed on the BuildTracker service</param>
            <param name="domain">credentials domain to connect as</param>
            <param name="userName">credentials username to connect as</param>
            <param name="password">credentials password to connect as</param>
            <returns>BuildTrackerService object connected to the given address</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.Connect(System.String)">
            <summary>
            Connects to a BuildTracker service using current user's credentials
            </summary>
            <param name="baseAddress">WCF endpoint address that's exposed on the BuildTracker service</param>
            <returns>BuildTrackerService object connected to the given address</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CloseConnections">
            <summary>
            Closes any open connections.
            </summary>
            <remarks>After calling this method, the BuildTrackerService is no longer connected to the backend.
            In order to reconnect - use the BuildTracker.Connect(...) method to create a new BuildTrackerService object.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.SetServiceTimeout(System.TimeSpan)">
            <summary>
            Sets the length of time to allow for calls to the WCF service to complete.  Default value is one minute.
            </summary>
            <param name="timeout">TimeSpan value to set</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetLabConfiguration">
            <summary>
            Gets the lab configuration object
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateMachine(System.String)">
            <summary>
            Creates a new machine
            </summary>
            <param name="machineName">The name of the machine to create. If a machine with such a name exists, an exception will be thrown.</param>
            <returns>A newly created machine.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetMachines">
            <summary>
            Gets all active machines in this BT instance
            </summary>
            <returns>A collection of machines</returns>
            <remarks>Deleted machines are not included here.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetAllMachines">
            <summary>
            Gets all machines in this BT instance
            </summary>
            <returns>A collection of machines</returns>
            <remarks>Deleted machines are included here.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetMachine(System.String)">
            <summary>
            Gets a machine by its name
            </summary>
            <param name="name">Name of the machine</param>
            <returns>a machine corresponding to the requested name</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetMachine(System.Int32)">
            <summary>
            Gets a machine by its Id
            </summary>
            <param name="id">Id of the machine</param>
            <returns>a machine corresponding with the requested Id</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateMachineGroup(System.String)">
            <summary>
            Creates a new machineGroup
            </summary>
            <param name="machineGroupName">The name of the machineGroup to create. If a machineGroup with such a name exists, an exception will be thrown.</param>
            <returns>A newly created machineGroup.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetMachineGroups">
            <summary>
            Gets all machineGroups in this BT instance
            </summary>
            <returns>A collection of machineGroups</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetMachineGroup(System.String)">
            <summary>
            Gets a machineGroup by its name
            </summary>
            <param name="name">Name of the machineGroup</param>
            <returns>a machineGroup corresponding to the requested name</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetMachineGroup(System.Int32)">
            <summary>
            Gets a machineGroup by its Id
            </summary>
            <param name="id">Id of the machineGroup</param>
            <returns>a machineGroup corresponding with the requested Id</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateAffinity(Microsoft.BuildTracker.Contracts.JobType,System.Int32,Microsoft.BuildTracker.Contracts.AffinityResourceType,System.Nullable{System.Int32},System.Int32,Microsoft.BuildTracker.Contracts.AffinityType)">
            <summary>
            Creates a new affinity
            </summary>
            <param name="jobType">Type of job afffinity applies to</param>
            <param name="resourceId">Id of the resource to be affinitied</param>
            <param name="resourceType">Type of resource to affinity to</param>
            <param name="alternateParentId">Id of the parent to use for the affinity when the affinity is set to a system-level resource</param>
            <param name="machineGroupId">Id of the MachineGroup to affinity with</param>
            <param name="affinityType">The type of affinity relationship</param>
            <returns>A newly created affinity.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetAffinities(Microsoft.BuildTracker.Contracts.JobType,System.Int32,Microsoft.BuildTracker.Contracts.AffinityResourceType,System.Nullable{System.Int32})">
            <summary>
            Gets all affinities in this BT instance for a resource
            </summary>
            <param name="jobType">Type of job the affinity applies to</param>
            <param name="resourceId">Id of the resource to be affinitied</param>
            <param name="resourceType">Type of resource to affinity to</param>
            <param name="alternateParentId">Id of the parent to use for the affinity when the affinity is set to a system-level resource</param>
            <returns>A collection of affinities</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetAffinity(System.Int32)">
            <summary>
            Gets an affinity by its Id
            </summary>
            <param name="id">Id of the affinity</param>
            <returns>An affinity corresponding with the requested Id</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateProduct(System.String)">
            <summary>
            Creates a new product
            </summary>
            <param name="productName">The name of the product to create. If a product with such a name exists, an exception witll be thrown.</param>
            <returns>A newly created product.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetProduct(System.String)">
            <summary>
            Finds a product by its name
            </summary>
            <param name="productName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetProduct(System.Int32)">
            <summary>
            Gets a product by its Id
            </summary>
            <param name="id">Id of the product</param>
            <returns>a Product corresponding with the requested Id</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetBranch(System.Int32)">
            <summary>
            Gets a branch by Id
            </summary>
            <param name="id">Id of the branch to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetBuildShareGroup(System.Int32)">
            <summary>
            Gets a BuildShareGroup by Id
            </summary>
            <param name="id">Id of the BuildShareGroup to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetJobDefinition(System.Int32)">
            <summary>
            Gets a job definition by Id. This may be a BuildJobDefinition, RetentionJobDefinition or DropJobDefinition.
            </summary>
            <param name="id">Id of the job definition to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetLegDefinition(System.Int32)">
            <summary>
            Gets a leg definition by Id. This may be any of the types of leg defintions.
            </summary>
            <param name="id">Id of the leg definition to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetJobInstance(System.Int32)">
            <summary>
            Gets a job instance by Id.
            </summary>
            <param name="id">id of the job instance</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetLegInstance(System.Int32)">
            <summary>
            Get a leg instance by Id.
            </summary>
            <param name="id">Id of the leg instance to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.QueueBuildJobInstance(System.Int32)">
            <summary>
            Queue a build job with default options
            </summary>
            <param name="jobDefinitionId">Id of BuildJobDefinition to be queued</param>
            <returns>JobInstance object for the queued BuildJobDefinition</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.QueueBuildJobInstance(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            To Queue BuildJobDefinition for passed jobDefinitionId and other arguments
            </summary>
            <param name="jobDefinitionId">Id of BuildJobDefinition to be queued</param>
            <param name="desiredDateTime">DateTime job should be queued.  If null, uses current DateTime.</param>
            <param name="sync">Sync is required or not.  If null, defaults to job's sync value.</param>
            <param name="syncDateTime">Sync DateTime if sync is true.  If sync is false, should be null.</param>
            <param name="remark">Remarks for queuing job.  May be null.</param>
            <param name="notifyMe">To notify the user.  If null, defaults to false.</param>
            <param name="parameters">Dictionary of Parameter names with Values.  If null, no parameters are passed.  
            For multi-value type parameters (i.e. CheckboxList), values should be contained in a comma delimited string.</param>
            <returns>A BuildJobInstance object for the queued BuildJobDefinition</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.QueryJobInstances(Microsoft.BuildTracker.Client.JobInstanceQuery)">
            <summary>
            Queries job instances using the given filter/query
            </summary>
            <param name="query">A query to limit the returned collection.</param>
            <remarks>Queries on instances are typically quite expensive.
            Consider adding as many conditions in the query as possible.
            Especially set .DateFrom, .DateTo and .Status in JobInstanceQuery for best (fastest) results.
            .DateFromQueryType is required when .DateFrom is used.
            .DateToQueryType is required when .DateTo is used.
            </remarks>
            <returns>A collection of job instances</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.QueryJobInstances(System.String,Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses)">
            <summary>
            Simplified Job Instance querying using requestedBy and status only.
            Gets all job instances in the whole BuildTracker, for the given requester id and with the given statuses.
            </summary>
            <param name="requestedBy">Name of the user who created the jobs</param>
            <param name="jobInstanceQueryStatuses">status of the included job instances</param>
            <returns>Collection of JobInstances with the matching status</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateSystemRetentionJobDefinition(System.String)">
            <summary>
            Creates a new system wide retention job definition
            </summary>
            <param name="retentionJobDefinitionName">name of the new systemwide retention job definition</param>
            <returns>object of RetentionJobDefinition created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateSystemDropJobDefinition(System.String)">
            <summary>
            Creates a new system wide drop job definition
            </summary>
            <param name="dropJobDefinitionName">name of the new systemwide drop job definition</param>
            <returns>object of DropJobDefinition created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetSystemRetentionJobDefinitions">
            <summary>
            Returns collection of System level retention job definitions
            </summary>
            <returns>Collection of Systemwide retentionJobDefinition</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetSystemDropJobDefinitions">
            <summary>
            Returns the collection of system wide DropJobDefinitions 
            </summary>
            <returns>readonly collection of DropJobDefinitions</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetSystemRetentionPolicies">
            <summary>
            Gets a collection of all system-wide retention policies.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateSystemRetentionPolicy(System.Int32,System.Boolean,System.Int32,Microsoft.BuildTracker.Contracts.RetentionCondition,System.String)">
            <summary>
            Creates a new system-wide retention policy
            </summary>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="quantity">Worked with Condition property, mandatory field, Value in this property will be replaced with Number in Condition property</param>
            <param name="retentionCondition">Condition for the execution of this policy</param>
            <param name="buildShareGroupType">The type of BSGs this policy applies to</param>
            <returns>object of RetentionPolicy, which is created</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetSystemDropPolicies">
            <summary>
            Gets a collection of all system drop policies.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateSystemDropPolicy(System.Int32,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a system drop policy.
            </summary>
            <param name="dropJobId">Id of the DropJobDefinition</param>
            <param name="minutesDelayAfterBuildJobCompletes">starting time of this policy after build completed</param>
            <param name="createEnabled">This instance of the Policy is enabled</param>
            <param name="runOnAutoDiscoveredBuild">Policy will execute auto discovered build</param>
            <param name="buildShareGroupType">The type of BSGs this policy applies to</param>
            <returns>object of DropPolicy created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetBuildDrop(System.Int32)">
            <summary>
            Retrieves a BuildDrop with a given ID from the backend.
            </summary>
            <param name="buildDropId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetJobServices">
            <summary>
            Gets a collection of all the Job Services
            </summary>
            <returns>A JobServiceCollection </returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetJobServices(System.Int32)">
            <summary>
            Gets a collection of all the Job Services for a specific machine
            </summary>
            <returns>A JobServiceCollection </returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetJobService(System.Int32)">
            <summary>
            Gets a Job Service with a given ID
            </summary>
            <returns>A JobService</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetJobSchedules">
            <summary>
            Gets all of the JobSchedules
            </summary>
            <returns>A collection of JobSchedule objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetJobSchedule(System.Int32)">
            <summary>
            Gets a JobSchedule by Id. 
            </summary>
            <param name="id">Id of the JobSchedule to get</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CreateJobScheduleTemplate(System.String,Microsoft.BuildTracker.Contracts.DaysOfWeek,System.DateTime,System.Nullable{System.DateTime},System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Create a new JobSchedule template that can be used to create other JobSchedules
            </summary>
            <param name="jobScheduleName">Name for this JobSchedule</param>
            <param name="daysOfWeek">The Day(s) of the week for scheduling the job.</param>
            <param name="startDate">Jobs won't be scheduled before this date.</param>
            <param name="endDate">If not null, no new JobInstances will be created for this Job Schedule after the specified date.</param>
            <param name="dailyStartTime">The time of day when you want the job to first get scheduled each day. </param>
            <param name="dailyEndTime">If not null, don't re-schedule past this time of the day.</param>
            <returns>A new JobSchedule object</returns>
            <remarks>
            startDate and endDate will be assumed to be DateTime values relative to the timezone of the BuildTracker server.
            If a date of 7/4/2012 is given for the startDate, the job will be scheduled to start running when it is 7/4/2012 in the timezone
            where the BuildTracker server is located.  This may be different than the date of the local machine if it is in a timezone different
            from the BuildTracker server's timezone.  The DateTime values should not be UTC, as the dates are intended to be specific to a certain 
            timezone.  startDate and endDate should contain date values only, with the time portion of the DateTime set to 12:00:00AM.
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.QueryBuildDrops(Microsoft.BuildTracker.Client.BuildDropQuery)">
            <summary>
            Queries for BuildDrops using the given filter criteria
            </summary>
            <param name="query">A query to limit the returned collection</param>
            <returns>A collection of BuildDrops</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.QueryLegInstances(Microsoft.BuildTracker.Client.LegInstanceQuery)">
            <summary>
            Queries for LegInstances using the given filter criteria
            </summary>
            <param name="query">A query to limit the returned collection</param>
            <returns>A collection of LegInstances</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CountLegInstances(Microsoft.BuildTracker.Client.LegInstanceQuery)">
            <summary>
            Gets the count of LegInstances that match the given filter criteria
            </summary>
            <param name="query">A query to limit the returned collection</param>
            <returns>A count of LegInstances</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CountLegInstanceExecutions(Microsoft.BuildTracker.Client.LegInstanceQuery)">
            <summary>
            Gets the count of LegInstanceExecutions that match the given filter criteria
            </summary>
            <param name="query">A query to limit the returned collection</param>
            <returns>A count of LegInstanceExecutions</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.CountJobInstances(Microsoft.BuildTracker.Client.JobInstanceQuery)">
            <summary>
            Gets the count of JobInstances that match the given filter criteria
            </summary>
            <param name="query">A query to limit the returned collection</param>
            <returns>A count of JobInstances</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.QueryLegInstanceExecutions(Microsoft.BuildTracker.Client.LegInstanceQuery)">
            <summary>
            Queries for LegInstanceExecutionss using the given filter criteria
            </summary>
            <param name="query">A query to limit the returned collection</param>
            <returns>A collection of LegInstanceExecutions</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetDropPolicy(System.Int32)">
            <summary>
            Get a DropPolicy by Id
            </summary>
            <param name="policyId">Id of the DropPolicy to retrieve.</param>
            <returns>A DropPolicy object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.GetRetentionPolicy(System.Int32)">
            <summary>
            Get a RetentionPolicy by Id
            </summary>
            <param name="policyId">Id of the RetentionPolicy to retrieve.</param>
            <returns>A RetentionPolicy object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildTrackerService.Dispose">
            <summary>
            Implement IDisposable
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildTrackerService.BaseAddress">
            <summary>
            The base address of the BT wcf interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildTrackerService.Wcf">
            <summary>
            groups BuildTracker wcf interfaces
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.DropJobDefinition">
            <summary>
            DropJobDefintion defines a job that runs for each discovered build drop in a build share group
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropJobDefinition.QueryJobInstances(System.String,Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses)">
            <summary>
            Simplified Job Instance querying using requestedBy and status only.
            Gets all job instances under this JobDefinition, for the given requester id and with the given statuses.
            </summary>
            <param name="requestedBy">name of the users who created the jobs</param>
            <param name="jobInstanceQueryStatuses">status of the included job instances</param>
            <returns>Collection of DropJobInstanceCollection with the matching status</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.DropJobDefinition.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this DropJobDefinition
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobDefinitionCollection">
            <summary>
            BuildJobDefinitions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.JobInstanceCollection">
            <summary>
            JobInstances
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.JobInstanceCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.JobInstanceData})">
            <summary>
            Creates a JobInstanceCollection from a list of JobInstanceData (from WCF)
            </summary>
            <param name="jobInstanceDataCollection">Collection of Contracts.JobInstanceData objects</param>
            <param name="parent">A reference to the BuildTracker service that is being used</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegDefinitionCollection">
            <summary>
            LegDefinitions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegDependency">
            <summary>
            Represents a conditional dependency on another leg
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDependency.#ctor(System.String,Microsoft.BuildTracker.Contracts.DependencyType)">
            <summary>
            Constructor 
            </summary>
            <param name="legDefinitionName">Prerequisite leg name ,name of the leg which will execute before current leg</param>
            <param name="dependencyType">result condition of Prerequisite leg on which dependent leg will execute</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDependency.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">LegDependency to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegDependency.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDependency.PrerequisiteLegName">
            <summary>
            LegDefinition name which will exectue before this legDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegDependency.DependencyType">
            <summary>
            Condition for execution of this leg according to PrerequisiteLeg result 
            Execution of this leg can be set according to result of PrerequisiteLeg, like OnSuccess, OnFail, Always
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegJobParameterMapping">
            <summary>
            Represents a mapping of a single parameter for LegJobDefinition
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegParameterMapping">
            <summary>
            Used to define parameter passing between parent jobInstance, LegDefinition and child jobInstance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegParameterMapping.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor to create object with all required Parameter mapping data
            </summary>
            <param name="source">it could be parent jobInstance's parameter name or environment variable name from build script of LegDefinition</param>
            <param name="target">for most types of LegDefinition it will be Parent jobInstance's parameter name,for LegJobDefinition it could be parent/child jobInstance's parameter name(according to IN/OUT)</param>
            <param name="description">details of parameter</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegParameterMapping.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">LegParameterMapping to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegParameterMapping.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegParameterMapping.Description">
            <summary>
            Details about parameter mapping
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegParameterMapping.Source">
            <summary>
            For most types of LegDefinition, it would be environment variable name from build script, which will be set by the environment
            For LegJobDefinition : Can be parent jobInstance parameter name or child jobInstance parameter name (depending on the IN/OUT)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegParameterMapping.Target">
            <summary>
            For most types of LegDefinition, it would be parent jobInstance's parameter name
            For LegJobDefinition : Can be parent jobInstance parameter name or child jobInstance parameter name (depending on the IN/OUT)
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegJobParameterMapping.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            constructor to create object with all required parameter mapping data between parent and child jobInstance's parameter
            </summary>
            <param name="source">name of the parameter, could be parent jobInstance's parameter name or environment variable name from build script of LegDefinition</param>
            <param name="target">Parent jobInstance's parameter name, in case of LegJob type LegDefinition it would be child jobInstance's parameter name</param>
            <param name="description">details of parameter</param>
            <param name="in">Direction of ParameterMapping - Parent jobInstance's parameter value will be set to child jobInstance's parameter</param>
            <param name="out">Direction of ParameterMapping - Child jobInstance's parameter value will be set to Parent jobInstance's parameter</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegJobParameterMapping.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">LegJobParameterMapping to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegJobParameterMapping.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegJobParameterMapping.In">
            <summary>
            Direction of ParameterMapping - Parent jobInstance's parameter value will be set to child jobInstance's parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegJobParameterMapping.Out">
            <summary>
            Direction of ParameterMapping - Child jobInstance's parameter value will be set to Parent jobInstance's parameter
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegInstance">
            <summary>
            An instance of a LegDefinition.
            </summary>
            <remarks>
            An leg instance is created by buildtracker when a job is submited.
            A LegInstance cannot be deleted or updated. But it can be aborted or resumed.
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.GetLegDefinition">
            <summary>
            The parent leg definition this leg instance is based on
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.GetJobInstance">
            <summary>
            The parent job instance of this leg instance
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.GetExecutions">
            <summary>
            Gets the LegInstanceExecutions for a LegInstance
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.Abort">
            <summary>
            Aborts this leg instance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.Skip">
            <summary>
            Skips this leg instance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.Refresh">
            <summary>
            Refreshes the fields.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.Restart">
            <summary>
            Restart a completed leg
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.GetRemarks">
            <summary>
            Gets all associated remarks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.AddRemark(Microsoft.BuildTracker.Contracts.RemarkType,System.String)">
            <summary>
            Adds a new leg instance remark
            </summary>
            <param name="text">the text of the remark to add</param>
            <param name="type">the type of the remark to add</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A LegInstance object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstance.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.BuildTrackerService">
            <summary>
            A reference to the BuildTracker service that is being used
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.Id">
            <summary>
            Id for this LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.Name">
            <summary>
            Name of this LegInstance, taken from the name of the LegDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.JobInstanceId">
            <summary>
            Id of the parent JobInstance for this LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.LegDefinitionId">
            <summary>
            Id of the LegDefinition for this LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.Status">
            <summary>
            Current state of the LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.WaitingStartedTime">
            <summary>
            Date and time that this leg instance started waiting for dependencies
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.ReadyStartedTime">
            <summary>
            Date and time that this leg instance was ready to run (started waiting for a machine)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.PreparingStartedTime">
            <summary>
            Date and time that this leg instance started preparing
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.ExecutingStartedTime">
            <summary>
            Date and time that this leg instance started executing
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.FinishedTime">
            <summary>
            Date and time that this leg instance finished
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.Wcf">
            <summary>
            Shortcut to get to the Wcf object of ILegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.ExitCode">
            <summary>
            Exit code for executing LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.EstimatedExecutionTime">
            <summary>
            Estimated execution time for LegInstace 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.OverdueState">
            <summary>
            Overdue state for this LegInstance
            </summary>
            <remarks>
            This value can be OnTime, Delayed, or OverDue, depending on the duration of the execution time.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.ExecutionDuration">
            <summary>
            Actual time taken by LegInstance in execution 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.ChildJobInstanceId">
            <summary>
            ID of a child jobInstance. Applies to joblegs only.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.NewEnlistmentCreated">
            <summary>
            Was a new enlistment created for this leg instance?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.MachineId">
            <summary>
            Id of the machine that ran this leg instance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.MachineName">
            <summary>
            Name of the machine that ran this leg instance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.Order">
            <summary>
            The order that this leg is run within a job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.Priority">
            <summary>
            Relative to other legs that can run within the same dependency range, legs with a lower priority value will run first
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstance.LogUrl">
            <summary>
            The URL of the log for this leg instance
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegInstanceCollection">
            <summary>
            LegInstances
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.LegInstanceQuery">
            <summary>
            Data contract containing all of the fields that will be used to form a query to select LegInstances.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.LegInstanceQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.DateFrom">
            <summary>
            Start of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.DateFromQueryType">
            <summary>
            Column where DateFrom condition should be applied or compaired
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.DateTo">
            <summary>
            End of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.DateToQueryType">
            <summary>
            Column where DateTo condition should be applied or compaired
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.Status">
            <summary>
            Combination of LegInstance state values that are queried for
            </summary>
            <remarks>
            This field may not be null.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.OrderBy">
            <summary>
            Sets the sort order. Used in the "top N" scenario -> in conjuntion with the .TopN field
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.SortDirection">
            <summary>
            data sorting direction
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.TopN">
            <summary>
            Return the top N instances only.
            Sort using the .OrderBy + .SortDirection fields.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.OverdueState">
            <summary>
            Filter for OnTime, Delayed, or Overdue leg instances.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.LegDefinitionId">
            <summary>
            Filter to leg instances of the given leg definition only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.MachineId">
            <summary>
            Filter to leg instances that execute on the given machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.ProductId">
            <summary>
            Filter to instances under the given product only
            ProductId has the lowest priority
            ProductId would be included in query filter condition if LegDefinitionId, JobInstanceIds, and BranchId do not have values
            ProductId value won't be included in query if any other Id field has a value.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.BranchId">
            <summary>
            Filter to instances under the given branch only
            BranchId has the second least priority
            BranchId will be included in query if LegDefinitionId and JobInstanceIds do not have values
            ProductId value won't be included in the query if BranchId has a value
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.JobScheduleId">
            <summary>
            Filter to instances of the given job schedule
            JobScheduleId has the second highest priority.
            BranchId and ProductId won't be included in query filter condition if JobScheduleId has a value
            if JobDefinitionIds also has values, JobScheduleId won't be included in the query filter condition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.JobInstanceIds">
            <summary>
            Filter the results to LegInstances that belong to JobInstances with the given IDs
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.LegInstanceQuery.WaitingState">
            <summary>
            Condition that a leg instance may be waiting for
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.Machine">
            <summary>
            A machine/computer BuildTracker manages or knows of
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService)">
            <summary>
            Private Constructor
            </summary>
            <param name="buildTracker">Object of BuildTrackerService</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.String)">
            <summary>
            Instantiates a Machine object by looking it up by name
            </summary>
            <param name="name"></param>
            <param name="buildTracker"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Int32)">
            <summary>
            Instantiates a Machine object by looking it up by ID
            </summary>
            <param name="id"></param>
            <param name="buildTracker"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.MachineData)">
            <summary>
            Creates an instance initializing its data to the one passed in
            </summary>
            <param name="buildTracker"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.GetDisks">
            <summary>
            Information and settings for disks available on this machine.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.Save">
            <summary>
            Persists the changes in this class to the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.Refresh">
            <summary>
            Gets the latest data for this class from the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.Delete">
            <summary>
            Deletes this machine
            </summary>
            <remarks>
            The machine is actually not removed from the BuildTracker database, but the machine's record is flagged as deleted.
            </remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.CollectInformation">
            <summary>
            Immediately collects information about this machine.
            </summary>
            <remarks>This call may take a while as BT will use WMI to query information about the specific machine.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.GetJobServices">
            <summary>
            Gets a collection of all the JobServices for this machine
            </summary>
            <returns>Collection of JobService objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.Equals(System.Object)">
            <summary>
            Override of Object.Equals method
            </summary>
            <param name="obj">A Machine object to compare to.</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>True if the Machine objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Machine.GetHashCode">
            <summary>
            Override of Object.GetHashCode
            </summary>
            <returns>A hashcode value for this Machine object.</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.BuildTrackerService">
            <summary>
            The parent BuildTrackerService this Machine belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Data">
            <summary>
            Data of machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Id">
            <summary>
            Machine's Id
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Name">
            <summary>
            Machine's name as defined in BuildTracker database. Typically just a WINS name.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.OperatingSystem">
            <summary>
            The OS installed on the machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.ServicePack">
            <summary>
            SP on top of the OS
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Domain">
            <summary>
            The domain this machine belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Manufacturer">
            <summary>
            Machine's manufacturer
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Model">
            <summary>
            Manufacturer's model
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.MemorySize">
            <summary>
            The amount of memory the machine has. In bytes.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.TimeZone">
            <summary>
            The TimeZone the machine resides in
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.CollectMachineInformation">
            <summary>
            If true -&gt; BuildTracker will periodically collect information about this machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.EnableRemoteExecution">
            <summary>
            Indicates this machine can be used for remote execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.EnableSdkProxy">
            <summary>
            Indicates this machine can be used as an SDK Proxy
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.ComputedPerformanceWeight">
            <summary>
            Performance weight as computed by BuildTracker's algorithm. This is based on the number of cores and their speed.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.PerformanceWeightOverride">
            <summary>
            Allows overriding the performance weight with a custom value. Setting this property disregards the computed performance weight.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Notes">
            <summary>
            Admin notes about the machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.Deleted">
            <summary>
            Indicates if the machine is currently marked as deleted.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Machine.WcfMachine">
            <summary>
            Shortcut to get to the WCF IMachine
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.MachineGroup">
            <summary>
            Contains metadata about the group + a list of machines that belong to it.
            Machine groups are used when defining affinities.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService)">
            <summary>
            Private Constructor
            </summary>
            <param name="buildTracker">Object of BuildTrackerService</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.String)">
            <summary>
            Instantiates a MachineGroup object by looking it up by name
            </summary>
            <param name="name"></param>
            <param name="buildTracker"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Int32)">
            <summary>
            Instantiates a MachineGroup object by looking it up by ID
            </summary>
            <param name="id"></param>
            <param name="buildTracker"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.MachineGroupData)">
            <summary>
            Creates an instance initializing its data to the one passed in
            </summary>
            <param name="buildTracker"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.Add(Microsoft.BuildTracker.Client.Machine)">
            <summary>
            Adds a machine to this machine group
            </summary>
            <param name="machine">The machine to add</param>
            <remarks>It's just the ID that's needed in this case.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.Remove(Microsoft.BuildTracker.Client.Machine)">
            <summary>
            Removes a machine from this group.
            </summary>
            <param name="machine">A machine to be removed from this group.</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.Save">
            <summary>
            Persists the changes in this class to the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.Refresh">
            <summary>
            Gets the latest data for this class from the backend.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.Delete">
            <summary>
            Deletes this MachineGroup
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.MachineGroup.GetHashCode">
            <summary>
            Gets a hashcode value
            </summary>
            <returns>a hashcode</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.BuildTrackerService">
            <summary>
            The parent BuildTrackerService this MachineGroup belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.Data">
            <summary>
            Data of MachineGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.Machines">
            <summary>
            IDs of the machines that belong to this group.
            Modify this collection on the client and then call MachineGroup.Save() to persist changes.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.Name">
            <summary>
            Name of this machine group
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.Id">
            <summary>
            ID of MachineGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.Description">
            <summary>
            Machine's description
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.Owners">
            <summary>
            A list of owners who can manage this machine group
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.MachineGroup.WcfMachineGroup">
            <summary>
            Shortcut to get to the WCF IMachineGroup
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ParameterBase">
            <summary>
            Abstract base class for parameter types.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterBase.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="type">type of the parameter</param>
            <param name="description">descirption of parameter</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterBase.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">Parameter object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if this Parameter is equal to the one passed in, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterBase.GetHashCode">
            <summary>
            Hash function for the ParameterBase class
            </summary>
            <returns>A hash code for the current ParameterBase object</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ParameterBase.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ParameterBase.Description">
            <summary>
            Parameter's description.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ParameterBase.Values">
            <summary>
            Parameter values, 
            For single value parameter like string, number etc., It would be only one value and same would be default or selected
            For multivalue parameters like DropDown, RadioButton, it would be multiple value and one value would be default or selected
            For CheckBox type of parameters it would be multiple values and more than one could be default or selected
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ParameterBase.ParameterType">
            <summary>
            Type of parameter 
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.Parameter">
            <summary>
            Parameters for jobs
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Parameter.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="type">type of the parameter</param>
            <param name="description">descirption of parameter</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Parameter.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="type">type of the parameter</param>
            <param name="description">descirption of parameter</param>
            <param name="value">values of parameter</param>
            <param name="required">parameter required or not</param>
            <param name="readOnly">parameter readonly or not</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Parameter.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">Parameter object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if this Parameter is equal to the one passed in, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Parameter.GetHashCode">
            <summary>
            Hash function for the Parameter class
            </summary>
            <returns>A hash code for the current Parameter object</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Parameter.Required">
            <summary>
            Is this parameter required?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Parameter.ReadOnly">
            <summary>
            Is this parameter readonly?
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.BuildDropParameter">
            <summary>
            BuildDropParameters can be defined on Products, Branches, and BuildShareGroups.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropParameter.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the BuildDropParameter</param>
            <param name="type">type of the BuildDropParameter</param>
            <param name="description">descirption of BuildDropParameter</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropParameter.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">Parameter object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if this Parameter is equal to the one passed in, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.BuildDropParameter.GetHashCode">
            <summary>
            Hash function for the BuildDropParameter class
            </summary>
            <returns>A hash code for the current BuildDropParameter object</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.BuildDropParameter.Inherited">
            <summary>
            Indicates if this parameter definition is inherited from a parent object
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ParameterValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterValue.#ctor(System.String)">
            <summary>
            Constructor to set single value liket string, number, link etc.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterValue.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor to set multiple selection values like DropDwonList, CheckBoxes etc.
            </summary>
            <param name="value"></param>
            <param name="isDefault"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterValue.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">ParameterValue object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if this ParameterValue is equal to the one passed in, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ParameterValue.GetHashCode">
            <summary>
            Hash function for the ParameterValue class
            </summary>
            <returns>A hash code for the current ParameterValue object</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ParameterValue.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ParameterValue.IsDefault">
            <summary>
            Is it a default value?
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.Product">
            <summary>
            Represents a BuildTracker Product.
            Products are created by BuildTracker administrators and 
            managed by Product Owners.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService)">
            <summary>
            Private Constructor
            </summary>
            <param name="buildTracker">Object of BuildTrackerService</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.String)">
            <summary>
            Instantiates a product object by looking it up by name
            </summary>
            <param name="name"></param>
            <param name="buildTracker"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Int32)">
            <summary>
            Instantiates a product object by looking it up by ID
            </summary>
            <param name="id"></param>
            <param name="buildTracker"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.ProductData)">
            <summary>
            Creates an instance initializing its data to the one passed in
            </summary>
            <param name="buildTracker"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.Refresh">
            <summary>
            Refreshes fields
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.GetBuildShareGroups">
            <summary>
            Returns collection of associated BuildShareGroups
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.GetBuildShareGroup(System.String)">
            <summary>
            Gets a BuildShareGroup by name
            </summary>
            <param name="buildShareGroupName">The name of the BuildShareGroup to lookup</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.Save">
            <summary>
            Saves field changes back to the BuildTracker service
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.Delete">
            <summary>
            Deletes this product
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.GetBranches">
            <summary>
            Gets all branches of this product
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.CreateBranch(System.String)">
            <summary>
            Creates a new branch
            </summary>
            <param name="branchName">The name of the newly created branch.</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.Register">
            <summary>
            Registers this product as one of my products
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.Unregister">
            <summary>
            Unregisters this product from my products
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.GetBranch(System.String)">
            <summary>
            Gets a branch by name
            </summary>
            <param name="branchName">The name of the branch to lookup</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.QueryJobInstances(System.String,Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses)">
            <summary>
            Simplified Job Instance querying using requestedBy and status only.
            Gets all job instances under this product, for the given requester id and with the given statuses.
            </summary>
            <param name="requestedBy">name of the users who created the jobs</param>
            <param name="jobInstanceQueryStatuses">status of the included job instances</param>
            <returns>Collection of JobInstances with the matching status</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.CreateBuildShareGroup(System.String,System.String,System.String,System.String)">
            <summary>
            Creates BuildShareGroup with default systemwide retention job definition
            </summary>
            <param name="buildShareGroupName">name of the build share group</param>
            <param name="buildShareGroupType">Type of BuildShare, e.g. Official, Buddy etc.</param>
            <param name="dropSharePath">path for drop folder, location where drop folder should be created </param>
            <param name="sourceSharePath">path for source folder, location where source folder should be created </param>
            <returns>object of BuildShareGroup which was created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.CreateBuildShareGroup(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates BuildShareGroup with specific systemwide retention job definition
            </summary>
            <param name="buildShareGroupName">name of the build share group</param>
            <param name="buildShareGroupType">Type of BuildShare, e.g. Official, Buddy etc.</param>
            <param name="dropSharePath">path for drop folder, location where drop folder should be created </param>
            <param name="sourceSharePath">path for source folder, location where source folder should be created </param>
            <param name="retentionJobDefinitionId">Id of the systemwide retention job definition, which will be associated with BuildShareGroup</param>
            <returns>object of BuildShareGroup which was created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.GetJobSchedules">
            <summary>
            Gets all of the JobSchedules for this Product
            </summary>
            <returns>A collection of JobSchedule objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this product
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A Product object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Product.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.BuildTrackerService">
            <summary>
            The parent BuildTrackerService this Product belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.Name">
            <summary>
            Name of the Product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.Id">
            <summary>
            BuildTracker Id value of the Product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.CreateTime">
            <summary>
            DateTime when the product was created
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.RunAsAlias">
            <summary>
            Name (domain\username) for the RunAs user
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this product.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.Owners">
            <summary>
            Collection of aliases that are owners of this product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.Data">
            <summary>
            Data of product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.EnlistmentSettings">
            <summary>
            Enlistment configuration settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Product.Wcf">
            <summary>
            Shortcut to get to the WCF
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ProductCollection">
            <summary>
            A collection of products
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ProductCollection.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,System.Collections.ObjectModel.Collection{Microsoft.BuildTracker.Contracts.ProductData})">
            <summary>
            Creates a ProductCollection from a list of ProductData (from WCF)
            </summary>
            <param name="productDataList"></param>
            <param name="parent"></param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RetentionJobDefinition">
            <summary>
            RetentionJobDefinition defines a retention job
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionJobDefinition.QueryJobInstances(System.String,Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses)">
            <summary>
            Simplified Job Instance querying using requestedBy and status only.
            Gets all job instances under this JobDefinition, for the given requester id and with the given statuses.
            </summary>
            <param name="requestedBy">name of the users who created the jobs</param>
            <param name="jobInstanceQueryStatuses">status of the included job instances</param>
            <returns>Collection of RetentionJobInstanceCollection with the matching status</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionJobDefinition.SetRunAsCredentials(System.String,System.Security.SecureString)">
            <summary>
            Applies the credentials for the given RunAs account to this RetentionJobDefinition
            </summary>
            <param name="userName">Username of the account</param>
            <param name="password">Password of the account</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RemoteLegDefinition">
            <summary>
            A remote leg definition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RemoteLegDefinition.Refresh">
            <summary>
            Refreshes the fields from the backend BT.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RemoteLegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">RemoteLegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RemoteLegDefinition.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.RemoteLegDefinition.RemoteFolderParameter">
            <summary>
            Remote Folder Parameter.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.SyncLegDefinition">
            <summary>
            Definition of the SyncLeg
            SyncLeg is the one which synchronizes sync time across all other legs
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SyncLegDefinition.Equals(System.Object)">
            <summary>
            Override of object.Equals method
            </summary>
            <param name="obj">RemoteLegDefinition to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if all of the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.SyncLegDefinition.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.Remark">
            <summary>
            Represents a BuildTracker remark.
            Remarks are typically attached to a few objects like JobInstance, LegInstance, JobSchedule, Enlistment
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Remark.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A Remark object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.Remark.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Remark.Count">
            <summary>
            The count of how many times this exact remark was written.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Remark.LastOccurrence">
            <summary>
            The last time this remark was written.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Remark.FirstOccurrence">
            <summary>
            The first tiem this remark was written.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Remark.RemarkType">
            <summary>
            The type of the remark.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Remark.Text">
            <summary>
            Remark's message/text.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.Remark.User">
            <summary>
            The user on whose behalf the remark was written.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.RetentionPolicy">
            <summary>
            Defines a condition upon which a retention job gets queued up
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionPolicy.#ctor(Microsoft.BuildTracker.Client.BuildTrackerService,Microsoft.BuildTracker.Contracts.RetentionPolicyData)">
            <summary>
            Contructor to convert RetentionPolicyData to RetentionPolicy
            </summary>
            <param name="buildTrackerService">Object of BuildTrackerService</param>
            <param name="retentionPolicyData">object of retentionPolicyData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionPolicy.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A RetentionPolicy object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.RetentionPolicy.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.RetentionPolicy.Condition">
            <summary>
            Condition for the execution of this policy 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.RetentionPolicy.Quantity">
            <summary>
            Passed value will be associated with selected Condition, Works with condition only.
            Value in this property will be replaced with variable in Condition property
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Client.ServiceInterval">
            <summary>
            This class can help you determine whether the services in your lab are functioning normally. 
            Each listed task repeats at the specified interval. 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ServiceInterval.Equals(System.Object)">
            <summary>
            Override Object.Equals method
            </summary>
            <param name="obj">A ServiceInterval object to compare to</param>
            <remarks>
            This method only performs a shallow comparison of objects, there is no recursive
            comparison of sub-objects.  Only the public properties of this class are used to determine equality.
            </remarks>
            <returns>true if the fields match</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Client.ServiceInterval.GetHashCode">
            <summary>
            Get a hashcode
            </summary>
            <returns>A hashcode value</returns>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceInterval.BuildTrackerService">
            <summary>
            BT service object this configuration belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceInterval.AffectedService">
            <summary>
            Name of the BuildTracker service that controls this service interval
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceInterval.Description">
            <summary>
            Description of the task that is performed by the service
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceInterval.LastExecution">
            <summary>
            Time of the last execution of the service's task
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceInterval.Name">
            <summary>
            Name of the Task
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceInterval.Overdue">
            <summary>
            Indicates that a task is not being executed at the given interval. 
            Overdue is set to true when the timespan between now and LastAccess is four times longer than 
            Value and is at least 10 minutes.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Client.ServiceInterval.Value">
            <summary>
            The length of the interval (in seconds) between executions of the task.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\BuildTracker\Api\3.6\Microsoft.BuildTracker.Contracts.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.BuildTracker.Contracts</name>
    </assembly>
    <members>
        <member name="T:Microsoft.BuildTracker.Contracts.AffinityData">
            <summary>
            Contains the data members related to a BuildTracker affinity
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.AffinityData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.Id">
            <summary>
            Id of the affinity
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.MachineGroupId">
            <summary>
            Id of the MachineGroup to affinity with
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.ResourceId">
            <summary>
            Id of the resource to be affinitied
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.ResourceType">
            <summary>
            Type of resource to affinity to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.AffinityType">
            <summary>
            The type of affinity relationship
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.JobType">
            <summary>
            Type of job afffinity applies to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.AlternateParentId">
            <summary>
            Id of the parent to use for the affinity when the affinity is set to a system-level resource
            </summary>
            <remarks>
            When the affinity is system-level, this contains the Id of the BuildShareGroup that is the parent
            of the drop/retention job.  Otherwise this value is null.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AffinityData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.AffinityResourceType">
            <summary>
            Type of object to be affinitied
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.Product">
            <summary>
            Affinity to a product
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.Branch">
            <summary>
            Affinity to a branch
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.Job">
            <summary>
            Affinity to a job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.Leg">
            <summary>
            Affinity to a leg
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.Machine">
            <summary>
            Affinity to a machine
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.SourceDepot">
            <summary>
            Affinity to a SourceDepot
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityResourceType.BuildShareGroup">
            <summary>
            Affinity to a BuildShareGroup
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.AffinityType">
            <summary>
            Type of relationship between a selected resource and a Machine Group
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityType.ResourceDoesNotBuildOnMachine">
            <summary>
            Legs of the selected resource do not execute on machines in the selected Machine Group
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityType.ResourceBuildsOnMachine">
            <summary>
            Legs of the selected resource only execute on machines in the selected Machine Group
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityType.MachineBuildsResource">
            <summary>
            Machines in the selected Machine Group only execute legs of the selected resource
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityType.ResourceEqualsMachine">
            <summary>
            The selected resource and the selected Machine Group are associated
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AffinityType.Unknown">
            <summary>
            The relationship is undefined
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobType">
            <summary>
             The Job Type (e.g. Build, Drop, Retention) of the affinity.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobType.Unknown">
            <summary>
            Unknown type of job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobType.Build">
            <summary>
            Build job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobType.Retention">
            <summary>
            Build retention job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobType.Drop">
            <summary>
            Drop job
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IAffinity">
            <summary>
            Service methods that perform actions related to BuildTracker affinities 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IAffinity.GetById(System.Int32)">
            <summary>
            Returns the affinity that has the given id
            </summary>
            <param name="affinityId">Id of the affinity to return</param>
            <returns>AffinityData object for the requested affinity</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IAffinity.Update(Microsoft.BuildTracker.Contracts.AffinityData)">
            <summary>
            Updates and existing affinity with data from a AffinityData object
            </summary>
            <param name="affinity">An AffinityData object with field values that are to be updated on a BuildTracker affinity</param>
            <returns>An AffinityData object that contains the updated field values</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IAffinity.Delete(System.Int32)">
            <summary>
            Deletes a affinity from BuildTracker
            </summary>
            <param name="affinityId">Id of the affinity to be deleted</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildDropQueryData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.DateFrom">
            <summary>
            Start of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.DateTo">
            <summary>
            End of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.ProductId">
            <summary>
            Filter to build drops under the given product only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.BranchId">
            <summary>
            Filter to build drops under the given branch only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.BuildShareGroupId">
            <summary>
            Filter to build drops under the given build share group only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.SubmittedBy">
            <summary>
            Filter only builds submitted by this user
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.ParameterName">
            <summary>
            Filter only builds with this parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.ParameterValue">
            <summary>
            Filter only builds with this value for the parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.JobDefinitionId">
            <summary>
            Filter only builds from this job definition.  
            If both both JobDefinitionID and JobDefinitionName are supplied, JobDefinitionId takes precedence.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.JobDefinitionName">
            <summary>
            Filter only builds from this job definition.  
            If both both JobDefinitionID and JobDefinitionName are supplied, JobDefinitionId takes precedence.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.JobTypes">
            <summary>
            Filter only builds having these types
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.IncludeDeleted">
            <summary>
            Return deleted builds in the results
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.FailedOnly">
            <summary>
            Only return failed builds in the results
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.TopN">
            <summary>
            Limit results to this number of builds
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropQueryData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ICredentials36Qfe1">
            <summary>
            Interface service methods added for version QFE1
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ICredentials36Qfe1.SetCredentials(System.String,System.Byte[],System.Int32,Microsoft.BuildTracker.Contracts.AccountResourceType)">
            <summary>
            Sets the credential information on a BuildTracker object
            </summary>
            <param name="alias">Username of the account to set</param>
            <param name="password">Password of the account to set.  It should be an array of bytes derived from encrypting the password string.</param>
            <param name="id">Id of the object to associate the credentials with</param>
            <param name="resourceType">Type of object to associate the credentials with</param>
            <returns>The alias that was set on the resource</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses">
            <summary>
            All of the different states that a JobInstance might have
            </summary>
            <remarks>
            This enum is flags, so multiple values can be 'OR'ed together
            </remarks>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Waiting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Running">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Failed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Aborted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Canceled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Idle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Skipped">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.Resumed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.FailedOk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.InternalError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.FailedStatuses">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceQueryStatuses.FinishedStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegDateTimeColumn">
            <summary>
            Possible columns to set date condition
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegDateTimeColumn.PreparingStartedTime">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegDateTimeColumn.WaitingStartedTime">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegDateTimeColumn.ReadyStartedTime">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegDateTimeColumn.ExecutingStartedTime">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegDateTimeColumn.FinishedTime">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegInstanceWaitingState">
            <summary>
            Condition that a leg instance may be waiting for
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceWaitingState.NotWaiting">
            <summary>
            The leg instance is not waiting
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceWaitingState.WaitingOnMachines">
            <summary>
            The leg instance is waiting for a machine to become available to run on
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceWaitingState.WaitingOnDependencies">
            <summary>
            The leg instance is waiting for another leg that it depends on to complete
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegInstanceQueryData">
            <summary>
            Data contract containing all of the fields that will be used to form a query to select LegInstances.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.DateFrom">
            <summary>
            Start of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.DateFromQueryType">
            <summary>
            Column where DateFrom condition should be applied or compaired
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.DateTo">
            <summary>
            End of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.DateToQueryType">
            <summary>
            Column where DateTo condition should be applied or compaired
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.Status">
            <summary>
            Combination of LegInstance state values that are queried for
            </summary>
            <remarks>
            This field may not be null.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.OrderBy">
            <summary>
            Sets the sort order. Used in the "top N" scenario -> in conjuntion with the .TopN field
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.SortDirection">
            <summary>
            data sorting direction
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.TopN">
            <summary>
            Return the top N instances only.
            Sort using the .OrderBy + .SortDirection fields.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.OverdueState">
            <summary>
            Filter for OnTime, Delayed, or Overdue leg instances.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.LegDefinitionId">
            <summary>
            Filter to leg instances of the given leg definition only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.MachineId">
            <summary>
            Filter to leg instances that execute on the given machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.ProductId">
            <summary>
            Filter to instances under the given product only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.BranchId">
            <summary>
            Filter to instances under the given branch only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.JobInstanceIds">
            <summary>
            Filter the results to LegInstances that belong to JobInstances with the given IDs
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.JobScheduleId">
            <summary>
            Filter to instances of the given job schedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceQueryData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IInstanceQuery36Qfe1">
            <summary>
            A set of query methods to get to instances (job instances, leg instances)
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IInstanceQuery">
            <summary>
            A set of query methods to get to instances (job instances, leg instances)
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IInstanceQuery.QueryJobInstances(Microsoft.BuildTracker.Contracts.JobInstanceQueryData)">
            <summary>
            Executes a query to retrieve JobInstance items that match the criteria passed in the JobInstanceQueryData structure
            </summary>
            <remarks>
            Will validate the data structure and its contents passed in.
            Throws ArgumetnFault
            </remarks>
            <returns>A collection of JobInstanceData items</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IInstanceQuery.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IInstanceQuery36Qfe1.QueryLegInstances(Microsoft.BuildTracker.Contracts.LegInstanceQueryData)">
            <summary>
            Executes a query to retrieve LegInstance items that match the criteria passed in the LegInstanceQueryData structure
            </summary>
            <param name="queryData">Defines the parameters of the query that selects a set of LegInstances.</param>
            <remarks>
            Will validate the data structure and its contents passed in.
            Throws ArgumentFault
            </remarks>
            <returns>A collection of LegInstanceData items</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IInstanceQuery36Qfe1.CountLegInstances(Microsoft.BuildTracker.Contracts.LegInstanceQueryData)">
            <summary>
            Executes a query to count the LegInstance items that match the criteria passed in the LegInstanceQueryData structure
            </summary>
            <param name="queryData">Defines the parameters of the query that selects a set of LegInstances.</param>
            <remarks>
            Will validate the data structure and its contents passed in.
            Throws ArgumentFault
            </remarks>
            <returns>The count of LegInstances that match the query criteria</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IInstanceQuery36Qfe1.QueryLegInstanceExecutions(Microsoft.BuildTracker.Contracts.LegInstanceQueryData)">
            <summary>
            Executes a query to retrieve LegInstanceExecution items that match the criteria passed in the LegInstanceQueryData structure
            </summary>
            <param name="queryData">Defines the parameters of the query that selects a set of LegInstanceExecutions.</param>
            <remarks>
            Will validate the data structure and its contents passed in.
            Throws ArgumentFault
            </remarks>
            <returns>A collection of LegInstanceExecutionData items</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IInstanceQuery36Qfe1.CountLegInstanceExecutions(Microsoft.BuildTracker.Contracts.LegInstanceQueryData)">
            <summary>
            Executes a query to count the LegInstanceExecution items that match the criteria passed in the LegInstanceQueryData structure
            </summary>
            <param name="queryData">Defines the parameters of the query that selects a set of LegInstanceExecutions.</param>
            <remarks>
            Will validate the data structure and its contents passed in.
            Throws ArgumentFault
            </remarks>
            <returns>The count of LegInstanceExecutions that match the query criteria</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IInstanceQuery36Qfe1.CountJobInstances(Microsoft.BuildTracker.Contracts.JobInstanceQueryData)">
            <summary>
            Executes a query to retrieve the count of JobInstance items that match the criteria passed in the JobInstanceQueryData structure
            </summary>
            <remarks>
            Will validate the data structure and its contents passed in.
            Throws ArgumetnFault
            </remarks>
            <returns>The count of JobInstances</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobScheduleData">
            <summary>
            Defines basic condition upon which a job gets queued up
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.JobScheduleData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.JobScheduleData.#ctor(Microsoft.BuildTracker.Contracts.JobScheduleData)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">Another JobScheduleData instance to copy property values from</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Id">
            <summary>
            BuildTracker ID of the JobSchedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.BuildJobDefinitionId">
            <summary>
            ID of the job that is to be scheduled.
            </summary>
            <remarks>
            If null, this JobSchedule will become a template that everyone can use to create other JobSchedules
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Name">
            <summary>
            Name for this JobSchedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Description">
            <summary>
            Descriptive text for this JobSchedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Priority">
            <summary>
            Priority to give to the JobInstances created by this Job Schedule.
            If null, Priority of the Job is used.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Enabled">
            <summary>
            If true, the job gets queued to run as specified by the settings.
            If false, the job won't get queued and previously created JobInstances that have not started yet are canceled. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.DaysOfWeek">
            <summary>
            The Day(s) of the week for scheduling the job.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.StartDate">
            <summary>
            Jobs won't be scheduled before this date.
            </summary>
            <remarks>
            This property specifies a particular date value only, an exception will be thrown if the time portion of the DateTime is not zero.
            Date values are considered to be relative to the timezone of the BuildTracker database and should not be in UTC because that indicates 
            a particular point in time independent of timezone.
            </remarks>
            <seealso cref="P:Microsoft.BuildTracker.Contracts.JobScheduleData.EndDate"/>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.EndDate">
            <summary>
            If not null, no new JobInstances will be created for this Job Schedule after the specified date.  If it is null,
            JobInstances will continue to be created by this JobSchedule without end.
            </summary>
            <remarks>
            This property specifies a particular date value only, an exception will be thrown if the time portion of the DateTime is not zero.
            Date values are considered to be relative to the timezone of the BuildTracker database and should not be in UTC because that indicates 
            a particular point in time independent of timezone.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.DailyStartTime">
            <summary>
             The time of day when you want the job to first get scheduled each day. 
            </summary>
            <remarks>
            The TimeSpan value assigned to this property specifies the time of day as the amount of time that has elapsed since midnight.
            Consequently, negative values and TimeSpans longer than 24 hours are not allowed.  Time values are considered to be relative to
            the timezone of the BuildTracker database.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.DailyEndTime">
            <summary>
            If specified, don't re-schedule past this time of the day.
            This only applies for Job Schedules that include Rescheduling and/or Synchronization to a Job Schedule or Enlistment.
            </summary>
            <remarks>
            The TimeSpan value assigned to this property specifies the time of day as the amount of time that has elapsed since midnight.
            Consequently, negative values and TimeSpans longer than 24 hours are not allowed.  Time values are considered to be relative to
            the timezone of the BuildTracker database.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Rescheduling">
            <summary>
            Queue the job several times per day.
            The Start Time and End Time define the window of opportunity where new JobInstances can be scheduled.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.ReschedulingTimeSpan">
            <summary>
            Time period to add to the previous JobInstance start or completion.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Sync">
            <summary>
            Indicates whether the enlistment needs to be synchronized before running Command LegInstances.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.SyncTo">
            <summary>
            The conditions to use to determine the point at which to synchronize the enlistment
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.SyncReferenceJobScheduleId">
            <summary>
            The Job Schedule that the current Job Schedule shoudl use as its SyncTime reference
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.ChangeDetectionEnlistmentSettings">
            <summary>
            Stores generic enlistment settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.ChangeDetectionRunAsAlias">
            <summary>
            Check for last Enlistment changes under specified credentials.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.EffectiveChangeDetectionRunAsAlias">
            <summary>
            Account that will be inherited if the ChangeDetection Credentials are not set on this JobSchedule.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.Parameters">
            <summary>
            Name-value pairs of the Jop Parameters that are definied for the specified Job (based on its current definition).
            Multi-valued parameter values are specified with a comma delimited string.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobScheduleData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DaysOfWeek">
            <summary>
            Day(s) of the week for scheduling the job.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Sunday">
            <summary>
            Sunday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Monday">
            <summary>
            Monday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Tuesday">
            <summary>
            Tuesday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Wednesday">
            <summary>
            Wednesday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Thursday">
            <summary>
            Thursday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Friday">
            <summary>
            Friday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Saturday">
            <summary>
            Saturday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Weekdays">
            <summary>
            Monday through Friday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.Weekends">
            <summary>
            Saturday and Sunday
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DaysOfWeek.All">
            <summary>
            All days of the week
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ReschedulingType">
            <summary>
            When to schedule another JobInstance
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ReschedulingType.None">
            <summary>
            Schedule only one JobInstance per day
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ReschedulingType.LastStart">
            <summary>
             Schedule a new JobInstance based on when the previous one Started
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ReschedulingType.LastCompletion">
            <summary>
            Schedule a new JobInstance based on when the previous one Completed
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.SyncToType">
            <summary>
            The conditions to use to determine the point at which to synchronize the enlistment
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.SyncToType.Current">
            <summary>
            Sync to the time that was scheduled for execution
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.SyncToType.JobSchedule">
            <summary>
             Schedule a new JobQueue based on the sync time of the last successful JobQueue of another Job Schedule
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.SyncToType.Enlistment">
            <summary>
            Schedule a new JobQueue based on changes made to a given Enlistment
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IJobSchedule36Qfe1">
            <summary>
            Set of operations allowed to manage Job Schedules
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobSchedule36Qfe1.Update(Microsoft.BuildTracker.Contracts.JobScheduleData)">
            <summary>
            Update the local JobSchedule
            </summary>
            <param name="jobScheduleData">JobScheduleData object to update</param>
            <returns>A JobScheduleData object with properties repopulated from BuildTracker</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobSchedule36Qfe1.Delete(System.Int32)">
            <summary>
            Delete the JobSchedule
            </summary>
            <param name="jobScheduleId">Id of the JobSchedule that should be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobSchedule36Qfe1.GetById(System.Int32)">
            <summary>
            Get a jobSchedule by it's ID value
            </summary>
            <param name="jobScheduleId">Id of the JobSchedule</param>
            <returns>JobSchedule object with latest data.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobSchedule36Qfe1.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobServiceData">
            <summary>
            Contains the data members related to a BuildTracker JobService
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.Id">
            <summary>
            ID of the JobService
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.AllowedJobTypes">
            <summary>
            Defines the list of types of Jobs (Build, BuildRetention, Drop) a given Job Service is allowed to run. 
            If None is selected then this Job Service will not process any Jobs
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.MachineId">
            <summary>
            ID of the machine where the Job Service is installed
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.MaximumWorkerThreads">
            <summary>
            Lists the maximum number of LegInstances the given Job Service can process concurrently
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.RequestedState">
            <summary>
            An administrator can request for that a service enter the following states by setting the RequestedState. 
            After the RequestedState is saved BuildTracker will process the request and apply it to the JobSevice. 
            Once applied the State property will reflect the requested state.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.State">
            <summary>
            The state that the JobService is currently in
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.JobServiceType">
            <summary>
            The type of the JobService, as specified by the type of legs that it runs.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobServiceData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobsTypes">
            <summary>
            The types of jobs that a Job Service is allowed to run.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobsTypes.None">
            <summary>
            No jobs of any type
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobsTypes.Build">
            <summary>
            Build Jobs
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobsTypes.BuildRetention">
            <summary>
            BuildRetention Jobs
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobsTypes.Drop">
            <summary>
            Drop Jobs
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobServiceState">
            <summary>
            The state that the JobService is currently in
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobServiceState.Normal">
            <summary>
            The JobService will process a waiting LegInstance ready to run if these conditions are met: 
            The JobService is online. 
            The Job is one of the allowed Job Types. 
            Affinities allow the given LegInstances to run on the given machine. 
            There are enough worker threads available. 
            BuildTracker administrators did not prevent LegInstances of the given priority from running on the Manage BuildTracker page. 
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobServiceState.CommunicationPaused">
            <summary>
            The JobService's communication currently paused, meaning it stopped reporting the status/logs of 
            running LegInstances and is not processing any new LegInstances. 
            This provides an opportunity to do maintenance on the database machine for example. 
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobServiceState.Reboot">
            <summary>
            The machine is currently being rebooted and the JobServices on this machine are not processing LegInstances.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobServiceState.DelegationPaused">
            <summary>
            The JobService is currently not running any legs and will be bypassed for delegation. 
            Any LegInstances that are dependent on this machine will remain in the waiting state. 
            This provides an opportunity to do maintenance on this JobService machine. 
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobServiceType">
            <summary>
            The type of the JobService, as specified by the type of legs that it runs.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobServiceType.Unknown">
            <summary>
            Unknown type of JobService
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobServiceType.LocalLegs">
            <summary>
             Handled by BuildQ that executes the LegInstances locally on the current machine. 
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobServiceType.RemoteLegs">
            <summary>
            Handled by BuildRemoteExec that delegates the LegInstance execution to a machine enabled for Remote Execution. 
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IJobService36Qfe1">
            <summary>
            Service methods that perform actions related to BuildTracker JobServices 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobService36Qfe1.Update(Microsoft.BuildTracker.Contracts.JobServiceData)">
            <summary>
            Update the local JobService
            </summary>
            <param name="jobServiceData">JobServiceData object to update</param>
            <returns>A JobServiceData object with properties repopulated from BuildTracker</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobService36Qfe1.Delete(System.Int32)">
            <summary>
            Delete the JobService
            </summary>
            <param name="jobServiceId">Id of the JobService that should be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobService36Qfe1.GetById(System.Int32)">
            <summary>
            Get a jobService by it's ID value
            </summary>
            <param name="jobServiceId">Id of the JobService</param>
            <returns>JobService object with latest data.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobService36Qfe1.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.AccessDeniedFault">
            <summary>
            Fault which is thrown when user is not authorize to access the resource
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ApiFault">
            <summary>
            Base fault from the API WCF interface
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ApiFault.#ctor(System.String)">
            <summary>
            Constructor for ApiFault
            </summary>
            <param name="message">Message that describes the fault</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ApiFault.#ctor(System.String,System.String)">
            <summary>
            Constructor for ApiFault
            </summary>
            <param name="message">Message the describes the fault</param>
            <param name="stackTrace">Inner exception stacktrace details</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ApiFault.Message">
            <summary>
            Message that describes the fault
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ApiFault.StackTrace">
            <summary>
            Exception StackTrace details.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.AccessDeniedFault.#ctor(System.String,System.String)">
            <summary>
            Constructor with exception message and stacktrace details as input parameter
            </summary>
            <param name="message">exception message</param>
            <param name="stackTrace">exception details</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.AccessDeniedFault.UserName">
            <summary>
            Property to store requester's UserName
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ArgumentFault">
            <summary>
            Fault that is thrown when an incorrect argument is passed to a method
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ArgumentFault.#ctor(System.String)">
            <summary>
            Constructor for ArgumentFault
            </summary>
            <param name="message">Message that describes the fault</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ArgumentFault.#ctor(System.String,System.String)">
            <summary>
            Constructor for ArgumentFault
            </summary>
            <param name="message">Message that describes the fault</param>
            <param name="stackTrace">Inner exception stacktrace details</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ArgumentFault.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for ArgumentFault.  Forms a message from parameters.
            </summary>
            <param name="argumentName">passed argument</param>
            <param name="message">exception message</param>
            <param name="stackTrace">Inner exception stacktrace details</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildResult">
            <summary>
            Possible build results
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildResult.Unknown">
            <summary>
            Build result is unknown
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildResult.Success">
            <summary>
            All related build job instances completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildResult.Failed">
            <summary>
            At least one related build job instance failed.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildResult.Running">
            <summary>
            At least one related build job instance is still running.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildDropRetentionStatus">
            <summary>
            Possible statuses of a build drop
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildDropRetentionStatus.Deleted">
            <summary>
            The build drop has been deleted.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildDropRetentionStatus.Preserved">
            <summary>
            The build drop has been preserved and will not be automatically deleted until it's unpreserved.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildDropRetentionStatus.Unpreserved">
            <summary>
            The build is unpreserved and all applicable retention policies will impact it.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.BuildDropRetentionStatus.DeleteRequested">
            <summary>
            The build drop is scheduled for deletion.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildDropData">
            <summary>
            Represents a build drop (an output of a build job)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.Id">
            <summary>
            Id of this BuildDrop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.BuildShareGroupId">
            <summary>
            Id of a BuildShareGroup that contains this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.Name">
            <summary>
            The name of this build drop as defined in the build's scripts.
            Typically this is the version string.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.SourcePath">
            <summary>
            Path to the Sources location of this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.DropPath">
            <summary>
            Path to the Drop location of this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.LogsPath">
            <summary>
            Path to the Logs location of this build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.StartedTime">
            <summary>
            The moment when the build drop started being copied to its BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.DroppedTime">
            <summary>
            The moment when the build drop was dropped to the BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.DeletedTime">
            <summary>
            The moment when the build drop was deleted from the BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.Size">
            <summary>
            The size of the build drop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.RetentionStatus">
            <summary>
            Indicates the retentions status (deleted, preserved, etc. ...)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.RetentionMessage">
            <summary>
            Any retention related messages go here.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.RetentionExceptionOccurred">
            <summary>
            Indicates if there were any issues while processing retention for this build drop.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.Result">
            <summary>
            Overall build result. This is an aggregation of all BuildJobInstance statuses for this BuildDrop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this BuildDrop
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildDropData.ExtensionData">
            <summary>
            Used for storing and retrieving values (round-tripping) of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IBuildDrop">
            <summary>
            BuildDrop related operations
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.AddRemark(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a new build drop remark
            </summary>
            <param name="buildDropId">id of the build drop to change the status for</param>
            <param name="text">the text of the remark to add</param>
            <param name="type">the type of the remark to add</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.GetRemarks(System.Int32)">
            <summary>
            Gets all remarks associated with the given build drop
            </summary>
            <param name="buildDropId">id of the build drop</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.GetBuildJobInstances(System.Int32)">
            <summary>
            Gets all related build job instances
            </summary>
            <param name="buildDropId">id of the build drop</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.GetRetentionJobInstances(System.Int32)">
            <summary>
            Gets all related retention job instances
            </summary>
            <param name="buildDropId">id of the build drop</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.GetDropJobInstances(System.Int32)">
            <summary>
            Gets all related drop job instances
            </summary>
            <param name="buildDropId">id of the build drop</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.ChangeRetentionStatus(System.Int32,System.Int32)">
            <summary>
            changes the retention status for a given build drop
            </summary>
            <param name="buildDropId">id of the build drop to change the status for</param>
            <param name="newStatus">the new status to set the build drop to</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.Backup(System.Int32)">
            <summary>
            Requests a backup of this build drop
            </summary>
            <param name="buildDropId">id of the build drop to change the status for</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IBuildDrop36Qfe1">
            <summary>
            BuildDrop related operations
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildDrop36Qfe1.Update(Microsoft.BuildTracker.Contracts.BuildDropData)">
            <summary>
            Updates an existing BuildDrop with data from a BuildDropData object
            </summary>
            <param name="buildDropData">A BuildDropData object with field values that are to be updated on a BuildTracker build</param>
            <returns>A BuildDropData object that contains the updated field values</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildShareGroupData">
            <summary>
            Stores data for BuildShareGroup
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.BuildShareGroupData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.Name">
            <summary>
            Name of this BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.Id">
            <summary>
            unique Id
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.ParentId">
            <summary>
            Id of the parent item, Only Product or Branch can be parent of a BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.Description">
            <summary>
            Description of BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.BuildShareGroupType">
            <summary>
            Type of BuildShareGroup, e.g. Official, Buddy etc.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.DropSharePath">
            <summary>
            path for drop folder, location where drop folder should be created 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.SourceSharePath">
            <summary>
            path for source folder, location where source folder should be created 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.RunAsAlias">
            <summary>
            If non-null, retention and drop jobs will run under this account.
            If null, default user's credentials will be used.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this BuildShareGroup.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.DiscoverBuilds">
            <summary>
            Builds are auto-discovered if they exist on a Build Share, or marked as deleted if they do not exist on a Build Share.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.PreserveBuilds">
            <summary>
            If specified, discover builds will be preserved
            Preserved builds are excluded from any Build Retention Policies
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.RetentionRequiresOwnerApproval">
            <summary>
            Build retention policy instances can only queue retention jobs in pending state at queue time.
            A Build Share Group owner needs to approve the job execution.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.RetentionJobDefinitionId">
            <summary>
            Id of RetentionJob which will be associated with this BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.EnlistmentSettings">
            <summary>
            Stores generic enlistment settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.InheritBuildDropParameters">
            <summary>
            A value of true indicates that this BuildShareGroup inherits BuildDropParameter definitions from it's parent product or branch.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildShareGroupData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that may be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IBuildShareGroup">
            <summary>
            Set of operations allowed to manage Build Share Group
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.Save(Microsoft.BuildTracker.Contracts.BuildShareGroupData)">
            <summary>
            To Update the buildShareGroup
            </summary>
            <param name="buildShareGroupData">populated object of buildShareData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.Delete(System.Int32)">
            <summary>
            To Delete buildShareGroup
            </summary>
            <param name="buildShareGroupId">Id of the buildShareGroup which should be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetById(System.Int32)">
            <summary>
            To Refresh the data of BuildShareGroup
            </summary>
            <param name="buildShareGroupId">Id of BuildShareGroup, Need to be refreshed</param>
            <returns>object of BuildShareGroupData with latest data.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetBuildDrops(System.Int32,System.Boolean)">
            <summary>
            Returns the BuildDrops for the given BuildShareGroup
            </summary>
            <param name="buildShareGroupId">Id of the BuildShareGroup to retrieve the BuildDrops for.</param>
            <param name="includeDeletedBuilds">Flag indicating whether deleted BuildDrops should be included in the returned collection.</param>
            <returns>A collection of BuildDropData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.IncludeSystemPolicy(System.Int32,System.Int32)">
            <summary>
            Includes a system wide drop policy, which was previously excluded for this BSG.
            </summary>
            <param name="buildShareGroupId">ID of the BuildShareGroup</param>
            <param name="systemDropPolicyId">ID of the system-wide retention policy to exclude</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.ExcludeSystemPolicy(System.Int32,System.Int32)">
            <summary>
            Excludes a system wide drop policy for this BSG.
            </summary>
            <param name="buildShareGroupId">ID of the BuildShareGroup</param>
            <param name="systemDropPolicyId">ID of the system-wide drop policy to exclude</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.CreateDropPolicy(Microsoft.BuildTracker.Contracts.DropPolicyData)">
            <summary>
            Method to create local Drop Policy for this buildsharegroup
            </summary>
            <param name="dropPolicyData">object of dropPolicyData to create new drop Policy</param>
            <returns>object of DropPolicyData, create by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.CreateAdminDropPolicy(Microsoft.BuildTracker.Contracts.DropPolicyData)">
            <summary>
            Method to create Admin Drop Policy for this buildsharegroup
            </summary>
            <param name="dropPolicyData">object of dropPolicyData to create new drop Policy</param>
            <returns>object of DropPolicyData, create by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.CreateRetentionPolicy(Microsoft.BuildTracker.Contracts.RetentionPolicyData)">
            <summary>
            Method to create new local retention policy for this buildsharegroup
            </summary>
            <param name="retentionPolicyData">object of retentionPolicyData to create new retention Policy</param>
            <returns>object of retentionPolicyData</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.CreateAdminRetentionPolicy(Microsoft.BuildTracker.Contracts.RetentionPolicyData)">
            <summary>
            Method to create new admin retention policy for this buildsharegroup
            </summary>
            <param name="retentionPolicyData">object of retentionPolicyData to create new admin RetentionPolicy</param>
            <returns>object of retentionPolicyData, created by this operation</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetAdminDropPolicies(System.Int32)">
            <summary>
            Only a lab admin can create admin policies. These are forced on a given BSG. And cannot be opted out of.
            </summary>
            <param name="buildShareGroupId">ID of the BSG</param>
            <returns>Collection of DropPolicyData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetAdminRetentionPolicies(System.Int32)">
            <summary>
            Only a lab admin can create admin policies. These are forced on a given BSG. And cannot be opted out of.
            </summary>
            <param name="buildShareGroupId">ID of the BSG</param>
            <returns>Collection of RetentionPolicyData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetDropPolicies(System.Int32)">
            <summary>
            Gets a collection of all local drop policies defined for this BSG.
            </summary>
            <param name="buildShareGroupId">ID of the BSG</param>
            <returns>Collection of DropPolicyData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetRetentionPolicies(System.Int32)">
            <summary>
            Gets a collection of all local retention policies defined for this BSG.
            </summary>
            <param name="buildShareGroupId">ID of the BSG</param>
            <returns>Collection of RetentionPolicyData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetExcludedSystemDropPolicies(System.Int32)">
            <summary>
            System wide drop policies which are opted out of/excluded for this BSG.
            </summary>
            <param name="buildShareGroupId">ID of the BSG</param>
            <returns>Collection of drop policies</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.GetExcludedSystemRetentionPolicies(System.Int32)">
            <summary>
            System wide retention policies which are opted out of/excluded for this BSG.
            </summary>
            <param name="buildShareGroupId">ID of the BSG</param>
            <returns>Collection of retention policies</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup36Qfe1.GetBuildDrop(System.Int32,System.String)">
            <summary>
            Returns the BuildDrop for the given BuildShareGroup with the given name
            </summary>
            <param name="buildShareGroupId">Id of the BuildShareGroup to retrieve the BuildDrops for.</param>
            <param name="buildDropName">Name of the build drop to get.</param>
            <returns>A BuildDropData object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildShareGroup36Qfe1.Update(Microsoft.BuildTracker.Contracts.BuildShareGroupData)">
            <summary>
            To Update the buildShareGroup
            </summary>
            <param name="buildShareGroupData">populated object of buildShareData</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ApiServerVersion">
            <summary>
            Lists known Api Server versions
            This is used mainly for compatiblity scenarios 
            (newer client -> older service or older client -> newer service)
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ApiServerVersion.BuildTracker36">
            <summary>
            3.6
            </summary>
            <remarks>
            v3.6 API server does not provide this functionality, but the default value for int
            is 0 in WCF and this field in the data contract is not required. 
            So 0 simply means 3.6
            </remarks>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ApiServerVersion.BuildTracker36Qfe1">
            <summary>
            3.6 Qfe1
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LabConfigurationData">
            <summary>
            Settings to fine-tune lab's operation.
            These can be changed by lab admins only.
            For security reasons, some values are only populated for BT Administrators.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.LabConfigurationData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.TimeZoneName">
            <summary>
            The time zone of the BuildTracker system. 
            </summary>
            <remarks>This field is currently set to the DB server TZ during the setup.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.AllowJobsToRunWithAdminPrivileges">
            <summary>
            Allow jobs to run under accounts which have admin privileges on build machines.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepDaysOfLegLogs">
            <summary>
            The number of days of leg logs history to keep.
            Minimum value = 0, recommend value = 14.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepMonthsOfJobInstanceHistory">
            <summary>
            Number of months of job history (i.e. start/end/sync time, owner and status of JobInstances/LegInstances) to retain. 
            Minimum value = 1. Recommended value = 12.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepMonthsOfBuildHistory">
            <summary>
            Number of Months of Deleted Build History to Keep 
            Minimum value = 2. Recommended value = 12.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepMonthsOfEnlistmentHistory">
            <summary>
            Number of Months of Deleted Enlistment History to Keep 
            Minimum value = 1. Recommended value = 3.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepMonthsOfEnlistmentLogs">
            <summary>
            Number of Months of Enlistment Logs to Keep 
            Minimum value = 1. Recommended value = 3.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepMonthsOfJobDefinitionCopies">
            <summary>
            Number of months of versioned Job copies (i.e. snapshot of the job definition at a given time) to retain. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepWeeksOfNotificationHistory">
            <summary>
            Number of Weeks of Notifications History to Keep
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeepWeeksOfEmailHistory">
            <summary>
            Number of Weeks of E-mail History to Keep
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.MinimumAllowedJobPriority">
            <summary>
            Minimum Priority Required for a JobQueue to Run Used to prevent JobQueues of lower priority from running. 
            Only JobQueues of identical or higher priority will go from Submitted to Sequenced.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.DatabaseMachine">
            <summary>
            The name of the machine that has the BuildTracker Database.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.InstalledOn">
            <summary>
            The date the latest installation or upgrade took place. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.DomainName">
            <summary>
            The domain name the primary parts of the system belong to.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.KeyManagementMachine">
            <summary>
            Location of the machine that runs buildK - the Key Management service.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.Leaf">
            <summary>
            An optional free-formed HTML document that describes your BuildTracker instance. 
            The file should not exceed 20Kb. Its contents will be shown on the top left of each BuildTracker page. 
            Please ensure that the HTML syntax is correct and that your leaf does not break the layout of the pages.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.LabStatusLeaf">
            <summary>
            An optional free-formed HTML document that describes your BuildTracker instance current status. 
            The file should not exceed 20Kb. Its contents will be shown on the top of each BuildTracker page. 
            Please ensure that the HTML syntax is correct and that your leaf does not break the layout of the pages.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.SmtpServer">
            <summary>
            Use SMTPHost on MS corpnet unless you're in a domain which cannot access it.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.MailStyleSheet">
            <summary>
            Stylesheet used when sending e-mail notifications.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.SchedulerMachine">
            <summary>
            The name of the machine hosting the Scheduler (buildS) service.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.VstsShares">
            <summary>
            A semi-colon delimited list of shares from which BuildTracker will try to copy the necessary 
            TFS files (tf.exe, etc.) when enlisting from web. 
            The enlistment script will try using the first share in the list, then the second, etc.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.SourceDepotShares">
            <summary>
            A semi-colon delimited list of shares that BuildTracker will try to copy sd.exe from when enlisting from web. 
            The enlistment script will try using the first share in the list, then the second, etc.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.SdxScript">
            <summary>
            Location and filename of script to use when enlisting for Enlistment Managers of type sdx.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.Version">
            <summary>
            The latest version installed on this BuildTracker system.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.WebUrl">
            <summary>
            The base location of the main Web UI server.
            </summary>
            <remarks>This is often set to the load-balancer address.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.LabName">
            <summary>
            The name of the BuildTracker lab (e.g. Acme Products Build Lab). 
            The name will be shown on the top left of each BuildTracker page. 
            However, if a BuildTracker Leaf is also the defined the BuildTracker Leaf will be displayed instead.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.LabContacts">
            <summary>
            The contats to communicate with about lab issues.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.Id">
            <summary>
            The unique ID of this instance of BuildTracker.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.AllowDataCollection">
            <summary>
            Indicates if information about this instance of BuildTracker can be tracked in the central registration
            database run by the BuildTracker team.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.SdkUrl">
            <summary>
            The main address of the legacy programmatic access to BuildTracker.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.ApiUrl">
            <summary>
            The main base address of the API service.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.EstimatedExecutionTimeThreshold">
            <summary>
            Minimum number time a LegQueue must run before the execution time is checked against the 
            Estimated Execution Time to see if the LegQueue is overdue. 
            For example, if EET Threshold is set to 60 minutes, BuildTracker will not check to see if the LegQueue 
            is overdue until it has run for at least 60 minutes. 
            </summary>
            <remarks>Currently the granularity is minutes. Any fractions of minutes will be rounded down.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.EstimatedExecutionTimeDelayed">
            <summary>
            How much time over the EET that will trigger a delay warning. Default is 60 minutes. 
            </summary>
            <remarks>Currently the granularity is minutes. Any fractions of minutes will be rounded down.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.EstimatedExecutionTimeOverdue">
            <summary>
            The amount of time over the EET that will trigger an overdue warning. Default is 180 minutes. 
            </summary>
            <remarks>Currently the granularity is minutes. Any fractions of minutes will be rounded down.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.SourceControlRetryAttempts">
            <summary>
            The total number of times BuildTracker will attempt to connect to source depot. 
            The minimum is 1 for the original connection attempt. 
            The default is 3 to allow 2 retry attempts. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.SourceControlRetryInterval">
            <summary>
            How long to wait in between attempts. The default is 10s.
            </summary>
            <remarks>Currently the value is rounded down to full seconds</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.BackupEnabled">
            <summary>
            By default, the backup feature in BuildTracker is not enabled. 
            Checking the box will enable the backup feature. 
            See the How To Configure Backup section of the help for an explanation of the backup feature 
            and steps on customizing it for your lab. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.BackupPromptText">
            <summary>
            Use this field to add custom text about your custom lab backup job and policies. 
            BuildTracker will append this text to the confirmation dialog that is shown when the "Backup" button 
            is clicked on the Build Drops grid and when a product or branch owner creates a drop policy 
            to do automatic backup. 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.BuildShareGroupTypes">
            <summary>
            The list of Build Share Group Types (e.g. categories of build shares, such as 'Official' and 'Buddy' build shares).
            System-wide policy instances (including Build Retention and Build Drop policy instances) 
            can be defined for all Build Share Groups of the same type
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.ServiceIntervals">
            <summary>
            A collection of ServiceIntervalData objects used to determine whether the services in your lab are functioning normally. 
            Each ServiceIntervalData object represents a task that repeats at the specified interval. 
            </summary>
            <remarks>
            Notes: Any changes made may take several minutes to propagate to all affected services. 
            The last ping data is cached (updated every 2 minutes).
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.DefaultRunAsAlias">
            <summary>
            This will be the default user for running jobs.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.LabManagementAlias">
            <summary>
            This will be the user used by services for managing the lab.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.ApiServerVersion">
            <summary>
            Indicates the version of the Api server the client is calling
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LabConfigurationData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.MachineGroupData">
            <summary>
            Metadata about a machine group + the machines that belong to this group.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.MachineGroupData.#ctor(System.String,System.Int32,System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Constructor
            </summary>     
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.MachineGroupData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineGroupData.Machines">
            <summary>
            IDs of the machines that belong to this group.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineGroupData.Name">
            <summary>
            Name of this machine group
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineGroupData.Id">
            <summary>
            Id of the MachineGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineGroupData.Description">
            <summary>
            Machine's description
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineGroupData.Owners">
            <summary>
            A list of owners who can manage this machine group
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineGroupData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IMachineGroup">
            <summary>
            Service methods that perform actions related to BuildTracker products 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachineGroup.GetById(System.Int32)">
            <summary>
            Returns the machineGroup that has the given id
            </summary>
            <param name="machineGroupId">Id of the machineGroup to return</param>
            <returns>MachineGroupData object for the requested machineGroup</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachineGroup.Update(Microsoft.BuildTracker.Contracts.MachineGroupData)">
            <summary>
            Updates and existing machineGroup with data from a MachineGroupData object
            </summary>
            <param name="machineGroup">A MachineGroupData object with field values that are to be updated on a BuildTracker machineGroup</param>
            <returns>A MachineGroupData object that contains the updated field values</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachineGroup.Delete(System.Int32)">
            <summary>
            Deletes a machineGroup from BuildTracker
            </summary>
            <param name="machineGroupId">Id of the machineGroup to be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachineGroup.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DiskData">
            <summary>
            Contains the data members related to a disk
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.DiskData.#ctor(System.Int32,System.Char,System.Boolean,System.Boolean,System.Byte,System.Byte,System.Byte,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="driveLetter"></param>
            <param name="canEnlist"></param>
            <param name="allowLogs"></param>
            <param name="freeSpacePercentageErrorLevel"></param>
            <param name="freeSpacePercentageWarningLevel"></param>
            <param name="freeSpacePercentageRequiredLevel"></param>
            <param name="freeSpaceRequiredMB"></param>
            <param name="totalSize"></param>
            <param name="availableSize"></param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.Id">
            <summary>
            Id of the Disk
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.DriveLetter">
            <summary>
            Letter for this drive
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.CanEnlist">
            <summary>
            Indicates if BuildTracker can use this disk for enlistments.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.AllowLogs">
            <summary>
            Indicates if BUildTracker can store logs on this disk.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.FreeSpacePercentageErrorLevel">
            <summary>
            Errors are triggered if free space is below this % level
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.FreeSpacePercentageWarningLevel">
            <summary>
            Warnings are triggered if free space is below this % level
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.FreeSpacePercentageRequiredLevel">
            <summary>
            BuildTracker will cleanup disk space (enlistements, logs) if free space is below this % level.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.FreeSpaceRequiredMB">
            <summary>
            Mb required of free space. If less free space is requested, cleanup will start.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.TotalSize">
            <summary>
            Total disk size in Mb
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.AvailableSize">
            <summary>
            Available disk size in Mb
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DiskData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IDisk">
            <summary>
            Operations for managing a Disk
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IDisk.Update(Microsoft.BuildTracker.Contracts.DiskData)">
            <summary>
            Updates an existing disk with data from a DiskData object
            </summary>
            <param name="disk">A disk object with field values that are to be updated on a BuildTracker Disk</param>
            <returns>A DiskData object set with the updated field values</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IDisk.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData">
            <summary>
            Stores generic enlistment settings, BuidlTracker uses when assigning real enlistments on disk or creating new enlistments
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="fixedEnlistmentPath">value to set unique enilistment configuration in place of auto-enlistment</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData.Clean">
            <summary>
            If specified, removes any pending changes before the leg command is run.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData.InheritClean">
            <summary>
            Allows to inherit Parent's Clean settings, local Clean settings will be ignored
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData.FixedEnlistmentPath">
            <summary>
            To set fixed enlistment path, or static enlistment
            If specified, All other settings are ignored
            If left blank, BuildTracker will attempt to auto-enlist using the specified SourceDepot, SDX, Folder and TFS settings when running a Leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData.InheritFixedEnlistmentPath">
            <summary>
            Allows to inherit Parent's FixedEnlistmentPath settings, local FixedEnlistmentPath settings will be ignored
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData.DisableAclReset">
            <summary>
            Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.EnlistmentSettingsData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData">
            <summary>
            Stores enlistment settings for Source Depot control
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="serverName">Source Depot server name and port number to use to Auto-Enlist on build machines</param>
            <param name="proxyServerName">Source Depot proxy server name and port number to use for fetching source files during a build jobs</param>
            <param name="clientView">Source Depot client view to use to Auto-Enlist on build machines. Use the [CLIENT] keyword to denote the client name that is auto-generated</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.ServerName">
            <summary>
            Source Depot server name and port number to use to Auto-Enlist on build machines.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.InheritServerName">
            <summary>
            Allows to inherit Parent's ServerName, local ServerName will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.ProxyServerName">
            <summary>
            Source Depot proxy server name and port number to use for fetching source files during a build jobs.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.InheritProxyServerName">
            <summary>
            Allows to inherit Parent's ProxyServerName, local ProxyServerName will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.ClientView">
            <summary>
            Source Depot client view to use to Auto-Enlist on build machines. Use the [CLIENT] keyword to denote the client name that is auto-generated.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.InheritClientView">
            <summary>
            Allows to inherit Parent's ClientView, local ClientView will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.ClientOptions">
            <summary>
            Source Depot client options used when creating an enlistment on build machines. If empty, the default client options are used: noallwrite clobber nocompress locked nomodtime rmdir
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SourceDepotEnlistmentSettingsData.InheritClientOptions">
            <summary>
            Allows to inherit Parent's ClientOptions, local ClientOptions will be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData">
            <summary>
            Stores enlistment settings for SDX source control
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="codeBase">The SDX CodeBase. Ignored if Fix Enlistment Path is set</param>
            <param name="projects">A list of projects. If not specified, -a will be passed to sdx enlist when creating new enlistments. Ignored if Fix Enlistment Path is set</param>
            <param name="branch">The SDX Branch. Ignored if Fixed Enlistment Path is set</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData.CodeBase">
            <summary>
            The SDX CodeBase. Ignored if Fix Enlistment Path is set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData.InheritCodeBase">
            <summary>
            Allows to inherit Parent's CodeBase settings, local CodeBase settings will be ignonred.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData.Projects">
            <summary>
            A list of projects. If not specified, -a will be passed to sdx enlist when creating new enlistments. Ignored if Fix Enlistment Path is set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData.InheritProject">
            <summary>
            Allows to inherit Parent's Projects settings, local Projects settings will be ignonred.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData.Branch">
            <summary>
            The SDX Branch. Ignored if Fix Enlistment Path is set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.SdxEnlistmentSettingsData.InheritBranch">
            <summary>
            Allows to inherit Parent's Branch settings, local Branch settings will be ignonred.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.TeamFoundationServerEnlistmentSettingsData">
            <summary>
            Stores enlistment settings for TFS source control
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.TeamFoundationServerEnlistmentSettingsData.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To Set properties values
            </summary>
            <param name="teamFoundationServerName">Team Foundation Server URL, Optional when an Enlistment Root is specified</param>
            <param name="workspaceMapping">Similar to what tf.exe workfold would return in your workspace. Use [CLIENT] to specify the root directory that BuildTracker will automatically create when auto-enlisting</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.TeamFoundationServerEnlistmentSettingsData.ServerName">
            <summary>
            Team Foundation Server URL, Optional when Fixed Enlistment Path is specified
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.TeamFoundationServerEnlistmentSettingsData.InheritServerName">
            <summary>
            Allows to inherit Parent's TeamFoundationServerName settings, local TeamFoundationServerName settings will be ignored
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.TeamFoundationServerEnlistmentSettingsData.WorkspaceMapping">
            <summary>
            Similar to what tf.exe workfold would return in your workspace. Use [CLIENT] to specify the root directory that BuildTracker will automatically create when auto-enlisting.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.TeamFoundationServerEnlistmentSettingsData.InheritWorkspaceMapping">
            <summary>
            Allows to inherit Parent's WorkspaceMapping settings, local WorkspaceMapping settings will be ignored
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.FolderEnlistmentSettingsData">
            <summary>
            Stores Enlistment settings for folder enlistment on a disk
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.FolderEnlistmentSettingsData.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            To set properties values
            </summary>
            <param name="fixedEnlistmentPath">value to set unique enilistment configuration in place of auto-enlistment</param>
            <param name="clean">If specified, removes any pending changes before the leg command is run</param>
            <param name="inheritClean">Allows to inherit parent's clean settings, local Clean settings will be ignored</param>
            <param name="disableAclReset">Disables reapplying the ACLs at sync time, Only applies when doing auto-enlistment (i.e. no enlistment root set).</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.EnlistmentType">
            <summary>
            Possible type of enlistments
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.EnlistmentType.Folder">
            <summary>
            Folder enlistment
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.EnlistmentType.SourceDepot">
            <summary>
            Source Depot enlistment
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.EnlistmentType.TeamFoundation">
            <summary>
            Team Foundation enlistment
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.EnlistmentType.SDX">
            <summary>
            SDX enlistment
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.EnumerationFault">
            <summary>
            Fault that is thrown when encountering an enumeration value that doesn't exist
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.EnumerationFault.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for EnumerationFault
            </summary>
            <param name="enumType">Name of the enumeration type</param>
            <param name="enumValue">Integer value that is invalid for this enumeration type</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.EnumerationFault.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor for EnumerationFault
            </summary>
            <param name="enumType">Name of the enumeration type</param>
            <param name="enumValue">Integer value that is invalid for this enumeration type</param>
            <param name="stackTrace">Inner exception stacktrace details</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BranchData">
            <summary>
            Contains the data members related to a BuildTracker branch
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.BranchData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.Name">
            <summary>
            Name of the branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.Id">
            <summary>
            BuildTracker Id value of the branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.CreateTime">
            <summary>
            DateTime when the branch was created
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.ProductId">
            <summary>
            BuildTracker Id value of the parent product of this branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.RunAsAlias">
            <summary>
            Account to run legs under, unless overridden. If null, the product account will be used.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this branch.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.Owners">
            <summary>
            List of aliases that are owners for this branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.EnlistmentSettings">
            <summary>
            Stores generic enlistment settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.InheritBuildDropParameters">
            <summary>
            A value of true indicates that this branch inherits BuildDropParameter definitions from it's parent product.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BranchData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IBranch">
            <summary>
            Service methods that perform actions related to BuildTracker branches
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.CreateBuildJobDefinition(Microsoft.BuildTracker.Contracts.BuildJobDefinitionData)">
            <summary>
            Creates a new BuildJobDefinition
            </summary>
            <param name="definition">A BuildJobDefinitionData object that defines the fields for the build job</param>
            <returns>A BuildJobDefnitionData object that is populated with the data of the newly created build job</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.GetBuildJobDefinition(System.Int32,System.String)">
            <summary>
            Get a BuildJobDefinition
            </summary>
            <param name="branchId">Id of the parent branch</param>
            <param name="jobName">Name of the build job to retrieve</param>
            <returns>BuildJobDefinitionData object that is populated with the data of the build job that was requested</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.Update(Microsoft.BuildTracker.Contracts.BranchData)">
            <summary>
            Updates an existing branch with data from a BranchData object
            </summary>
            <param name="branchData">A BranchData object with field values that are to be updated on a BuildTracker branch</param>
            <returns>A BranchData object that contains the updated field values</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.Delete(System.Int32)">
            <summary>
            Deletes a BuildTracker branch
            </summary>
            <param name="branchId">Id of the branch to be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.GetById(System.Int32)">
            <summary>
            Gets the branch that has the given Id
            </summary>
            <param name="branchId">Id of the branch to return</param>
            <returns>A BranchData object set with field values coresponding to the requested BuildTracker branch</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.GetBuildJobDefinitions(System.Int32)">
            <summary>
            Returns all BuildJobs for the given branch
            </summary>
            <param name="branchId">Id of the branch to retrieve jobs for</param>
            <returns>A list of BuildJobDefinitionData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.CreateBuildShareGroup(Microsoft.BuildTracker.Contracts.BuildShareGroupData)">
            <summary>
            Creates new BuildShareGroup 
            </summary>
            <param name="buildShareGroupData">object of BuildShareGroupData to create new BuildShareGroup</param>
            <returns>object of BuildShareGroup created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.GetBuildShareGroups(System.Int32)">
            <summary>
            Returns collection of BuildShareGroups associated with this Branch
            </summary>
            <param name="branchId">Id of the current branch</param>
            <returns>Collection of BuildShareGroups associated with this branch</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.GetBuildShareGroup(System.Int32,System.String)">
            <summary>
            Get a BuildShareGroup
            </summary>
            <param name="branchId">Id of the parent branch</param>
            <param name="buildShareGroupName">Name of the BuildShareGroup to retrieve</param>
            <returns>BuildShareGroupData object that is populated with the data of the BuildShareGroup that was requested</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IBranch36Qfe1">
            <summary>
            Service methods that perform actions related to BuildTracker branches
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBranch36Qfe1.GetJobSchedules(System.Int32)">
            <summary>
            Gets all of the JobSchedules for this Branch
            </summary>
            <param name="branchId">ID of the Branch to get JobSchedules for</param>
            <returns>A collection of JobScheduleData objects</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IBuildTracker">
            <summary>
            The top level object in BuildTracker
            Contains information about this BuildTracker installation
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetLabConfiguration">
            <summary>
            Gets the configuration of this BuildTracker instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.UpdateLabConfiguration(Microsoft.BuildTracker.Contracts.LabConfigurationData)">
            <summary>
            Updates BuildTracker configuration data
            </summary>
            <param name="labConfigurationData">The configuration new values.</param>
            <returns>An updated configuration.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateMachine(System.String)">
            <summary>
            Creates a new BuildTracker machine
            </summary>
            <param name="machineName">Name of the new machine</param>
            <returns>MachineData object populated with the data of the newly created machine</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetMachine(System.String)">
            <summary>
            Returns the machine that has the given name
            </summary>
            <param name="machineName">Name of the machine to return</param>
            <returns>MachineData object for the requested machine</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetMachines(System.Boolean)">
            <summary>
            Returns all of the machines for this instance of BuildTracker
            </summary>
            <param name="includeDeleted">Indicates wheather to include the deleted machines or not.</param>
            <returns>A list of MachineData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateMachineGroup(System.String)">
            <summary>
            Creates a new BuildTracker machineGroup
            </summary>
            <param name="machineGroupName">Name of the new machineGroup</param>
            <returns>MachineGroupData object populated with the data of the newly created machineGroup</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetMachineGroup(System.String)">
            <summary>
            Returns the machineGroup that has the given name
            </summary>
            <param name="machineGroupName">Name of the machineGroup to return</param>
            <returns>MachineGroupData object for the requested machineGroup</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetMachineGroups">
            <summary>
            Returns all of the machineGroups for this instance of BuildTracker
            </summary>
            <returns>A list of MachineGroupData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateAffinity(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Creates a new affinity to a resource
            </summary>
            <param name="jobType">Type of job afffinity applies to</param>
            <param name="resourceId">Id of the resource to be affinitied</param>
            <param name="resourceType">Type of resource to affinity to</param>
            <param name="alternateParentId">Id of the parent to use for the affinity when the affinity is set to a system-level resource</param>
            <param name="machineGroupId">Id of the MachineGroup to affinity with</param>
            <param name="affinityType">The type of affinity relationship</param>
            <returns>AffinityData object populated with the data of the newly created affinity</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetAffinities(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns all of the affinities for this instance of BuildTracker
            </summary>
            <returns>A list of AffinityData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateProduct(System.String)">
            <summary>
            Creates a new BuildTracker product
            </summary>
            <param name="productName">Name of the new product</param>
            <returns>ProductData object populated with the data of the newly created product</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetProduct(System.String)">
            <summary>
            Returns the product that has the given name
            </summary>
            <param name="productName">Name of the product to return</param>
            <returns>ProductData object for the requested product</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetProducts">
            <summary>
            Returns all of the products for this instance of BuildTracker
            </summary>
            <returns>A list of ProductData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetRegisteredProducts">
            <summary>
            Returns all of the products that are registered for the given user
            </summary>
            <returns>A list of ProductData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateRetentionJobDefinition(Microsoft.BuildTracker.Contracts.RetentionJobDefinitionData)">
            <summary>
            Created new system wide RetentionJobDefinition 
            RetentionJobDefinition won't be owned by any specific BuildShareGroup, can be associated with any BuildShareGroup
            </summary>
            <param name="retentionJobDefinitionData">object of RetentionJobDefinitionData to create new RetentionJobDefinition</param>
            <returns>object of RetentionJobDefinitionData, created by this operation</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateDropJobDefinition(Microsoft.BuildTracker.Contracts.DropJobDefinitionData)">
            <summary>
            Created new DropJobDefinition 
            To create system wide drop job definition pass 0 as parent_Id
            </summary>
            <param name="dropJobDefinitionData">object of DropJobDefinitionData to create new DropJobDefinition</param>
            <returns>object of DropJobDefinitionData, created by this operation</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetRetentionJobDefinitions(System.Int32)">
            <summary>
            Returns collection of RetentionJobDefinitions available for passed parent id
            For systemwide RetentionJobDefinitions pass 0 as parent Id
            </summary>
            <param name="buildShareGroupId">Id of parent BuildShareGroup, or 0 for systemwide</param>
            <returns>Collection of RetentionJobDefinitionData for the passed parent id</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetRetentionJobDefinition(System.Int32,System.String)">
            <summary>
            Get a retention job definition by name
            </summary>
            <param name="buildShareGroupId">Id of the parent BuildShareGroup, or 0 for system-wide retention jobs.</param>
            <param name="jobName">Name of the retention job to retrieve.</param>
            <returns>RetentionJobDefinitionData object that is populated with the data of the retention job that was requested</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetDropJobDefinitions(System.Int32)">
            <summary>
            Returns collection of DropJobDefinitions available for passed parent id
            For systemwide DropJobDefinitions pass 0 as parent Id
            </summary>
            <param name="buildShareGroupId">Id of parent BuildShareGroup, or 0 for systemwide</param>
            <returns>Collection of DropJobDefinitionData for the passed parent id</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetDropJobDefinition(System.Int32,System.String)">
            <summary>
            Get a drop job definition by name
            </summary>
            <param name="buildShareGroupId">Id of the parent BuildShareGroup, or 0 for system-wide drop jobs.</param>
            <param name="jobName">Name of the drop job to retrieve.</param>
            <returns>DropJobDefinitionData object that is populated with the data of the drop job that was requested</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetBuildDrop(System.Int32)">
            <summary>
            Gets a build drop by id
            </summary>
            <param name="buildDropId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetSystemDropPolicies">
            <summary>
            Gets a collection of all system drop policies
            </summary>
            <returns>Collection of DropPolicyData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.GetSystemRetentionPolicies">
            <summary>
            Gets a collection of all system retention policies
            </summary>
            <returns>Collection of RetentionPolicyData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateSystemDropPolicy(Microsoft.BuildTracker.Contracts.DropPolicyData)">
            <summary>
            Creates a new system wide drop policy
            </summary>
            <param name="policyData">PolicyData object containing the data for the new policy</param>
            <returns>A PolicyData object populated with the values of the newly created policy</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.CreateSystemRetentionPolicy(Microsoft.BuildTracker.Contracts.RetentionPolicyData)">
            <summary>
            Creates a new system wide retention policy
            </summary>
            <param name="policyData">PolicyData object containing the data for the new policy</param>
            <returns>A PolicyData object populated with the values of the newly created policy</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IBuildTracker36Qfe1">
            <summary>
            Interface service methods added for version QFE1
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker36Qfe1.GetJobSchedules">
            <summary>
            Gets all of the JobSchedules
            </summary>
            <returns>A collection of JobScheduleData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker36Qfe1.GetJobServices(System.Nullable{System.Int32})">
            <summary>
            Gets a collection of all the JobServices for the given machine
            </summary>
            <param name="machineId">Id of machine to get JobServices for.  If null, gets JobServices for all machines in this BuildTracker instance.</param>
            <returns>Collection of JobServiceData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IBuildTracker36Qfe1.QueryBuildDrops(Microsoft.BuildTracker.Contracts.BuildDropQueryData)">
            <summary>
            Executes a query to retrieve BuildDrop items that match the criteria passed in the BuildDropQueryData structure
            </summary>
            <remarks>
            Will validate the data structure and its contents passed in.
            Throws ArgumentFault
            </remarks>
            <returns>A collection of BuildDropData items</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildTrackerData">
            <summary>
            Set of fields for IBuildTracker
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildTrackerData.Name">
            <summary>
            The name of this BuildTracker installation. 
            For example: "Team XYZ Build Lab"
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildTrackerData.Contacts">
            <summary>
            Poeple responsible for this BuildTracker installation.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildTrackerData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.AccountResourceType">
            <summary>
            Type of object to associate a RunAs account to
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.Unknown">
            <summary>
            Unknown resource type
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.LabDefault">
            <summary>
            Default Lab RunAs Account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.Product">
            <summary>
            Product RunAs account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.Branch">
            <summary>
            Branch RunAs account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.DropJob">
            <summary>
            DropJob RunAs account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.Leg">
            <summary>
            LegDefinition RunAs account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.LabManagement">
            <summary>
            Lab Management User account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.BuildRetentionJob">
            <summary>
            Retention Job RunAs account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.BuildJob">
            <summary>
            Build Job RunAs account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.BuildShareGroup">
            <summary>
            BuildShareGroup RunAs account
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.AccountResourceType.JobSchedule">
            <summary>
            JobSchedule RunAs account
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ItemNotFoundFault">
            <summary>
            Fault that is thrown when accessing an item that doesn't exist in the BuildTracker database
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ItemNotFoundFault.#ctor(System.String,System.String)">
            <summary>
            Constructor for ItemNotFoundFault
            </summary>
            <param name="message">Message that describes the fault</param>
            <param name="stackTrace">Inner exception stacktrace details</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ItemNotFoundFault.#ctor(System.String)">
            <summary>
            Constructor for ItemNotFoundFault
            </summary>
            <param name="message">Message that describes the fault</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ItemNotFoundFault.#ctor(System.String,System.Int32)">
            <summary>
            ItemNotFoundFault constructor, formats a fault message based on Type and Id parameters
            </summary>
            <param name="itemType">String containing the type of the item that was not found</param>
            <param name="itemId">Id value of the item that was not found</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ItemNotFoundFault.ItemType">
            <summary>
            String containing the type of the item that was not found.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ItemNotFoundFault.Id">
            <summary>
            Id value of the item that was not found
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobDefinitionData">
            <summary>
            Contains the data members related to a BuildTracker job definition
            pre 3.5 world = Job
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.JobDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.Id">
            <summary>
            Id of the JobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.Name">
            <summary>
            Name of the JobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.AllowConcurrent">
            <summary>
            Allow several instances of this job to execute simultaneously
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.Description">
            <summary>
            Description of the JobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.Priority">
            <summary>
            Id of a job priority value
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.SyncByDefault">
            <summary>
            Enable or disable synchronization by default for job requests
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.AllowSyncOption">
            <summary>
            Allow sync option for job requests.  Users may choose whether or not to synchronize before job execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.RunAsAlias">
            <summary>
            Account that legs will run under
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this job definition.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.Owners">
            <summary>
            List of aliases that are owners for this job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.Parameters">
            <summary>
            Parameters types and values to be passed with JobDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.EnlistmentSettings">
            <summary>
            Stores generic enlistment settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.BuildShareGroupId">
            <summary>
            Id of the Build Share Group for this job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.RunLegsOnSameMachine">
            <summary>
            Indicates that all legs defined for this job will execute chained (on the same machine).
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobDefinitionData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobPriority">
            <summary>
            The relative global job priority. 
            BuildTracker will try to execute these jobs first, however the actual order is dependent on available machines 
            and other jobs in the queue.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobPriority.Default">
            <summary>
            Normal priority level
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobPriority.Official">
            <summary>
            Second highest priority level
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobPriority.Test">
            <summary>
            Second to lowest priority level
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobPriority.Buddy">
            <summary>
            Lowest priority level
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobPriority.Highest">
            <summary>
            Highest priority level
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildJobDefinitionData">
            <summary>
            Build jobs = children of Branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildJobDefinitionData.BranchId">
            <summary>
            Id of the parent Branch
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildJobDefinitionData.JobRunners">
            <summary>
            List of aliases that can run this job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildJobDefinitionData.AutoDetectBuildDrops">
            <summary>
            If true, when a new build is produced through BuildTracker, it will be auto-discovered when the Job completes
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildJobDefinitionData.SaveLogs">
            <summary>
            Specifies whether BuildTracker should save the logs for this Build Job in the build's drop folder. 
            A build must be auto-detected for the logs to be saved.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RetentionJobDefinitionData">
            <summary>
            Retention JobDefinition 
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DropJobDefinitionData">
            <summary>
            Drop JobDefinition 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.DropJobDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IJobDefinition">
            <summary>
            JobDefinition is the new name (BT 3.5+) for Job
            It contains static information about how to execute a job
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.CreateLegDefinition(Microsoft.BuildTracker.Contracts.LegDefinitionData)">
            <summary>
            Create a new BuildTracker leg
            </summary>
            <param name="definition">JobDefinitionData object that contains all of the values for the job</param>
            <returns>LegDefinitionData object that is populated with the data of the newly created leg</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.GetLegDefinition(System.Int32,System.String)">
            <summary>
            Gets the leg with the given name
            </summary>
            <param name="jobDefinitionId">Id of the parent job definition of the leg</param>
            <param name="legName">Name of the leg to return</param>
            <returns>LegDefinitionData object set with the field values of the requested leg</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.GetById(System.Int32)">
            <summary>
            Get the job definition that has the given Id
            </summary>
            <param name="jobDefinitionId">Id of the requested job definition</param>
            <returns>A JobDefinitionData object set with field values coresponding to the requested BuildTracker job definition</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.GetLegDefinitions(System.Int32)">
            <summary>
            Returns all of the legs that belong to a particular job definition
            </summary>
            <param name="jobDefinitionId">Id of the job definition</param>
            <returns>List of LegDefinitionData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.Update(Microsoft.BuildTracker.Contracts.JobDefinitionData)">
            <summary>
            Updates an existing job definition with data from a JobDefinitionData object
            </summary>
            <param name="jobDefinition">A JobDefinitionData object with field values that are to be updated on a BuildTracker job definition</param>
            <returns>A JobDefinitionData object that contains the updated field values</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.UpdateParameterDefinition(System.Int32,Microsoft.BuildTracker.Contracts.ParameterDefinitionData)">
            <summary>
            
            </summary>
            <param name="jobDefinitionId"></param>
            <param name="parameterDefinitionContract"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.Delete(System.Int32)">
            <summary>
            Deletes a BuildTracker job definition
            </summary>
            <param name="jobDefinitionId">Id of the job definition to be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.QueueBuildJobInstance(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Method to Queue a new Job Instance for given JobDefinition Id and other arguments
            </summary>
            <param name="jobDefinitionId">Id of the JobDefinition to be Queued</param>
            <param name="desiredDateTime">DateTime to Sequence the Job Instaance</param>
            <param name="sync">bool value, true or false for sync</param>
            <param name="syncDateTime">DateTime of Sync</param>
            <param name="remark">Requesters remarks</param>
            <param name="notifyMe">bool value, true if requester wants to be notify</param>
            <param name="parameters">KeyValue Collection of Parameters</param>
            <returns>object of JobInstanceData for the JobDefinition queued by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IJobDefinition36Qfe1">
            <summary>
            Interface service methods added for version QFE1
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition36Qfe1.GetJobSchedules(System.Int32)">
            <summary>
            Gets all of the JobSchedules for this BuildJobDefinition
            </summary>
            <param name="jobDefinitionId">ID of the BuildJobDefinition to get JobSchedules for</param>
            <returns>A collection of JobScheduleData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition36Qfe1.GetJobSchedule(System.Int32,System.String)">
            <summary>
            Gets a JobSchedule for this BuildJobDefinition
            </summary>
            <param name="jobDefinitionId">ID of the BuildJobDefinition</param>
            <param name="jobScheduleName">Name of the JobSchedule to retrieve</param>
            <returns>A JobScheduleData object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobDefinition36Qfe1.CreateJobSchedule(Microsoft.BuildTracker.Contracts.JobScheduleData)">
            <summary>
            Create a new JobSchedule with this BuildJobDefintion
            </summary>
            <param name="jobScheduleData">JobScheduleData object that contains all of the values for the JobSchedule</param>
            <returns>A new JobScheduleData object</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.BuildJobInstanceData">
            <summary>
            JobQueue for BuildJob
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobInstanceData">
            <summary>
            JobInstance fields.
            Legacy note: JobInstance is the new (BT 3.5+) name for JobQueue.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.Name">
            <summary>
            Name of the JobDefinition for this JobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.StartDateTime">
            <summary>
            the date and time when this JobInstance was started
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.CompletedDateTime">
            <summary>
            the date and time when this JobInstance was completed
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.SubmittedBy">
            <summary>
            name of the user who submitted the job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.Id">
            <summary>
            The Id for this JobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.Priority">
            <summary>
            Job scheduling priority
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.JobScheduleId">
            <summary>
            id of the schedule that started this JobInstance
            if the job was started manually this field is not set
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.JobDefinitionId">
            <summary>
            Id of the parent job definition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.SequenceDateTime">
            <summary>
            the date and time when this JobInstance was sequenced
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.Simulate">
            <summary>
            Should this be a simulated job?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.Status">
            <summary>
            Status of this JobInstance (queued, running, failed, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.NotifyRequester">
            <summary>
            Indicates if the requester should be notified when this jobInstance completes.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.Sync">
            <summary>
            Sync
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.SyncDateTime">
            <summary>
            Sync to the given point in time
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.ParentJobInstanceId">
            <summary>
            ID of the parent Job Instance. Applies only to jobInstances, which are children started by a jobLeg.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.ParameterInstances">
            <summary>
            Collection of Parameter Instances assign to JobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.BuildDropId">
            <summary>
            ID of the build drop associated with this JobInstance, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.BuildJobInstanceData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildJobInstanceData.ProductId">
            <summary>
            Id of a Product this BuildJobInstance belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.BuildJobInstanceData.BranchId">
            <summary>
            Id of a Branch this BuildJobInstance belongs to
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DropJobInstanceData">
            <summary>
            JobQueue for DropJob
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.DropJobInstanceData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RetentionJobInstanceData">
            <summary>
            JobQueue for RetentionJob
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.RetentionJobInstanceData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ParameterInstanceData">
            <summary>
            DataContract to pass Job Instance parameter
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ParameterInstanceData.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="type">type of the parameter</param>
            <param name="description">details about parameter</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.Name">
            <summary>
            The name of the parameter instance.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.Description">
            <summary>
            Parameter's description.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.Values">
            <summary>
            Parameter values
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.ParameterType">
            <summary>
            Type of parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.Required">
            <summary>
            Is this parameter required?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.ReadOnly">
            <summary>
            Is this parameter readonly?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.SelectedValues">
            <summary>
            Default value/s of parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ParameterInstanceValueData">
            <summary>
            DataContract to pass values of Parameter Instance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ParameterInstanceValueData.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor to set multiple selection values like DropDwonList, CheckBoxes etc.
            </summary>
            <param name="parameterValue">value of the parameter</param>
            <param name="isDefault">value is default or not</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceValueData.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceValueData.IsDefault">
            <summary>
            Is it a default value?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterInstanceValueData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobInstanceStatus">
            <summary>
            Possible values for the status of a JobInstance
            int values for mapping with BT.JobQueueStatus
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Queued">
            <summary>
            Queued
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Submitted">
            <summary>
            Submitted
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Pending">
            <summary>
            Pending - requires an approval
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Sequenced">
            <summary>
            ready for execution, just waiting for available machines
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Running">
            <summary>
            job's running
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Completed">
            <summary>
            Completed succesfully
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Rejected">
            <summary>
            No approval was given. The job will not execute.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Failed">
            <summary>
            Job failed.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Resumed">
            <summary>
            Resumed.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Aborted">
            <summary>
            Aborted
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.QueueFailed">
            <summary>
            Unable to queue the job. This can happen if the job definition or the job schedule is incomplete or incorrect.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.EMQuery">
            <summary>
            Change detection for this job is underway
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.Canceled">
            <summary>
            Job has been cancelled by BuildTracker
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceStatus.InternalError">
            <summary>
            BuildTracker Internal Error
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IJobInstance">
            <summary>
            Operations possible for job instances.
            
            Legacy note: JobInstance is the new (BT 3.5+) name for JobQueue.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.Abort(System.Int32)">
            <summary>
            Aborts a job instance that's running
            </summary>
            <param name="jobInstanceId">ID of the job instance to abort</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.Retry(System.Int32,System.Boolean)">
            <summary>
            Restart a job instance
            </summary>
            <param name="jobInstanceId">ID of the job instance to restart</param>
            <param name="resetSyncTime">A value of true specifies that the sync time for this job instance will be set to the current time</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.Delete(System.Int32)">
            <summary>
            Deletes a job instance.  Only job instances that have not started yet can be deleted.
            </summary>
            <param name="jobInstanceId"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.Approve(System.Int32)">
            <summary>
            Approves a pending job instance.
            </summary>
            <param name="jobInstanceId"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.Deny(System.Int32)">
            <summary>
            Denies a pending job instance.
            </summary>
            <param name="jobInstanceId"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.GetById(System.Int32)">
            <summary>
            Gets a job instance
            </summary>
            <param name="jobInstanceId">Id of the JobInstance being requested</param>
            <returns>A JobInstanceData object set with the field values of the requested job instance</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.GetLegInstances(System.Int32)">
            <summary>
            Gets all the leg instances for a given job instance
            </summary>
            <param name="jobInstanceId">Id of the job instance that is the parent of the leg instances</param>
            <returns>A list of leg instance objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.ChangePriority(System.Int32,Microsoft.BuildTracker.Contracts.JobPriority)">
            <summary>
            Method to change scheduling priority of JobInstance
            </summary>
            <param name="jobInstanceId">Id of the JobInstance for which scheduling priority need to be changed</param>
            <param name="jobPriority">scheduling priority of JobInstance</param>
            <returns>object of JobInstanceData with updated scheduling priority</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.ChangeParameters(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Method to change ParameterInstance's selected value for passed JobInstance id.
            </summary>
            <param name="jobInstanceId">Id of the JobInstance for which ParamtereInstance's selected value need to be changed</param>
            <param name="parameterNamesWithValues">Collection of parameterName and value. ParameterName should be any exisitng ParameterInstance name, value would be new selected value</param>
            <returns>object of JobInstanceData with updated ParamterInstance's selected value</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.GetRemarks(System.Int32)">
            <summary>
            Gets all remarks associated with the given id
            </summary>
            <param name="id">id of the object - the parent of remarks</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IJobInstance36Qfe1.AddRemark(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a new job instance remark
            </summary>
            <param name="jobInstanceId">id of the jobinstance to change the status for</param>
            <param name="text">the text of the remark to add</param>
            <param name="type">the type of the remark to add</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses">
            <summary>
            All of the different states that a JobInstance might have
            </summary>
            <remarks>
            This enum is flags, so multiple values can be 'OR'ed together
            </remarks>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Queued">
            <summary>
            Queued
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Pending">
            <summary>
            Pending - requires an approval
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Submitted">
            <summary>
            Submitted
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.ChangeDetection">
            <summary>
            Change detection for this job is underway
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Resumed">
            <summary>
            Resumed
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Sequenced">
            <summary>
            Ready for execution, just waiting for available machines
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Running">
            <summary>
            Job is running
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Completed">
            <summary>
            Completed succesfully
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Failed">
            <summary>
            Job failed.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Rejected">
            <summary>
            No approval was given. The job will not execute.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.QueueFailed">
            <summary>
            Unable to queue the job. This can happen if the job definition or the job schedule is incomplete or incorrect.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Aborted">
            <summary>
            Aborted
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Canceled">
            <summary>
            Job has been cancelled by BuildTracker
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.InternalError">
            <summary>
            Internal Error
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.All">
            <summary>
            Include all possible statuses
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.NotStartedYet">
            <summary>
            Statuses of jobs not started yet
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.InProgress">
            <summary>
            Statuses of Jobs Inprogress
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceQueryStatuses.Finished">
            <summary>
            Statuses of Jobs Finished
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobInstanceTypes">
            <summary>
            Type of the JobDefinition that is parent to the JobInstance
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceTypes.BuildJob">
            <summary>
            Instance of a build job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceTypes.RetentionJob">
            <summary>
            instance of a retention job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceTypes.DropJob">
            <summary>
            instance of a drop job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.JobInstanceTypes.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DateTimeColumn">
            <summary>
            Possible columns to set date condition
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DateTimeColumn.QueueDateTime">
            <summary>
            Column name for datetime value of queued jobs
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DateTimeColumn.SequenceDateTime">
            <summary>
            Column name for datetime value of sequenced jobs
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DateTimeColumn.StartDateTime">
            <summary>
            Column name for datetime value of started jobss
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DateTimeColumn.CompleteDateTime">
            <summary>
            Column name for datetime value of completed jobs
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DateTimeColumn.SyncDateTime">
            <summary>
            Column name for datetime value of Sync jobs
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.SortDirection">
            <summary>
            possible direction of data sorting
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.SortDirection.Descending">
            <summary>
            Sorting in Descending order
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.SortDirection.Ascending">
            <summary>
            Sorting in Ascednding order
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobInstanceQueryData">
            <summary>
            Data contract containing all of the fields that will be used to form a query to select JobInstances.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.OnlyLatestForEachJobDefinition">
            <summary>
            True for latest records
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.DateFrom">
            <summary>
            Start of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.DateFromQueryType">
            <summary>
            Column where DateFrom condition should be applied or compaired
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.DateTo">
            <summary>
            End of date range
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.DateToQueryType">
            <summary>
            Column where DateTo condition should be applied or compaired
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.Status">
            <summary>
            Combination of JobInstance state values that are queried for
            </summary>
            <remarks>
            This field may not be null.
            </remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.OrderBy">
            <summary>
            Sets the sort order. Used in the "top N" scenario -> in conjuntion with the .TopN field
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.SortDirection">
            <summary>
            data sorting direction
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.TopN">
            <summary>
            Return the top N instances only.
            Sort using the .OrderBy + .SortDirection fields.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.OnlyOverdue">
            <summary>
            Filter for overdue only (true) or all (false)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.RequestedBy">
            <summary>
            Filter to only the instances submitted by the given user
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.ProductId">
            <summary>
            Filter to instances under the given product only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.BranchId">
            <summary>
            Filter to instances under the given branch only
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.JobDefinitionId">
            <summary>
            Filter to instances of the given job definition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.JobScheduleId">
            <summary>
            Filter to instances of the given job schedule
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.TypeOfParent">
            <summary>
            Type of the JobDefinition that is parent to the JobInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobInstanceQueryData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegDefinitionData">
            <summary>
            DataContract for LegDefinition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.LegDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.Name">
            <summary>
            Name of the leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.Id">
            <summary>
            ID of the leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.Description">
            <summary>
            Description of the leg
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.ParentJobId">
            <summary>
            ID of the job that this leg belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.Priority">
            <summary>
            For LegDefinitions that can be executed in parallel, those with the higher priority will be executed first
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.DependencyLogic">
            <summary>
            Require all prerequisite dependencies to evaluate to true, or require at least one to be true
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.SimulateResult">
            <summary>
            The result for this leg when running a simulated build
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.EstimatedExecutionTime">
            <summary>
            Length of time that it takes to run this leg, calculated based on past executions
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.EnlistmentSettings">
            <summary>
            Stores generic enlistment settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.Dependencies">
            <summary>
            Stores Collection of Dependencies for this leg, Prerequisite leg and execution condition details 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.Order">
            <summary>
            The order that this leg is run within a job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDefinitionData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.CredentialedLegDefinitionData">
            <summary>
            A leg that can run impersonated (with a run-as account)
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.CredentialedLegDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.CredentialedLegDefinitionData.RunAsAlias">
            <summary>
            RunAs user account
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.CredentialedLegDefinitionData.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this leg definition.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.CommandLegDefinitionData">
            <summary>
            Build tracker command leg setting.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.CommandLegDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.CommandLegDefinitionData.Command">
            <summary>
            Leg command.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.CommandLegDefinitionData.CommandParameters">
            <summary>
            Command parameters.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.CommandLegDefinitionData.FailJobOnFailure">
            <summary>
            Report failure to the job.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.CommandLegDefinitionData.PublishedParameters">
            <summary>
            Collection of parameter mappings between parent job and child job or between environment variable and parent job
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RemoteLegDefinitionData">
            <summary>
            Runs a command on a remote machine not part of the lab topology. Usually it is used to run commands on machines part of other domains
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.RemoteLegDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemoteLegDefinitionData.RemoteFolderParameter">
            <summary>
            Remote Folder Parameter.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.JobLegDefinitionData">
            <summary>
            Leg that runs another job.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobLegDefinitionData.JobId">
            <summary>
            Id of job this leg will run
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobLegDefinitionData.ReportFailureToJob">
            <summary>
            Report failure to the job.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.JobLegDefinitionData.PublishedParameters">
            <summary>
            Collection of parameter mappings between parent job and child job or between environment variable and parent job
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.SyncLegDefinitionData">
            <summary>
            Re-sets the synchronization time of dependent legs to the current time of the source depot at the time this leg gets executed.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.SyncLegDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DeleteDropLegDefinitionData">
            <summary>
            Leg that deletes the build drop and source.
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.DeleteDropLegDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.CompleteLegDefinitionData">
            <summary>
            For build jobs, optionally copies the logs to the drop location
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.CompleteLegDefinitionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegJobParameterMappingData">
            <summary>
            Represents a mapping of a single parameter for LegJobDefinition
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegParameterMappingData">
            <summary>
            Used to define parameter passing between parent jobInstance, LegDefinition and child jobInstance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.LegParameterMappingData.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor to create object with all required Parameter mapping data
            </summary>
            <param name="source">it could be parent jobInstance's parameter name or environment variable name from build script of LegDefinition</param>
            <param name="target">for most types of LegDefinition it will be Parent jobInstance's parameter name,for LegJobDefinition it could be parent/child jobInstance's parameter name(according to IN/OUT)</param>
            <param name="description">details of parameter</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegParameterMappingData.Description">
            <summary>
            Details about parameter mapping
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegParameterMappingData.Source">
            <summary>
            For most types of LegDefinition, it would be environment variable name from build script, which will be set by the environment
            For LegJobDefinition : Can be parent jobInstance parameter name or child jobInstance parameter name (depending on the IN/OUT)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegParameterMappingData.Target">
            <summary>
            For most types of LegDefinition, it would be parent jobInstance's parameter name
            For LegJobDefinition : Can be parent jobInstance parameter name or child jobInstance parameter name (depending on the IN/OUT)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegParameterMappingData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.LegJobParameterMappingData.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            constructor to create object with all required parameter mapping data between parent and child jobInstance's parameter
            </summary>
            <param name="source">name of the parameter, could be parent jobInstance's parameter name or environment variable name from build script of LegDefinition</param>
            <param name="target">Parent jobInstance's parameter name, in case of LegJob type LegDefinition it would be child jobInstance's parameter name</param>
            <param name="description">details of parameter</param>
            <param name="in">Direction of ParameterMapping - Parent jobInstance's parameter value will be set to child jobInstance's parameter</param>
            <param name="out">Direction of ParameterMapping - Child jobInstance's parameter value will be set to Parent jobInstance's parameter</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegJobParameterMappingData.In">
            <summary>
            Direction of ParameterMapping - Parent jobInstance's parameter value will be set to child jobInstance's parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegJobParameterMappingData.Out">
            <summary>
            Direction of ParameterMapping - Child jobInstance's parameter value will be set to Parent jobInstance's parameter
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegDependencyData">
            <summary>
            Stores the details about leg dependency and execution condition
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.LegDependencyData.#ctor(System.String,Microsoft.BuildTracker.Contracts.DependencyType)">
            <summary>
            Constructs an object using the given prerequisite leg name and dependency type.
            </summary>
            <param name="prerequisiteLegName"></param>
            <param name="dependencyType"></param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDependencyData.PrerequisiteLegName">
            <summary>
            Name of Prerequisite leg for dependent leg.
            Execution of Dependent leg depends on execution of PrerequisiteLeg, which is passed here by name.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegDependencyData.DependencyType">
            <summary>
            Condition for execution of this leg according to PrerequisiteLeg result 
            Execution of this leg depends to result of PrerequisiteLeg, like OnSucces, OnFail, Always
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.SimulateResultValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.SimulateResultValue.Success">
            <summary>
            Return success when executing this as a leg of a simulated job
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.SimulateResultValue.Fail">
            <summary>
            Return failure when executing this as a leg of a simulated job
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DependencyLogicType">
            <summary>
            Possible type of DependencyLogic, each type definied how individual results of legs should be combined 
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DependencyLogicType.And">
            <summary>
            All of this legs dependency evaluations must evaluate to True 
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DependencyLogicType.Or">
            <summary>
            At least one of this legs dependency evaluations must evaluate to True 
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DependencyType">
            <summary>
            Possible type of Dependency condition for dependent leg
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DependencyType.OnSuccess">
            <summary>
            Dependent leg will be only executed if Prerequisite leg is successful.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DependencyType.OnFail">
            <summary>
            Dependent leg will be only executed if Prerequisite leg Fails.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.DependencyType.Always">
            <summary>
            Dependent leg will be always executed. Won't be affected with the result of Prerequisite Leg's result.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ILegDefinition">
            <summary>
            Service methods that perform actions related to BuildTracker legs
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegDefinition.GetById(System.Int32)">
            <summary>
            Gets the leg with the given ID
            </summary>
            <param name="legId">ID of the leg to return</param>
            <returns>LegDefinitionData object set with the field values of the requested leg</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegDefinition.Update(Microsoft.BuildTracker.Contracts.LegDefinitionData)">
            <summary>
            Updates an existing leg with data from a LegDefinitionData object
            </summary>
            <param name="legDefinition">A LegDefinitionData object with field values that are to be updated on a BuildTracker leg</param>
            <returns>A LegDefinitionData object set with the updated field values</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegDefinition.Delete(System.Int32)">
            <summary>
            Deletes an existing leg
            </summary>
            <param name="legId">ID of the leg to delete</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegDefinition.ResetEstimatedExecutionTime(System.Int32)">
            <summary>
            Reset the estimated execution time for this leg to 0
            </summary>
            <param name="legId">Id of the leg that will have it's ERT reset</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegDefinition.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegInstanceData">
            <summary>
            Data contract for transferring LegInstance information across WCF calls
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.Id">
            <summary>
            Id for this LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.Name">
            <summary>
            Name of the LegInstance, set from the name of the LegDefinition
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.JobInstanceId">
            <summary>
            Id of the parent JobInstance for this LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.LegDefinitionId">
            <summary>
            Id of the LegDefinition for this LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.Status">
            <summary>
            Current state of the LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.WaitingStartedTime">
            <summary>
            Date and time that this leg instance started waiting for dependencies
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.ReadyStartedTime">
            <summary>
            Date and time that this leg instance was ready to run
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.PreparingStartedTime">
            <summary>
            Date and time that this leg instance started the preparation stage
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.ExecutingStartedTime">
            <summary>
            Date and time that this leg instance started executing
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.FinishedTime">
            <summary>
            Date and time that this leg instance finished
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.OverdueState">
            <summary>
            OverDue status of LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.ExitCode">
            <summary>
            LegInstance Exit code after execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.EstimatedExecutionTime">
            <summary>
            Estimated execution time of LegInstance
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.ChildJobInstanceId">
            <summary>
            ID of a child job instance. This is only set for job legs
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.NewEnlistmentCreated">
            <summary>
            Was a new enlistment created for this leg instance?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.MachineId">
            <summary>
            Id of the machine this leg instance ran on
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.MachineName">
            <summary>
            Name of the machine this leg instance ran on
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.Order">
            <summary>
            The order that this leg is run within a job
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.Priority">
            <summary>
            Relative to other legs that can run within the same dependency range, legs with a lower priority value will run first
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.LogUrl">
            <summary>
            The URL of the log for this leg instance.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that may be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.OverdueState">
            <summary>
            Possible values for OverDue state
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.OverdueState.OnTime">
            <summary>
            Overdue on time
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.OverdueState.Delayed">
            <summary>
            OverDue delayed 
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.OverdueState.Overdue">
            <summary>
            Overdue
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegInstanceStatus">
            <summary>
            Possible states a Leg Instance can be in
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Unknown">
            <summary>
            State is not allowed, Exception will be thrown.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Waiting">
            <summary>
            LegQueue is in waiting for execution
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Running">
            <summary>
            LegQueue is running
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Failed">
            <summary>
            LegQueue failed during execution
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Completed">
            <summary>
            LegQueue execution completed
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Aborted">
            <summary>
            LegQueue aborted during execution 
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Canceled">
            <summary>
            LegQueue canceled
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Idle">
            <summary>
            LeqQueue is not executing  
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Skipped">
            <summary>
            LegQueue was skipped during execution
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.Resumed">
            <summary>
            LeqQueue restarted
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.LegInstanceStatus.FailedOk">
            <summary>
            LegQueue failed as expected
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ILegInstance">
            <summary>
            Defines an agreement between service and client, it defines what are the methods(operations) client can access.
            Methods with OperationContract attribute will be only visibile/accessible to clients. 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance.Restart(System.Int32)">
            <summary>
            OperationContract to restart the LegInstance
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance.Skip(System.Int32)">
            <summary>
            OperationContract to skip execution of LegInstance for passed legInstanceId
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance.GetById(System.Int32)">
            <summary>
            OperationContract to get LegInstance for passed legInstanceId
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance.Abort(System.Int32)">
            <summary>
            OperationContract to abort LegInstance for passed legInstanceId
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance.GetExecutions(System.Int32)">
            <summary>
            Gets past executions of the given leg instance
            </summary>
            <param name="legInstanceId">Id of the LegInstance to retrieve the LegInstanceExecutions for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance.GetRemarks(System.Int32)">
            <summary>
            Gets all remarks associated with the given id
            </summary>
            <param name="id">id of the object - the parent of remarks</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstance36Qfe1.AddRemark(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a new leg instance remark
            </summary>
            <param name="legInstanceId">id of the leginstance to change the status for</param>
            <param name="text">the text of the remark to add</param>
            <param name="type">the type of the remark to add</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData">
            <summary>
            Data contract for transferring LegInstanceExecution information across WCF calls
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.Id">
            <summary>
            Id for the LegInstanceExecution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.LegInstanceId">
            <summary>
            LegInstance Id for this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.RestartNumber">
            <summary>
            Restart Number for this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.WaitingStartedTime">
            <summary>
            Date and time that this leg instance execution started waiting for dependencies
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.ReadyStartedTime">
            <summary>
            Date and time that this leg instance execution was ready to run
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.PreparingStartedTime">
            <summary>
            Date and time that this leg instance execution started the preparation stage
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.ExecutingStartedTime">
            <summary>
            Date and time that this leg instance execution started executing
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.FinishedTime">
            <summary>
            Date and time that this this leg instance execution finished
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.Status">
            <summary>
            Finished LegInstance State of the LegInstanceExecution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.ExitCode">
            <summary>
            Exit code if this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.MachineId">
            <summary>
            ID of the machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.MachineName">
            <summary>
            Name of the machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.RemoteMachineId">
            <summary>
            ID of the remote machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.RemoteMachineName">
            <summary>
            Name of the remote machine which ran this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.EstimatedExecutionTime">
            <summary>
            Estimated execution time of this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.OverdueState">
            <summary>
            OverDue status of this leg instance execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.LogFileLocalPath">
            <summary>
            the local log path of this leg instance execution 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.NewEnlistmentCreated">
            <summary>
            Was a new enlistment created for this leg instance?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.LogUrl">
            <summary>
            The URL of the log for this leg instance execution.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that may be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ILegInstanceExecution">
            <summary>
            Defines an agreement between service and client, it defines what are the methods(operations) client can access.
            Methods with OperationContract attribute will be only visible/accessible to clients. 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstanceExecution.GetById(System.Int32)">
            <summary>
            gets a LegInstanceExecution by Id
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ILegInstanceExecution.GetDataPoints(System.Int32)">
            <summary>
            Gets data points for the given leg instance execution
            </summary>
            <param name="legInstanceExecutionId">Id of the LegInstanceExecution to retrieve the data points for.</param>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.LegInstanceExecutionDataPointData">
            <summary>
            Data contract for transferring LegInstanceExecutionDataPoint information across WCF calls
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionDataPointData.Name">
            <summary>
            the name of the data point
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionDataPointData.Value">
            <summary>
            the value of the data point
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.LegInstanceExecutionDataPointData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.MachineData">
            <summary>
            Contains the data members related to a BuildTracker machine
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.MachineData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.Id">
            <summary>
            Machine's Id
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.Name">
            <summary>
            Machine's name as defined in BuildTracker database. Typically just a WINS name.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.OperatingSystem">
            <summary>
            The OS installed on the machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.ServicePack">
            <summary>
            SP on top of the OS
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.Domain">
            <summary>
            The domain this machine belongs to
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.Manufacturer">
            <summary>
            Machine's manufacturer
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.Model">
            <summary>
            Manufacturer's model
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.MemorySize">
            <summary>
            The amount of memory the machine has. In bytes.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.TimeZone">
            <summary>
            The TimeZone the machine resides in
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.CollectMachineInformation">
            <summary>
            If true -&gt; BuildTracker will periodically collect information about this machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.EnableRemoteExecution">
            <summary>
            Indicates this machine can be used for remote execution
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.EnableSdkProxy">
            <summary>
            Indicates this machine can be used as an SDK Proxy
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.ComputedPerformanceWeight">
            <summary>
            Performance weight as computed by BuildTracker's algorithm. This is based on the number of cores and their speed.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.PerformanceWeightOverride">
            <summary>
            Allows overriding the performance weight with a custom value. Setting this property disregards the computed performance weight.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.Notes">
            <summary>
            Admin notes about the machine
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.Deleted">
            <summary>
            Indicates that the machine has been previously deleted.
            </summary>
            <remarks>To "undelete" a machine -> simple create it again, which will reset its fields.</remarks>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.MachineData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IMachine">
            <summary>
            Set of operations allowed to manage Machines
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachine.GetById(System.Int32)">
            <summary>
            Get a machine object
            </summary>
            <param name="machineId">Id of the machine to return</param>
            <returns>A machine object</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachine.GetDisks(System.Int32)">
            <summary>
            Returns all Disks for the given machine
            </summary>
            <param name="machineId">Id of the Machine to retrieve Disks for</param>
            <returns>A list of DiskData objects</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachine.Update(Microsoft.BuildTracker.Contracts.MachineData)">
            <summary>
            Updates an existing Machine object with data from a MachineData object
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachine.Delete(System.Int32)">
            <summary>
            Deletes a machine.
            </summary>
            <param name="machineId">Id of the machine to delete.</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachine.CollectInformation(System.Int32)">
            <summary>
            Causes immediate information collection for this machine.
            </summary>
            <param name="machineId">Id of the machine to delete.</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IMachine.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ParameterDefinitionData">
            <summary>
            DataContract to pass JobParameter or BuildDropParameter definitions
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="type">type of the parameter</param>
            <param name="description">details about parameter</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="type">type of the parameter</param>
            <param name="description">details about parameter</param>
            <param name="required">bool value parameter required or not</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.#ctor(System.String,Microsoft.BuildTracker.Contracts.ParameterType,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of the parameter</param>
            <param name="type">type of the parameter</param>
            <param name="description">details about parameter</param>
            <param name="required">bool value parameter required or not</param>
            <param name="readOnly">bool value parameter readonly or not</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.Name">
            <summary>
            The name of the parameter definitions.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.Description">
            <summary>
            Parameter's description.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.Values">
            <summary>
            Parameter values
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.ParameterType">
            <summary>
            Type of parameter
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.Required">
            <summary>
            Is this parameter required?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.ReadOnly">
            <summary>
            Is this parameter readonly?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.Inherited">
            <summary>
            For BuildDropParameters, indicates if this parameter definition is inherited from a parent object
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ParameterDefinitionValueData">
            <summary>
            DataContract to pass values of Parameter Definition 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ParameterDefinitionValueData.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor to set multiple selection values like DropDwonList, CheckBoxes etc.
            </summary>
            <param name="value">value of the parameter</param>
            <param name="isDefault">value is default or not</param>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionValueData.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionValueData.IsDefault">
            <summary>
            Is it a default value?
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ParameterDefinitionValueData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ParameterType">
            <summary>
            parameter can be created for any of these types.
            int values assign to mapped with ParameterType in BT for conversion
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ParameterType.String">
            <summary>
            String Type, Single value parameter
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ParameterType.Xml">
            <summary>
            Xml Type, Single value parameter single selection
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ParameterType.Link">
            <summary>
            Link Type, Single value parameter single selection
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ParameterType.Number">
            <summary>
            Number Type, Single value parameter single selction
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ParameterType.CheckBoxList">
            <summary>
            CheckBoxList Type, multi value parameter multi selection
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ParameterType.RadioButtonList">
            <summary>
            RadioButtonList Type, multi value parameter single selection
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.ParameterType.DropDownList">
            <summary>
            DropDownList Type, multi value parameter single selction
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.PolicyData">
            <summary>
            Defines basic condition upon which a job gets queued up
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.PolicyData.Id">
            <summary>
            Id of the policy
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.PolicyData.BuildShareGroupId">
            <summary>
            Id of the owner BuildShareGroup
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.PolicyData.MinutesDelayAfterBuildJobCompletes">
            <summary>
            starting time of this policy after build completed
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.PolicyData.Enabled">
            <summary>
            This instance of the Policy is enabled
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.PolicyData.BuildShareGroupType">
            <summary>
            Used for system wide policies to target specific BSG types only.
            Ignored for BSG-specific policies.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.PolicyData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.DropPolicyData">
            <summary>
            Defines a condition upon which a drop job gets queued up
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DropPolicyData.RunOnAutoDiscoveredBuild">
            <summary>
            Policy will execute auto discovered build
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.DropPolicyData.DropJobId">
            <summary>
            Id of the drop job which will be executed under this policy
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RetentionPolicyData">
            <summary>
            Defines a condition upon which a retention job gets queued up
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RetentionPolicyData.Condition">
            <summary>
            condition for the execution of this policy 
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RetentionPolicyData.Quantity">
            <summary>
            Passed value will be associated with selected Condition, Works with condition only.
            Value in this property will be replaced with variable in Condition property
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RetentionCondition">
            <summary>
            Possible condition for a retention policy
            retention policy can be created for any of these condition
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RetentionCondition.KeepAtLeastNDays">
            <summary>
            BuildTracker will not schedule retention jobs for the unpreserved builds of this Build Share Group that have been modified in the specified number of days.
            Value of N will be passed through Quantity property.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RetentionCondition.KeepAtLeastNLatest">
            <summary>
            BuildTracker will schedule retention jobs for the oldest non-preserved builds for the Build Share Group when the number of unpreserved builds is greater than the specified number.
            Value of N will be passed through Quantity property.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RetentionCondition.KeepNDays">
            <summary>
            BuildTracker will schedule retention jobs for the oldest non-preserved builds for the Build Share Group that have not been modified since the specified number of days.
            Value of N will be passed through Quantity property.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RetentionCondition.KeepNLatest">
            <summary>
            BuildTracker will schedule retention jobs for the oldest non-preserved builds for the Build Share Group when the number of unpreserved builds is greater than the specified number
            Value of N will be passed through Quantity property.
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RetentionCondition.KeepNMegabytes">
            <summary>
            BuildTracker will schedule retention jobs for the oldest non-preserved builds for the Build Share Group if the amount of disk space for all the builds (preserved and unpreserved) is greater than the specified number.
            Note that the build size includes both its drop and source. Builds already scheduled for deletion are not considered when computing this amount. 
            Value of N will be passed through Quantity property.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IPolicy">
            <summary>
            Set of operations allowed to manage Job Policies
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IPolicy.Update(Microsoft.BuildTracker.Contracts.PolicyData)">
            <summary>
            To Update the local policy
            </summary>
            <param name="policyData">updated object of policyData</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IPolicy.Delete(System.Int32)">
            <summary>
            To Delete Policy
            </summary>
            <param name="policyId">Id of the jobPolicy which should be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IPolicy.GetById(System.Int32)">
            <summary>
            Get a policy by it's ID value
            </summary>
            <param name="policyId">Id of Policy</param>
            <returns>object of PolicyData with latest data.</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IPolicy.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ProductData">
            <summary>
            Contains the data members related to a BuildTracker product
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.ProductData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.Name">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.Id">
            <summary>
            BuildTracker Id value for the product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.CreateTime">
            <summary>
            DateTime when the product was created
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.RunAsAlias">
            <summary>
            Account that legs will run under, unless overridden
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.EffectiveRunAsAlias">
            <summary>
            Account that will be inherited if the RunAsCredentials are not set on this product.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.Owners">
            <summary>
            List of aliases that are owners of this product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.EnlistmentSettings">
            <summary>
            Stores generic enlistment settings
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.BuildDropParameters">
            <summary>
            Collection of BuildDropParameters for this product
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ProductData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IProduct">
            <summary>
            Service methods that perform actions related to BuildTracker products 
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.CreateBranch(Microsoft.BuildTracker.Contracts.BranchData)">
            <summary>
            Creates a new BuildTracker branch
            </summary>
            <param name="branchData">A BranchData object with field values to be used to create a new BuildTracker branch</param>
            <returns>A BranchData object that is populated with the data of the newly created branch</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.GetBranch(System.Int32,System.String)">
            <summary>
            Gets the branch that has the given name
            </summary>
            <param name="branchName">Name of the branch to return</param>
            <param name="productId">Id of the parent product for this branch</param>
            <returns>A BranchData object set with field values coresponding to the requested BuildTracker branch</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.GetById(System.Int32)">
            <summary>
            Returns the product that has the given id
            </summary>
            <param name="productId">Id of the product to return</param>
            <returns>ProductData object for the requested product</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.GetBranches(System.Int32)">
            <summary>
            Returns all branches for the given product
            </summary>
            <param name="productId">Id of the product to retrieve branches for</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.Update(Microsoft.BuildTracker.Contracts.ProductData)">
            <summary>
            Updates and existing product with data from a ProductData object
            </summary>
            <param name="product">A ProductData object with field values that are to be updated on a BuildTracker product</param>
            <returns>A ProductData object that contains the updated field values</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.Delete(System.Int32)">
            <summary>
            Deletes a product from BuildTracker
            </summary>
            <param name="productId">Id of the product to be deleted</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.Register(System.Int32)">
            <summary>
            Registers a product for the current user
            </summary>
            <param name="productId">Id of the product to be registered</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.Unregister(System.Int32)">
            <summary>
            Unregisters a product for the current user
            </summary>
            <param name="productId">Id of the product to be unregistered</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.CreateBuildShareGroup(Microsoft.BuildTracker.Contracts.BuildShareGroupData)">
            <summary>
            Creates new BuildShareGroup for this product
            </summary>
            <param name="buildShareGroupData">object of BuildShareGroupData to create new BuildShareGroup</param>
            <returns>object of BuildShareGroup created by this method</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.GetBuildShareGroups(System.Int32)">
            <summary>
            Returns collection of BuildShareGroups associated with this Product
            </summary>
            <param name="productId">Id of the current branch</param>
            <returns>Collection of BuildShareGroups associated with this Product</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.GetBuildShareGroup(System.Int32,System.String)">
            <summary>
            Get a BuildShareGroup
            </summary>
            <param name="productId">Id of the parent product</param>
            <param name="buildShareGroupName">Name of the BuildShareGroup to retrieve</param>
            <returns>BuildShareGroupData object that is populated with the data of the BuildShareGroup that was requested</returns>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct.Default(System.ServiceModel.Channels.Message)">
            <summary>
            Default operation to route good binding, mismatched calls
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>See "WCF Unleashed (2007)" Working w/ Behavioral Contracts - Page 652.</remarks>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.IProduct36Qfe1">
            <summary>
            Interface service methods added for version QFE1
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.IProduct36Qfe1.GetJobSchedules(System.Int32)">
            <summary>
            Gets all of the JobSchedules for this Product
            </summary>
            <param name="productId">ID of the Product to get JobSchedules for</param>
            <returns>A collection of JobScheduleData objects</returns>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RemarkData">
            <summary>
            Contains the data members related to a BuildTracker account
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemarkData.Count">
            <summary>
            The count of how many times this exact remark was written.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemarkData.LastOccurrence">
            <summary>
            The last time this remark was written.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemarkData.FirstOccurrence">
            <summary>
            The first tiem this remark was written.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemarkData.RemarkType">
            <summary>
            The type of the remark.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemarkData.Text">
            <summary>
            Remark's message/text.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemarkData.User">
            <summary>
            The user on whose behalf the remark was written.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.RemarkData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RemarkType">
            <summary>
            The possible remark types
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RemarkType.None">
            <summary>
            Remark type not specified
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RemarkType.Error">
            <summary>
            Error remark
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RemarkType.Warning">
            <summary>
            Warning remark
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.RemarkType.Success">
            <summary>
            Success remark
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.RetiredEndpointFault">
            <summary>
            Fault that is thrown when the endpoint/operation is to be retired.
            Clients should expect this fault as it can happen in any of the future versions of the service.
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.ServiceIntervalData">
            <summary>
            Contains the data members related to a BuildTracker ServiceInterval (LoopInterval)
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.Id">
            <summary>
            ID of the service interval
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.AffectedService">
            <summary>
            Name of the BuildTracker service that controls this service interval
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.Description">
            <summary>
            Description of the task that is performed by the service
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.LastExecution">
            <summary>
            Time of the last execution of the service's task
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.Name">
            <summary>
            Name of the Task
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.Overdue">
            <summary>
            Indicates that a task did not execute when it should have according to it's defined interval time.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.Value">
            <summary>
            The length of the interval (in seconds) between executions of the task.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.ServiceIntervalData.ExtensionData">
            <summary>
            Used for storing and retrieving values of other members that my be implemented by newer versions
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.VersionedNamespaces">
            <summary>
            Lists known contract namespaces
            For every new release there should be an item added below
            </summary>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.VersionedNamespaces.bt36">
            <summary>
            The contract namespace used for BuildTracker 3.6 functionality
            </summary>
            <remarks>Additional consts should be added for any new BT version that adds API functionality,
            so that the new functionality can be mapped to the correct WCF namespace. 
            This helps with backwards-compatibility.</remarks>
        </member>
        <member name="F:Microsoft.BuildTracker.Contracts.VersionedNamespaces.bt36qfe1">
            <summary>
            The contract namespace used for BuildTracker 3.6 QFE1 functionality
            </summary>
        </member>
        <member name="T:Microsoft.BuildTracker.Contracts.WcfConnector">
            <summary>
            Responsible for connection, tear down and exposing of interfaces of
            the BuildTracker WCF API endpoint
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.WcfConnector.#ctor(System.Object)">
            <summary>
            Used for WCF Server testing only
            </summary>
            <param name="apiService"></param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.WcfConnector.#ctor">
            <summary>
            Used for WCF Client testing only
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.WcfConnector.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Connects to the BT wcf interface through the given base address
            </summary>
            <param name="baseAddress">base address for all wcf contracts</param>
            <param name="domain">credentials domain to connect as</param>
            <param name="userName">credentials userName to connect as</param>
            <param name="password">credentials password to connect as</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.WcfConnector.GetApiServerVersion">
            <summary>
            Gets the service version so the client knows which operations are available to call
            </summary>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.WcfConnector.Connect``1(System.String,System.ServiceModel.Channels.Binding,System.String,System.String,System.String)">
            <summary>
            Helper method to create and configure the wcf communication channel to a specific interface on the BT wcf service
            </summary>
            <typeparam name="TInterface">Specific service interface</typeparam>
            <param name="baseAddress">Endpoint address</param>
            <param name="binding">Binding used for communication between client and service</param>
            <returns>Channel of specified type to a specified endpoint address</returns>
            <param name="domain">credentials domain to connect as</param>
            <param name="userName">credentials userName to connect as</param>
            <param name="password">credentials password to connect as</param>
        </member>
        <member name="M:Microsoft.BuildTracker.Contracts.WcfConnector.CloseConnections">
            <summary>
            Closes open connections.
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.BuildTracker">
            <summary>
            Property to access the IBuildTracker interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Product">
            <summary>
            Property to access the IProduct interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Branch">
            <summary>
            Property to access the IBranch interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.JobDefinition">
            <summary>
            Property to access the JobDefinition interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.JobInstance">
            <summary>
            Property to access the JobInstance interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.LegDefinition">
            <summary>
            Property to access the LegDefinition interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.LegInstance">
            <summary>
            Property to access the LegInstance interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.LegInstanceExecution">
            <summary>
            Property to access the LegInstanceExecution interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.InstanceQuery">
            <summary>
            Property to access the InstanceQuery interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.BuildShareGroup">
            <summary>
            Property to access the BuildShareGroup interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Policy">
            <summary>
            Property to access the JobPolicy interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Machine">
            <summary>
            Property to access the Machine interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Disk">
            <summary>
            Property to access the Disk interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.BuildDrop">
            <summary>
            Accesses the BuildDrop interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.MachineGroup">
            <summary>
            Property to access the Machine interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Affinity">
            <summary>
            Property to access the Affinity interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.BuildTracker36Qfe1">
            <summary>
            Property to access the IBuildTracker36Qfe1 interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Product36Qfe1">
            <summary>
            Property to access the IProduct36Qfe1 interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Branch36Qfe1">
            <summary>
            Property to access the IBranch36Qfe1 interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.JobDefinition36Qfe1">
            <summary>
            Property to access the JobDefinition36Qfe1 interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.InstanceQuery36Qfe1">
            <summary>
            Property to access the InstanceQuery36Qfe1 interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.BuildShareGroup36Qfe1">
            <summary>
            Property to access the BuildShareGroup36Qfe1 interface
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.JobSchedule36Qfe1">
            <summary>
            Property to access the JobSchedule interface
            Available since 3.6 QFE 1
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.JobService36Qfe1">
            <summary>
            Property to access the JobService interface
            Available since 3.6 QFE 1
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.Credentials36Qfe1">
            <summary>
            Property to access the Credentials interface
            Available since 3.6 QFE 1
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.JobInstance36Qfe1">
            <summary>
            Property to access the JobInstance interface
            Available since 3.6 QFE 1
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.LegInstance36Qfe1">
            <summary>
            Property to access the LegInstance interface
            Available since 3.6 QFE 1
            </summary>
        </member>
        <member name="P:Microsoft.BuildTracker.Contracts.WcfConnector.BuildDrop36Qfe1">
            <summary>
            Property to access the BuildDrop interface
            Available since 3.6 QFE 1
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\codesign\readme.txt ===
Support Alias       : prssign
Notifications Alias : prssignn
Updates             : http://toolbox/22095


From the PRSSign Owners (The CodeSign team):
----------------------------------------------------
Hello everyone.

You are receiving this e-mail because either you or your group is submitting files into the CodeSign System using prssign.exe.

The CodeSign Group from PRSS has recently become owner of the PRSSign tool. This will allow us to provide bug fixes and enhancement to the tool.

In order to streamline communications related to the PRSSign tool (specifically tool news or make a suggestion for a future enhancement), the CodeSign team is using the PRSSign.exe News Alert alias (prssignn).  The goal is to make sure there is an efficient and consistent means to communicate information between all prssign.exe users. 

Warning: If you are having problems with the tool do not use this DL. Please use the PRSSign.exe Support Group alias (prssign).

Also; some small updates have been made to the http://toolbox/ link where the tool will continue to reside. http://toolbox/22095

If you know someone who uses or will use this tool, feel free to forward this e-mail to them. The link to be added as part of the DL its located at the bottom of the e-mail.

If you wish to remove yourself from these notifications, please click here. 

Thank you, 

PRSS CodeSign Experts

P.S. - For questions or concerns relates to PRSSign, please contact the PRSSign.exe News Alert Distribution Group.

This mail has been distributed through the PRSSign.exe News Alert distribution list.  Click here to add yourself.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\codesign\SignJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PrsSign</name>
    </assembly>
    <members>
        <member name="T:PrsSign.SubmissionData">
            <summary>
            The description of the submission.
            </summary>
        </member>
        <member name="M:PrsSign.SubmissionData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:PrsSign.PrsSubmissionException">
            <summary>
            Exception thrown when a PrsSubmission fails.
            </summary>
        </member>
        <member name="F:PrsSign.PrsSubmissionException.Job">
            <summary>
            The CodeSign Job that was being submitted or a null value if the Job object was not yet valid.
            </summary>
        </member>
        <member name="F:PrsSign.PrsSubmissionException.JobWatcher">
            <summary>
            The CodeSign JobWatcher that was being used or a null value if the JobWatcher object was not yet valid.
            </summary>
        </member>
        <member name="F:PrsSign.PrsSubmissionException.SubmissionData">
            <summary>
            The submission data that was being used.
            </summary>
        </member>
        <member name="F:PrsSign.PrsSubmissionException.ErrorMessage">
            <summary>
            An error message describing the exception.
            </summary>
        </member>
        <member name="T:PrsSign.Submission">
            <summary>
            All of the information necessary to describe a submission and it's submission results.
            </summary>
        </member>
        <member name="M:PrsSign.Submission.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PrsSign.Submission.Save(System.String)">
            <summary>
            Save this data structure to a file in XML format.
            </summary>
            <param name="outFile"></param>
        </member>
        <member name="M:PrsSign.Submission.LoadSubmission(System.String)">
            <summary>
            Load an object from a file in XML format (see Save)
            </summary>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:PrsSign.Submission.Submit">
            <summary>
            Creates the PRS submission and blocks until it returns or the timeout value specified in the Submission object elapses
            </summary>
            <returns></returns>
        </member>
        <member name="P:PrsSign.Submission.SourcePath">
            <summary>
            The root of the files being submitted to PRS.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.BatchID">
            <summary>
            The ID of the submitted batch.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.CompletionPath">
            <summary>
            The path that the signed files will be sent to.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.Success">
            <summary>
            Indicates whether or not the submission was successful.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.AllowPartialReturn">
            <summary>
            If true then a submission which only partially succeeded will return it's partial results.  If false then the submission must entirely succeed to return successfully.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.RequireVerifyCertificates">
            <summary>
            If true the files submitted are cross-referenced with the requested certificate to ensure that they are compatible.  If false an effort to sign is made regardless of compatability.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.RequireHash">
            <summary>
            If true the hash of each file is checked to ensure file integrity.  If false the file is used without the secondary check.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.BatchDescription">
            <summary>
            The description of the batch.  This will be visible to approvers.  This will not be stamped into the signed assemblies.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.FileDescription">
            <summary>
            The description that will be stamped onto every file signed with an Authenticode certificate.  This string is visible by customers.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.FileUrl">
            <summary>
            The URL that will be displayed to the customer when they example the Authenticode certificate.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.Keywords">
            <summary>
            Keywords that describe the batch.  These can be searched against at the CodeSign website to locate batches.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.Approvers">
            <summary>
            The list of approvers to approve this batch.  If a listed name is not a valid approver an exception will be thrown before the batch is submitted.  This string should be the user alias (not including domain).
            </summary>
        </member>
        <member name="P:PrsSign.Submission.Certificate">
            <summary>
            The numeric identifier of the certificate or strong name key you wish to use.  Contact PRS if you don't know this information.
            </summary>
            		
        </member>
        <member name="P:PrsSign.Submission.Server">
            <summary>
            The codesign server to send the batch to.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.Port">
            <summary>
            The port to connect to the codesign server on.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.JobTimeout">
            <summary>
            How long to wait for the submission to return (milliseconds).  0 to block until the batch returns.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.CopyBack">
            <summary>
            Indicates whether or not to copy back the files after being submitted.  If true the files will be copied to the path %SourcePath%\%CopyBackPath%
            </summary>
        </member>
        <member name="P:PrsSign.Submission.CopyBackPath">
            <summary>
            If CopyBack is true this is the path where the signed files will be copied back (%SourcePath%\%CopyBackPath%)
            </summary>
        </member>
        <member name="P:PrsSign.Submission.RetryCount">
            <summary>
            The number of times to attempt to copy-back a file. (Default 10)
            </summary>
        </member>
        <member name="P:PrsSign.Submission.RetryDelay">
            <summary>
            The length of time, in milliseconds, to delay between each retry account.  (Default 15000)
            </summary>
        </member>
        <member name="P:PrsSign.Submission.ErrorMessages">
            <summary>
            A collection of any error messages that might be returned by PRS.
            </summary>
        </member>
        <member name="P:PrsSign.Submission.Files">
            <summary>
            The files being submitted for signing.
            </summary>
            
        </member>
        <member name="T:PrsSign.CharacterCode">
            <summary>
            Available character types
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.Error">
            <summary>
            A type which should not be encountered in our files.
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.Word">
            <summary>
            A Word character
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.WhiteSpace">
            <summary>
            Whitespace - ' ', '\t'
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.EndOfLine">
            <summary>
            CRLF
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.Assignment">
            <summary>
            The assignment operator (=)
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.Comment">
            <summary>
            A Comment indicator (#)
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.DoubleQuote">
            <summary>
            A double quote (")
            </summary>
        </member>
        <member name="F:PrsSign.CharacterCode.EndOfFile">
            <summary>
            The end of a file.
            </summary>
        </member>
        <member name="T:PrsSign.Token">
            <summary>
            Base class from which all token types derive.
            </summary>
        </member>
        <member name="T:PrsSign.CharToken">
            <summary>
            A token composed of a single character
            </summary>
        </member>
        <member name="F:PrsSign.CharToken.tokenValue">
            <summary>
            The value of the character token
            </summary>
        </member>
        <member name="M:PrsSign.CharToken.#ctor(System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="token">The token value</param>
        </member>
        <member name="P:PrsSign.CharToken.Value">
            <summary>
            Get or Set the value.
            </summary>
        </member>
        <member name="T:PrsSign.StringToken">
            <summary>
            A token composed of 1 or more characters in a string
            </summary>
        </member>
        <member name="F:PrsSign.StringToken.tokenValue">
            <summary>
            The value of the string token.
            </summary>
        </member>
        <member name="M:PrsSign.StringToken.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="token">The token value</param>
        </member>
        <member name="P:PrsSign.StringToken.Value">
            <summary>
            Get or Set the token value
            </summary>
        </member>
        <member name="T:PrsSign.WordToken">
            <summary>
            A token which represents a collection of CharacterCode.Word values.
            </summary>
        </member>
        <member name="M:PrsSign.WordToken.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tokenWord">The token value</param>
        </member>
        <member name="T:PrsSign.QuotedWordToken">
            <summary>
            A token which represents a collection of CharacterCode.Word values.
            </summary>
        </member>
        <member name="M:PrsSign.QuotedWordToken.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tokenValue">The token value</param>
        </member>
        <member name="T:PrsSign.WhiteSpaceToken">
            <summary>
            A token which represents a collection of CharacterCode.WhiteSpace values.
            </summary>
        </member>
        <member name="M:PrsSign.WhiteSpaceToken.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tokenWhiteSpaceToken">The token value</param>
        </member>
        <member name="T:PrsSign.EndOfLineToken">
            <summary>
            A token which represents a collection of CharacterCode.EndOfLine values.
            </summary>
        </member>
        <member name="M:PrsSign.EndOfLineToken.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tokenEndOfLine">The token value</param>
        </member>
        <member name="T:PrsSign.ErrorToken">
            <summary>
            A token which represents a CharacterCode.Error value.
            </summary>
        </member>
        <member name="M:PrsSign.ErrorToken.#ctor(System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="tokenError">The token value</param>
        </member>
        <member name="T:PrsSign.AssignmentToken">
            <summary>
            A token which represents a CharacterCode.Assignment value.
            </summary>
        </member>
        <member name="M:PrsSign.AssignmentToken.#ctor(System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="tokenAssignment">The token value</param>
        </member>
        <member name="T:PrsSign.EofToken">
            <summary>
            A token which represents the end of the file.
            </summary>
        </member>
        <member name="M:PrsSign.EofToken.#ctor(System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="tokenEof">The token value</param>
        </member>
        <member name="T:PrsSign.TokenParsingException">
            <summary>
            Generic exception thrown when unexpected input causes token parsing to break.
            </summary>
        </member>
        <member name="M:PrsSign.TokenParsingException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage">Description of the error</param>
        </member>
        <member name="T:PrsSign.EndOfFileException">
            <summary>
            Thrown when EOF is encountered
            </summary>
        </member>
        <member name="M:PrsSign.EndOfFileException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PrsSign.EndOfFileException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage">Description of the error</param>
        </member>
        <member name="T:PrsSign.UnexpectedTypeException">
            <summary>
            Exception thrown when unexpected an unexpected type is encountered.
            </summary>
        </member>
        <member name="M:PrsSign.UnexpectedTypeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PrsSign.UnexpectedTypeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage">Description of the error</param>
        </member>
        <member name="T:PrsSign.TextScanner">
            <summary>
            TextScanner is used to parse a SOURCES format file into groups of logical
            lines (NameValuesPair objects).
            </summary>
        </member>
        <member name="M:PrsSign.TextScanner.#ctor(System.IO.TextReader)">
            <summary>
            Constructor.
            </summary>
            <param name="inputStream">The stream from which data is read</param>
        </member>
        <member name="M:PrsSign.TextScanner.Eof">
            <summary>
            Returns the EOF state.
            </summary>
            <returns>True if the current read position is at EOF, else false.</returns>
        </member>
        <member name="M:PrsSign.TextScanner.ExpectCharOfType(PrsSign.CharacterCode,System.Char@)">
            <summary>
            Attempts to extract a character of a specific type.
            </summary>
            <param name="code">The type of character of extract</param>
            <param name="charRead">If a character is successfully extracted this will be the character actually read.  If a successful extraction is not possible this is unchanged.</param>
            <returns>True if an extraction was possible and successful, false otherwise.</returns>
        </member>
        <member name="M:PrsSign.TextScanner.ExpectStringOfType(PrsSign.CharacterCode,System.String@)">
            <summary>
            Attempts to extract a string of a specific user determined type.
            </summary>
            <param name="code">The character code to parse against</param>
            <param name="stringRead">If a string is successfully extracted this will be the string actually read.  If a successful extraction is not possible this is unchanged.</param>
            <returns>True if a string of the specific code is extracted, false otherwise.</returns>
        </member>
        <member name="M:PrsSign.TextScanner.RequireCharOfType(PrsSign.CharacterCode)">
            <summary>
            Extracts a character of the specific type.  If the specified character can not be extracted an UnexpectedTypeException exception is thrown and the stream is unaffected.
            </summary>
            <param name="code">The type of character to extract</param>
            <returns>The extracted character</returns>
        </member>
        <member name="M:PrsSign.TextScanner.RequireStringOfType(PrsSign.CharacterCode)">
            <summary>
            Extracts a string of the specific type.  If a string can not be extracted an UnexpectedTypeException exception is thrown and the stream is unaffected.
            </summary>
            <param name="code">The string type to extract</param>
            <returns>The extracted string</returns>
        </member>
        <member name="M:PrsSign.TextScanner.GetNextToken">
            <summary>
            Extracts and returns the next token from the stream.
            </summary>
            <returns>The extracted token</returns>
        </member>
        <member name="M:PrsSign.TextScanner.loadCharacterMap">
            <summary>
            Loads the character type map.
            </summary>
        </member>
        <member name="M:PrsSign.TextScanner.ReadLine">
            <summary>
            Reads a line from the stream without extracting any tokens.
            </summary>
            <returns>The extracted line or null if the end of the stream is reached.</returns>
        </member>
        <member name="M:PrsSign.TextScanner.SkipComments">
            <summary>
            If the next token is a comment this will extract that comment followed by any subsequent comments that immediately follow the preceding one.
            </summary>
            <returns>True if any comments were extracted, false otherwise.</returns>
        </member>
        <member name="M:PrsSign.TextScanner.SkipWhiteSpace">
            <summary>
            If the next token is whitespace skip all whitespace up to, but no further then, the end of the current line.
            </summary>
            <returns>True if any whitespace was skipped, false otherwise.</returns>
        </member>
        <member name="M:PrsSign.TextScanner.SkipWhiteSpace(System.Boolean)">
            <summary>
            If the next token is whitespace skip all subsequent whitespace, optionally including newlines, until a non-whitespace token is encountered
            </summary>
            <param name="consumeNewLines">If true then newlines are followed removing multiple lines of whitespace, if false then only a single line of whitespace will be removed</param>
            <returns>True if any whitespace was extracted, false otherwise</returns>
        </member>
        <member name="T:PrsSign.NameValuesPair">
            <summary>
            A set of values associated with a name.
            </summary>
        </member>
        <member name="M:PrsSign.NameValuesPair.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PrsSign.NameValuesPair.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:PrsSign.NameValuesPair.Values">
            <summary>
            The values
            </summary>
        </member>
        <member name="T:PrsSign.NameValuesStream">
            <summary>
            A stream from which NameValuesPair instances can be read out in logical lines.
            </summary>
        </member>
        <member name="M:PrsSign.NameValuesStream.#ctor(PrsSign.TextScanner)">
            <summary>
            Constructor
            </summary>
            <param name="scanner">The TextScanner to read from</param>
        </member>
        <member name="M:PrsSign.NameValuesStream.Eof">
            <summary>
            End of File?
            </summary>
            <returns>True if EOF, false otherwise</returns>
        </member>
        <member name="M:PrsSign.NameValuesStream.ReadLine">
            <summary>
            Read a logical line from the textscanner and return the NameValuesPair that is found.
            </summary>
            <returns>The extracted NameValuesPair</returns>
        </member>
        <member name="M:PrsSign.PrsSign.LoadFilesTxt(System.String,System.String,PrsSign.Submission)">
            <summary>
            Load the provided file list.
            </summary>
            <param name="filesTxt">The file list</param>
            <param name="sections">The sections to load</param>
            <returns>A list of all the loaded files</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\ComChk\1.2\x64\comchk.doc ===
Microsoft Office Word 97-2003 Document MSWordDoc Word.Document.8Microsoft Corporation Testing COM Objects With COMChk Title _PID_HLINKSTesting COM Objects With COMChk Fritz Sands Normal.dotm Fritz Sands Microsoft Office Word ZCRa2[Content_Types].xml _rels/.rels theme/theme/themeManager.xml theme/theme/theme1.xml  tom' "|Lc" f8Q8$ &l&v08_ KCScptS;4D 0d)mpG p_?cJ theme/theme/_rels/themeManager.xml.rels K(M&$R(.1 [Content_Types].xmlPK _rels/.relsPK theme/theme/themeManager.xmlPK theme/theme/theme1.xmlPK theme/theme/_rels/themeManager.xml.relsPK <?xml version="1.0" encoding="UTF-8" standalone="no"?> <a:clrMap xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/3/main" bg1="lt1" tx1="dk1" bg2="lt2" tx2="dk2" accent1="accent1" accent2="accent2" accent3="accent3" accent4="accent4" accent5="accent5" accent6="accent6" hlink="hlink" folHlink="folHlink"/> urn:schemas-microsoft-com:office:smarttags PersonNamebjbjP~P~ Testing COM Objects with COMChk v 1.2 Fritz Sands & Richard Shupak 27 July 2006 Introduction to the Problem COM is a core Microsoft technology that is used extensively in Windows and almost all other Microsoft products in order to provide an extremely flexible way to promote code re-use and general-purpose communication between components.  COM objects are registered in the system and, when instantiated through COM APIs, provide interface pointers that may be used by COM containers (and COM containers are also, typically, also COM objects that give interface pointers to themselves). In theory (and according to the specifications), COM objects should be safe to instantiate, interrogate, and release by any COM container application. In theory, a COM container should be able to use whatever means it wants to use to find COM objects to investigate. In practice, COM objects are frequently tested with only one specific COM container. If the object works in that environment, it gets shipped. But shipping a COM object typically involves registering it in the global environment. Once registered, a COM object can be instantiated by any COM container using standard APIs, such as CoCreateInstance and CoGetClassObject. This is the important and key point: COM objects are typically tested with a minimal set of COM containers (usually just one) yet they are exposed to all COM containers once installed. Code reuse is an integral part of COM design. Since COM technology is explicitly designed for a maximum degree of interoperability, any COM control shipped by Microsoft should behave properly (as defined by the documentation of various COM interfaces in MSDN documentation) when instantiated and interrogated by any COM container.  In the 2005 calendar year, we opened many MSRC issues because COM objects did not correctly follow COM rules. These COM objects were never intended to be instantiated by Internet Explorer, and therefore were never tested with IE. Nonetheless, when a webpage referenced them with an OBJECT tag, these COM objects were loaded by IE and failed in ways that were exploitable by malicious web script. We have identified a half-dozen or so COM containers shipped by Microsoft that can be scripted to instantiate arbitrary COM objects. However, we have not yet identified all means by which containers can be induced to instantiate arbitrary COM objects. Because of this, all Microsoft COM objects must behave responsibly within a well-written container. Additional changes will be made to Microsoft COM containers to restrict the objects they can instantiate. Even so, we cannot control the ISV COM containers that may be installed on a system, and we cannot allow a badly-written Microsoft COM control to compromise a system through those other containers. Because of this issue, Microsoft has added COM object validation to the Security Development Lifecycle (SDL) requirements for shipping.  COMChk has been written to address the need for such validation. COMChk COMChk is a command-line tool that instantiates COM controls one at a time and perform a series of standard tests on them. The validation rules that are tested by COMChk will be expanded as we determine that more tests are useful.  COMChk can also be used to instantiate a control and interrogate it for all standard interfaces, thus giving a notion of the attack surface of a control. COMChk can also be used to test the proxy and stub implementation for an interface. COMChk has a rich set of flags and parameters that can be used to customize its use for various scenarios.  A complete list of flags and their actions is located in the  Tool Usage  section of this document. For purposes of SDL requirement compliance COMChk should be run under the Application Verifier (see   HYPERLINK "http://team/sites/verifier/appverifier/default.aspx"  http://team/sites/verifier/appverifier/default.aspx  for installation instructions) and with the  sdl flag set. sdl flag has three effects on COMChk.  It guarantees that one extra line will be output for each control that is tested (even if the control generates no warnings), so that there is a record that the control has been tested.  The  sdl flag changes the output level to 3, so that only sdl-critical warnings will be output to the console.  And the  sdl flag implicitly sets the  stdmodes flag.  The  stdmodes flag causes COMChk to process the control(s) in various combinations of standard invocation, multi-thread apartment,  aggregated COM object, invoked through its class factory, invoked in an HTML page, and invoked using the web browser control.  This set of invocations will generate duplicate warnings for the control, but will also expose bad behavior that does not manifest itself in all scenarios. The set of COMChk warnings that are output from a run of the tool is controlled by the warning level set by the command line (default is  all warnngs  unless -sdl is specified).  Warnings are divided into categories of severity and only warnings from the selected severity level are output to the console.   This document contains a list of the warnings that COMChk outputs and descriptions of the cause of the warnings and effects of the problems under the heading  Diagnostic Outputs COMChk can process COM controls referenced either by clsid values or by ProgID values.  A clsid is a guid.  You can find the clsid for a COM control in the coclass line of the idl file that describes the control.  A ProgID is a human-readable name for the control (e.g. Agent.Control.2 for the Microsoft Agent control) and is registered with the control.  COMChk can be called either with a single clsid or progid on the command line, or with a filename in the command line (by using the command line switched  clsid @filename or  progid @filename), where the referenced text file contains a newline-delniated list of progid or classid values.  Note that all COM controls have clsid values.  Only some COM controls have ProgID values.  If a COM control does not need to be instantiated by name then it does not need a ProgID and, in fact, should not be registered with a ProgID   in order to reduce the potential attack surface.  Example of SDL usage and output: The Security Development Lifecycle requires validation that all COM objects pass validation with COMChk. Here are two examples of output from COMChk runs.  Both COM controls have problems that must be fixed. C:\comchk>comchk -clsid {0A9007AA-4076-11D3-8789-0000F8105754} -sdl Microsoft (R) COM Checker 1.00.0007 (May  3 2006 14:17:10) Copyright (C) Microsoft Corporation. All rights reserved. Microsoft Confidential - For Internal Use Only --------: Start default parameters 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished default parameters --------: Start -mta 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished -mta --------: Start -aggregate 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 00402500 (C:\comchk\comchk.exe) --------: Finished -aggregate --------: Start -aggregate -mta 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 00402500 (C:\comchk\comchk.exe) --------: Finished -aggregate -mta --------: Start -usecf 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(iidUndefin ed) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Fil es\Microsoft Shared\Information Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(IClassFact ory2) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common F iles\Microsoft Shared\Information Retrieval\msitss.dll) 00002714: {0A9007AA-4076-11D3-8789-0000F8105754}: IClassFactory::CreateInstance( IUnknown) succeeded: 75D87641 (C:\Program Files\Common Files\Microsoft Shared\In formation Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished -usecf --------: Start -mta -usecf 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(iidUndefin ed) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Fil es\Microsoft Shared\Information Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(IClassFact ory2) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common F iles\Microsoft Shared\Information Retrieval\msitss.dll) 00002714: {0A9007AA-4076-11D3-8789-0000F8105754}: IClassFactory::CreateInstance( IUnknown) succeeded: 75D87641 (C:\Program Files\Common Files\Microsoft Shared\In formation Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished -mta -usecf --------: Start -html --------: Finished -html --------: Start -webbrowser --------: Finished -webbrowser Note that the run found two problems in the control (the 0402 line for iidUndefined and also for IClassFactory2).  The 2B05 and 2714 output lines merely show that the control was tested.   The warnings are duplicated because the control is tested in 8 different usage scenarios.   Since COM specifications require that the control respond to QueryInterface by always setting the ppvObject to either null or a valid interface pointer, this error could lead a container to execute arbitrary code if it assumes that the interface pointer is valid.    HYPERLINK "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/html/54d5ff80-18db-43f2-b636-f93ac053146d.asp"  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/html/54d5ff80-18db-43f2-b636-f93ac053146d.asp  describes the requirement that QueryInterface initialize the interface pointer before returning to the caller. s the output from another control: Microsoft (R) COM Checker 1.00.0007 (May 10 2006 15:24:13) Copyright (C) Microsoft Corporation. All rights reserved. Microsoft Confidential - For Internal Use Only --------: Start default parameters C0000005: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -nologo -sdlout: 7752D130 (C:\WINDOWS\system32\ole32.dll) --------: Finished default parameters --------: Start -mta C0000005: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -mta -nologo -sdlout: 7752D130 (C:\WINDOWS\system32\ole32.dll) --------: Finished -mta --------: Start -aggregate 00002B01: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: CoCreateInstance({0CF32AA1-757 1-11D0-93C4-00AA00A3DDEA}, IUnknown) failed.  hr = 80040154 00000103: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: Breakpoint: 7C901230 (C:\WINDO WS\system32\ntdll.dll) --------: Finished -aggregate --------: Start -aggregate -mta --------: Finished -aggregate -mta --------: Start -usecf 0000270F: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA} (CO): IClassFactory::CreateInst ance(IUnknown) succeeded but *ppvObject == NULL: 0368B7A9 (C:\WINDOWS\system32\s ysmon.ocx) 00000103: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: Breakpoint: 7C901230 (C:\WINDO WS\system32\ntdll.dll) 0000270F: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -nologo -sdlout -usecf --------: Finished -usecf --------: Start -mta -usecf 0000270F: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA} (CO): IClassFactory::CreateInst ance(IUnknown) succeeded but *ppvObject == NULL: 77602102 (C:\WINDOWS\system32\o le32.dll) 00000103: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: Breakpoint: 7C901230 (C:\WINDO WS\system32\ntdll.dll) 0000270F: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -mta -nologo -sdlout -usecf --------: Finished -mta -usecf --------: Start -html --------: Finished -html --------: Start -webbrowser --------: Finished -webbrowser The C0000005 lines are exceptions caused by access violations.   This indicates the possibility of exploitable code execution and must be debugged.   Each exception-code output line from COMChk contains the command line that should be executed under a debugger.  The 103 lines indicate that the control contains a breakpoint instruction   which is not reasonable in shipping (non-debug) code.  This indicates a possibility that the control s code was not properly prepared for a release configuration. One point that needs to be stressed   the warnings reported at level 3 form a general test of critical errors that may be exploitable. COMChk has a wide variety of flags and parameters that can be used to customize its behavior. Developers and testers of controls should utilize that capability to test their controls more thoroughly.  The SDL requirements for tool use are a minimum, not a maximum. COMChk can be run on debug or release binaries.  COMChk has warnings indicating that the COM control is calling debug-only functionality (such as OutputDebugString or DbgBreak).  Frequently, the debug version of a control will output debug information that can be useful to a developer. Tool Usage: <command prompt:>COMChk <flags> Flag definitions: -addtodocument {after|before|no} The addtodocument switch requires the  html switch. This flag is used to customize the creation of the HTML document which will host the control. The default behavior is  before . If  before  is chosen, COMChk will create the node, add it to the document, and then set the CLSID. If  after  is specified, COMChk will create the node, set the CLSID, then add to the document. If   is specified, COMChk will create the node then set the CLSID. -aggregate The aggregate switch sets up a pOuter COM object and creates the test object as part of an aggregate. COMChk will test that the object obeys aggregation rules.  -bindtoobject The bindtoobject flag is currently unused. -bindtostorage The bindtostorage flag is currently unused. -checksafety The checksafety switch causes COMChk to validate the objects ability to set, clear, and return interface safety options using the IObjectSafety interface. -clsctx <clsctx> The clsctx parameter changes the class context that COMChk uses when it instantiates the object under test. The default value is CLSCTX_ALL. The caller can alter this by inputting one of  inproc inproc_handler inproc_server local_server remote_server server , or a numeric value as the parameter after the clsctx keyword. The clsctx parameter is not valid if the html switch is specified. -clsid {guid} The clsid switch can specify one or more clsid values to test. If the switch is specified as  clsid {01234567-0123-0123-0123-012345678901}, then COMChk will only test that object. If the switch is specified as  clsid @filename, then COMChk will read the clsid s to test from specified file (one clsid per line). If the switch is specified as  clsid *, then COMChk will test all objects whose clsid s have been registered. -createonly The createonly switch causes COMChk to only test object creation and release. Also, it will cause COMChk to output a success status line if the action succeeds (typically COMChk only outputs errors). -data {url} The data parameter causes COMChk to compose a data URL for incorporating the object into an html page. If you specify a data parameter, you must also specify the html switch. -dispatchmax <count> The dispatchmax parameter set the maximum permutation count per invocable method for IDispoatch testing. The default value is 1000. -freeco The freeco switch causes COMChk to attempt to free unused libraries at the end of a test. <Richard   what are the issues here?> -html The html switch causes COMChk to instantiate the control within an html document. The html switch requires either a clsid parameter or the moniker parameter. The clsctx parameter, urlmoniker switch, usecf switch, and useps switch are invalid with the html switch. The  -hookdll <path> The hookdll parameter causes COMChk to use the specified path for a DLL to load for a window hook. Default behavior is to hook windows with the code in the provided COMChkHk dll. This parameter only makes sense if nowindowhook is not specified. -iid {guid} The iid parameter specified what iids are used by COMChk when instantiating a control.  iid *  causes all well-known iids to be checked.  iid @filename  causes COMChk to read a list if iids from a file and test with each one.  -iid {guid}  causes COMChk to use the specified iid. The default behavior is to instantiate the control with IID_IUnknown. -invoke <exe-path> The invoke parameter causes COMChk to invoke a different exe than itself when spawning the process to do the testing of a single control. The default behavior is for COMChk to spawn another copy of COMChk. -invokeprefix <text> The invokeprefix parameter causes COMChk to prepend the text to the command line that is created to test a single control. The invokeprefix and invoke parameters can be combined to cause COMChk to run the control test under a debugger. For example,  comchk  invoke  c:\debuggers\ntsd invokeprefix  G comchk  will cause the test to be run under a standard user-mode debugger. <Richard?> -level <int> The level parameter adjusts the severity of warnings to output.  The default is 9 (all warnings).  SDL level is currently 3.  At this point, the following levels are defined.    test failures, uninitialized pointers to functions, debug code.  unitialized memory  errors in reference counting (can lead to leaks and/or execution of arbitrary memory)  generalized errors in the implementation of interface methods  incorrect return codes from method failure  informational outputs -moniker <moniker-format> The moniker parameter causes COMChk to format the clsid and progid of the control under test into a moniker. The format of the moniker is specified in this parameter. This moniker can then be used to test the control within a webpage. The mta switch causes COMChk to call CoInitializeEx as a multi-threaded app instead of as an apartment-threaded app. The html and the webbrowser switches imply mta automatically. -nocategorycheck The nocategorycheck switch causes COMChk to skip the testing of COM component categories for the control. -noexcept The noexcept switch causes COMChk to not catch and process vectored exceptions. -nofakedebugger COMChk sets a value in the PEB (Process Execution Block) that tricks DbgPrint APIs into believing that a user-mode debugger is present. This action allows COMChk to capture calls from the control to debug printing APIs, but may have unintended consequences.  The nofakedebugger switch suppresses this behavior. -nofree The nofree switch causes COMChk to skip attempts to free unused libraries. <Richard?> -noidispatch The noidispatch switch causes COMChk to skip the checks on the integrity of the implementation of the IDispatch interface. -noignorebreakpoint The noignorebreakpoint switch causes COMChk to catch a breakpoint exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignoreclrexcept The noignoreclrexcept switch causes COMChk to catch a CLR exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignorecppexcept The noignorecppexcept switch causes COMChk to catch a C++ exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignoredelayloadexcept The noignoredelayloadexcept switch causes COMChk to catch a delay-load exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignorefloatexcept The noignorefloatexcept switch causes COMChk to catch a floating-point exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignorexmlexcept The noignorexmlexcept switch causes COMChk to catch an XML exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -nopatchbreakpoint The nopatchbreakpoint switch stops COMChk from patching hard-coded breakpoints within the code under test. -nowindowhook The nowindowhook switch causes COMChk to not load a window hook (which is used to clear dialogs that the control may pop up during the processing of methods under test). -objref The objref switch causes COMChk to create and check the validity of an object reference moniker for the control. <Richard? More detail?> -out <filename> The out switch causes the standard output to be redirected to a file. -prefix <prefix> The prefix parameter specifies a string for COMChk to output at the start of every line of output.  -progid <progid> The progid switch can specify one or more ProgID values to test. If the switch is specified as  progid Foo.Bar.1, then COMChk will only test that object. If the switch is specified as  progid @filename, then COMChk will read the ProgID s to test from specified file (one ProgID per line). If the switch is specified as  progid *, then COMChk will test all objects whose ProgID s have been registered. -removeprivileges The removeprivileges switch causes COMChk to remove all advanced privileges from its token. -sad <filename> The SWI group has specified an XML format (SAD = Security Analysis Data) for integrating COMChk (and other security tool) output with the automated issue-tracking software used for SDL compliance monitoring.  The sad keyword will generate an XML file suitable for uploading.  Note that this file will contain all warnings from the COMChk run, regardless of severity level. -safeforinitializing The safeforinitializing switch causes COMChk to test the SafeForInitialization features of the control. -safeforscripting The safeforscripting switch causes COMChk to test the SafeForScripting features of the control. The sdl switch creates a simplified output to meet the needs of the SDL (Security Development Lifetime) requirements for COM object validation. COMChk will only output errors that are deemed by SWI to be  must-fix  problems.  -stdmodes The stdmodes switch will execute COMChk processing for default,  mta,  usecf, -mta  usecf, -html, and  webbrowser scenarios. Therefore none of those flags should be used in conjunction with the stdmodes flag. -silent The silent switch causes COMChk to suppress output regarding internal issues in COMChk. -timeout <seconds> The timeout parameter sets the length of time that COMChk will wait for a test process to end. Default is 30 seconds. A timeout of 0 sets an infinite wait. -tryqi The tryqi switch causes COMChk to probe the QueryInterface method of the control to see what interfaces it says it supports. The iid list specified by the iid switch is used for the test. COMChk will then output an information line for each interface that the control says it supports. This is useful for determining the attack surface of a control. -url <url> The url parameter causes COMChk to use a url other than the default  about:black  for the url to load for testing the control within a webpage. -urlmoniker The urlmoniker flag causes COMChk to test the MkParseDisplayNameEx API using the moniker created by use of the moniker parameter. -usecf The usecf switch causes COMChk to call CoGetClassObject and then IClassFactory::CreateInstance instead of CoCreateInstance in order to create the object. -useps The useps switch causes COMChk to use CoGetPSClsid to get the class that implements proxies and stubs for an interface and tests that proxy and stub with the associated IID. You cannot specify either clsid or progid when using this switch. This switch is used in conjunction with the iid parameter. -verbose The verbose switch causes COMChk to output extra information. It is currently not used. -webbrowser The webbrowser switch causes COMChk to instantiate the control within a WebBrowser object. The webbrowser switch implies the html switch and the mta switch. Diagnostic Outputs The main purpose of COMChk is to evaluate the function of COM controls. COMChk reports errors as well as information. Each output has a hexadecimal code.  Definitions of the hexadecimal code are in the following table. Match these codes to the output you receive to determine priority of your bugs.  The settings in comchk.ini control which warnings will be displayed by COMChk. The SDL column indicates the Secure Development Lifecycle requirements for each code.  means that fixing the bug is required to pass the SDL. Should  means that the bug should be fixed, but is not required to pass the SDL. Ignore  means that the message is occurring due to something other than a COM error. Contact SWI  messages occur when COMChk is exhibiting unexpected behavior. Report these messages to SWI to help improve future versions of COMChk. Text of message Notes OutputDebugString:  This doesn t indicate a problem by itself. In free/release builds there should be no use of OutputDebugString. In checked/debug builds these outputs should be reviewed   the control may be giving important information. RIP: Error=%08X, Type=%08X" If these occur these should be a problem to be reviewed. This is a mechanism present in earlier Windows releases. Breakpoint There should be no breakpoints. Likely causes are assertion failures which must be fixed. COMChk automatically skips over asserts. It also patches them to keep from seeing the same one again unless nopatchbreakpoint is used. DebugPrompt: %*S" Windows has a mechanism to prompt a debugger user. Typical use is to offer options on the option to take on assertion failure. There must be none of these. COMChk automatically answers with  Breakpoint This is similar to 0x0103.  Breakpoint This is similar to 0x0103. Ignore Window hook caught window  COMChk installs a window hook. This reports that a window creation was detected. The window handle and title are reported. After this is reported COMChk tries to dismiss the window by sending WM_SYSCOMMAND with SC_CLOSE, WM_CLOSE, WM_COMMAND with IDCANCEL, WM_COMMAND with IDNO, WM_COMMAND with IDCLOSE, WM_COMMAND with IDIGNORE, then WM_COMMAND with IDOK. If this fails the window won t be dismissed. Contact SWl CoCreateInstance(CLSID_ StdComponentCategoriesMgr) failed. This is an internal error to COMChk or a corruption of system state that results in this failure. Contact SWl ICatInformation::IsClassOfCategories failed.  This is an internal error to COMChk or a corruption of system state that results in this failure. Contact SWl ICatInformation::IsClassOfCategories returned %08X", hr) This is an internal error to COMChk or a corruption of system state that results in this failure. Should QueryInterface(%s) failure did not E_NOINTERFACE. hr = %08X QueryInterface is specified in MSDN to return E_NOINTERFACE on failure. QueryInterface(%s) failure did not set *ppvObject = NULL This must be fixed. QueryInterface is specified to set the output pointer to NULL on failure. Uninitialized function (or interface) pointers can lead to the execution or arbitrary code. IOleObject::SetClientSite failed. hr = %08X This may or may not be a problem. Some COM classes will fail if the site doesn t meet its expectations such as supporting particular interfaces. Typical reason for this is a class is intended to be hosted within a particular host. IObjectWithSite::SetSite failed. hr = %08X See 0x0501. Ignore IUnknown::Release returned %u This reports that the reference count returned by release was something other than 0 when 0 was expected. It is unreliable as an indicator of a problem. But it could indicate that your object is not handling reference counting correctly. Should IUnknown::Release changed ref count of punkOuter (%u) This is a problem with the implementation of aggregation and should be fixed. Ignore QueryInterface(%s) succeeded Ignore QueryInterface(%s) succeeded: %s Ignore QueryInterface(%s) succeeded The above are reported only when the  createonly option is used. These are reporting success not failure. Should MkParseDisplayName consumed only part of OBJREF This reports that parsing the moniker from CreateObjrefMoniker was not wholly consumed. This is an indication of a problem though it may be in COM. Ignore IMoniker::Release returned %u This is the similar to 0x0601 except applies to the moniker from the CreateObjrefMoniker.  Should MkParseDisplayName(\"%s\") failed. hr = %08X This reports that parsing the moniker from CreateObjrefMoniker failed. This is an indication of a problem though it may be in COM. Should IMoniker::GetDisplayName failed. hr = %08X This reports that the moniker from the CreateObjrefMoniker failed to return a display name. This is an indication of a problem though it may be in COM. Should IBindCtx::Release returned %u This reports that the binding context from CreateBindCtx did not return a ref count of 0 when released. This could be an issue with a class holding a reference it shouldn Ignore IMoniker::Release returned %u This reports that the moniker from CreateObjrefMoniker did not return a ref count of 0 when release. I do not know if this is a reliable indication of a problem. Should IObjectSafety::GetInterfaceSafetyOptions (%s): Undefined options supported. Supported=%08X, Enabled=%08X This reports that GetInterfaceSafetyOptions claims to support flags other than INTERFACESAFE_FOR_UNTRUSTED_CALLER, INTERFACESAFE_FOR_UNTRUSTED_DATA, INTERFACE_USES_DISPEX, or INTERFACE_USES_SECURITY_MANAGER. As no other flags are defined this must be fixed. IObjectSafety::GetInterfaceSafetyOptions (%s): Unsupported options enabled. Supported=%08X, Enabled=%08X This is similar to the previous failure but applies to the enabled options instead of the supported options. It must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) did not return E_NOINTERFACE. hr = %08X This reports that the method failed but failed for a reason other than the interface being unsupported. This must be investigated. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) succeeded when GetInterfaceSafetyOptions failed This reports that SetInterfaceSafetyOptions succeed when called with an IID that failed when passed to GetInterfaceSafetyOptions. If IID restrictions are implemented that must be the same for both methods. IObjectSafety::GetInterfaceSafetyOptions (%s) dwSupported changed from %08X to %08X This reports a problem when calling GetInterfaceSafetyOptions, passing the returned values to SetInterfaceSafetyOptions, then calling GetInterfaceSafetyOptions again and getting different results. This must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) dwEnabled changed from %08X to %08X This is the same as the previous except for dwEnabled instead of dwSupported. Should IObjectSafety::GetInterfaceSafetyOptions (%s) failed. hr = %08X This is reporting that GetInterfaceSafetyOptions failed for an IID for which SetInterfaceSafetyOptions succeeded. This should not happen and must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) failed. hr = %08X This is reporting that SetInterfaceSafetyOptions failed for an IID for which GetInterfaceSafetyOptions succeed and indicated some options are supported. This should not happen and must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, 00000000) succeeded This is reporting that SetInterfaceSafetyOptions succeeded when attempting to set unsupported options. This should fail returning E_FAIL. This must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, 00000000) did not return E_FAIL. hr = %08X This is reporting that SetInterfaceSafetyOptions failed when attempting to set unsupported options but did not return E_FAIL. This must be fixed. IObjectSafety::GetInterfaceSafetyOptions(%s) dwSupported changed from %08X to %08X This is reporting that with the sequence GetInterfaceSafetyOptions, SetInterfaceSafetyOptions, GetInterfaceSafetyOptions that the supported options changed between the two Get calls. This must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions(%s, %08X, 00000000) set dwEnabled to %08X This is reporting that SetInterfaceSafetyOptions setting the enabled options to 0 succeeded but did not set the options to 0. If SetInterfaceSafetyOptions can t support the request it should fail it. This must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) failed. hr = %08X This is similar to 0x0B04. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, 00000000) failed. hr = %08X This is reporting that SetInterfaceSafetyOptions setting the enabled options to 0 failed. This may or may not be an error. COMChk has yet to encounter this problem. When implementations are fixed this attempt should return E_ACCESSDENIED and COMChk will be changed to filter for this error. IObjectSafety::GetInterfaceSafetyOptions (%s) dwSupported changed from %08X to %08X This is similar to 0x0B08. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) set dwEnabled to %08X This is reporting that SetInterfaceSafetyOptions with the return value of GetInterfaceSafetyOptions succeeded and changed the enabled options. This must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) failed. hr = %08X This is similar to 0x0B04. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) failed. hr = %08X This is reporting that SetInterfaceSafetyOptions with the return value of GetInterfaceSafetyOptions failed. This must be fixed. "EXCEPINFO::pfnDeferredFillIn %p is uninitialized This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION but did not initialize the pfnDeferredFillIn of the EXCEPINFO structure. This must be fixed.  Uninitialized function pointers can lead to code execution. EXCEPINFO::pfnDeferredFillIn %p is not valid code pointer This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set the pfnDeferredFillIn to an invalid function pointer. Should EXCEPINFO::pfnDeferredFillIn failed. hr = %08X This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and the function in pfnDeferredFillIn returned a failure. Should EXCEPINFO::wCode == %04X This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set wCode to something other than 0. This field is obsolete for Win32. The scode field must be used. Should EXCEPINFO::wReserved == %04X This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set wReserved to something other than 0. This must be fixed. Should EXCEPINFO::pvReserved == %p This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set pvReserved to something other than 0. This must be fixed. Should EXCEPINFO::scode == 0 This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set scode is set to 0. This must be set to the real error. Should IConnectionPointContainer:: EnumConnectionPoints failed. hr = %08X This is reporting that the method failed. We allow E_NOTIMPL and don t report it. Anything else is questionable and should be fixed. Should IConnectionPointContainer:: FindConnectionPoint(IUnknown) succeeded This is reporting that FindConnectionPoint succeeded when requested to find an IUnknown connection. IUnknown is not valid here and this should fail. This must be fixed. Should IConnectionPointContainer:: FindConnectionPoint(IUnknown) failure did not return CONNECT_E_NOCONNECTION. hr = %08X The correct error for failing to support an interface is CONNECT_E_NOCONNECTION. If another error is returned, and due to the interface not being supported, it must be fixed. IConnectionPointContainer:: FindConnectionPoint(IUnknown) failure did not set *ppcp = NULL The returned interface pointer was not set to NULL on failure. This must be fixed.  Uninitialized interface pointers can lead to arbitrary code execution. Ignore IConnectionPointContainer:: FindConnectionPoint(IDispatch) succeeded This is reporting that FindConnectionPoint succeeded when requested to find an IDispatch connection. IDispatch should not be valid but I have found a couple of implementations that support this plus the specific interface. I do not understand why they do so but was reluctant to require it to be changed without understanding app compat for published interfaces. This should be fixed. Should IConnectionPointContainer:: FindConnectionPoint(IDispatch) failure did not return CONNECT_E_NOCONNECTION. hr = %08X The correct error for failing to support an interface is CONNECT_E_NOCONNECTION. If another error is returned, and due to the interface not being supported, it must be fixed. IConnectionPointContainer:: FindConnectionPoint(IDispatch) failure did not set *ppcp = NULL The returned interface pointer was not set to NULL on failure. This must be fixed. Uninitialized interface pointers can lead to code execution. Should IConnectionPointContainer:: FindConnectionPoint(iidUndefined) succeeded This is reporting that FindConnectionPoint succeeded when requested to find an undefined interface connection. This is not valid here and this should fail. This must be fixed. Should IConnectionPointContainer:: FindConnectionPoint(iidUndefined) failure did not return CONNECT_E_NOCONNECTION. hr = %08X The correct error for failing to support an interface is CONNECT_E_NOCONNECTION. If another error is returned, and due to the interface not being supported, it must be fixed. IConnectionPointContainer:: FindConnectionPoint(iidUndefined) failure did not set *ppcp = NULL The returned interface pointer was not set to NULL on failure. This must be fixed.  Uninitialized interface pointers can lead to arbitrary code execution. Should ITypeInfo::GetTypeAttr failed. hr = %08X This is a required method of the interface. Should IID = %s. ITypeInfo::GetTypeAttr returned typekind %u The type of the returned interface is other than TKIND_DISPATCH or TKIND_INTERFACE. This is likely a bug in the implementation of IDispatch::GetTypeInfo. Should IID = %s. ITypeInfo::GetTypeAttr returned cImplTypes = %u The interface derives from zero or two or more other interfaces. This should never happen. Should IID = %s. ITypeInfo::GetFuncDesc(%u) failed. hr = %08X This should never fail. IID = %s. IDispatch::Invoke(%d, \"%s\") did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant.  The method should call VariantInit() to initialize the variant to an empty state. Ignore IID = %s. IDispatch::Invoke(%d, \"%s\") failed. hr = %08X The method failed with an error other than E_INVALIDARG. The method name is displayed if available. Should IDispatch::GetTypeInfoCount failure did not return E_NOTIMPL. hr = %08X Wrong error code. Should IDispatch::GetTypeInfoCount returned ctinfo of %u The count should be 0 or 1. Should IDispatch::GetTypeInfo(%u) succeeded GetTypeInfo succeeded for an index that is greater than the maximum allowed. Should IDispatch::GetTypeInfo(%u) failure did not return DISP_E_BADINDEX. hr = %08X Wrong error code. Should IDispatch::GetTypeInfo(0) succeeded but GetTypeInfoCount returned E_NOTIMPL The two methods should return values that make sense together. Should IDispatch::GetTypeInfo(0) did not return E_NOTIMPL when GetTypeInfoCount did. hr = %08X" GetTypeInfoCount is not implemented, and returned E_NOTIMPL. GetTypeInfo must also return E_NOTIMPL. Either both must be implemented or neither. Should IDispatch::Invoke(0x73529A4B) succeeded IDispatch:Invoke passed a bogus DISPID succeeded. It must not. IDispatch::Invoke(0x73529A4B) did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(0x73529A4B) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X IDispatch:Invoke passed a bogus DISPID failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. IDispatch::Invoke(%s) did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(%s) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X This is reporting that when IDispatch::Invoke was passed one of the well known negative DISPIDs that it failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. IDispatch::Invoke(%d) did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant. The method should call VariantInit() to initialize the variant to an empty state. Ignore IDispatch::Invoke(%d) failed. hr = %08X Should IEnumConnectionPoints::Next(1, &picp, NULL) failed. hr = %08X Should IEnumConnectionPoints::Next(1, &picp, NULL) returned NULL Should IEnumConnectionPoints::Reset failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Skip(1) failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Reset failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Next failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Next returned S_FALSE w/celtFetched = %u Should IEnumConnectionPoints::Next succeeded w/celtFetched = %u Should IEnumConnectionPoints::Next returned duplicate connection point A loop is not a good idea. Should IEnumConnectionPoints::Clone failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Clone returned NULL This method is required by the interface. Should IEnumConnections::Next(1, &cd, NULL) failed. hr = %08X This method is required by the interface. Should IEnumConnections::Reset failed. hr = %08X This method is required by the interface. Should IEnumConnections::Skip(1) failed. hr = %08X This method is required by the interface. Should IEnumConnections::Reset failed. hr = %08X" Should IEnumConnections::Next failed. hr = %08X Should IEnumConnections::Next returned S_FALSE w/celtFetched = %u Should IEnumConnections::Next succeeded w/celtFetched = %u Should IEnumConnections::Clone failed. hr = %08X Should IEnumConnections::Clone returned NULL Should IEnumMoniker::Next(1, &pmk, NULL) failed. hr = %08X Should IEnumMoniker::Reset failed. hr = %08X Should IEnumMoniker::Skip(1) failed. hr = %08X Should IEnumMoniker::Reset failed. hr = %08X Should IEnumMoniker::Next failed. hr = %08X Should IEnumMoniker::Next returned S_FALSE w/celtFetched = %u Should IEnumMoniker::Next succeeded w/celtFetched = %u Should IEnumMoniker::Clone failed. hr = %08X This method is required by the interface. Should IEnumMoniker::Clone returned NULL" Should IEnumUnknown::Next(1, &punk, NULL) failed. hr = %08X Should IEnumUnknown::Reset failed. hr = %08X Should IEnumUnknown::Skip(1) failed. hr = %08X Should IEnumUnknown::Reset failed. hr = %08X Should IEnumUnknown::Next failed. hr = %08X Should IEnumUnknown::Next returned S_FALSE w/celtFetched = %u Should IEnumUnknown::Next succeeded w/celtFetched = %u Should IEnumUnknown::Clone failed. hr = %08X Should IEnumUnknown::Clone returned NULL Should IEnumVARIANT::Next(1, &var, NULL) failed. hr = %08X Enumeration failed. Should IEnumVARIANT::Reset failed. hr = %08X Should IEnumVARIANT::Skip(1) failed. hr = %08X Should IEnumVARIANT::Reset failed. hr = %08X Should IEnumVARIANT::Next failed. hr = %08X Should IEnumVARIANT::Next returned S_FALSE w/celtFetched = %u Should IEnumVARIANT::Next succeeded w/celtFetched = %u Should IEnumVARIANT::Clone failed. hr = %08X Should IEnumVARIANT::Clone returned NULL Should IObjectSafety::GetInterfaceSafetyOptions(iidUndefined) succeeded" Should IObjectSafety::GetInterfaceSafetyOptions(iidUndefined) failure did not return E_NOINTERFACE. hr = %08X Should IObjectSafety::GetInterfaceSafetyOptions(%s) failure changed between no site and NULL site Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwSupported for no site %08X != NULL site %08X Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwEnabled for no site %08X != NULL site %08X Should SetSite did not change ref count of IOleClientSite" Should IObjectSafety::GetInterfaceSafetyOptions(%s) failure changed between no site and dumb site Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwSupported for no site %08X != dumb site %08X Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwEnabled for no site %08X != dumb site %08X Should Neither IOleObject nor IObjectWithSite supported. For a control that implements IObjectSafety. Should SetSite(NULL) did not restore ref count of IOleClientSite Should GetInterfaceSafetyOptions: dwSupported=%08X, dwEnabled=%08X, %s Should IOleCommandTarget::QueryStatus(NULL) return %08X QueryStatus should work. Should IOleCommandTarget::QueryStatus(NULL) CMDID == 0 supported QueryStatus should not report that an undefined command is supported. Should IOleCommandTarget::Exec(NULL, 0) succeeded An unknown command should not successfully execute. Should IOleCommandTarget::Exec(NULL, 0) failure did not return OLECMDERR_E_NOTSUPPORTED. hr = %08X Wrong error code returned. Should IOleCommandTarget::Exec(NULL, OLECMDID_REFRESH) failure did not return OLECMDERR_E_NOTSUPPORTED. hr = %08X Wrong error code returned. Should IOleCommandTarget::Exec(NULL, OLECMDID_STOP) failure did not return OLECMDERR_E_NOTSUPPORTED. hr = %08X Wrong error code. Should IOleCommandTarget::QueryStatus(iidUndefined) succeeded This should not succeed for an undefined iid. Should IOleCommandTarget::QueryStatus(iidUndefined) failure did not return OLECMDERR_E_UNKNOWNGROUP. hr = %08X Wrong error code. Should IOleCommandTarget::Exec(iidUndefined) succeeded Should not succeed for an undefined iid. Should IOleCommandTarget::Exec(iidUndefined) failure did not return OLECMDERR_E_UNKNOWNGROUP. hr = %08X" Wrong error code. Should IOleControl::GetControlInfo failure did not return E_NOTIMPL. hr = %08X The control is returning the wrong error code. Should IOleControl::OnMnemonic succeeded after GetControlInfo failure Should IOleControl::OnMnemonic() failure did not return E_NOTIMPL after GetControlInfo failure. hr = %08X Wrong error code. Should IOleControl::GetControlInfo returned CONTROLINFO::cb == %u The byte count in the returned structure is not correct. Should IOleControl::GetControlInfo returned CONTROLINFO::dwFlags == %08X" Invalid bits are set in the flag field in the returned structure. Should IOleControl::GetControlInfo ci.hAccel size (%d) != ci.cAccel (%u) Accelerator table size is incorrect. Should IOleControl::GetControlInfo rgaccel[%u].fVirt == %08X fVirt field of an accelerator table entry is incorrect. Should IOleControl::OnMnemonic() succeeded w/cAccel == 0 Should IOleControl::OnMnemonic() failure did not return E_NOTIMPL w/cAccel == 0. hr = %08X Wrong error code. Should IOleControl::OnAmbientPropertyChange (DISPID_VALUE) did not return S_OK. hr = %08X The method must always return S_OK.  Even when it fails.  No, I am not making that up.  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/html/9ca43723-a14e-4f03-8eec-e10ab34ecb4d.asp Should IOleControl::OnAmbientPropertyChange(DISPID_UNKNOWN) did not return S_OK. hr = %08X See above.  Who designed this? Should IOleControl::FreezeEvents(TRUE) did not return S_OK. hr = %08X Should IOleControl::FreezeEvents(FALSE) did not return S_OK. hr = %08X Ignore IPersist::GetClassID failed. hr = %08X Ignore IPersist::GetClassID returned %s Should IPersistPropertyBag w/o IPersist IPersistPropertyBag derives from IPersist. Ignore IPersistPropertyBag::GetClassID failed. hr = %08X Ignore IPersistPropertyBag::GetClassID returned %s ClassID differs from ID of control. Should SetSite did not change ref count of IOleClientSite SetSite adds a reference. Should IPersistPropertyBag::InitNew failed. hr = %08X Should IPersistPropertyBag::Save failed. hr = %08X Should IPersistPropertyBag::Load failed. hr = %08X Should SetSite(NULL) did not restore ref count of IOleClientSite This indicates a reference counting problem. Should IPersistPropertyBag::Load held reference to property bag (%u) This indicates a refcounting bug. Should IProvideClassInfo::GetClassInfo failed. hr = %08X This method must succeed. Should IProvideClassInfo2 w/o IProvideClassInfo IProvodeClassInfo2 derives from IProvideClassInfo. Should IProvideClassInfo2 w/o IConnectionPointContainer" IProvodeClassInfo2 derives from IConnectionPointContainer. Should IProvideClassInfo2::GetClassInfo failed. hr = %08X This method must succeed. Should IProvideClassInfo2::GetGUID failed. hr = %08X This method must succeed. Should IConnectionPointContainer:: FindConnectionPoint of IProvideClassInfo2::GetGUID failed. hr = %08X This method must succeed.  Should IProvideMultipleClassInfo w/o IProvideClassInfo2 IProvideMultipleClassInfo derives from IProvideClassInfo2. Should IProvideMultipleClassInfo w/o IProvideClassInfo" IProvideMultipleClassInfo derives from IProvideClassInfo. Should IProvideMultipleClassInfo::GetClassInfo failed. hr = %08X This method must work if you support the interface. Should IProvideMultipleClassInfo::GetGUID failed. hr = %08X This method must work if you support the interface. Should IProvideMultipleClassInfo::GetGUID w/o IConnectionPointContainer Control must support IConnectionPointContainer. Should IConnectionPointContainer:: FindConnectionPoint of IProvideMultipleClassInfo::GetGUID failed. hr = %08X Requirement of the interface. Should IProvideMultipleClassInfo:: GetMultiTypeInfoCount failed. hr = %08X Method should succeed. Should IProvideMultipleClassInfo:: GetInfoOfIndex(%u) failed. hr = %08X Method should succeed for each index. Should QueryInterface of IProvideMultipleClassInfo::GetInfoOfIndex iidPrimary failed. hr = %08X Interface should be supported. Should IProvideMultipleClassInfo::GetInfoOfIndex iidSource w/o IConnectionPointContainer" IConnectionPointContainer must be supported. Should IConnectionPointContainer::FindConnectionPoint of IProvideMultipleClassInfo::GetInfoOfIndex iidSource failed. hr = %08X This method should succeed. Should ISpecifyPropertyPages::GetPages failed. hr = %08X A control that implements the ISpecificPropertyPages interface must handle this method. Should ISpecifyPropertyPages::GetPages returned cElems == 0 Should ISpecifyPropertyPages::GetPages CLSID[%u] %s not registered A COM control for a page is not registered. Should CoGetClassObject(%s) from ISpecifyPropertyPages::GetPages failed. hr = %08X A COM control for a page could not be instantiated. Should %s(%s) returned punkOuter", szMethod, szClsid) The control is not properly dealing with aggregation. Should %s(%s) changed ref count of punkOuter (%u)", szMethod, szClsid, pouter->m_cref The control is not properly dealing with aggregation. Should AddRef changed ref count of punkOuter (%u -> %u)", crefSave, pouter->m_cref) The control is not properly dealing with aggregation. Should Release changed ref count of punkOuter (%u -> %u)", crefSave, pouter->m_cref) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) failed. hr = %08X This should always work. Should QueryInterface(IUnknown) changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) does not match original IUnknown A control must always return the same interface pointer for IUnknown. Should QueryInterface(IUnknown) failed. hr = %08X This should always work. Should QueryInterface(IUnknown) changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) does not match original IUnknown A control must always return the same interface pointer for IUnknown. Should Release changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should Release changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) failed. hr = %08X A control must always correctly respond to QueryInterface for IID_IUnknown. Should QueryInterface(IUnknown) does not match original IUnknown" A control must always return the same interface pointer for IUnknown. Ignore AddRef doesn't increment reference count by one (%u -> %u) Should QueryInterface(IUnknown) failed. hr = %08X A control must always correctly respond to QueryInterface for IID_IUnknown. Should QueryInterface(IUnknown) does not match original IUnknown A control must always return the same interface pointer for IUnknown. QueryInterface( iidUndefined) succeeded The control must not promise to fulfill the contract of an interface that does not exist.  This is tantamount to handing out random function pointers. Ignore IUnknown::Release returned %u Contact SWl IHTMLDocument2:: get_body failed. hr = %08X Contact SWl IHTMLDocument2:: get_body returned NULL Contact SWl IHTMLElement::QueryInterface (IHTMLDOMNode) failed. hr = %08X Contact SWl fIHTMLElement::QueryInterface( IHTMLDOMNode) failed. hr = %08X Contact SWl IHTMLDOMNode::appendChild failed. hr = %08X Contact SWl IHTMLDOMNode::appendChild returned NULL Contact SWl IHTMLDocument2::get_readyState failed. hr = %08X Test failure. Contact SWl IHTMLDocument2::get_readyState returned NULL Contact SWl SysAllocString(\"object\") failed Contact SWl IHTMLDocument2::createElement failed. hr = %08X Contact SWl IHTMLDocument2::createElement returned NULL Contact SWl IHTMLElement::QueryInterface ( IHTMLObjectElement2) failed. hr = %08X Contact SWl SysAllocString(\"%s\") failed Ignore IHTMLObjectElement2::put_data failed. hr = %08X Contact SWl SysAllocString(\"%s\") failed Ignore IHTMLObjectElement2::put_classid failed. hr = %08X Contact SWl IHTMLElement::QueryInterface( IHTMLObjectElement) failed. hr = %08X Contact SWl IHTMLObjectElement::get_readyState failed. hr = %08X Ignore IHTMLObjectElement::get_object failed. hr = %08X Contact SWl IHTMLObjectElement::get_object returned NULL Contact SWl CoCreateInstance (CLSID_HTMLDocument) failed. hr = %08X Test failure Contact SWl IHTMLDocument2::QueryInterface(IPersistMoniker) failed. hr = %08X Test failure Should CreateURLMonikerEx failed. hr = %08X API failed with URL supplied by the tester. Should IPersistHistory w/o IPersist IPersistHistory derives from IPersist Should IPersistHistory::GetClassID failed.  Hr = %08X Should IPersistHistory::GetClassID returned %s GetClassID reruened a different class ID Should SetSite did not change ref count of IOleClientSite Should IPersistHistory::GetPositionCookie failed.  hr = %08X Contact SWI CreateStreamOnHGlobal failed.  hr = %08X Test failure Contact SWI IStream::SetSize(0) failed.  hr = %08X Should IPersistHistory::Save held reference to stream (%u) Should IPersistHistory::SaveHistory failed.  hr = %08X Contact SWI IStream::Seek(0, STREAM_SEEK_SET) failed.  hr = %08X Should IPersistHistory::LoadHistory held reference to stream (%u) Should IPersistHistory::Load failed.  hr = %08X Should IBindCtx::Release returned %u The control incremented the ref count of the bind context and never released it. Should IStream::Release returned %u The control incremented the ref count of the stream and never released it. Should IPersistHistory::SetPositionCookie failed.  hr = %08X Should SetSite(NULL) did not restore ref count of IOleClientSite Contact SWl CoCreateInstance(CLSID_WebBrowser) failed. hr = %08X Test failure. Contact SWl SysAllocString(\"%s\") failed Test failure. Contact SWI IWebBrowser2::Navigate failed. hr = %08X Test failure. Contact SWl IWebBrowser2::get_Document failed. hr = %08X Test failure. Contact SWl IWebBrowser2::get_Document returned NULL Test failure. Contact SWl IDispatch::QueryInterface (IHTMLDocument2) failed. hr = %08X Test failure. Should MkParseDisplayNameEx(\"%s\") failed. hr = %08X COMChk was unable to make a moniker from the data supplied by the tester. Should MkParseDisplayName(\"%s\") failed. hr = %08X COMChk was unable to make a moniker from the data supplied by the tester. Should MkParseDisplayName[Ex](\"%s\") consumed only %u characters API did not work as expected using the data supplied by the tester. Ignore IBindCtx::Release returned %u Ignore IClassFactory::LockServer(TRUE) failed. hr = %08X Should Class factory supports IClassFactory2 but not IClassFactory Since IClassFactory2 derives from IClassFactory, this makes no sense.  Change the control to support the IClassFactory interface. Ignore IClassFactory2::LockServer(TRUE) failed. hr = %08X Should IClassFactory2::GetLicInfo failed. hr = %08X This method should be supported. Should IClassFactory2::LICINFO::cb = %u", li.cbLicInfo GetLicInfo returned an invalid size field in the LICINFO structure. Should IClassFactory2::LICINFO::fRuntimeKeyAvail = %d GetLicInfo returned an invalid value for fRuntimeKeyAvail. Should IClassFactory2::LICINFO::fLicVerified = %d GetLicInfo returned an invalid value. IClassFactory2::RequestLicKey failure did not set *pbstrKey = NULL Uninitialized function pointer can lead to arbitrary code execution. Should IClassFactory2::RequestLicKey failed. hr = %08X Should not fail. Should IClassFactory2::RequestLicKey failure did not return CLASS_E_NOTLICENSED w/!fRuntimeKeyAvail. hr = %08X Wrong error code. Should Class factory supports IClassFactory3 but not IClassFactory IClassFactory3 derives from IClassFactory.  Fix the control to support the base interface. Ignore IClassFactory3::LockServer(TRUE) failed. hr = %08X Should "%s(%s) failed. hr = %08X", szMethod, SzIidDisplay(), hr) Method creation instance in IClassFactory3 failed. %s(%s) failure did not set *ppvObject = NULL", szMethod, SzIidDisplay()) Uninitialized function pointer can lead to arbitrary code execution. %s(%s) succeeded but *ppvObject == NULL", szMethod, SzIidDisplay()) If the creation succeeds, an interface pointer must be returned. Ignore IClassFactory3::LockServer(FALSE) failed. hr = %08X Ignore IClassFactory2::LockServer(FALSE) failed. hr = %08X Ignore IClassFactory::LockServer(FALSE) failed. hr = %08X Ignore Skipped Ignore %s(%s) succeeded", szMethod, SzIidDisplay()) Ignore IParseDisplayName::ParseDisplayName failed. hr = %08X IParseDisplayName::ParseDisplayName failure did not set *ppmk = NULL Uninitialized function pointer can lead to arbitrary code execution. Ignore IParseDisplayName::ParseDisplayName succeeded. Ignore IBindCtx::Release returned %u", cref Should IPSFactoryBuffer::CreateProxy failed. hr = %08X CreateProxy should succeed. IPSFactoryBuffer::CreateProxy failure did not set *ppProxy = NULL Uninitialized function pointer can lead to arbitrary code execution. IPSFactoryBuffer::CreateProxy failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution. Ignore IPSFactoryBuffer::CreateProxy succeeded. CLSID = %s", szClsid IPSFactoryBuffer::CreateProxy succeeded but *ppProxy == NULL Success must set an interface pointer. IPSFactoryBuffer::CreateProxy succeeded but *ppv == NULL Success must set an interface pointer. Should CoGetClassObject(IUnknown) failed. hr = %08X CoGetClassObject should not fail. Should Neither IClassFactory*, IParseDisplayName, nor IPSFactoryBuffer supported One of these interfaces should be supported. Ignore IUnknown::Release returned %u Should CoCreateInstance(%s, %s) failed. hr = %08X CoCreateInstance should not fail. CoCreateInstance(%s, %s) failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution. Should CoCreateInstance(%s, %s) succeeded but *ppvObject == NULL Success must set an interface pointer. Ignore Skipped Ignore CoCreateInstance(%s, %s) succeeded Ignore UnhandledExceptionFilter changed" Ignore IMoniker::BindToObject failed. hr = %08X IMoniker::BindToObject failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution.  Ignore IMoniker::BindToStorage failed. hr = %08X IMoniker::BindToStorage failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution. Ignore IMoniker::Enum failed. hr = %08X IMoniker::Enum failure did not set *ppenum = NULL Uninitialized function pointer can lead to arbitrary code execution. Should MkParseDisplayName consumed only part of OBJREF Ignore IMoniker::Release returned %u Should MkParseDisplayName(\"%s\") failed. hr = %08X Should ITypeInfo::GetTypeAttr failed. hr = %08X This is a required method of the interface. Should IID = %s. ITypeInfo::GetTypeAttr returned typekind %u The type of the returned interface is other than TKIND_DISPATCH or TKIND_INTERFACE. This is likely a bug in the implementation of IDispatch::GetTypeInfo. Should IID = %s. ITypeInfo::GetTypeAttr returned cImplTypes = %u The interface derives from zero or two or more other interfaces. This should never happen. Should IID = %s. ITypeInfo::GetFuncDesc(%u) failed. hr = %08X This should never fail. IID = %s. IDispatchEx::InvokeEx(%d, \"%s\") did not initialize varResult The method succeeded but did not initialize varResult. Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Ignore IID = %s. IDispatch::InvokeEx(%d, \"%s\") failed. hr = %08X The method failed with an error other than E_INVALIDARG. The method name is displayed if available. Should IDispatchEx w/o IDispatch IDispatchEx is implemented but IDispatch is not. When IDispatchEx is supported IDispatch must be supported. Should IDispatch::GetTypeInfoCount failure did not return E_NOTIMPL. hr = %08X Should IDispatch::GetTypeInfoCount returned ctinfo of %u GetTypeInfoCount is specified to return either 0 or 1   nothing else.  http://msdn2.microsoft.com/en-us/library/ms221674.aspx Should IDispatch::GetTypeInfo(%u) succeeded GetTypeInfo was called with an illegal index, and yet the call succeeded. Should IDispatch::GetTypeInfo(%u) failure did not return DISP_E_BADINDEX. hr = %08X The wrong error code was returned. Should IDispatch::GetTypeInfo(0) succeeded but GetTypeInfoCount returned E_NOTIMPL Methods are returning inconsistent information. Should IDispatch::GetTypeInfo(0) did not return E_NOTIMPL when GetTypeInfoCount did. hr = %08X" GetTypeInfoCount is not implemented, and returned E_NOTIMPL. GetTypeInfo must also return E_NOTIMPL. Either both must be implemented or neither. Should IDispatch::Invoke(0x73529A4B) succeeded IDispatch:Invoke passed a bogus DISPID succeeded. It must not. IDispatchEx::InvokeEx(0x73529A4B) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(0x73529A4B) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X IDispatch:Invoke passed a bogus DISPID failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. IDispatchEx::InvokeEx(%s) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(%s) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X This is reporting that when IDispatch::Invoke was passed one of the well known negative DISPIDs that it failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. Should IDispatchEx::GetNextDispID(%d) failure did not return E_NOTIMPL. Returned%08X Bad return code. Should IDispatchEx::GetMemberName(%d) failed. hr = %08X You should be able to retrieve the names of all supported members. IDispatchEx::InvokeEx(%d) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatchEx::InvokeEx(%d \"%s\") returned DISP_E_MEMBERNOTFOUND Invoke says that the member does not exist, but the TypeInfo information says it does.  Should IDispatchEx::InvokeEx(%d \"%s\") failed. hr = %08X Bad return code. Should IDispatchEx::GetMemberName(%d) failed. hr = %08X You should be able to retrieve the names of all supported members. IDispatchEx::InvokeEx(%d) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatchEx::InvokeEx(%d \"%s\") failed. hr = %08X Bad return code. Should IPersistStream w/o IPersist IPersistStream derives from IPersist. Ignore IPersistStream::GetClassID failed.  hr = %08X Method is required by interface. Ignore IPersistStream::GetClassID returned %s Method returned different classid than the classid of the control. Should SetSite did not change ref count of IOleClientSite SetSite should increment the reference count.  This indicates a potential refcounting bug. Should IPersistStream::GetSizeMax failed.  hr = %08X Method should succeed. Should IPersistStream::GetSizeMax returned cb = %I64u Method returned a size greater than the maximum value for a signed integer. Contact SWI GlobalAlloc failed.  GetLastError(%I64u) = %u Contact SWI CreateStreamOnHGlobal failed.  hr = %08X Contact SWI IStream::SetSize(0) failed.  hr = %08X Should IPersistStream::Save failed.  hr = %08X Should work. Contact SWI IStream::Seek(0, STREAM_SEEK_SET) failed.  hr = %08X Should IPersistStream::Load failed.  hr = %08X Should work. Should SetSite(NULL) did not restore ref count of IOleClientSite Releasing the site should decrement the ref count. Should IPersistStreamInit w/o IPersist IPersistStreamInit derives from IPersist. Ignore IPersistStreamInit::GetClassID failed.  hr = %08X Method is required by interface. Ignore IPersistStreamInit::GetClassID returned %s Method returned different classid than the classid of the control. Should SetSite did not change ref count of IOleClientSite SetSite should increment the reference count.  This indicates a potential refcounting bug. Should IPersistStreamInit::InitNew failed.  hr = %08X Method should succeed. Should IPersistStreamInit::GetSizeMax failed.  hr = %08X Method should succeed. Should IPersistStreamInit::GetSizeMax returned cb = %I64u Method returned a size greater than the maximum value for a signed integer. Contact SWI GlobalAlloc failed.  GetLastError(%I64u) = %u Contact SWI CreateStreamOnHGlobal failed.  hr = %08X Contact SWI IStream::SetSize(0) failed.  hr = %08X Should IPersistStreamInit::Save failed.  hr = %08X Should work. Contact SWI IStream::Seek(0, STREAM_SEEK_SET) failed.  hr = %08X Should IPersistStreamInit::Load failed.  hr = %08X Should work. Should SetSite(NULL) did not restore ref count of IOleClientSite Releasing the site should decrement the ref count. Contact SWl Argument limit of 256 exceeded (%u) gdzwx gd)[b gdZ/' gdZ/' gdZ/' gdZ/' gdZ/'
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\ComChk\1.2\x64\comchk.ini ===
[FailureGroups]
Bad Code=0
Confirmation=1
Debug Code=1
Information=0
Reference Count=0
SDL Safety=1
Test Failure=1
Tidiness=0
Uninitialized Pointer=1
Uninitialized Memory=0

[Bad Code]
0x0501=1
0x0502=1
0x0602=1
0x0901=1
0x0903=1
0x0904=1
0x0A01=1
0x0B01=1
0x0B03=1
0x0B04=1
0x0B05=1
0x0B06=1
0x0B07=1
0x0B09=1
0x0B0A=1
0x0B0B=1
0x0B0D=1
0x0B0E=1
0x0B0F=1
0x0C03=1
0x0C07=1
0x0D01=1
0x0D02=1
0x0D08=1
0x0E01=1
0x0E02=1
0x0E03=1
0x0E04=1
0x0F02=1
0x0F03=1
0x0F05=1
0x0F07=1
0x1001=1
0x1002=1
0x1003=1
0x1004=1
0x1005=1
0x1006=1
0x1007=1
0x1008=1
0x1009=1
0x100A=1
0x100B=1
0x1101=1
0x1102=1
0x1103=1
0x1104=1
0x1105=1
0x1106=1
0x1107=1
0x1108=1
0x1109=1
0x1201=1
0x1202=1
0x1203=1
0x1204=1
0x1205=1
0x1206=1
0x1207=1
0x1208=1
0x1209=1
0x1301=1
0x1302=1
0x1303=1
0x1304=1
0x1305=1
0x1306=1
0x1307=1
0x1308=1
0x1309=1
0x1401=1
0x1402=1
0x1403=1
0x1404=1
0x1405=1
0x1406=1
0x1407=1
0x1408=1
0x1409=1
0x1501=1
0x1503=1
0x1504=1
0x1505=1
0x1506=1
0x1507=1
0x1508=1
0x1509=1
0x150A=1
0x150B=1
0x150C=1
0x1601=1
0x1602=1
0x1603=1
0x1607=1
0x1609=1
0x1702=1
0x1703=1
0x1704=1
0x1705=1
0x1706=1
0x1707=1
0x1708=1
0x1709=1
0x170A=1
0x170B=1
0x170C=1
0x170D=1
0x170E=1
0x1901=1
0x1905=1
0x1906=1
0x1907=1
0x1909=1
0x1A01=1
0x1B01=1
0x1B02=1
0x1B03=1
0x1B04=1
0x1B05=1
0x1C01=1
0x1C02=1
0x1C03=1
0x1C04=1
0x1C05=1
0x1C06=1
0x1C07=1
0x1C08=1
0x1C09=1
0x1C0A=1
0x1C0B=1
0x1D01=1
0x1D02=1
0x1D03=1
0x1D04=1
0x1E01=1
0x1E02=1
0x1E03=1
0x1E04=1
0x1E05=1
0x1E06=1
0x1E07=1
0x1E08=1
0x1E09=1
0x1E0A=1
0x1E0B=1
0x1E0C=1
0x1F01=1
0x1F02=1
0x1F04=1
0x1F05=1
0x2303=1
0x2304=1
0x2401=1
0x2402=1
0x2403=1
0x2404=1
0x2405=1
0x2408=1
0x2603=1
0x2702=1
0x2704=1
0x2705=1
0x2706=1
0x2707=1
0x2709=1
0x270B=1
0x270D=1
0x2901=1
0x2905=1
0x2906=1
0x2A01=1
0x2A02=1
0x2B03=1
0x2D07=1
0x2D09=1
0x2E01=1
0x2E02=1
0x2E03=1
0x2E04=1
0x2F01=1
0x2F02=1
0x2F03=1
0x2F04=1
0x2F05=1
0x2F06=1
0x2F07=1
0x2F08=1
0x2F0E=1
0x2F12=1
0x3001=1
0x3002=1
0x3003=1
0x3004=1
0x3005=1
0x3006=1
0x300A=1
0x300C=1
0x300D=1
0x3101=1
0x3102=1
0x3103=1
0x3104=1
0x3105=1
0x3106=1
0x3107=1
0x310B=1
0x310D=1
0x310E=1

[Confirmation]
0x2714=1
0x2B05=1

[Debug Code]
0x0101=1
0x0102=1
0x0103=1
0x0104=1
0x0105=1
0x0106=1

[Information]
0x0201=1
0x0601=1
0x0701=1
0x0801=1
0x0902=1
0x0906=1
0x0D05=1
0x0E06=1
0x1801=1
0x1802=1
0x1902=1
0x1903=1
0x1F03=1
0x2001=1
0x2208=1
0x220A=1
0x220D=1
0x2602=1
0x2604=1
0x2701=1
0x2703=1
0x270C=1
0x2710=1
0x2711=1
0x2712=1
0x2713=1
0x2801=1
0x2803=1
0x2804=1
0x2904=1
0x2A03=1
0x2B04=1
0x2D01=1
0x2D03=1
0x2D05=1
0x2D08=1
0x2E06=1
0x2F10=1
0x2F11=1
0x2F14=1

[Really Bad Code]


[Reference Count]
0x1904=1
0x0905=1
0x1908=1

[SDL Safety]
0x0A02=1
0x0B02=1
0x0B08=1
0x0B0C=1

[Test Failure]
0x0301=1
0x0302=1
0x0303=1
0x2101=1
0x2102=1
0x2103=1
0x2104=1
0x2105=1
0x2106=1
0x2201=1
0x2202=1
0x2203=1
0x2204=1
0x2205=1
0x2206=1
0x2207=1
0x2209=1
0x220B=1
0x220C=1
0x220E=1
0x2301=1
0x2302=1
0x2406=1
0x2407=1
0x240A=1
0x240B=1
0x240C=1
0x240D=1
0x240E=1
0x240F=1
0x2410=1
0x2501=1
0x2502=1
0x2503=1
0x2504=1
0x2505=1
0x2506=1
0x2601=1
0x2B01=1
0x2C01=1
0x3007=1
0x3008=1
0x3009=1
0x300B=1
0x3108=1
0x3109=1
0x310A=1
0x310C=1

[Tidiness]
0x0401=1
0x0A03=1
0x0D03=1
0x0D06=1
0x0D09=1
0x0F01=1
0x0F04=1
0x0F06=1
0x0F09=1
0x0F0B=1
0x0F0D=1
0x1502=1
0x1604=1
0x1605=1
0x1606=1
0x1608=1
0x160A=1
0x1701=1
0x270A=1
0x2F0A=1
0x2F0C=1
0x2F0D=1

[Uninitialized Pointer]
0x0402=1
0x0C01=1
0x0C02=1
0x0D04=1
0x0D07=1
0x0D0A=1
0x0E05=1
0x0F08=1
0x0F0A=1
0x0F0C=1
0x1F06=1
0x2708=1
0x270E=1
0x270F=1
0x2802=1
0x2902=1
0x2903=1
0x2B02=1
0x2D02=1
0x2D04=1
0x2D06=1
0x2E05=1
0x2F09=1
0x2F0B=1
0x2F0F=1
0x2F13=1

[Uninitialized Memory]
0x0C04=1
0x0C05=1
0x0C06=1
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\ComChk\1.2\x86\comchk.ini ===
[FailureGroups]
Bad Code=0
Confirmation=1
Debug Code=1
Information=0
Reference Count=0
SDL Safety=1
Test Failure=1
Tidiness=0
Uninitialized Pointer=1
Uninitialized Memory=0

[Bad Code]
0x0501=1
0x0502=1
0x0602=1
0x0901=1
0x0903=1
0x0904=1
0x0A01=1
0x0B01=1
0x0B03=1
0x0B04=1
0x0B05=1
0x0B06=1
0x0B07=1
0x0B09=1
0x0B0A=1
0x0B0B=1
0x0B0D=1
0x0B0E=1
0x0B0F=1
0x0C03=1
0x0C07=1
0x0D01=1
0x0D02=1
0x0D08=1
0x0E01=1
0x0E02=1
0x0E03=1
0x0E04=1
0x0F02=1
0x0F03=1
0x0F05=1
0x0F07=1
0x1001=1
0x1002=1
0x1003=1
0x1004=1
0x1005=1
0x1006=1
0x1007=1
0x1008=1
0x1009=1
0x100A=1
0x100B=1
0x1101=1
0x1102=1
0x1103=1
0x1104=1
0x1105=1
0x1106=1
0x1107=1
0x1108=1
0x1109=1
0x1201=1
0x1202=1
0x1203=1
0x1204=1
0x1205=1
0x1206=1
0x1207=1
0x1208=1
0x1209=1
0x1301=1
0x1302=1
0x1303=1
0x1304=1
0x1305=1
0x1306=1
0x1307=1
0x1308=1
0x1309=1
0x1401=1
0x1402=1
0x1403=1
0x1404=1
0x1405=1
0x1406=1
0x1407=1
0x1408=1
0x1409=1
0x1501=1
0x1503=1
0x1504=1
0x1505=1
0x1506=1
0x1507=1
0x1508=1
0x1509=1
0x150A=1
0x150B=1
0x150C=1
0x1601=1
0x1602=1
0x1603=1
0x1607=1
0x1609=1
0x1702=1
0x1703=1
0x1704=1
0x1705=1
0x1706=1
0x1707=1
0x1708=1
0x1709=1
0x170A=1
0x170B=1
0x170C=1
0x170D=1
0x170E=1
0x1901=1
0x1905=1
0x1906=1
0x1907=1
0x1909=1
0x1A01=1
0x1B01=1
0x1B02=1
0x1B03=1
0x1B04=1
0x1B05=1
0x1C01=1
0x1C02=1
0x1C03=1
0x1C04=1
0x1C05=1
0x1C06=1
0x1C07=1
0x1C08=1
0x1C09=1
0x1C0A=1
0x1C0B=1
0x1D01=1
0x1D02=1
0x1D03=1
0x1D04=1
0x1E01=1
0x1E02=1
0x1E03=1
0x1E04=1
0x1E05=1
0x1E06=1
0x1E07=1
0x1E08=1
0x1E09=1
0x1E0A=1
0x1E0B=1
0x1E0C=1
0x1F01=1
0x1F02=1
0x1F04=1
0x1F05=1
0x2303=1
0x2304=1
0x2401=1
0x2402=1
0x2403=1
0x2404=1
0x2405=1
0x2408=1
0x2603=1
0x2702=1
0x2704=1
0x2705=1
0x2706=1
0x2707=1
0x2709=1
0x270B=1
0x270D=1
0x2901=1
0x2905=1
0x2906=1
0x2A01=1
0x2A02=1
0x2B03=1
0x2D07=1
0x2D09=1
0x2E01=1
0x2E02=1
0x2E03=1
0x2E04=1
0x2F01=1
0x2F02=1
0x2F03=1
0x2F04=1
0x2F05=1
0x2F06=1
0x2F07=1
0x2F08=1
0x2F0E=1
0x2F12=1
0x3001=1
0x3002=1
0x3003=1
0x3004=1
0x3005=1
0x3006=1
0x300A=1
0x300C=1
0x300D=1
0x3101=1
0x3102=1
0x3103=1
0x3104=1
0x3105=1
0x3106=1
0x3107=1
0x310B=1
0x310D=1
0x310E=1

[Confirmation]
0x2714=1
0x2B05=1

[Debug Code]
0x0101=1
0x0102=1
0x0103=1
0x0104=1
0x0105=1
0x0106=1

[Information]
0x0201=1
0x0601=1
0x0701=1
0x0801=1
0x0902=1
0x0906=1
0x0D05=1
0x0E06=1
0x1801=1
0x1802=1
0x1902=1
0x1903=1
0x1F03=1
0x2001=1
0x2208=1
0x220A=1
0x220D=1
0x2602=1
0x2604=1
0x2701=1
0x2703=1
0x270C=1
0x2710=1
0x2711=1
0x2712=1
0x2713=1
0x2801=1
0x2803=1
0x2804=1
0x2904=1
0x2A03=1
0x2B04=1
0x2D01=1
0x2D03=1
0x2D05=1
0x2D08=1
0x2E06=1
0x2F10=1
0x2F11=1
0x2F14=1

[Really Bad Code]


[Reference Count]
0x1904=1
0x0905=1
0x1908=1

[SDL Safety]
0x0A02=1
0x0B02=1
0x0B08=1
0x0B0C=1

[Test Failure]
0x0301=1
0x0302=1
0x0303=1
0x2101=1
0x2102=1
0x2103=1
0x2104=1
0x2105=1
0x2106=1
0x2201=1
0x2202=1
0x2203=1
0x2204=1
0x2205=1
0x2206=1
0x2207=1
0x2209=1
0x220B=1
0x220C=1
0x220E=1
0x2301=1
0x2302=1
0x2406=1
0x2407=1
0x240A=1
0x240B=1
0x240C=1
0x240D=1
0x240E=1
0x240F=1
0x2410=1
0x2501=1
0x2502=1
0x2503=1
0x2504=1
0x2505=1
0x2506=1
0x2601=1
0x2B01=1
0x2C01=1
0x3007=1
0x3008=1
0x3009=1
0x300B=1
0x3108=1
0x3109=1
0x310A=1
0x310C=1

[Tidiness]
0x0401=1
0x0A03=1
0x0D03=1
0x0D06=1
0x0D09=1
0x0F01=1
0x0F04=1
0x0F06=1
0x0F09=1
0x0F0B=1
0x0F0D=1
0x1502=1
0x1604=1
0x1605=1
0x1606=1
0x1608=1
0x160A=1
0x1701=1
0x270A=1
0x2F0A=1
0x2F0C=1
0x2F0D=1

[Uninitialized Pointer]
0x0402=1
0x0C01=1
0x0C02=1
0x0D04=1
0x0D07=1
0x0D0A=1
0x0E05=1
0x0F08=1
0x0F0A=1
0x0F0C=1
0x1F06=1
0x2708=1
0x270E=1
0x270F=1
0x2802=1
0x2902=1
0x2903=1
0x2B02=1
0x2D02=1
0x2D04=1
0x2D06=1
0x2E05=1
0x2F09=1
0x2F0B=1
0x2F0F=1
0x2F13=1

[Uninitialized Memory]
0x0C04=1
0x0C05=1
0x0C06=1
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\ComChk\1.2\x86\comchk.doc ===
Microsoft Office Word 97-2003 Document MSWordDoc Word.Document.8Microsoft Corporation Testing COM Objects With COMChk Title _PID_HLINKSTesting COM Objects With COMChk Fritz Sands Normal.dotm Fritz Sands Microsoft Office Word ZCRa2[Content_Types].xml _rels/.rels theme/theme/themeManager.xml theme/theme/theme1.xml  tom' "|Lc" f8Q8$ &l&v08_ KCScptS;4D 0d)mpG p_?cJ theme/theme/_rels/themeManager.xml.rels K(M&$R(.1 [Content_Types].xmlPK _rels/.relsPK theme/theme/themeManager.xmlPK theme/theme/theme1.xmlPK theme/theme/_rels/themeManager.xml.relsPK <?xml version="1.0" encoding="UTF-8" standalone="no"?> <a:clrMap xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/3/main" bg1="lt1" tx1="dk1" bg2="lt2" tx2="dk2" accent1="accent1" accent2="accent2" accent3="accent3" accent4="accent4" accent5="accent5" accent6="accent6" hlink="hlink" folHlink="folHlink"/> urn:schemas-microsoft-com:office:smarttags PersonNamebjbjP~P~ Testing COM Objects with COMChk v 1.2 Fritz Sands & Richard Shupak 27 July 2006 Introduction to the Problem COM is a core Microsoft technology that is used extensively in Windows and almost all other Microsoft products in order to provide an extremely flexible way to promote code re-use and general-purpose communication between components.  COM objects are registered in the system and, when instantiated through COM APIs, provide interface pointers that may be used by COM containers (and COM containers are also, typically, also COM objects that give interface pointers to themselves). In theory (and according to the specifications), COM objects should be safe to instantiate, interrogate, and release by any COM container application. In theory, a COM container should be able to use whatever means it wants to use to find COM objects to investigate. In practice, COM objects are frequently tested with only one specific COM container. If the object works in that environment, it gets shipped. But shipping a COM object typically involves registering it in the global environment. Once registered, a COM object can be instantiated by any COM container using standard APIs, such as CoCreateInstance and CoGetClassObject. This is the important and key point: COM objects are typically tested with a minimal set of COM containers (usually just one) yet they are exposed to all COM containers once installed. Code reuse is an integral part of COM design. Since COM technology is explicitly designed for a maximum degree of interoperability, any COM control shipped by Microsoft should behave properly (as defined by the documentation of various COM interfaces in MSDN documentation) when instantiated and interrogated by any COM container.  In the 2005 calendar year, we opened many MSRC issues because COM objects did not correctly follow COM rules. These COM objects were never intended to be instantiated by Internet Explorer, and therefore were never tested with IE. Nonetheless, when a webpage referenced them with an OBJECT tag, these COM objects were loaded by IE and failed in ways that were exploitable by malicious web script. We have identified a half-dozen or so COM containers shipped by Microsoft that can be scripted to instantiate arbitrary COM objects. However, we have not yet identified all means by which containers can be induced to instantiate arbitrary COM objects. Because of this, all Microsoft COM objects must behave responsibly within a well-written container. Additional changes will be made to Microsoft COM containers to restrict the objects they can instantiate. Even so, we cannot control the ISV COM containers that may be installed on a system, and we cannot allow a badly-written Microsoft COM control to compromise a system through those other containers. Because of this issue, Microsoft has added COM object validation to the Security Development Lifecycle (SDL) requirements for shipping.  COMChk has been written to address the need for such validation. COMChk COMChk is a command-line tool that instantiates COM controls one at a time and perform a series of standard tests on them. The validation rules that are tested by COMChk will be expanded as we determine that more tests are useful.  COMChk can also be used to instantiate a control and interrogate it for all standard interfaces, thus giving a notion of the attack surface of a control. COMChk can also be used to test the proxy and stub implementation for an interface. COMChk has a rich set of flags and parameters that can be used to customize its use for various scenarios.  A complete list of flags and their actions is located in the  Tool Usage  section of this document. For purposes of SDL requirement compliance COMChk should be run under the Application Verifier (see   HYPERLINK "http://team/sites/verifier/appverifier/default.aspx"  http://team/sites/verifier/appverifier/default.aspx  for installation instructions) and with the  sdl flag set. sdl flag has three effects on COMChk.  It guarantees that one extra line will be output for each control that is tested (even if the control generates no warnings), so that there is a record that the control has been tested.  The  sdl flag changes the output level to 3, so that only sdl-critical warnings will be output to the console.  And the  sdl flag implicitly sets the  stdmodes flag.  The  stdmodes flag causes COMChk to process the control(s) in various combinations of standard invocation, multi-thread apartment,  aggregated COM object, invoked through its class factory, invoked in an HTML page, and invoked using the web browser control.  This set of invocations will generate duplicate warnings for the control, but will also expose bad behavior that does not manifest itself in all scenarios. The set of COMChk warnings that are output from a run of the tool is controlled by the warning level set by the command line (default is  all warnngs  unless -sdl is specified).  Warnings are divided into categories of severity and only warnings from the selected severity level are output to the console.   This document contains a list of the warnings that COMChk outputs and descriptions of the cause of the warnings and effects of the problems under the heading  Diagnostic Outputs COMChk can process COM controls referenced either by clsid values or by ProgID values.  A clsid is a guid.  You can find the clsid for a COM control in the coclass line of the idl file that describes the control.  A ProgID is a human-readable name for the control (e.g. Agent.Control.2 for the Microsoft Agent control) and is registered with the control.  COMChk can be called either with a single clsid or progid on the command line, or with a filename in the command line (by using the command line switched  clsid @filename or  progid @filename), where the referenced text file contains a newline-delniated list of progid or classid values.  Note that all COM controls have clsid values.  Only some COM controls have ProgID values.  If a COM control does not need to be instantiated by name then it does not need a ProgID and, in fact, should not be registered with a ProgID   in order to reduce the potential attack surface.  Example of SDL usage and output: The Security Development Lifecycle requires validation that all COM objects pass validation with COMChk. Here are two examples of output from COMChk runs.  Both COM controls have problems that must be fixed. C:\comchk>comchk -clsid {0A9007AA-4076-11D3-8789-0000F8105754} -sdl Microsoft (R) COM Checker 1.00.0007 (May  3 2006 14:17:10) Copyright (C) Microsoft Corporation. All rights reserved. Microsoft Confidential - For Internal Use Only --------: Start default parameters 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished default parameters --------: Start -mta 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished -mta --------: Start -aggregate 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 00402500 (C:\comchk\comchk.exe) --------: Finished -aggregate --------: Start -aggregate -mta 00002B05: {0A9007AA-4076-11D3-8789-0000F8105754}: CoCreateInstance({0A9007AA-407 6-11D3-8789-0000F8105754}, IUnknown) succeeded 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 00402500 (C:\comchk\comchk.exe) --------: Finished -aggregate -mta --------: Start -usecf 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(iidUndefin ed) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Fil es\Microsoft Shared\Information Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(IClassFact ory2) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common F iles\Microsoft Shared\Information Retrieval\msitss.dll) 00002714: {0A9007AA-4076-11D3-8789-0000F8105754}: IClassFactory::CreateInstance( IUnknown) succeeded: 75D87641 (C:\Program Files\Common Files\Microsoft Shared\In formation Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished -usecf --------: Start -mta -usecf 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(iidUndefin ed) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Fil es\Microsoft Shared\Information Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754} (CO): QueryInterface(IClassFact ory2) failure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common F iles\Microsoft Shared\Information Retrieval\msitss.dll) 00002714: {0A9007AA-4076-11D3-8789-0000F8105754}: IClassFactory::CreateInstance( IUnknown) succeeded: 75D87641 (C:\Program Files\Common Files\Microsoft Shared\In formation Retrieval\msitss.dll) 00000402: {0A9007AA-4076-11D3-8789-0000F8105754}: QueryInterface(iidUndefined) f ailure did not set *ppvObject = NULL: 75D87233 (C:\Program Files\Common Files\Mi crosoft Shared\Information Retrieval\msitss.dll) --------: Finished -mta -usecf --------: Start -html --------: Finished -html --------: Start -webbrowser --------: Finished -webbrowser Note that the run found two problems in the control (the 0402 line for iidUndefined and also for IClassFactory2).  The 2B05 and 2714 output lines merely show that the control was tested.   The warnings are duplicated because the control is tested in 8 different usage scenarios.   Since COM specifications require that the control respond to QueryInterface by always setting the ppvObject to either null or a valid interface pointer, this error could lead a container to execute arbitrary code if it assumes that the interface pointer is valid.    HYPERLINK "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/html/54d5ff80-18db-43f2-b636-f93ac053146d.asp"  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/html/54d5ff80-18db-43f2-b636-f93ac053146d.asp  describes the requirement that QueryInterface initialize the interface pointer before returning to the caller. s the output from another control: Microsoft (R) COM Checker 1.00.0007 (May 10 2006 15:24:13) Copyright (C) Microsoft Corporation. All rights reserved. Microsoft Confidential - For Internal Use Only --------: Start default parameters C0000005: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -nologo -sdlout: 7752D130 (C:\WINDOWS\system32\ole32.dll) --------: Finished default parameters --------: Start -mta C0000005: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -mta -nologo -sdlout: 7752D130 (C:\WINDOWS\system32\ole32.dll) --------: Finished -mta --------: Start -aggregate 00002B01: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: CoCreateInstance({0CF32AA1-757 1-11D0-93C4-00AA00A3DDEA}, IUnknown) failed.  hr = 80040154 00000103: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: Breakpoint: 7C901230 (C:\WINDO WS\system32\ntdll.dll) --------: Finished -aggregate --------: Start -aggregate -mta --------: Finished -aggregate -mta --------: Start -usecf 0000270F: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA} (CO): IClassFactory::CreateInst ance(IUnknown) succeeded but *ppvObject == NULL: 0368B7A9 (C:\WINDOWS\system32\s ysmon.ocx) 00000103: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: Breakpoint: 7C901230 (C:\WINDO WS\system32\ntdll.dll) 0000270F: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -nologo -sdlout -usecf --------: Finished -usecf --------: Start -mta -usecf 0000270F: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA} (CO): IClassFactory::CreateInst ance(IUnknown) succeeded but *ppvObject == NULL: 77602102 (C:\WINDOWS\system32\o le32.dll) 00000103: {0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}: Breakpoint: 7C901230 (C:\WINDO WS\system32\ntdll.dll) 0000270F: "C:\comchk\comchk.exe" -clsid "{0CF32AA1-7571-11D0-93C4-00AA00A3DDEA}"  -mta -nologo -sdlout -usecf --------: Finished -mta -usecf --------: Start -html --------: Finished -html --------: Start -webbrowser --------: Finished -webbrowser The C0000005 lines are exceptions caused by access violations.   This indicates the possibility of exploitable code execution and must be debugged.   Each exception-code output line from COMChk contains the command line that should be executed under a debugger.  The 103 lines indicate that the control contains a breakpoint instruction   which is not reasonable in shipping (non-debug) code.  This indicates a possibility that the control s code was not properly prepared for a release configuration. One point that needs to be stressed   the warnings reported at level 3 form a general test of critical errors that may be exploitable. COMChk has a wide variety of flags and parameters that can be used to customize its behavior. Developers and testers of controls should utilize that capability to test their controls more thoroughly.  The SDL requirements for tool use are a minimum, not a maximum. COMChk can be run on debug or release binaries.  COMChk has warnings indicating that the COM control is calling debug-only functionality (such as OutputDebugString or DbgBreak).  Frequently, the debug version of a control will output debug information that can be useful to a developer. Tool Usage: <command prompt:>COMChk <flags> Flag definitions: -addtodocument {after|before|no} The addtodocument switch requires the  html switch. This flag is used to customize the creation of the HTML document which will host the control. The default behavior is  before . If  before  is chosen, COMChk will create the node, add it to the document, and then set the CLSID. If  after  is specified, COMChk will create the node, set the CLSID, then add to the document. If   is specified, COMChk will create the node then set the CLSID. -aggregate The aggregate switch sets up a pOuter COM object and creates the test object as part of an aggregate. COMChk will test that the object obeys aggregation rules.  -bindtoobject The bindtoobject flag is currently unused. -bindtostorage The bindtostorage flag is currently unused. -checksafety The checksafety switch causes COMChk to validate the objects ability to set, clear, and return interface safety options using the IObjectSafety interface. -clsctx <clsctx> The clsctx parameter changes the class context that COMChk uses when it instantiates the object under test. The default value is CLSCTX_ALL. The caller can alter this by inputting one of  inproc inproc_handler inproc_server local_server remote_server server , or a numeric value as the parameter after the clsctx keyword. The clsctx parameter is not valid if the html switch is specified. -clsid {guid} The clsid switch can specify one or more clsid values to test. If the switch is specified as  clsid {01234567-0123-0123-0123-012345678901}, then COMChk will only test that object. If the switch is specified as  clsid @filename, then COMChk will read the clsid s to test from specified file (one clsid per line). If the switch is specified as  clsid *, then COMChk will test all objects whose clsid s have been registered. -createonly The createonly switch causes COMChk to only test object creation and release. Also, it will cause COMChk to output a success status line if the action succeeds (typically COMChk only outputs errors). -data {url} The data parameter causes COMChk to compose a data URL for incorporating the object into an html page. If you specify a data parameter, you must also specify the html switch. -dispatchmax <count> The dispatchmax parameter set the maximum permutation count per invocable method for IDispoatch testing. The default value is 1000. -freeco The freeco switch causes COMChk to attempt to free unused libraries at the end of a test. <Richard   what are the issues here?> -html The html switch causes COMChk to instantiate the control within an html document. The html switch requires either a clsid parameter or the moniker parameter. The clsctx parameter, urlmoniker switch, usecf switch, and useps switch are invalid with the html switch. The  -hookdll <path> The hookdll parameter causes COMChk to use the specified path for a DLL to load for a window hook. Default behavior is to hook windows with the code in the provided COMChkHk dll. This parameter only makes sense if nowindowhook is not specified. -iid {guid} The iid parameter specified what iids are used by COMChk when instantiating a control.  iid *  causes all well-known iids to be checked.  iid @filename  causes COMChk to read a list if iids from a file and test with each one.  -iid {guid}  causes COMChk to use the specified iid. The default behavior is to instantiate the control with IID_IUnknown. -invoke <exe-path> The invoke parameter causes COMChk to invoke a different exe than itself when spawning the process to do the testing of a single control. The default behavior is for COMChk to spawn another copy of COMChk. -invokeprefix <text> The invokeprefix parameter causes COMChk to prepend the text to the command line that is created to test a single control. The invokeprefix and invoke parameters can be combined to cause COMChk to run the control test under a debugger. For example,  comchk  invoke  c:\debuggers\ntsd invokeprefix  G comchk  will cause the test to be run under a standard user-mode debugger. <Richard?> -level <int> The level parameter adjusts the severity of warnings to output.  The default is 9 (all warnings).  SDL level is currently 3.  At this point, the following levels are defined.    test failures, uninitialized pointers to functions, debug code.  unitialized memory  errors in reference counting (can lead to leaks and/or execution of arbitrary memory)  generalized errors in the implementation of interface methods  incorrect return codes from method failure  informational outputs -moniker <moniker-format> The moniker parameter causes COMChk to format the clsid and progid of the control under test into a moniker. The format of the moniker is specified in this parameter. This moniker can then be used to test the control within a webpage. The mta switch causes COMChk to call CoInitializeEx as a multi-threaded app instead of as an apartment-threaded app. The html and the webbrowser switches imply mta automatically. -nocategorycheck The nocategorycheck switch causes COMChk to skip the testing of COM component categories for the control. -noexcept The noexcept switch causes COMChk to not catch and process vectored exceptions. -nofakedebugger COMChk sets a value in the PEB (Process Execution Block) that tricks DbgPrint APIs into believing that a user-mode debugger is present. This action allows COMChk to capture calls from the control to debug printing APIs, but may have unintended consequences.  The nofakedebugger switch suppresses this behavior. -nofree The nofree switch causes COMChk to skip attempts to free unused libraries. <Richard?> -noidispatch The noidispatch switch causes COMChk to skip the checks on the integrity of the implementation of the IDispatch interface. -noignorebreakpoint The noignorebreakpoint switch causes COMChk to catch a breakpoint exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignoreclrexcept The noignoreclrexcept switch causes COMChk to catch a CLR exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignorecppexcept The noignorecppexcept switch causes COMChk to catch a C++ exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignoredelayloadexcept The noignoredelayloadexcept switch causes COMChk to catch a delay-load exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignorefloatexcept The noignorefloatexcept switch causes COMChk to catch a floating-point exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -noignorexmlexcept The noignorexmlexcept switch causes COMChk to catch an XML exception before the code under test has a chance to process the exception. The default behavior allows the code under test to catch and process the exception. -nopatchbreakpoint The nopatchbreakpoint switch stops COMChk from patching hard-coded breakpoints within the code under test. -nowindowhook The nowindowhook switch causes COMChk to not load a window hook (which is used to clear dialogs that the control may pop up during the processing of methods under test). -objref The objref switch causes COMChk to create and check the validity of an object reference moniker for the control. <Richard? More detail?> -out <filename> The out switch causes the standard output to be redirected to a file. -prefix <prefix> The prefix parameter specifies a string for COMChk to output at the start of every line of output.  -progid <progid> The progid switch can specify one or more ProgID values to test. If the switch is specified as  progid Foo.Bar.1, then COMChk will only test that object. If the switch is specified as  progid @filename, then COMChk will read the ProgID s to test from specified file (one ProgID per line). If the switch is specified as  progid *, then COMChk will test all objects whose ProgID s have been registered. -removeprivileges The removeprivileges switch causes COMChk to remove all advanced privileges from its token. -sad <filename> The SWI group has specified an XML format (SAD = Security Analysis Data) for integrating COMChk (and other security tool) output with the automated issue-tracking software used for SDL compliance monitoring.  The sad keyword will generate an XML file suitable for uploading.  Note that this file will contain all warnings from the COMChk run, regardless of severity level. -safeforinitializing The safeforinitializing switch causes COMChk to test the SafeForInitialization features of the control. -safeforscripting The safeforscripting switch causes COMChk to test the SafeForScripting features of the control. The sdl switch creates a simplified output to meet the needs of the SDL (Security Development Lifetime) requirements for COM object validation. COMChk will only output errors that are deemed by SWI to be  must-fix  problems.  -stdmodes The stdmodes switch will execute COMChk processing for default,  mta,  usecf, -mta  usecf, -html, and  webbrowser scenarios. Therefore none of those flags should be used in conjunction with the stdmodes flag. -silent The silent switch causes COMChk to suppress output regarding internal issues in COMChk. -timeout <seconds> The timeout parameter sets the length of time that COMChk will wait for a test process to end. Default is 30 seconds. A timeout of 0 sets an infinite wait. -tryqi The tryqi switch causes COMChk to probe the QueryInterface method of the control to see what interfaces it says it supports. The iid list specified by the iid switch is used for the test. COMChk will then output an information line for each interface that the control says it supports. This is useful for determining the attack surface of a control. -url <url> The url parameter causes COMChk to use a url other than the default  about:black  for the url to load for testing the control within a webpage. -urlmoniker The urlmoniker flag causes COMChk to test the MkParseDisplayNameEx API using the moniker created by use of the moniker parameter. -usecf The usecf switch causes COMChk to call CoGetClassObject and then IClassFactory::CreateInstance instead of CoCreateInstance in order to create the object. -useps The useps switch causes COMChk to use CoGetPSClsid to get the class that implements proxies and stubs for an interface and tests that proxy and stub with the associated IID. You cannot specify either clsid or progid when using this switch. This switch is used in conjunction with the iid parameter. -verbose The verbose switch causes COMChk to output extra information. It is currently not used. -webbrowser The webbrowser switch causes COMChk to instantiate the control within a WebBrowser object. The webbrowser switch implies the html switch and the mta switch. Diagnostic Outputs The main purpose of COMChk is to evaluate the function of COM controls. COMChk reports errors as well as information. Each output has a hexadecimal code.  Definitions of the hexadecimal code are in the following table. Match these codes to the output you receive to determine priority of your bugs.  The settings in comchk.ini control which warnings will be displayed by COMChk. The SDL column indicates the Secure Development Lifecycle requirements for each code.  means that fixing the bug is required to pass the SDL. Should  means that the bug should be fixed, but is not required to pass the SDL. Ignore  means that the message is occurring due to something other than a COM error. Contact SWI  messages occur when COMChk is exhibiting unexpected behavior. Report these messages to SWI to help improve future versions of COMChk. Text of message Notes OutputDebugString:  This doesn t indicate a problem by itself. In free/release builds there should be no use of OutputDebugString. In checked/debug builds these outputs should be reviewed   the control may be giving important information. RIP: Error=%08X, Type=%08X" If these occur these should be a problem to be reviewed. This is a mechanism present in earlier Windows releases. Breakpoint There should be no breakpoints. Likely causes are assertion failures which must be fixed. COMChk automatically skips over asserts. It also patches them to keep from seeing the same one again unless nopatchbreakpoint is used. DebugPrompt: %*S" Windows has a mechanism to prompt a debugger user. Typical use is to offer options on the option to take on assertion failure. There must be none of these. COMChk automatically answers with  Breakpoint This is similar to 0x0103.  Breakpoint This is similar to 0x0103. Ignore Window hook caught window  COMChk installs a window hook. This reports that a window creation was detected. The window handle and title are reported. After this is reported COMChk tries to dismiss the window by sending WM_SYSCOMMAND with SC_CLOSE, WM_CLOSE, WM_COMMAND with IDCANCEL, WM_COMMAND with IDNO, WM_COMMAND with IDCLOSE, WM_COMMAND with IDIGNORE, then WM_COMMAND with IDOK. If this fails the window won t be dismissed. Contact SWl CoCreateInstance(CLSID_ StdComponentCategoriesMgr) failed. This is an internal error to COMChk or a corruption of system state that results in this failure. Contact SWl ICatInformation::IsClassOfCategories failed.  This is an internal error to COMChk or a corruption of system state that results in this failure. Contact SWl ICatInformation::IsClassOfCategories returned %08X", hr) This is an internal error to COMChk or a corruption of system state that results in this failure. Should QueryInterface(%s) failure did not E_NOINTERFACE. hr = %08X QueryInterface is specified in MSDN to return E_NOINTERFACE on failure. QueryInterface(%s) failure did not set *ppvObject = NULL This must be fixed. QueryInterface is specified to set the output pointer to NULL on failure. Uninitialized function (or interface) pointers can lead to the execution or arbitrary code. IOleObject::SetClientSite failed. hr = %08X This may or may not be a problem. Some COM classes will fail if the site doesn t meet its expectations such as supporting particular interfaces. Typical reason for this is a class is intended to be hosted within a particular host. IObjectWithSite::SetSite failed. hr = %08X See 0x0501. Ignore IUnknown::Release returned %u This reports that the reference count returned by release was something other than 0 when 0 was expected. It is unreliable as an indicator of a problem. But it could indicate that your object is not handling reference counting correctly. Should IUnknown::Release changed ref count of punkOuter (%u) This is a problem with the implementation of aggregation and should be fixed. Ignore QueryInterface(%s) succeeded Ignore QueryInterface(%s) succeeded: %s Ignore QueryInterface(%s) succeeded The above are reported only when the  createonly option is used. These are reporting success not failure. Should MkParseDisplayName consumed only part of OBJREF This reports that parsing the moniker from CreateObjrefMoniker was not wholly consumed. This is an indication of a problem though it may be in COM. Ignore IMoniker::Release returned %u This is the similar to 0x0601 except applies to the moniker from the CreateObjrefMoniker.  Should MkParseDisplayName(\"%s\") failed. hr = %08X This reports that parsing the moniker from CreateObjrefMoniker failed. This is an indication of a problem though it may be in COM. Should IMoniker::GetDisplayName failed. hr = %08X This reports that the moniker from the CreateObjrefMoniker failed to return a display name. This is an indication of a problem though it may be in COM. Should IBindCtx::Release returned %u This reports that the binding context from CreateBindCtx did not return a ref count of 0 when released. This could be an issue with a class holding a reference it shouldn Ignore IMoniker::Release returned %u This reports that the moniker from CreateObjrefMoniker did not return a ref count of 0 when release. I do not know if this is a reliable indication of a problem. Should IObjectSafety::GetInterfaceSafetyOptions (%s): Undefined options supported. Supported=%08X, Enabled=%08X This reports that GetInterfaceSafetyOptions claims to support flags other than INTERFACESAFE_FOR_UNTRUSTED_CALLER, INTERFACESAFE_FOR_UNTRUSTED_DATA, INTERFACE_USES_DISPEX, or INTERFACE_USES_SECURITY_MANAGER. As no other flags are defined this must be fixed. IObjectSafety::GetInterfaceSafetyOptions (%s): Unsupported options enabled. Supported=%08X, Enabled=%08X This is similar to the previous failure but applies to the enabled options instead of the supported options. It must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) did not return E_NOINTERFACE. hr = %08X This reports that the method failed but failed for a reason other than the interface being unsupported. This must be investigated. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) succeeded when GetInterfaceSafetyOptions failed This reports that SetInterfaceSafetyOptions succeed when called with an IID that failed when passed to GetInterfaceSafetyOptions. If IID restrictions are implemented that must be the same for both methods. IObjectSafety::GetInterfaceSafetyOptions (%s) dwSupported changed from %08X to %08X This reports a problem when calling GetInterfaceSafetyOptions, passing the returned values to SetInterfaceSafetyOptions, then calling GetInterfaceSafetyOptions again and getting different results. This must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) dwEnabled changed from %08X to %08X This is the same as the previous except for dwEnabled instead of dwSupported. Should IObjectSafety::GetInterfaceSafetyOptions (%s) failed. hr = %08X This is reporting that GetInterfaceSafetyOptions failed for an IID for which SetInterfaceSafetyOptions succeeded. This should not happen and must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) failed. hr = %08X This is reporting that SetInterfaceSafetyOptions failed for an IID for which GetInterfaceSafetyOptions succeed and indicated some options are supported. This should not happen and must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, 00000000) succeeded This is reporting that SetInterfaceSafetyOptions succeeded when attempting to set unsupported options. This should fail returning E_FAIL. This must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, 00000000) did not return E_FAIL. hr = %08X This is reporting that SetInterfaceSafetyOptions failed when attempting to set unsupported options but did not return E_FAIL. This must be fixed. IObjectSafety::GetInterfaceSafetyOptions(%s) dwSupported changed from %08X to %08X This is reporting that with the sequence GetInterfaceSafetyOptions, SetInterfaceSafetyOptions, GetInterfaceSafetyOptions that the supported options changed between the two Get calls. This must be fixed. Should IObjectSafety::SetInterfaceSafetyOptions(%s, %08X, 00000000) set dwEnabled to %08X This is reporting that SetInterfaceSafetyOptions setting the enabled options to 0 succeeded but did not set the options to 0. If SetInterfaceSafetyOptions can t support the request it should fail it. This must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) failed. hr = %08X This is similar to 0x0B04. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, 00000000) failed. hr = %08X This is reporting that SetInterfaceSafetyOptions setting the enabled options to 0 failed. This may or may not be an error. COMChk has yet to encounter this problem. When implementations are fixed this attempt should return E_ACCESSDENIED and COMChk will be changed to filter for this error. IObjectSafety::GetInterfaceSafetyOptions (%s) dwSupported changed from %08X to %08X This is similar to 0x0B08. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) set dwEnabled to %08X This is reporting that SetInterfaceSafetyOptions with the return value of GetInterfaceSafetyOptions succeeded and changed the enabled options. This must be fixed. Should IObjectSafety::GetInterfaceSafetyOptions (%s) failed. hr = %08X This is similar to 0x0B04. Should IObjectSafety::SetInterfaceSafetyOptions (%s, %08X, %08X) failed. hr = %08X This is reporting that SetInterfaceSafetyOptions with the return value of GetInterfaceSafetyOptions failed. This must be fixed. "EXCEPINFO::pfnDeferredFillIn %p is uninitialized This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION but did not initialize the pfnDeferredFillIn of the EXCEPINFO structure. This must be fixed.  Uninitialized function pointers can lead to code execution. EXCEPINFO::pfnDeferredFillIn %p is not valid code pointer This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set the pfnDeferredFillIn to an invalid function pointer. Should EXCEPINFO::pfnDeferredFillIn failed. hr = %08X This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and the function in pfnDeferredFillIn returned a failure. Should EXCEPINFO::wCode == %04X This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set wCode to something other than 0. This field is obsolete for Win32. The scode field must be used. Should EXCEPINFO::wReserved == %04X This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set wReserved to something other than 0. This must be fixed. Should EXCEPINFO::pvReserved == %p This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set pvReserved to something other than 0. This must be fixed. Should EXCEPINFO::scode == 0 This is reporting that a call to IDispatch::Invoke or IDispatchEx::InvokeEx returned DISP_E_EXCEPTION and set scode is set to 0. This must be set to the real error. Should IConnectionPointContainer:: EnumConnectionPoints failed. hr = %08X This is reporting that the method failed. We allow E_NOTIMPL and don t report it. Anything else is questionable and should be fixed. Should IConnectionPointContainer:: FindConnectionPoint(IUnknown) succeeded This is reporting that FindConnectionPoint succeeded when requested to find an IUnknown connection. IUnknown is not valid here and this should fail. This must be fixed. Should IConnectionPointContainer:: FindConnectionPoint(IUnknown) failure did not return CONNECT_E_NOCONNECTION. hr = %08X The correct error for failing to support an interface is CONNECT_E_NOCONNECTION. If another error is returned, and due to the interface not being supported, it must be fixed. IConnectionPointContainer:: FindConnectionPoint(IUnknown) failure did not set *ppcp = NULL The returned interface pointer was not set to NULL on failure. This must be fixed.  Uninitialized interface pointers can lead to arbitrary code execution. Ignore IConnectionPointContainer:: FindConnectionPoint(IDispatch) succeeded This is reporting that FindConnectionPoint succeeded when requested to find an IDispatch connection. IDispatch should not be valid but I have found a couple of implementations that support this plus the specific interface. I do not understand why they do so but was reluctant to require it to be changed without understanding app compat for published interfaces. This should be fixed. Should IConnectionPointContainer:: FindConnectionPoint(IDispatch) failure did not return CONNECT_E_NOCONNECTION. hr = %08X The correct error for failing to support an interface is CONNECT_E_NOCONNECTION. If another error is returned, and due to the interface not being supported, it must be fixed. IConnectionPointContainer:: FindConnectionPoint(IDispatch) failure did not set *ppcp = NULL The returned interface pointer was not set to NULL on failure. This must be fixed. Uninitialized interface pointers can lead to code execution. Should IConnectionPointContainer:: FindConnectionPoint(iidUndefined) succeeded This is reporting that FindConnectionPoint succeeded when requested to find an undefined interface connection. This is not valid here and this should fail. This must be fixed. Should IConnectionPointContainer:: FindConnectionPoint(iidUndefined) failure did not return CONNECT_E_NOCONNECTION. hr = %08X The correct error for failing to support an interface is CONNECT_E_NOCONNECTION. If another error is returned, and due to the interface not being supported, it must be fixed. IConnectionPointContainer:: FindConnectionPoint(iidUndefined) failure did not set *ppcp = NULL The returned interface pointer was not set to NULL on failure. This must be fixed.  Uninitialized interface pointers can lead to arbitrary code execution. Should ITypeInfo::GetTypeAttr failed. hr = %08X This is a required method of the interface. Should IID = %s. ITypeInfo::GetTypeAttr returned typekind %u The type of the returned interface is other than TKIND_DISPATCH or TKIND_INTERFACE. This is likely a bug in the implementation of IDispatch::GetTypeInfo. Should IID = %s. ITypeInfo::GetTypeAttr returned cImplTypes = %u The interface derives from zero or two or more other interfaces. This should never happen. Should IID = %s. ITypeInfo::GetFuncDesc(%u) failed. hr = %08X This should never fail. IID = %s. IDispatch::Invoke(%d, \"%s\") did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant.  The method should call VariantInit() to initialize the variant to an empty state. Ignore IID = %s. IDispatch::Invoke(%d, \"%s\") failed. hr = %08X The method failed with an error other than E_INVALIDARG. The method name is displayed if available. Should IDispatch::GetTypeInfoCount failure did not return E_NOTIMPL. hr = %08X Wrong error code. Should IDispatch::GetTypeInfoCount returned ctinfo of %u The count should be 0 or 1. Should IDispatch::GetTypeInfo(%u) succeeded GetTypeInfo succeeded for an index that is greater than the maximum allowed. Should IDispatch::GetTypeInfo(%u) failure did not return DISP_E_BADINDEX. hr = %08X Wrong error code. Should IDispatch::GetTypeInfo(0) succeeded but GetTypeInfoCount returned E_NOTIMPL The two methods should return values that make sense together. Should IDispatch::GetTypeInfo(0) did not return E_NOTIMPL when GetTypeInfoCount did. hr = %08X" GetTypeInfoCount is not implemented, and returned E_NOTIMPL. GetTypeInfo must also return E_NOTIMPL. Either both must be implemented or neither. Should IDispatch::Invoke(0x73529A4B) succeeded IDispatch:Invoke passed a bogus DISPID succeeded. It must not. IDispatch::Invoke(0x73529A4B) did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(0x73529A4B) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X IDispatch:Invoke passed a bogus DISPID failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. IDispatch::Invoke(%s) did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(%s) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X This is reporting that when IDispatch::Invoke was passed one of the well known negative DISPIDs that it failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. IDispatch::Invoke(%d) did not initialize varResult An uninitialized variant can lead to heap corruption or arbitrary code execution when the caller frees the variant. The method should call VariantInit() to initialize the variant to an empty state. Ignore IDispatch::Invoke(%d) failed. hr = %08X Should IEnumConnectionPoints::Next(1, &picp, NULL) failed. hr = %08X Should IEnumConnectionPoints::Next(1, &picp, NULL) returned NULL Should IEnumConnectionPoints::Reset failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Skip(1) failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Reset failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Next failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Next returned S_FALSE w/celtFetched = %u Should IEnumConnectionPoints::Next succeeded w/celtFetched = %u Should IEnumConnectionPoints::Next returned duplicate connection point A loop is not a good idea. Should IEnumConnectionPoints::Clone failed. hr = %08X This method is required by the interface. Should IEnumConnectionPoints::Clone returned NULL This method is required by the interface. Should IEnumConnections::Next(1, &cd, NULL) failed. hr = %08X This method is required by the interface. Should IEnumConnections::Reset failed. hr = %08X This method is required by the interface. Should IEnumConnections::Skip(1) failed. hr = %08X This method is required by the interface. Should IEnumConnections::Reset failed. hr = %08X" Should IEnumConnections::Next failed. hr = %08X Should IEnumConnections::Next returned S_FALSE w/celtFetched = %u Should IEnumConnections::Next succeeded w/celtFetched = %u Should IEnumConnections::Clone failed. hr = %08X Should IEnumConnections::Clone returned NULL Should IEnumMoniker::Next(1, &pmk, NULL) failed. hr = %08X Should IEnumMoniker::Reset failed. hr = %08X Should IEnumMoniker::Skip(1) failed. hr = %08X Should IEnumMoniker::Reset failed. hr = %08X Should IEnumMoniker::Next failed. hr = %08X Should IEnumMoniker::Next returned S_FALSE w/celtFetched = %u Should IEnumMoniker::Next succeeded w/celtFetched = %u Should IEnumMoniker::Clone failed. hr = %08X This method is required by the interface. Should IEnumMoniker::Clone returned NULL" Should IEnumUnknown::Next(1, &punk, NULL) failed. hr = %08X Should IEnumUnknown::Reset failed. hr = %08X Should IEnumUnknown::Skip(1) failed. hr = %08X Should IEnumUnknown::Reset failed. hr = %08X Should IEnumUnknown::Next failed. hr = %08X Should IEnumUnknown::Next returned S_FALSE w/celtFetched = %u Should IEnumUnknown::Next succeeded w/celtFetched = %u Should IEnumUnknown::Clone failed. hr = %08X Should IEnumUnknown::Clone returned NULL Should IEnumVARIANT::Next(1, &var, NULL) failed. hr = %08X Enumeration failed. Should IEnumVARIANT::Reset failed. hr = %08X Should IEnumVARIANT::Skip(1) failed. hr = %08X Should IEnumVARIANT::Reset failed. hr = %08X Should IEnumVARIANT::Next failed. hr = %08X Should IEnumVARIANT::Next returned S_FALSE w/celtFetched = %u Should IEnumVARIANT::Next succeeded w/celtFetched = %u Should IEnumVARIANT::Clone failed. hr = %08X Should IEnumVARIANT::Clone returned NULL Should IObjectSafety::GetInterfaceSafetyOptions(iidUndefined) succeeded" Should IObjectSafety::GetInterfaceSafetyOptions(iidUndefined) failure did not return E_NOINTERFACE. hr = %08X Should IObjectSafety::GetInterfaceSafetyOptions(%s) failure changed between no site and NULL site Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwSupported for no site %08X != NULL site %08X Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwEnabled for no site %08X != NULL site %08X Should SetSite did not change ref count of IOleClientSite" Should IObjectSafety::GetInterfaceSafetyOptions(%s) failure changed between no site and dumb site Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwSupported for no site %08X != dumb site %08X Should IObjectSafety::GetInterfaceSafetyOptions(%s) dwEnabled for no site %08X != dumb site %08X Should Neither IOleObject nor IObjectWithSite supported. For a control that implements IObjectSafety. Should SetSite(NULL) did not restore ref count of IOleClientSite Should GetInterfaceSafetyOptions: dwSupported=%08X, dwEnabled=%08X, %s Should IOleCommandTarget::QueryStatus(NULL) return %08X QueryStatus should work. Should IOleCommandTarget::QueryStatus(NULL) CMDID == 0 supported QueryStatus should not report that an undefined command is supported. Should IOleCommandTarget::Exec(NULL, 0) succeeded An unknown command should not successfully execute. Should IOleCommandTarget::Exec(NULL, 0) failure did not return OLECMDERR_E_NOTSUPPORTED. hr = %08X Wrong error code returned. Should IOleCommandTarget::Exec(NULL, OLECMDID_REFRESH) failure did not return OLECMDERR_E_NOTSUPPORTED. hr = %08X Wrong error code returned. Should IOleCommandTarget::Exec(NULL, OLECMDID_STOP) failure did not return OLECMDERR_E_NOTSUPPORTED. hr = %08X Wrong error code. Should IOleCommandTarget::QueryStatus(iidUndefined) succeeded This should not succeed for an undefined iid. Should IOleCommandTarget::QueryStatus(iidUndefined) failure did not return OLECMDERR_E_UNKNOWNGROUP. hr = %08X Wrong error code. Should IOleCommandTarget::Exec(iidUndefined) succeeded Should not succeed for an undefined iid. Should IOleCommandTarget::Exec(iidUndefined) failure did not return OLECMDERR_E_UNKNOWNGROUP. hr = %08X" Wrong error code. Should IOleControl::GetControlInfo failure did not return E_NOTIMPL. hr = %08X The control is returning the wrong error code. Should IOleControl::OnMnemonic succeeded after GetControlInfo failure Should IOleControl::OnMnemonic() failure did not return E_NOTIMPL after GetControlInfo failure. hr = %08X Wrong error code. Should IOleControl::GetControlInfo returned CONTROLINFO::cb == %u The byte count in the returned structure is not correct. Should IOleControl::GetControlInfo returned CONTROLINFO::dwFlags == %08X" Invalid bits are set in the flag field in the returned structure. Should IOleControl::GetControlInfo ci.hAccel size (%d) != ci.cAccel (%u) Accelerator table size is incorrect. Should IOleControl::GetControlInfo rgaccel[%u].fVirt == %08X fVirt field of an accelerator table entry is incorrect. Should IOleControl::OnMnemonic() succeeded w/cAccel == 0 Should IOleControl::OnMnemonic() failure did not return E_NOTIMPL w/cAccel == 0. hr = %08X Wrong error code. Should IOleControl::OnAmbientPropertyChange (DISPID_VALUE) did not return S_OK. hr = %08X The method must always return S_OK.  Even when it fails.  No, I am not making that up.  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/html/9ca43723-a14e-4f03-8eec-e10ab34ecb4d.asp Should IOleControl::OnAmbientPropertyChange(DISPID_UNKNOWN) did not return S_OK. hr = %08X See above.  Who designed this? Should IOleControl::FreezeEvents(TRUE) did not return S_OK. hr = %08X Should IOleControl::FreezeEvents(FALSE) did not return S_OK. hr = %08X Ignore IPersist::GetClassID failed. hr = %08X Ignore IPersist::GetClassID returned %s Should IPersistPropertyBag w/o IPersist IPersistPropertyBag derives from IPersist. Ignore IPersistPropertyBag::GetClassID failed. hr = %08X Ignore IPersistPropertyBag::GetClassID returned %s ClassID differs from ID of control. Should SetSite did not change ref count of IOleClientSite SetSite adds a reference. Should IPersistPropertyBag::InitNew failed. hr = %08X Should IPersistPropertyBag::Save failed. hr = %08X Should IPersistPropertyBag::Load failed. hr = %08X Should SetSite(NULL) did not restore ref count of IOleClientSite This indicates a reference counting problem. Should IPersistPropertyBag::Load held reference to property bag (%u) This indicates a refcounting bug. Should IProvideClassInfo::GetClassInfo failed. hr = %08X This method must succeed. Should IProvideClassInfo2 w/o IProvideClassInfo IProvodeClassInfo2 derives from IProvideClassInfo. Should IProvideClassInfo2 w/o IConnectionPointContainer" IProvodeClassInfo2 derives from IConnectionPointContainer. Should IProvideClassInfo2::GetClassInfo failed. hr = %08X This method must succeed. Should IProvideClassInfo2::GetGUID failed. hr = %08X This method must succeed. Should IConnectionPointContainer:: FindConnectionPoint of IProvideClassInfo2::GetGUID failed. hr = %08X This method must succeed.  Should IProvideMultipleClassInfo w/o IProvideClassInfo2 IProvideMultipleClassInfo derives from IProvideClassInfo2. Should IProvideMultipleClassInfo w/o IProvideClassInfo" IProvideMultipleClassInfo derives from IProvideClassInfo. Should IProvideMultipleClassInfo::GetClassInfo failed. hr = %08X This method must work if you support the interface. Should IProvideMultipleClassInfo::GetGUID failed. hr = %08X This method must work if you support the interface. Should IProvideMultipleClassInfo::GetGUID w/o IConnectionPointContainer Control must support IConnectionPointContainer. Should IConnectionPointContainer:: FindConnectionPoint of IProvideMultipleClassInfo::GetGUID failed. hr = %08X Requirement of the interface. Should IProvideMultipleClassInfo:: GetMultiTypeInfoCount failed. hr = %08X Method should succeed. Should IProvideMultipleClassInfo:: GetInfoOfIndex(%u) failed. hr = %08X Method should succeed for each index. Should QueryInterface of IProvideMultipleClassInfo::GetInfoOfIndex iidPrimary failed. hr = %08X Interface should be supported. Should IProvideMultipleClassInfo::GetInfoOfIndex iidSource w/o IConnectionPointContainer" IConnectionPointContainer must be supported. Should IConnectionPointContainer::FindConnectionPoint of IProvideMultipleClassInfo::GetInfoOfIndex iidSource failed. hr = %08X This method should succeed. Should ISpecifyPropertyPages::GetPages failed. hr = %08X A control that implements the ISpecificPropertyPages interface must handle this method. Should ISpecifyPropertyPages::GetPages returned cElems == 0 Should ISpecifyPropertyPages::GetPages CLSID[%u] %s not registered A COM control for a page is not registered. Should CoGetClassObject(%s) from ISpecifyPropertyPages::GetPages failed. hr = %08X A COM control for a page could not be instantiated. Should %s(%s) returned punkOuter", szMethod, szClsid) The control is not properly dealing with aggregation. Should %s(%s) changed ref count of punkOuter (%u)", szMethod, szClsid, pouter->m_cref The control is not properly dealing with aggregation. Should AddRef changed ref count of punkOuter (%u -> %u)", crefSave, pouter->m_cref) The control is not properly dealing with aggregation. Should Release changed ref count of punkOuter (%u -> %u)", crefSave, pouter->m_cref) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) failed. hr = %08X This should always work. Should QueryInterface(IUnknown) changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) does not match original IUnknown A control must always return the same interface pointer for IUnknown. Should QueryInterface(IUnknown) failed. hr = %08X This should always work. Should QueryInterface(IUnknown) changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) does not match original IUnknown A control must always return the same interface pointer for IUnknown. Should Release changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should Release changed ref count of punkOuter (%u -> %u) The control is not properly dealing with aggregation. Should QueryInterface(IUnknown) failed. hr = %08X A control must always correctly respond to QueryInterface for IID_IUnknown. Should QueryInterface(IUnknown) does not match original IUnknown" A control must always return the same interface pointer for IUnknown. Ignore AddRef doesn't increment reference count by one (%u -> %u) Should QueryInterface(IUnknown) failed. hr = %08X A control must always correctly respond to QueryInterface for IID_IUnknown. Should QueryInterface(IUnknown) does not match original IUnknown A control must always return the same interface pointer for IUnknown. QueryInterface( iidUndefined) succeeded The control must not promise to fulfill the contract of an interface that does not exist.  This is tantamount to handing out random function pointers. Ignore IUnknown::Release returned %u Contact SWl IHTMLDocument2:: get_body failed. hr = %08X Contact SWl IHTMLDocument2:: get_body returned NULL Contact SWl IHTMLElement::QueryInterface (IHTMLDOMNode) failed. hr = %08X Contact SWl fIHTMLElement::QueryInterface( IHTMLDOMNode) failed. hr = %08X Contact SWl IHTMLDOMNode::appendChild failed. hr = %08X Contact SWl IHTMLDOMNode::appendChild returned NULL Contact SWl IHTMLDocument2::get_readyState failed. hr = %08X Test failure. Contact SWl IHTMLDocument2::get_readyState returned NULL Contact SWl SysAllocString(\"object\") failed Contact SWl IHTMLDocument2::createElement failed. hr = %08X Contact SWl IHTMLDocument2::createElement returned NULL Contact SWl IHTMLElement::QueryInterface ( IHTMLObjectElement2) failed. hr = %08X Contact SWl SysAllocString(\"%s\") failed Ignore IHTMLObjectElement2::put_data failed. hr = %08X Contact SWl SysAllocString(\"%s\") failed Ignore IHTMLObjectElement2::put_classid failed. hr = %08X Contact SWl IHTMLElement::QueryInterface( IHTMLObjectElement) failed. hr = %08X Contact SWl IHTMLObjectElement::get_readyState failed. hr = %08X Ignore IHTMLObjectElement::get_object failed. hr = %08X Contact SWl IHTMLObjectElement::get_object returned NULL Contact SWl CoCreateInstance (CLSID_HTMLDocument) failed. hr = %08X Test failure Contact SWl IHTMLDocument2::QueryInterface(IPersistMoniker) failed. hr = %08X Test failure Should CreateURLMonikerEx failed. hr = %08X API failed with URL supplied by the tester. Should IPersistHistory w/o IPersist IPersistHistory derives from IPersist Should IPersistHistory::GetClassID failed.  Hr = %08X Should IPersistHistory::GetClassID returned %s GetClassID reruened a different class ID Should SetSite did not change ref count of IOleClientSite Should IPersistHistory::GetPositionCookie failed.  hr = %08X Contact SWI CreateStreamOnHGlobal failed.  hr = %08X Test failure Contact SWI IStream::SetSize(0) failed.  hr = %08X Should IPersistHistory::Save held reference to stream (%u) Should IPersistHistory::SaveHistory failed.  hr = %08X Contact SWI IStream::Seek(0, STREAM_SEEK_SET) failed.  hr = %08X Should IPersistHistory::LoadHistory held reference to stream (%u) Should IPersistHistory::Load failed.  hr = %08X Should IBindCtx::Release returned %u The control incremented the ref count of the bind context and never released it. Should IStream::Release returned %u The control incremented the ref count of the stream and never released it. Should IPersistHistory::SetPositionCookie failed.  hr = %08X Should SetSite(NULL) did not restore ref count of IOleClientSite Contact SWl CoCreateInstance(CLSID_WebBrowser) failed. hr = %08X Test failure. Contact SWl SysAllocString(\"%s\") failed Test failure. Contact SWI IWebBrowser2::Navigate failed. hr = %08X Test failure. Contact SWl IWebBrowser2::get_Document failed. hr = %08X Test failure. Contact SWl IWebBrowser2::get_Document returned NULL Test failure. Contact SWl IDispatch::QueryInterface (IHTMLDocument2) failed. hr = %08X Test failure. Should MkParseDisplayNameEx(\"%s\") failed. hr = %08X COMChk was unable to make a moniker from the data supplied by the tester. Should MkParseDisplayName(\"%s\") failed. hr = %08X COMChk was unable to make a moniker from the data supplied by the tester. Should MkParseDisplayName[Ex](\"%s\") consumed only %u characters API did not work as expected using the data supplied by the tester. Ignore IBindCtx::Release returned %u Ignore IClassFactory::LockServer(TRUE) failed. hr = %08X Should Class factory supports IClassFactory2 but not IClassFactory Since IClassFactory2 derives from IClassFactory, this makes no sense.  Change the control to support the IClassFactory interface. Ignore IClassFactory2::LockServer(TRUE) failed. hr = %08X Should IClassFactory2::GetLicInfo failed. hr = %08X This method should be supported. Should IClassFactory2::LICINFO::cb = %u", li.cbLicInfo GetLicInfo returned an invalid size field in the LICINFO structure. Should IClassFactory2::LICINFO::fRuntimeKeyAvail = %d GetLicInfo returned an invalid value for fRuntimeKeyAvail. Should IClassFactory2::LICINFO::fLicVerified = %d GetLicInfo returned an invalid value. IClassFactory2::RequestLicKey failure did not set *pbstrKey = NULL Uninitialized function pointer can lead to arbitrary code execution. Should IClassFactory2::RequestLicKey failed. hr = %08X Should not fail. Should IClassFactory2::RequestLicKey failure did not return CLASS_E_NOTLICENSED w/!fRuntimeKeyAvail. hr = %08X Wrong error code. Should Class factory supports IClassFactory3 but not IClassFactory IClassFactory3 derives from IClassFactory.  Fix the control to support the base interface. Ignore IClassFactory3::LockServer(TRUE) failed. hr = %08X Should "%s(%s) failed. hr = %08X", szMethod, SzIidDisplay(), hr) Method creation instance in IClassFactory3 failed. %s(%s) failure did not set *ppvObject = NULL", szMethod, SzIidDisplay()) Uninitialized function pointer can lead to arbitrary code execution. %s(%s) succeeded but *ppvObject == NULL", szMethod, SzIidDisplay()) If the creation succeeds, an interface pointer must be returned. Ignore IClassFactory3::LockServer(FALSE) failed. hr = %08X Ignore IClassFactory2::LockServer(FALSE) failed. hr = %08X Ignore IClassFactory::LockServer(FALSE) failed. hr = %08X Ignore Skipped Ignore %s(%s) succeeded", szMethod, SzIidDisplay()) Ignore IParseDisplayName::ParseDisplayName failed. hr = %08X IParseDisplayName::ParseDisplayName failure did not set *ppmk = NULL Uninitialized function pointer can lead to arbitrary code execution. Ignore IParseDisplayName::ParseDisplayName succeeded. Ignore IBindCtx::Release returned %u", cref Should IPSFactoryBuffer::CreateProxy failed. hr = %08X CreateProxy should succeed. IPSFactoryBuffer::CreateProxy failure did not set *ppProxy = NULL Uninitialized function pointer can lead to arbitrary code execution. IPSFactoryBuffer::CreateProxy failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution. Ignore IPSFactoryBuffer::CreateProxy succeeded. CLSID = %s", szClsid IPSFactoryBuffer::CreateProxy succeeded but *ppProxy == NULL Success must set an interface pointer. IPSFactoryBuffer::CreateProxy succeeded but *ppv == NULL Success must set an interface pointer. Should CoGetClassObject(IUnknown) failed. hr = %08X CoGetClassObject should not fail. Should Neither IClassFactory*, IParseDisplayName, nor IPSFactoryBuffer supported One of these interfaces should be supported. Ignore IUnknown::Release returned %u Should CoCreateInstance(%s, %s) failed. hr = %08X CoCreateInstance should not fail. CoCreateInstance(%s, %s) failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution. Should CoCreateInstance(%s, %s) succeeded but *ppvObject == NULL Success must set an interface pointer. Ignore Skipped Ignore CoCreateInstance(%s, %s) succeeded Ignore UnhandledExceptionFilter changed" Ignore IMoniker::BindToObject failed. hr = %08X IMoniker::BindToObject failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution.  Ignore IMoniker::BindToStorage failed. hr = %08X IMoniker::BindToStorage failure did not set *ppvObject = NULL Uninitialized function pointer can lead to arbitrary code execution. Ignore IMoniker::Enum failed. hr = %08X IMoniker::Enum failure did not set *ppenum = NULL Uninitialized function pointer can lead to arbitrary code execution. Should MkParseDisplayName consumed only part of OBJREF Ignore IMoniker::Release returned %u Should MkParseDisplayName(\"%s\") failed. hr = %08X Should ITypeInfo::GetTypeAttr failed. hr = %08X This is a required method of the interface. Should IID = %s. ITypeInfo::GetTypeAttr returned typekind %u The type of the returned interface is other than TKIND_DISPATCH or TKIND_INTERFACE. This is likely a bug in the implementation of IDispatch::GetTypeInfo. Should IID = %s. ITypeInfo::GetTypeAttr returned cImplTypes = %u The interface derives from zero or two or more other interfaces. This should never happen. Should IID = %s. ITypeInfo::GetFuncDesc(%u) failed. hr = %08X This should never fail. IID = %s. IDispatchEx::InvokeEx(%d, \"%s\") did not initialize varResult The method succeeded but did not initialize varResult. Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Ignore IID = %s. IDispatch::InvokeEx(%d, \"%s\") failed. hr = %08X The method failed with an error other than E_INVALIDARG. The method name is displayed if available. Should IDispatchEx w/o IDispatch IDispatchEx is implemented but IDispatch is not. When IDispatchEx is supported IDispatch must be supported. Should IDispatch::GetTypeInfoCount failure did not return E_NOTIMPL. hr = %08X Should IDispatch::GetTypeInfoCount returned ctinfo of %u GetTypeInfoCount is specified to return either 0 or 1   nothing else.  http://msdn2.microsoft.com/en-us/library/ms221674.aspx Should IDispatch::GetTypeInfo(%u) succeeded GetTypeInfo was called with an illegal index, and yet the call succeeded. Should IDispatch::GetTypeInfo(%u) failure did not return DISP_E_BADINDEX. hr = %08X The wrong error code was returned. Should IDispatch::GetTypeInfo(0) succeeded but GetTypeInfoCount returned E_NOTIMPL Methods are returning inconsistent information. Should IDispatch::GetTypeInfo(0) did not return E_NOTIMPL when GetTypeInfoCount did. hr = %08X" GetTypeInfoCount is not implemented, and returned E_NOTIMPL. GetTypeInfo must also return E_NOTIMPL. Either both must be implemented or neither. Should IDispatch::Invoke(0x73529A4B) succeeded IDispatch:Invoke passed a bogus DISPID succeeded. It must not. IDispatchEx::InvokeEx(0x73529A4B) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(0x73529A4B) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X IDispatch:Invoke passed a bogus DISPID failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. IDispatchEx::InvokeEx(%s) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatch::Invoke(%s) failure did not return DISP_E_MEMBERNOTFOUND. hr = %08X This is reporting that when IDispatch::Invoke was passed one of the well known negative DISPIDs that it failed with an error other than DISP_E_MEMBERNOTFOUND. If this failed because of the unsupported DISPID this error code must be returned. Should IDispatchEx::GetNextDispID(%d) failure did not return E_NOTIMPL. Returned%08X Bad return code. Should IDispatchEx::GetMemberName(%d) failed. hr = %08X You should be able to retrieve the names of all supported members. IDispatchEx::InvokeEx(%d) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatchEx::InvokeEx(%d \"%s\") returned DISP_E_MEMBERNOTFOUND Invoke says that the member does not exist, but the TypeInfo information says it does.  Should IDispatchEx::InvokeEx(%d \"%s\") failed. hr = %08X Bad return code. Should IDispatchEx::GetMemberName(%d) failed. hr = %08X You should be able to retrieve the names of all supported members. IDispatchEx::InvokeEx(%d) did not initialize varResult Variants are cleared by the calling code.  An uninitialized variant can cause heap corruption when cleared. The method should call VariantInit() to initialize the variant to an empty state. Should IDispatchEx::InvokeEx(%d \"%s\") failed. hr = %08X Bad return code. Should IPersistStream w/o IPersist IPersistStream derives from IPersist. Ignore IPersistStream::GetClassID failed.  hr = %08X Method is required by interface. Ignore IPersistStream::GetClassID returned %s Method returned different classid than the classid of the control. Should SetSite did not change ref count of IOleClientSite SetSite should increment the reference count.  This indicates a potential refcounting bug. Should IPersistStream::GetSizeMax failed.  hr = %08X Method should succeed. Should IPersistStream::GetSizeMax returned cb = %I64u Method returned a size greater than the maximum value for a signed integer. Contact SWI GlobalAlloc failed.  GetLastError(%I64u) = %u Contact SWI CreateStreamOnHGlobal failed.  hr = %08X Contact SWI IStream::SetSize(0) failed.  hr = %08X Should IPersistStream::Save failed.  hr = %08X Should work. Contact SWI IStream::Seek(0, STREAM_SEEK_SET) failed.  hr = %08X Should IPersistStream::Load failed.  hr = %08X Should work. Should SetSite(NULL) did not restore ref count of IOleClientSite Releasing the site should decrement the ref count. Should IPersistStreamInit w/o IPersist IPersistStreamInit derives from IPersist. Ignore IPersistStreamInit::GetClassID failed.  hr = %08X Method is required by interface. Ignore IPersistStreamInit::GetClassID returned %s Method returned different classid than the classid of the control. Should SetSite did not change ref count of IOleClientSite SetSite should increment the reference count.  This indicates a potential refcounting bug. Should IPersistStreamInit::InitNew failed.  hr = %08X Method should succeed. Should IPersistStreamInit::GetSizeMax failed.  hr = %08X Method should succeed. Should IPersistStreamInit::GetSizeMax returned cb = %I64u Method returned a size greater than the maximum value for a signed integer. Contact SWI GlobalAlloc failed.  GetLastError(%I64u) = %u Contact SWI CreateStreamOnHGlobal failed.  hr = %08X Contact SWI IStream::SetSize(0) failed.  hr = %08X Should IPersistStreamInit::Save failed.  hr = %08X Should work. Contact SWI IStream::Seek(0, STREAM_SEEK_SET) failed.  hr = %08X Should IPersistStreamInit::Load failed.  hr = %08X Should work. Should SetSite(NULL) did not restore ref count of IOleClientSite Releasing the site should decrement the ref count. Contact SWl Argument limit of 256 exceeded (%u) gdzwx gd)[b gdZ/' gdZ/' gdZ/' gdZ/' gdZ/'
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\dbnunit\readme.txt ===
DBNunit is a tool for building nunit test assemblies from SQL scripts.  It was created by Cleve Littlefield (clevel) and is published on http://toolbox/sites/23241/default.aspx.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\dbnunit\doc\NUnit for Database Developers.doc ===
Microsoft Office Word 97-2003 Document MSWordDoc Word.Document.8Microsoft Corporation SMS&P IT  Title _PID_HLINKS SPSDescription Owner Status Decribes how to use the dbNunit utility to do test driven development. Cleve Littlefield DraftSMS&P IT  v-sallya Normal.dotm Cleve W. Littlefield Microsoft Office Word[Content_Types].xml _rels/.rels theme/theme/themeManager.xml theme/theme/theme1.xml f<!m/ dHGN6 *0+1~H -sEu-`Ue \)+{K<" v~*|fKIw y9[[` theme/theme/_rels/themeManager.xml.rels K(M&$R(.1 [Content_Types].xmlPK _rels/.relsPK theme/theme/themeManager.xmlPK theme/theme/theme1.xmlPK theme/theme/_rels/themeManager.xml.relsPK <?xml version="1.0" encoding="UTF-8" standalone="no"?> <a:clrMap xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/3/main" bg1="lt1" tx1="dk1" bg2="lt2" tx2="dk2" accent1="accent1" accent2="accent2" accent3="accent3" accent4="accent4" accent5="accent5" accent6="accent6" hlink="hlink" folHlink="folHlink"/> urn:schemas-microsoft-com:office:smarttags PersonName urn:schemas-microsoft-com:office:smarttags placecLbB2 zY=;Y '74%- ]RSz= ,&8.e 09C3; _fcp` \.m_P =;&Ob) 1}MW  u:`:` rX/]x 9}r9'+W P3mq: }%l|@ K8oCl |+0K@ gBy"`bPu P4Pd( 9*]eL ORO^I_ {F]|v x!zbl k8nBBl $-$iD rrBj^ ?'xMb CK(ds Dr>1- 8oflL 1xSH} ifakC j7stE +QRv!P 1UBv%2b \PGQ%E 0G}bB iA(27 PoAZy ^ .Kk Ps~16 7i3~(0 ew\?>} '}1%x ~3VL< r}`Yz #~91\ xLlL* }iXR\+  ceb! 6 s$b IDATx^ ^666.] <]X)9a f3&Qh pzx`( ?uvv* fc=t(r k0,\xe u'[[w }`pc8e (?;aBup&AlO _vO63 !!!X" WUTVT aom1" y&Q>} 1Lgg K ]`3J#) O)%|P)a wvv*{N }%xJx ta+DL &{"Dq. @|u<>' UT6-+ ">oK| DG&p] wY #h 4M6XI 1dwlx CR(7C %|Il. 6"gKZ A-vPy+`h PE6F` JanmP 07Ou [s< /Liyu"- m\soa (]S^HA V\9keluvW vuw_Jy9 4IpGhBw 0;_[[ f3&Qh M(yq. ZW'@Ix(S  k0,\xe u'[[w =Qw_Q Ll9Q! t6Y+f }P8n\~ FVGWyE T&aM- vPnHo mpp0+i ^9keluvW -eu/[ ^bW$|a _}}4O =/(Fr <tb!7 }P8n\~ Mw&2]= 8X:7j >3UB} bL*(7 )555t *tIeZ 5w-\8 ">oK| _D`zSe Kk/~q FQW4w T&AI-({ 6"gKZ +']g^ !'Q]] jT&aM- 4B;(7 @.dF)p q!XBq I6gB> M~B3B 64402 L"(b^ pN-P*2 d"h_zy7 CR(7C  :B1;j i 1<2a 5j^2_ Q^ls!C !'Q]] rGv3tx u~nnN LtuuY M;(w`6 -rCF0 )2@k0\n ID7O"; F'oQ. ,3aE- tlL&9p 39f[i 5w-\8 9'aE- u~nV.TQ ~.&)! GmmmCC GyK-J fdB@y| |iNY^ =o?tzp# |$p ! cpkTP. o\ymV q\W>;` NmX=Hy" 0K>di L":;|N 5'AY- 1+oX9d }P8n\~ JBG`Te Pw{o} QGh<i 0%P)# 7o~yaMU% cg~{6 T&6p:V lJmmmCC 3h[E* Kk/~q tlL&9p fq^Vw| )555t f][Jw 0tg6' %G89! h[I4D td~b|~Z) ZWWWPY 6TBDW U)IFP Ln]Io 0?77'T Bu+y7 64402 I466.] -vTTT p?o:a ===,3A m8::: ]bhEG ^\Vw| jT&aM- ^7w0Vb )555t  GjIi+_9keluvW PK90t I0sef Sc Kw45=L| +']G_ N@NxPJ  >3UB} g`.wXI Yc6OW +6?QZ.\ gvUlv 64402Q 1oL)! y2QJC 6q;rg p@ r&A \FSVe l?ur(= CV+4'+7+ NvTTT J}yJi"lG _}}4O $E8*&14 }P8n\~ m\so! H/h68e /:?e'' '>uw_8 q!XBq %>kK| U=~BS$ %JR&S? 9Siwlxu *Vb+S mhh`d 2x0DL>r&AL- )eUBE _}}4O e&zzzXfBnH I\3}` E%*/+ gwlxu8O :] \g RB r& IG{7#B r& D(0z%e 4{&QP x&Qz} }S)v. F r&a] 64402Q LtuuYw rA r&aM-8 Uw{gCG & -A' %DKJf ZUh.x{ mhh`d LWzGF IDATx^ 5IzRi| O.$=k -nAjx +++;w `bg*eg  VX]]E 7SV<t zNS$@ m"kl3 x=ZBF  K'I` #a4P0/ G1wZZ 8q"j-\ I(CyX -o]yp oW^-y ]qI:^ 5{xQ*6 ][[[__ x4^rD, IDATx^ $KV\v B|nY^r9i mV8>b 6?hUZ *]Yr2W^$ \S370 dwT*nS/ +rNoJ 'f*]q AnG8| )._s* O5W.l^tE ~k6i6X -gRJR5 ;V8bP2 7y@OW /NO99 B8@`~ ,6f3k Lb5Zkcm +N*gx *?2"^ ]6+l*e c c<d "TmT0 E2[GT3 P){2JJc LK+5r uN*h$ FFRm^ zL#TD Rjg3$ J)roIrI.+ j8x{V Eq 0+ {XtRgH~; bDdT&Ul zv1d( x%XQ*%F1e\6 Lk+kT m?WDT\ P>)`2Z+ (FxJ% rFgb< a7i@O q;!U\ :%1 &9Y { }A?^) &}O27 EA 09 g7mkLW :+NXf ,LNq3C h8ENFr m4dv>2(_ Iqq0L SNNq3C /!/K9# ~y.gL ONq3c F&6|R HIS {f fyQ<L )nusw ur2qR [nz_9 NHLC#Z/ ='6?9 GToSc !kW8{JF gl`1O" x5g@q3c pS&u-{QfAb '~H?> 1nusw OwKKJ 0+N*g AqK1{&  cJ{,\>s] >8N2k h/}';Y @q-A! P\KPH "ryw( 'Ev9> i+x:; FuA`N ';ctl X"*W\( P\{VH GN@_"JY n}SPQ (n.\H cmPPJCmp0712 CIDAT cmPPJCmp0712 JIDATMicrosoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11EMF+0@ EMF+*@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@ EMF++@  cHRM cIDATXG #b)>j ADv_Z2 EMF++@ EMF++@ EMF+%@  cHRM cIDATXG #b)>j ADv_Z2 EMF++@ EMF++@ EMF+%@  cHRM cIDATXG #b)>j ADv_Z2 EMF++@ Aq=@BUU EMF+%@  cHRM VIDATXG `lYVL 3x8-8 d}MLdF \0KbWf p<<J01b {=s9J6 ?j i}  "**.*4*78 ".***"*"***..*2  ..**""""""***/. "..*"""""6"""***4.. *..*""""""5******/... "..**"*****.*.***.*...+  ).******...%.)+.. ....$. ..4.*. %%%%. $+)+% EMF++@Microsoft Corporation Page-1 Folder Generic object Dynamic connector Critical Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESCleve Littlefield Cleve Littlefield Microsoft VisioVisio (TM) Drawing 3? Q0 :S<#>: WOiO{C! 8(W4? PK&^"# /0/B/T/f/ dSOeO f-46| aZ0tU; TbDQDQ  e!"J P2uv ` ;2`?C (K@)g M=@c:r@o?@o fzBkA Aaz@il@n Be?@er@v" @dI@`@ @{AS=@z3R9 E0b0v /e/(w/ /)6*9 G?-"^9F& 8xQ,dWo9 DnB/  z*!be $*S,T t90AC2i vJ-0, i30B3o30)y9<~$e 5R13_ Or_T7 0r 3J M^ ]c\ o sV fd"RU!rX  !ad iV    \(s _i6%_ I_+7e_ MC cA o ; fI":!r= v!a I i; n   A(s "ei eA v (;&3<? ?R? 3pB _i_pg 7} 1}" &q&q| R (`i Rh&b  ffAu< %Q}lqep y*`6F &6OHO: _"_4_ Ko_x_ o*o^OXojo|oB /'/9/ K/]/o/ ?#?5?G?Y? ?D1f@M)@c<0oN+@o fdBUArX@ Aad@iV@n3@  @ \Hs Be+@e<0v @dH3@J@ SV6U8 V5au\  U# e  c(+ &! P2uv ` ;2`?C r=@gP (K@)g M=@cr@ fzBkArTn@ Aaz@il@nI@] g @ rHUs Be?@er@v dI@`@ @{AS=@z3R E0b0v /7>(?Z? 133l? 0:Gh? H0BOTA onU.' B#B<s ?;-0(o  n80e ~1@~1 4M!.K P~1*3TF M!M!m g_*<C ~B~!~! r-1-1U bo($/ zFene {`uQ0` ,%^u<%{ 3 O$O6IH *;L]n 4OFOXOjO|O o1oCoUo U@bE# %_7_I_[_m_ Y5]N^/ <sRbG c4Q[u dHoZolo vH%a!Microsoft Visio Drawing Visio 11.0 Shapes Visio.Drawing.11Microsoft Corporation Page-1 Folder Generic object Dynamic connector Pages Masters _PID_LINKBASE _VPID_ALTERNATENAMESCleve Littlefield v-srsubr Microsoft VisioVisio (TM) Drawing 3? Q0 :S<#>: WOiO{C! 8(W4? PK&^"# /0/B/T/f/ dSOeO f-46| aZ0tU; TbDQDQ  e!"J P2uv ` ;2`?C (K@)g M=@c:r@o?@o fzBkA Aaz@il@n Be?@er@v" @dI@`@ @{AS=@z3R9 E0b0v /e/(w/ /)6*9 G?-"^9F& 8xQ,dWo9 DnB/  z*!be $*S,T t90AC2i vJ-0, i30B3o30)y9<~$e 5R13_ Or_T7 0r 3J M^ ]c\ o sV fd"RU!rX  !ad iV    \(s _i6%_ I_+7e_ MC cA o ; fI":!r= v!a I i; n   A(s "ei eA v (;&3<? ?R? 3pB _i_pg 7} 1}" &q&q| R (`i Rh&b  ffAu< %Q}lqep y*`6F &6OHO: _"_4_ Ko_x_ o*o^OXojo|oB /'/9/K/ ?#?5?G?Y?G ?D1f@M)@c<0oN+@o fdBUArX@ Aad@iV@n3@  @ \Hs Be+@e<0v @dH3@J@ SV6U8 V5au\ P@/R%j% p/pP' 2(Q&:? `E^E"/4/ ?X/j/|/ ?0?B? 3g?y? E&U"E&&E&*E&.E&Q=E&4 H#EE&IE&%YE&]E& !2lD/" (kN!SX !b[X!SX b[@1SX b[b!SX ASX?Q(k 3Q(kP1SXoA(k SX7%n ASX !b[ !SXbQb[ K%n[5WT M%nl!SXN%n Q%nv!SX*!b[ QSXV_^#QSX [_^CUWT_%n WTc_^+QSX (k;QSX i%n?QSXk%n3QSXQl%noASXm%j PAPA:  ! !PA +Q;?G?8 5(=LS uf0ltf 8oJo\ono O0OBOTOfOxO U41NF* J1'P+ [1'PA N10'V! P1V_k %TC1%6d R&CduRA'Pd)2 vuUAd 2/D/V/U ?-???Q?c?u? Ze7P}r )o;oMo_o A?S?7 7OIO[OmO O:_!_+ (e(fsTo uC #`uT !,%>1 ajt(787 o&o8oD A6161arm1 ^xXqS`A iWn34 ^x9PcaQ ?,?>?P? O%ICF I@d{r mX>W>2 _n1OD l'iO3W@  g'i%0 uwp`u =#SQf 0-A#c ==!=! #eL#e SQpYn |OQTq E#-TP BTqTq B{1{1 RMAMA 0?<?N?Y *O6OHO`?r? UOgOyO o&o8h g/y/p <?N?`?r? 'O9OKO]OoO eg`r^ ^onZ> _#_5_G_ noUogoyo dOvOW #x+df 0'@z3 `B?@YiE /(/:/L  CeH}72 qi7?)7 BOTOfOxM 3_E_W_ qZolo~o ?*?<? /./@' 6A6Ap ;!;!2 uSA t 4? F? 1oCoUogoyo :!0rX 1F_u_ :`/Q+ /$ /2%N ?*?<? w?G8F O%O7OIO )o;oMo A8OJO  H/Z/l/ U?g?& o*o<oNo`o {y12u 5B1sQ ?@g}f^ p;^P& /)/;/M/_/q/ ?-???Q?c?u? FOXOjO|O _ 1_C_h ?[@5bR 7bUX^ /*/</N/`/ r/S[I ?&?8?@J?\?n? o.o@o x#~#0 ]rr0a 2eJoU@\ 2e;?M?_?q7 p1H%o7o E]Sr0t uwP.uP eOwO( =]D>! _3s[: "_4_F_ *6e3\ DF0r@ tN,\0F!zsg6 x4>@r <|sF! :}E5-??7< 'Lo^o&?P? o-o?o (+`b: "8Wb3 eD?+5|F; y=*|F O1O(COUO !o3oT ?2FW4 6+r=91Test Driven Development for Database Developers (dbNunit) Current version of the document can be found at:  FILENAME  \p  \* MERGEFORMAT   \\TKFilToolBox\Tools\23241\Nunit for Database Developers.doc Overview A tool to give DB developers a framework to create and apply automated tests for their work.   Document Info Owner Cleve Littlefield, Jim Capra Last Saved 8/8/2006  FILENAME   \* MERGEFORMAT   NUnit for Database Developers.doc Primary Reviewers sastrys, jefjohns, gregwa, brianell External reviewers Document History Description 4/30/2004 Cleve Littlefield Created today 5/9/2004 Jim Capra Creating template, adding DB flowerbox, examples, etc 5/14/2004 Jim Capra Trying to copy screen image 5/20/2004 Cleve Littlefield Jim Capra Continue documentation with Cleve 6/8/2004 Jim Capra Cleanup flowerbox sections for XML comments 6/26/2004 Cleve Littlefield Added description on how parameter passing is implemented and fixed formatting 12/15/2004 Cleve Littlefield Added description of new timeout parameter 05/23/2005 Cleve Littlefield Added description of new ignore paramter Table of Contents  TOC \o "1-2" \h \z \u   HYPERLINK \l "_Toc76896720"  Introduction  PAGEREF _Toc76896720 \h   HYPERLINK \l "_Toc76896721"  1.1 Summary  PAGEREF _Toc76896721 \h   HYPERLINK \l "_Toc76896722"  1.2 Relationship to other System Guidelines  PAGEREF _Toc76896722 \h   HYPERLINK \l "_Toc76896723"  1.3 Justification  PAGEREF _Toc76896723 \h   HYPERLINK \l "_Toc76896724"  1.4 Documentation Conventions  PAGEREF _Toc76896724 \h   HYPERLINK \l "_Toc76896725"  Test Driven Development  PAGEREF _Toc76896725 \h   HYPERLINK \l "_Toc76896726"  2.1 Test Cases  PAGEREF _Toc76896726 \h   HYPERLINK \l "_Toc76896727"  2.2 Test Cases Organization  PAGEREF _Toc76896727 \h   HYPERLINK \l "_Toc76896728"  2.3 Setup/Tear Down  PAGEREF _Toc76896728 \h   HYPERLINK \l "_Toc76896729"  2.4 XML Comments  PAGEREF _Toc76896729 \h   HYPERLINK \l "_Toc76896730"  2.5 Installing NUnit and dbNUnit  PAGEREF _Toc76896730 \h   HYPERLINK \l "_Toc76896731"  2.6 Running dbNunit  PAGEREF _Toc76896731 \h   HYPERLINK \l "_Toc76896732"  2.7 Creating a NUnit Project and Config file  PAGEREF _Toc76896732 \h   HYPERLINK \l "_Toc76896733"  2.8 Running dbunittests.dll in NUnit  PAGEREF _Toc76896733 \h   HYPERLINK \l "_Toc76896734"  Appendix  PAGEREF _Toc76896734 \h   HYPERLINK \l "_Toc76896735"  3.1 Document Issues  PAGEREF _Toc76896735 \h   HYPERLINK \l "_Toc76896736"  3.2 Document To Do  PAGEREF _Toc76896736 \h  Introduction dbNUnit is a tool designed to help database developers create automated granular tests within the NUnit framework.  By working within this framework, the database developers obtain the nice GUI and reporting capabilities that NUnit provides.   One design goal was to let DB developers right test cases with the language they are most familiar, T-SQL.  This way they are introduced as little learning curve as possible, as well as not having to switch gears to go from set based T-SQL to procedural based C# or VB.Net. The purpose of this document is to introduce the database developer to dbNunit and provide a common platform and standard way to do formal TDD. Summary DB developers should have a framework to create automated tests for their work.  These tests should be run by the developer before checking in their code.  Also all the tests will be run after each build as a build verification step.   Hopefully this tool will help in our push towards Test Driven Development. Relationship to other System Guidelines Justification Produce better code. Documentation Conventions Do not  Test Driven Development Test Cases Test Files are just simple T-SQL batch files.  Any PRINT statements that are put in our T-SQL files will show up in the Console window in NUnit.  Also, if a RAISERROR is executed, it will generate a failure of the test case (unless this is an expected failure, cover later).   Sample test cases are located in the install folder.  There is a readme.txt file located there that explains how to set up the samples. Provide PRINT statements when the test case fails. Use RAISEERROR to indicate failure. Use PRINT statements for when the test case succeeds, or any other extraneous PRINT statements that will clutter up the Console window. Test Cases Organization They are placed into a folder structure, and that folder structure is analyzed by dbNUnit to create a standard NUnit assembly.   Each file is a test case.  To create a sequence that test cases need to run in, there is a special naming convention to the test case SQL batch files.  Each test case is named with a TC prefix, and three digit number representing the order, an underscore, and then a friendly Test Case name.  For example, say there are three test cases named ExecuteSP, CheckResults, and CheckLog that are supposed to be executed in that order.  Then the developer would create three files named TC001_ExecuteSP.sql, TC002_CheckResults.sql, and TC003_CheckLog.sql.   Our test cases are arranged into folders.  The folders represent namespaces and classes in our NUnit assemblies.  If a folder contains child folders, then it is part of a namespace.  If a folder contains T-SQL files, is a class.  Be careful not to put child folders and T-SQL files in the same directory, as this creates a construct that is illegal in .Net. Valid directory structure Here is an example directory structure:  EMBED Visio.Drawing.11   Invalid directory structure Here is an example of an illegal directory structure:  EMBED Visio.Drawing.11   Folder Order There is another thing to keep in mind for organization at the folder level, is that any folder that has test case items will be treated as a class by NUnit and any folder that has child folders will be treated as a namespace.  NUnit groups all classes at the top, and namespaces below that.  So this structure: Notice how R2003_Metdata doesn t have any child folders?  That means it will be treated like a class, and grouped at the top.  So in NUnit it will show up like this: This is not what is desired.  To fix this include at least one child folder under R2003_MetaData. Setup/Tear Down There are two special files can included in the test case folders, setup.sql and teardown.sql.  The setup file runs first before any test cases, and allows the test fixture to run any preliminary code might need to run.  The teardown file runs after all of the test cases, even if it fails, and allows any cleanup code to run. The purpose of the Setup routine is to set up for all the test cases, not to be a test case itself.  Do not put any tests in here, just code that is needed to run before any other test case in the test fixture runs. XML Comments XML comments can be included in the T-SQL test case files.  Here is an example: /******************************************************************************* --- <output filename="1" summary="1" psid="1" author="1"/> --- <summary>One line summary description goes here...</summary> --- <remarks> --- Multi-line comments can go here... --- </remarks> --- <rollback/> --- <expectedfailure class="18">error message goes here</expectedfailure> --- <expectedfailure>error message goes here</expectedfailure> --- <expectedfailure class="18"/> --- <params> ---     <outparam>@testparam1</outparam> ---     <outparam>@testparam2</outparam> --- </params> --- <params> ---     <inparam type="nvarchar(255)">@testparam1</inparam> ---     <inparam type="int">@testparam2</inparam> --- </params> --- <params> ---     <inparam type="nvarchar(255)">@testparam1</inparam> ---     <inparam type="int">@testparam2</inparam> ---     <outparam>@testparam1</outparam> ---     <outparam>@testparam2</outparam> --- </params> --- <author name="yourname" email="alias"></author> --- <date>yyyy-mm-dd</date> --- <psid>99999</psid> --- <historylog> ---     <log date="yyyy/mm/dd" email="alias">Comments about change</log> ---     <log date="yyyy/mm/dd" email="alias">Comments about change</log> --- </historylog> *******************************************************************************/ <summary> Example: <summary>This is test case 3</summary> This Tag provides a short summary of what the test case is accomplishing.  This actually shows in the NUnit console window when the test case runs, providing context for the results in that window. <remarks> Example:  <remarks> This is the remarks section, here is where you would write the lengthier comments that fully describe your test case. </remarks> This is a standard place to create lengthier comments about the purpose of the test case.  Later versions of the tool might utilize these in some way. <psid> Example:  <psid>12605</psid> This is a place to store the Product Studio ID that identifies this test case.  This is also outputted in the console window. <rollback> Example:  <rollback /> This indicates that the unit test cases must be wrapped in a transaction and rolled back when done.  If this is applied to at least one test case file in a folder, all test cases in that folder will be wrapped in a transaction. <timeout> Example:  <timeout>60</timeout> This sets the command timeout for the test case.  The default is 30 seconds.  You can set this higher to avoid timeout problems. Notes on <timeout> You can set a lower timeout than the default to ensure that T-SQL code running longer than you expect is a failing condition.  For example, if it is abnormal for a stored procedure to take over 5 seconds to run, you can set your timeout to 5 seconds to ensure that the test case will fail if it takes too long. <expectedfailure> Examples: <expectedfailure class= >Error Message</expectedfailure> <expectedfailure>Error Message</expectedfailure> <expectedfailure class= This indicates that the test case is actually expecting a specific error from the test case.  The error returned is evaluated to see if it is a specific error message or class to validate it is the error that is expected.  Both class and message are optional, but at least one or the other must be provided, both cannot be omitted.  This is used to check predetermined error conditions to validate error handling logic. <params> The <params> tag can hold multiple input and output parameters. Notes on <params> A single parameter can be both an input and output parameter.  This is used to receive a parameter from a test case before it and modify its value, passing it along for use by other test cases. Also, output parameters are alive for every test case in the folder.  Every test case can access them, even if they were declared a number of test cases previous. <outparam> Example:  <params> <outparam>@TestParam</outparam> <outparam>@TestParam2</outparam> <params> This declares a parameter that is output from the test case.  dbNUnit will automatically pull the value out and store it to pass on to other scripts.  Any parameter not also used as an input parameter in the test case must be declared using DECLARE in the test case script. <inparam> Example:  <params> <inparam type= nvarchar(255) >@TestParam</inparam> <inparam type= >@TestParam2</inparam> </params> Use this to specify input parameters into the unit test.  This will automatically DECLARE and will SELECT a value into the parameter for use in the test case.  Do not DECLARE a parameter used as an input parameter in the unit test script, it will end up declared twice and will generate an error.  Be sure to specify the parameter type, which uses standard SQL types. <output> Example:  <output filename="1" summary="1" psid="1" /> This output tag is used to control outputting of some summary information for debugging information. Use OUTPUT for debugging purposes. Check in code with OUTPUT variables turned on.  This clutters up the console window and makes the output in the console window hard to read. <ignore> Example:  <ignore>This test case is not done yet.</ignore> Allows you to check in a test case but mark it to not run.  This is useful for incomplete test cases, or potentially obsolete test cases. Check in test cases that will not pass, mark them with ignore. Installing NUnit and dbNUnit Installing NUnit Here are instructions for installing NUnit: Navigate to   HYPERLINK "http://prdownloads.sourceforge.net/nunit/NUnit-2.2.8-net-1.1.msi?download"  http://prdownloads.sourceforge.net/nunit/NUnit-2.2.8-net-1.1.msi?download Select a mirror site. Click Run when prompted. Follow the wizard through to the end (the defaults are fine). Installing dbNUnit Here are instructions for installing dbNUnit.   Run the dbNUnitInstall.msi installer (located in the same directory as this document)  Follow the wizard through to the end (the defaults are fine). Running dbNunit Running dbNUnit is very simple.  Just specify the path to the main parent folder for the test cases.  Here is an example.  dbnunit.exe c:\development\tests\ This will generate a .Net assembly named dbunittests.dll in the c:\development\tests\ folder.  If the file exists there already it will be overwritten.  Also, consider creating a batch file to automate this process. Creating a NUnit Project and Config file Now NUnit project file must be created.  Here are the steps to create the project file: Open NUnit-GUI. Click Project Add Assembly. Select dbunittests.dll and hit OK. Save the project file using File Save. Save the project file in the same directory as the dbunittests.dll assembly. Now to create a configuration file, so that connection string can be specified.  Create a .config file with the same name as our NUnit project file.  For example, if the NUnit project file is called dbunittests.nunit, then the name of our configuration file must be dbunittests.config.  Here is a sample configuration file with a connection string: <?xml version="1.0" encoding="utf-8" ?> <configuration>   <appSettings>     <add key="Connection" value="Server=MyServer;Database=MyDatabase;Integrated Security=true;" />   </appSettings> </configuration> Running dbunittests.dll in NUnit Now open NUnit-GUI, and open the new NUnit project file and hit Run.  The GUI will show which tests passed and failed, the error messages, and the output in the console window.  Appendix Document Issues Open Date Resolved Owner Description Document To Do Open Date Resolved Owner Description PAGE    LASTSAVEDBY   \* MERGEFORMAT  Cleve Littlefield Page   PAGE   NUMPAGES  Last saved:   SAVEDATE  \@ "M/d/yyyy h:mm am/pm"  \* MERGEFORMAT  5/23/2005 7:33 PM zsoha]aYaYaoaYahohaoha j%5<D
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\System.Web.Mvc.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Mvc</name>
  </assembly>
  <members>
    <member name="T:System.Web.Mvc.AcceptVerbsAttribute">
      <summary>Represents an attribute that specifies which HTTP verbs an action method will respond to.</summary>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> class by using a list of HTTP verbs that the action method will respond to.</summary>
      <param name="verbs">The HTTP verbs that the action method will respond to.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="verbs" /> parameter is null or zero length.</exception>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.Web.Mvc.HttpVerbs)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> class using the HTTP verbs that the action method will respond to.</summary>
      <param name="verbs">The HTTP verbs that the action method will respond to.</param>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the specified method information is valid for the specified controller context.</summary>
      <returns>true if the method information is valid; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext " />parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AcceptVerbsAttribute.Verbs">
      <summary>Gets or sets the list of HTTP verbs that the action method will respond to.</summary>
      <returns>The list of HTTP verbs that the action method will respond to.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionDescriptor">
      <summary>Provides information about an action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ActionName">
      <summary>Gets the name of the action method.</summary>
      <returns>The name of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the action method by using the specified parameters and controller context.</summary>
      <returns>The result of executing the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes of the specified type exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attritubeType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetFilters">
      <summary>Returns the filters that are associated with this action method.</summary>
      <returns>The filters that are associated with this action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetParameters">
      <summary>Returns the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetSelectors">
      <summary>Returns the action-method selectors.</summary>
      <returns>The action-method selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether one or more instances of the specified attribute type are defined for this member.</summary>
      <returns>true if the <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attritubeType" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutedContext">
      <summary>Provides the context for the ActionExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutedContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutedContext" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action method descriptor.</param>
      <param name="canceled">true if the action is canceled.</param>
      <param name="exception">The exception object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ActionDescriptor">
      <summary>Gets or sets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Canceled">
      <summary>Gets or sets a value that indicates that this <see cref="T:System.Web.Mvc.ActionExecutedContext" /> object is canceled.</summary>
      <returns>true if the context canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Exception">
      <summary>Gets or sets the exception that occurred during the execution of the action method, if any.</summary>
      <returns>The exception that occurred during the execution of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception is handled.</summary>
      <returns>true if the exception is handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Result">
      <summary>Gets or sets the result returned by the action method.</summary>
      <returns>The result returned by the action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutingContext">
      <summary>Provides the context for the ActionExecuting method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutingContext" /> class by using the specified controller context, action descriptor, and action-method parameters.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="actionParameters">The action-method parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ActionParameters" /> or <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionDescriptor">
      <summary>Gets or sets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionParameters">
      <summary>Gets or sets the action-method parameters.</summary>
      <returns>The action-method parameters.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.Result">
      <summary>Gets or sets the result that is returned by the action method.</summary>
      <returns>The result that is returned by the action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionFilterAttribute">
      <summary>Represents the base class for all action-filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called by the MVC framework after the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called by the MVC framework before the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called by the MVC framework after the action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called by the MVC framework before the action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionMethodSelectorAttribute">
      <summary>Represents an attribute that is used to influence the selection of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionMethodSelectorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the action method selection is valid for the specified controller context.</summary>
      <returns>true if the action method selection is valid for the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionNameAttribute">
      <summary>Represents an attribute that is used for the name of an action.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionNameAttribute" /> class.</summary>
      <param name="name">Name of the action.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>Determines whether the action name is valid within the specified controller context.</summary>
      <returns>true if the action name is valid within the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="P:System.Web.Mvc.ActionNameAttribute.Name">
      <summary>Gets or sets the name of the action.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionNameSelectorAttribute">
      <summary>Represents an attribute that affects the selection of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionNameSelectorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>Determines whether the action name is valid in the specified controller context.</summary>
      <returns>true if the action name is valid in the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionResult">
      <summary>Encapsulates the result of an action method and is used to perform a framework-level operation on behalf of the action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionSelector">
      <summary>Represents a delegate that contains the logic for selecting an action method.</summary>
      <returns>true if an action method was successfully selected; otherwise, false.</returns>
      <param name="controllerContext">The current HTTP request context.</param>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper">
      <summary>Represents support for rendering HTML in AJAX scenarios within a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper" /> class using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The URL route collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.GlobalizationScriptPath">
      <summary>Gets or sets the root path for the location to use for globalization script files.</summary>
      <returns>The location of the folder where globalization script files are stored. The default location is "~/Scripts/Globalization".</returns>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.JavaScriptStringEncode(System.String)">
      <summary>Serializes the specified message and returns the resulting JSON-formatted string.</summary>
      <returns>The serialized message as a JSON-formatted string.</returns>
      <param name="message">The message to serialize.</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.RouteCollection">
      <summary>Gets the collection of URL routes for the application.</summary>
      <returns>The collection of routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewContext">
      <summary>Gets the context information about the view.</summary>
      <returns>The context of the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewData">
      <summary>Gets the current view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewDataContainer">
      <summary>Gets the view data container.</summary>
      <returns>The view data container.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper`1">
      <summary>Represents support for rendering HTML in AJAX scenarios within a strongly typed view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> class by using the specified view context, view data container, and URL route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The URL route collection.</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper`1.ViewData">
      <summary>Gets the strongly typed version of the view data dictionary.</summary>
      <returns>The strongly typed data dictionary of the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxRequestExtensions">
      <summary>Represents a class that extends the <see cref="T:System.Web.HttpRequestBase" /> class by adding the ability to determine whether an HTTP request is an AJAX request.</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase)">
      <summary>Determines whether the specified HTTP request is an AJAX request.</summary>
      <returns>true if the specified HTTP request is an AJAX request; otherwise, false.</returns>
      <param name="request">The HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistration">
      <summary>Provides a way to register one or more areas in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistration" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistration.AreaName">
      <summary>Gets the name of the area to be registered.</summary>
      <returns>The name of the area to be registered.</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas">
      <summary>Registers all areas in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas(System.Object)">
      <summary>Registers all areas in an ASP.NET MVC application by using the specified user-defined state information.</summary>
      <param name="state">An object that contains user-defined information to pass to the area.</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
      <summary>Registers an area in an ASP.NET MVC application using the specified area's context information.</summary>
      <param name="context">Encapsulates the information that is required in order to register the area.</param>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistrationContext">
      <summary>Encapsulates the information that is required in order to register an area within an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> class using the specified area name and routes collection.</summary>
      <param name="areaName">The name of the area to register.</param>
      <param name="routes">The collection of routes for the application.</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> class using the specified area name, routes collection, and user-defined data.</summary>
      <param name="areaName">The name of the area to register.</param>
      <param name="routes">The collection of routes for the application.</param>
      <param name="state">An object that contains user-defined information to pass to the area.</param>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.AreaName">
      <summary>Gets the name of the area to register.</summary>
      <returns>The name of the area to register.</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values and constraint.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify valid values for a URL parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values, constraints, and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify valid values for a URL parameter.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Namespaces">
      <summary>Gets the namespaces for the application.</summary>
      <returns>An enumerable set of namespaces for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Routes">
      <summary>Gets a collection of defined routes for the application.</summary>
      <returns>A collection of defined routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.State">
      <summary>Gets an object that contains user-defined information to pass to the area.</summary>
      <returns>An object that contains user-defined information to pass to the area.</returns>
    </member>
    <member name="T:System.Web.Mvc.AssociatedMetadataProvider">
      <summary>Provides an abstract class to implement a metadata provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.#ctor">
      <summary>Called from constructors in a derived class to initialize the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>When overridden in a derived class, creates the model metadata for the property.</summary>
      <returns>The model metadata for the property.</returns>
      <param name="attributes">The set of attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.FilterAttributes(System.Type,System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets a list of attributes.</summary>
      <returns>A list of attributes.</returns>
      <param name="containerType">The type of the container.</param>
      <param name="propertyDescriptor">The property descriptor.</param>
      <param name="attributes">The attribute container.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Returns a list of properties for the model.</summary>
      <returns>A list of properties for the model.</returns>
      <param name="container">The model container.</param>
      <param name="containerType">The type of the container.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the metadata for the specified property using the container type and property descriptor.</summary>
      <returns>The metadata for the specified property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyDescriptor">The property descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Returns the metadata for the specified property using the container type and property name.</summary>
      <returns>The metadata for the specified property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Returns the metadata for the specified property using the type of the model.</summary>
      <returns>The metadata for the specified property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the container.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetTypeDescriptor(System.Type)">
      <summary>Returns the type descriptor from the specified type.</summary>
      <returns>The type descriptor.</returns>
      <param name="type">The type.</param>
    </member>
    <member name="T:System.Web.Mvc.AssociatedValidatorProvider">
      <summary>Provides an abstract class for classes that implement a validation provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>Gets a type descriptor for the specified type.</summary>
      <returns>A type descriptor for the specified type.</returns>
      <param name="type">The type of the validation provider.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets the validators for the model using the metadata and controller context.</summary>
      <returns>The validators for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets the validators for the model using the metadata, the controller context, and a list of attributes.</summary>
      <returns>The validators for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attributes">The list of attributes.</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncController">
      <summary>Provides the base class for asynchronous controllers.</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AsyncController" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.AsyncController.AsyncManager">
      <summary>Gets the asynchronous manager instance.</summary>
      <returns>The asynchronous manager instance.</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to initialize asynchronous request processing.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state object.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.BeginExecuteCore(System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET during initialization of asynchronous request processing.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state object.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.CreateActionInvoker">
      <summary>Creates an action invoker.</summary>
      <returns>An action invoker.</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.EndExecute(System.IAsyncResult)">
      <summary>Cancels the execution of an asynchronous action method.</summary>
      <param name="asyncResult">The status of the asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.EndExecuteCore(System.IAsyncResult)">
      <summary>Called by ASP.NET when the current asynchronous action has completed.</summary>
      <param name="asyncResult">The status of the asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.System#Web#Mvc#Async#IAsyncController#BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin the execution of an asynchronous action method.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.System#Web#Mvc#Async#IAsyncController#EndExecute(System.IAsyncResult)">
      <summary>Cancels the execution of an asynchronous action method by ASP.NET at the end of the execution of an asynchronous action method.</summary>
      <param name="asyncResult">The status of the asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncTimeoutAttribute">
      <summary>Represents an attribute that is used to set the timeout value, in milliseconds, for an asynchronous method.</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> class.</summary>
      <param name="duration">The timeout value, in milliseconds.</param>
    </member>
    <member name="P:System.Web.Mvc.AsyncTimeoutAttribute.Duration">
      <summary>Gets the timeout duration, in milliseconds.</summary>
      <returns>The timeout duration, in milliseconds.</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called by ASP.NET before the asynchronous action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.AuthorizationContext">
      <summary>Encapsulates the information that is required for using an <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class using the specified controller context.</summary>
      <param name="controllerContext">The context within which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class using the specified controller context and action descriptor.</summary>
      <param name="controllerContext">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="actionDescriptor">An object that provides information about an action method, such as its name, controller, parameters, attributes, and filters.</param>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.ActionDescriptor">
      <summary>Provides information about the action method that is marked by the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute, such as its name, controller, parameters, attributes, and filters.</summary>
      <returns>The action descriptor for the action method that is marked by the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.Result">
      <summary>Gets or sets the result that is returned by an action method.</summary>
      <returns>The result that is returned by an action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.AuthorizeAttribute">
      <summary>Represents an attribute that is used to restrict access by callers to an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
      <summary>Determines whether access to the core framework is authorized.</summary>
      <returns>true if access is authorized; otherwise, false.</returns>
      <param name="httpContext">The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>Processes HTTP requests that fail authorization.</summary>
      <param name="filterContext">Encapsulates the information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />. The <paramref name="filterContext" /> object contains the controller, HTTP context, request context, action result, and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when a process requests authorization.</summary>
      <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnCacheAuthorization(System.Web.HttpContextBase)">
      <summary>Called when the caching module requests authorization.</summary>
      <returns>A reference to the validation status.</returns>
      <param name="httpContext">The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Roles">
      <summary>Gets or sets the user roles.</summary>
      <returns>The user roles.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.TypeId">
      <summary>Gets the unique identifier for this attribute.</summary>
      <returns>The unique identifier for this attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Users">
      <summary>Gets or sets the authorized users.</summary>
      <returns>The authorized users.</returns>
    </member>
    <member name="T:System.Web.Mvc.BindAttribute">
      <summary>Represents an attribute that is used to provide details about how model binding to a parameter should occur.</summary>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BindAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Exclude">
      <summary>Gets or sets a comma-delimited list of property names for which binding is not allowed.</summary>
      <returns>The exclude list.</returns>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Include">
      <summary>Gets or sets a comma-delimited list of property names for which binding is allowed.</summary>
      <returns>The include list.</returns>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.IsPropertyAllowed(System.String)">
      <summary>Determines whether the specified property is allowed.</summary>
      <returns>true if the specified property is allowed; otherwise, false.</returns>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Prefix">
      <summary>Gets or sets the prefix to use when markup is rendered for binding to an action argument or to a model property.</summary>
      <returns>The prefix to use.</returns>
    </member>
    <member name="T:System.Web.Mvc.ByteArrayModelBinder">
      <summary>Maps a browser request to a byte array.</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ByteArrayModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound data object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ChildActionOnlyAttribute">
      <summary>Represents an attribute that is used to indicate that an action method should be called only as a child action.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ChildActionOnlyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">An object that encapsulates the information that is required in order to authorize access to the child action.</param>
    </member>
    <member name="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider">
      <summary>Returns the client data-type model validators.</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns the client data-type model validators.</summary>
      <returns>The client data-type model validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.ContentResult">
      <summary>Represents a user-defined content type that is the result of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ContentResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.Content">
      <summary>Gets or sets the content.</summary>
      <returns>The content.</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentEncoding">
      <summary>Gets or sets the content encoding.</summary>
      <returns>The content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Controller">
      <summary>Provides methods that respond to HTTP requests that are made to an ASP.NET MVC Web site.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Controller" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.Controller.ActionInvoker">
      <summary>Gets the action invoker for the controller.</summary>
      <returns>The action invoker.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Binders">
      <summary>Gets or sets the binder.</summary>
      <returns>The binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String)">
      <summary>Creates a content result object by using a string.</summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String)">
      <summary>Creates a content result object by using a string and the content type. </summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String,System.Text.Encoding)">
      <summary>Creates a content result object by using a string, the content type, and content encoding.</summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateActionInvoker">
      <summary>Creates an action invoker.</summary>
      <returns>An action invoker.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateTempDataProvider">
      <summary>Creates a temporary data provider.</summary>
      <returns>A temporary data provider.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Web.Mvc.Controller" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose(System.Boolean)">
      <summary>Releases unmanaged resources and optionally releases managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ExecuteCore">
      <summary>Invokes the action in the current controller context.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileContentResult" /> object by using the file contents and file type.</summary>
      <returns>The file-content result object.</returns>
      <param name="fileContents">The binary content to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileContentResult" /> object by using the file contents, content type, and the destination file name.</summary>
      <returns>The file-content result object.</returns>
      <param name="fileContents">The binary content to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileStreamResult" /> object by using the <see cref="T:System.IO.Stream" /> object and content type.  </summary>
      <returns>The file-content result object.</returns>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileStreamResult" /> object using the <see cref="T:System.IO.Stream" /> object, the content type, and the target file name. </summary>
      <returns>The file-stream result object.</returns>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type (MIME type)</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FilePathResult" /> object by using the file name and the content type.</summary>
      <returns>The file-stream result object.</returns>
      <param name="fileName">The path of the file to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FilePathResult" /> object by using the file name, the content type, and the file download name.</summary>
      <returns>The file-stream result object.</returns>
      <param name="fileName">The path of the file to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.HandleUnknownAction(System.String)">
      <summary>Called when a request matches this controller, but no method with the specified action name is found in the controller.</summary>
      <param name="actionName">The name of the attempted action.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.HttpContext">
      <summary>Gets HTTP-specific information about an individual HTTP request.</summary>
      <returns>The HTTP context.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Initialize(System.Web.Routing.RequestContext)">
      <summary>Initializes data that might not be available when the constructor is called.</summary>
      <param name="requestContext">The HTTP context and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.JavaScript(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JavaScriptResult" /> object.</summary>
      <returns>The <see cref="T:System.Web.Mvc.JavaScriptResult" /> object that writes the script to the response.</returns>
      <param name="script">The JavaScript code to run on the client</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON).</summary>
      <returns>The JSON result object that serializes the specified object to JSON format. The result object that is prepared by this method is written to the response by the MVC framework when the object is executed.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format.</summary>
      <returns>The JSON result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format.</summary>
      <returns>The JSON result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the content type, content encoding, and the JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
      <param name="behavior">The JSON request behavior </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified content type and JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="behavior">The JSON request behavior</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="behavior">The content type (MIME type).</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.ModelState">
      <summary>Gets the model state dictionary object that contains the state of the model and of model-binding validation.</summary>
      <returns>The model state dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called after the action method is invoked.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called before the action method is invoked.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization occurs.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an unhandled exception occurs in the action.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called after the action result that is returned by an action method is executed.</summary>
      <param name="filterContext">Information about the current request and action result</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before the action result that is returned by an action method is executed.</summary>
      <param name="filterContext">Information about the current request and action result</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view.</summary>
      <returns>A partial-view result object.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified model. </summary>
      <returns>A partial-view result object.</returns>
      <param name="model">The model that is rendered by the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified view name. </summary>
      <returns>A partial-view result object.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified view name and model. </summary>
      <returns>A partial-view result object.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Redirect(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.RedirectResult" /> object that redirects to the specified URL.</summary>
      <returns>The redirect result object.</returns>
      <param name="url">The URL to redirect to.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String)">
      <summary>Redirects to the specified action using the action name.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Object)">
      <summary>Redirects to the specified action using the action name and route values.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String)">
      <summary>Redirects to the specified action using the action name and controller name.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Object)">
      <summary>Redirects to the specified action using the action name, controller name, and route values.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified action using the action name, controller name, and route dictionary.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified action using the action name and route dictionary.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Object)">
      <summary>Redirects to the specified route using the specified route values.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String)">
      <summary>Redirects to the specified route using the route name.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Object)">
      <summary>Redirects to the specified route using the route name and route values.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified route using the route name and route dictionary.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified route using the route dictionary.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Request">
      <summary>Gets the <see cref="T:System.Web.HttpRequestBase" /> object for the current HTTP request.</summary>
      <returns>The request object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Response">
      <summary>Gets the <see cref="T:System.Web.HttpResponseBase" /> object for the current HTTP response.</summary>
      <returns>The response object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.RouteData">
      <summary>Gets the route data for the current request.</summary>
      <returns>The route data.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Server">
      <summary>Gets the <see cref="T:System.Web.HttpServerUtilityBase" /> object that provides methods that are used during Web request processing.</summary>
      <returns>The HTTP server object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Session">
      <summary>Gets the <see cref="T:System.Web.HttpSessionStateBase" /> object for the current HTTP request.</summary>
      <returns>The HTTP session-state object for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>This API supports the MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>This API supports the MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IAuthorizationFilter#OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>This API supports the MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IExceptionFilter#OnException(System.Web.Mvc.ExceptionContext)">
      <summary>This API supports the MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>This API supports the MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>This API supports the MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.TempDataProvider">
      <summary>Gets the temporary-data provider object that is used to store data for the next request.</summary>
      <returns>The temporary-data provider.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0)">
      <summary>Updates the specified model instance using values from the controller's current value provider.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String)">
      <summary>Updates the specified model instance using values from the controller's current value provider and a prefix.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude , and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a prefix.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object)">
      <summary>Validates the specified model instance.</summary>
      <returns>true if the model validation is successful; otherwise, false.</returns>
      <param name="model">The model instance to validate.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object,System.String)">
      <summary>Validates the specified model instance using an HTML prefix.</summary>
      <returns>true if the model validation is successful; otherwise, false.</returns>
      <param name="model">The model to validate.</param>
      <param name="prefix">The prefix to use when looking up values in the model provider.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0)">
      <summary>Updates the specified model instance using values from the controller's current value provider.</summary>
      <param name="model">The model instance to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.InvalidOperationException">The model was not successfully updated.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String)">
      <summary>Updates the specified model instance using values from the controller's current value provider and a prefix.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> list.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a prefix.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[])">
      <summary>Updates the specified model instance using values from the controller object's current value provider.</summary>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider.</summary>
      <param name="model">The model instance to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="P:System.Web.Mvc.Controller.Url">
      <summary>Gets the URL helper object that is used to generate URLs by using routing.</summary>
      <returns>The URL helper object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.User">
      <summary>Gets the user security information for the current HTTP request.</summary>
      <returns>The user security information for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object)">
      <summary>Validates the specified model instance.</summary>
      <param name="model">The model to validate.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object,System.String)">
      <summary>Validates the specified model instance using an HTML prefix.</summary>
      <param name="model">The model to validate.</param>
      <param name="prefix">The prefix to use when looking up values in the model provider.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders a view to the response.</summary>
      <returns>The view result that renders a view to the response.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the model that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the view name that renders a view.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the view name and model that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object using the view name and master-page name that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="masterName">The name of the master page or template to use when the view is rendered.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object using the view name, master-page name, and model that renders a view.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="masterName">The name of the master page or template to use when the view is rendered.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders the specified <see cref="T:System.Web.Mvc.IView" /> object.</summary>
      <returns>The view result.</returns>
      <param name="view">The view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders the specified <see cref="T:System.Web.Mvc.IView" /> object.</summary>
      <returns>The view result.</returns>
      <param name="view">The view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerActionInvoker">
      <summary>Represents a class that is responsible for invoking the action methods of a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerActionInvoker" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerActionInvoker.Binders">
      <summary>Gets or sets the model binders that are associated with the action.</summary>
      <returns>The model binders that are associated with the action.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.CreateActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Object)">
      <summary>Creates the action result.</summary>
      <returns>The action result object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="actionReturnValue">The action return value.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
      <summary>Finds the information about the action method.</summary>
      <returns>Information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>Retrieves information about the controller by using the specified controller context.</summary>
      <returns>Information about the controller.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Retrieves information about the action filters.</summary>
      <returns>Information about the action filters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
      <summary>Gets the value of the specified action-method parameter.</summary>
      <returns>The value of the action-method parameter.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameterDescriptor">The parameter descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValues(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Gets the values of the action-method parameters.</summary>
      <returns>The values of the action-method parameters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Invokes the specified action by using the specified controller context.</summary>
      <returns>The result of executing the action.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">The thread was aborted during invocation of the action.</exception>
      <exception cref="T:System.Exception">An unspecified error occurred during invocation of the action.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the specified action method by using the specified parameters and the controller context.</summary>
      <returns>The result of executing the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the specified action method by using the specified parameters, controller context, and action filters.</summary>
      <returns>The context for the ActionExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The action filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>Invokes the specified action result by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionResult">The action result.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IResultFilter},System.Web.Mvc.ActionResult)">
      <summary>Invokes the specified action result by using the specified action filters and the controller context.</summary>
      <returns>The context for the ResultExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The action filters.</param>
      <param name="actionResult">The action result.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAuthorizationFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IAuthorizationFilter},System.Web.Mvc.ActionDescriptor)">
      <summary>Invokes the specified authorization filters by using the specified action descriptor and controller context.</summary>
      <returns>The context for the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The authorization filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeExceptionFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IExceptionFilter},System.Exception)">
      <summary>Invokes the specified exception filters by using the specified exception and controller context.</summary>
      <returns>The context for the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The exception filters.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerBase">
      <summary>Represents the base class for all MVC controllers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerBase" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ControllerContext">
      <summary>Gets or sets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.ExecuteCore">
      <summary>Executes the request.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Initialize(System.Web.Routing.RequestContext)">
      <summary>Initializes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.System#Web#Mvc#IController#Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.TempData">
      <summary>Gets or sets the dictionary for temporary data.</summary>
      <returns>The dictionary for temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValidateRequest">
      <summary>Gets or sets a value that indicates whether request validation is enabled for this request.</summary>
      <returns>true if request validation is enabled for this request; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValueProvider">
      <summary>Gets or sets the value provider for the controller.</summary>
      <returns>The value provider for the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewData">
      <summary>Gets or sets the dictionary for view data.</summary>
      <returns>The dictionary for the view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerBuilder">
      <summary>Represents a class that is responsible for dynamically building a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerBuilder" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.Current">
      <summary>Gets the current controller builder object.</summary>
      <returns>The current controller builder.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.DefaultNamespaces">
      <summary>Gets the default namespaces.</summary>
      <returns>The default namespaces.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.GetControllerFactory">
      <summary>Gets the associated controller factory.</summary>
      <returns>The controller factory.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Type)">
      <summary>Sets the controller factory by using the specified type.</summary>
      <param name="controllerFactoryType">The type of the controller factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerFactoryType" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The controller factory cannot be assigned from the type in the <paramref name="controllerFactoryType" /> parameter.</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while the controller factory was being set.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Web.Mvc.IControllerFactory)">
      <summary>Sets the specified controller factory.</summary>
      <param name="controllerFactory">The controller factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerFactory" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ControllerContext">
      <summary>Encapsulates information about an HTTP request that matches specified <see cref="T:System.Web.Routing.RouteBase" /> and <see cref="T:System.Web.Mvc.ControllerBase" /> instances.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData,System.Web.Mvc.ControllerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified HTTP context, URL route data, and controller.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="routeData">The route data.</param>
      <param name="controller">The controller.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Routing.RequestContext,System.Web.Mvc.ControllerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified request context and controller.</summary>
      <param name="requestContext">The request context.</param>
      <param name="controller">The controller.</param>
      <exception cref="T:System.ArgumentNullException">One or both parameters are null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.Controller">
      <summary>Gets or sets the controller.</summary>
      <returns>The controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.HttpContext">
      <summary>Gets or sets the HTTP context.</summary>
      <returns>The HTTP context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.IsChildAction">
      <summary>Gets a value that indicates whether the associated action method is a child action.</summary>
      <returns>true if the associated action method is a child action; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.ParentActionViewContext">
      <summary>Gets an object that contains the view context information for the parent action method.</summary>
      <returns>An object that contains the view context information for the parent action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RequestContext">
      <summary>Gets or sets the request context.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RouteData">
      <summary>Gets or sets the URL route data.</summary>
      <returns>The URL route data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerDescriptor">
      <summary>Encapsulates information that describes a controller, such as its name, type, and actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerName">
      <summary>Gets the name of the controller.</summary>
      <returns>The name of the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds an action method by using the specified name and controller context.</summary>
      <returns>The information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCanonicalActions">
      <summary>Retrieves a list of action-method descriptors in the controller.</summary>
      <returns>A list of action-method descriptors in the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Retrieves custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Retrieves custom attributes of a specified type that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Retrieves a value that indicates whether one or more instance of the specified custom attribute are defined for this member.</summary>
      <returns>true if the <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Web.Mvc.CustomModelBinderAttribute">
      <summary>Represents an attribute that invokes a custom model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CustomModelBinderAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.GetBinder">
      <summary>Retrieves the associated model binder.</summary>
      <returns>A reference to an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadata">
      <summary>Provides a container for common metadata, for the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class, and for the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class for a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.#ctor(System.Web.Mvc.DataAnnotationsModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class.</summary>
      <param name="provider">The data-annotations model metadata provider.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
      <param name="displayColumnAttribute">The display column attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.GetSimpleDisplayText">
      <summary>Returns simple text for the model data.</summary>
      <returns>Simple text for the model data.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider">
      <summary>Implements the default model metadata provider for ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Gets the metadata for the specified property.</summary>
      <returns>The metadata for the property.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidationFactory">
      <summary>Represents the method that creates a <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> instance.</summary>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator">
      <summary>Provides a model validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class.</summary>
      <param name="metadata">The metadata for the model.</param>
      <param name="context">The controller context for the model.</param>
      <param name="attribute">The validation attribute for the model.</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.Attribute">
      <summary>Gets the validation attribute for the model validator.</summary>
      <returns>The validation attribute for the model validator.</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.ErrorMessage">
      <summary>Gets the error message for the validation failure.</summary>
      <returns>The error message for the validation failure.</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.IsRequired">
      <summary>Gets a value that indicates whether model validation is required.</summary>
      <returns>true if model validation is required; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.Validate(System.Object)">
      <summary>Returns a list of validation error messages for the model.</summary>
      <returns>A list of validation error messages for the model, or an empty list if no errors have occurred.</returns>
      <param name="container">The container for the model.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator`1">
      <summary>Provides a model validator for a specified validation type.</summary>
      <typeparam name="TAttribute"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator`1.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class.</summary>
      <param name="metadata">The metadata for the model.</param>
      <param name="context">The controller context for the model.</param>
      <param name="attribute">The validation attribute for the model.</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator`1.Attribute">
      <summary>Gets the validation attribute from the model validator.</summary>
      <returns>The validation attribute from the model validator.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider">
      <summary>Implements the default validation provider for MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidatorProvider.AddImplicitRequiredAttributeForValueTypes">
      <summary>Gets or sets a value that indicates whether non-nullable value types are required.</summary>
      <returns>true if non-nullable value types are required; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets a list of validators.</summary>
      <returns>A list of validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
      <param name="attributes">The list of validation attributes.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>Registers an adapter to provide client-side validation.</summary>
      <param name="attributeType">The type of the validation attribute.</param>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>Registers an adapter factory for the validation provider.</summary>
      <param name="attributeType">The type of the attribute.</param>
      <param name="factory">The factory that will be used to create the <see cref="T:System.Web.Mvc.ModelValidator" /> object for the specified attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>Registers the default adapter.</summary>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>Registers the default adapter factory.</summary>
      <param name="factory">The factory that will be used to create the <see cref="T:System.Web.Mvc.ModelValidator" /> object for the default adapter.</param>
    </member>
    <member name="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider">
      <summary>Provides a container for the error-information model validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of error-information model validators.</summary>
      <returns>A list of error-information model validators.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultControllerFactory">
      <summary>Represents the controller factory that is registered by default.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultControllerFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>Creates the specified controller by using the specified request context.</summary>
      <returns>A reference to the controller.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerName">The name of the controller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="controllerName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(System.Web.Routing.RequestContext,System.Type)">
      <summary>Retrieves the controller instance for the specified request context and controller type.</summary>
      <returns>The controller instance.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerType">The type of the controller.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="controllerType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerType" /> cannot be assigned.</exception>
      <exception cref="T:System.InvalidOperationException">An instance of <paramref name="controllerType" /> cannot be created.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
      <summary>Retrieves the controller type for the specified name and request context.</summary>
      <returns>The controller type.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>Releases the specified controller.</summary>
      <param name="controller">The controller to release.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultModelBinder">
      <summary>Maps a browser request to a data object. This class provides a concrete implementation of a model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultModelBinder" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.Binders">
      <summary>Gets or sets the model binders for the application.</summary>
      <returns>The model binders for the application.</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
      <summary>Binds the specified property by using the specified controller context and binding context and the specified property descriptor.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be bound. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.Type)">
      <summary>Creates the specified model type by using the specified controller context and binding context.</summary>
      <returns>A data object of the specified type.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="modelType">The type of the model object to return.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.Int32)">
      <summary>Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is an integer.</summary>
      <returns>The name of the subindex.</returns>
      <param name="prefix">The prefix for the subindex.</param>
      <param name="index">The index value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.String)">
      <summary>Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is a string.</summary>
      <returns>The name of the subindex.</returns>
      <param name="prefix">The prefix for the subindex.</param>
      <param name="index">The index value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubPropertyName(System.String,System.String)">
      <summary>Creates the name of the subproperty by using the specified prefix and property name.</summary>
      <returns>The name of the subproperty.</returns>
      <param name="prefix">The prefix for the subproperty.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetFilteredModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns a set of properties that match the property filter restrictions that are established by the specified <paramref name="binding context" />.</summary>
      <returns>An enumerable set of property descriptors.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns the properties of the model by using the specified controller context and binding context.</summary>
      <returns>A collection of property descriptors.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetPropertyValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Web.Mvc.IModelBinder)">
      <summary>Returns the value of a property using the specified controller context, binding context, property descriptor, and property binder.</summary>
      <returns>An object that represents the property value.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">The descriptor for the property to access. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="propertyBinder">An object that provides a way to bind the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetTypeDescriptor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns the descriptor object for a type that is specified by its controller context and binding context.</summary>
      <returns>A custom type descriptor object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.IsModelValid(System.Web.Mvc.ModelBindingContext)">
      <summary>Determines whether a data model is valid for the specified binding context.</summary>
      <returns>true if the model is valid; otherwise, false.</returns>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Called when the model is updated.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Called when the model is updating.</summary>
      <returns>true if the model is updating; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Called when the specified property is validated.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be validated. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Called when the specified property is validating.</summary>
      <returns>true if the property is validating; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property being validated. The descriptor provides information such as component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.ResourceClassKey">
      <summary>Gets or sets the name of the resource file (class key) that contains localized string values.</summary>
      <returns>The name of the resource file (class key).</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.SetProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Sets the specified property by using the specified controller context, binding context, and property value.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be set. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultViewLocationCache">
      <summary>Represents a memory cache for view locations.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> class by using the specified cache time span.</summary>
      <param name="timeSpan">The cache time span.</param>
      <exception cref="T:System.InvalidOperationException">The Ticks attribute of the <paramref name="timeSpan" /> parameter is set to a negative number.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>Retrieves the default view location by using the specified HTTP context and cache key.</summary>
      <returns>The default view location.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>Inserts the view in the specified virtual path by using the specified HTTP context, cache key, and virtual path.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
      <param name="virtualPath">The virtual path</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="F:System.Web.Mvc.DefaultViewLocationCache.Null">
      <summary>Creates an empty view location cache.</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultViewLocationCache.TimeSpan">
      <summary>Gets or sets the cache time span.</summary>
      <returns>The cache time span.</returns>
    </member>
    <member name="T:System.Web.Mvc.DictionaryValueProvider`1">
      <summary>Represents the base class for value providers whose values come from a collection that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</summary>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0},System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DictionaryValueProvider`1" /> class.</summary>
      <param name="dictionary">The name/value pairs that are used to initialize the value provider.</param>
      <param name="culture">Information about a specific culture, such as the names of the culture, the writing system, and the calendar used.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="prefix" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetValue(System.String)">
      <summary>Returns a value object using the specified key and controller context.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelMetadataProvider">
      <summary>Provides an empty metadata provider for data models that do not require metadata.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</summary>
      <returns>An empty instance of the model metadata.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelValidatorProvider">
      <summary>Provides an empty validation provider for models that do not require a validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets the empty model validator.</summary>
      <returns>The empty model validator.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyResult">
      <summary>Represents a result that does nothing, such as a controller action method that returns nothing.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Executes the specified result context.</summary>
      <param name="context">The result context.</param>
    </member>
    <member name="T:System.Web.Mvc.ExceptionContext">
      <summary>Provides the context for using the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ExceptionContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor(System.Web.Mvc.ControllerContext,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ExceptionContext" /> class for the specified exception by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="exception">The exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception has been handled.</summary>
      <returns>true if the exception has been handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.ExpressionHelper">
      <summary>Provides a helper class to get the model name from an expression.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.Linq.Expressions.LambdaExpression)">
      <summary>Gets the model name from a lambda expression.</summary>
      <returns>The model name.</returns>
      <param name="expression">The expression.</param>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.String)">
      <summary>Gets the model name from a string expression.</summary>
      <returns>The model name.</returns>
      <param name="expression">The expression.</param>
    </member>
    <member name="T:System.Web.Mvc.FieldValidationMetadata">
      <summary>Provides a container for client-side field validation metadata.</summary>
    </member>
    <member name="M:System.Web.Mvc.FieldValidationMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FieldValidationMetadata" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.FieldName">
      <summary>Gets or sets the name of the data field.</summary>
      <returns>The name of the data field.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ReplaceValidationMessageContents">
      <summary>Gets or sets a value that indicates whether the validation message contents should be replaced with the client validation error.</summary>
      <returns>true if the validation message contents should be replaced with the client validation error; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationMessageId">
      <summary>Gets or sets the validator message ID.</summary>
      <returns>The validator message ID.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationRules">
      <summary>Gets the client validation rules.</summary>
      <returns>The client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.FileContentResult">
      <summary>Sends the contents of a binary file to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileContentResult" /> class by using the specified file contents and content type.</summary>
      <param name="fileContents">The byte array to send to the response.</param>
      <param name="contentType">The content type to use for the response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileContents" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Web.Mvc.FileContentResult.FileContents">
      <summary>The binary content to send to the response.</summary>
      <returns>The file contents.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file content to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FilePathResult">
      <summary>Sends the contents of a file to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilePathResult" /> class by using the specified file name and content type.</summary>
      <param name="fileName">The name of the file to send to the response.</param>
      <param name="contentType">The content type of the response.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fileName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.FilePathResult.FileName">
      <summary>Gets or sets the path of the file that is sent to the response.</summary>
      <returns>The path of the file that is sent to the response.</returns>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FileResult">
      <summary>Represents a base class that is used to send binary file content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileResult" /> class.</summary>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="contentType" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.ContentType">
      <summary>Gets the content type to use for the response.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.FileDownloadName">
      <summary>Gets or sets the content-disposition header so that a file-download dialog box is displayed in the browser with the specified file name.</summary>
      <returns>The name of the file.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FileStreamResult">
      <summary>Sends binary content to the response by using a <see cref="T:System.IO.Stream" /> instance.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileStreamResult" /> class.</summary>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type to use for the response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileStream" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Web.Mvc.FileStreamResult.FileStream">
      <summary>Gets the stream that will be sent to the response.</summary>
      <returns>The file stream.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FilterAttribute">
      <summary>Represents the base class for action-filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.Order">
      <summary>Gets or sets the order in which the action filters are executed.</summary>
      <returns>The order in which the action filters are executed.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterInfo">
      <summary>Encapsulates information about the available action filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterInfo" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ActionFilters">
      <summary>Gets all the action filters in the application.</summary>
      <returns>All action filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.AuthorizationFilters">
      <summary>Gets all the authorization filters in the application.</summary>
      <returns>The authorization filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ExceptionFilters">
      <summary>Gets all the exception filters in the application.</summary>
      <returns>The exception filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ResultFilters">
      <summary>Gets all the result filters in the application.</summary>
      <returns>The result filters.</returns>
    </member>
    <member name="T:System.Web.Mvc.FormCollection">
      <summary>Contains the form value providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormCollection" /> class.</summary>
      <param name="collection">The collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.GetValue(System.String)">
      <summary>Gets the specified value provider.</summary>
      <returns>The value provider.</returns>
      <param name="name">The name of the value provider to get.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>Gets a value that indicates whether the value provider contains an entry that has the specified prefix.</summary>
      <returns>true if the value provider contains an entry that has the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to look for.</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>Gets a value from a value provider using the specified key.</summary>
      <returns>A value from a value provider.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.ToValueProvider">
      <summary>Returns a dictionary that contains the value providers.</summary>
      <returns>A dictionary of value providers.</returns>
    </member>
    <member name="T:System.Web.Mvc.FormContext">
      <summary>Encapsulates information that is required in order to validate and process the input data from an HTML form.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormContext" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FieldValidators">
      <summary>Gets the field validators for the form.</summary>
      <returns>A dictionary of field validators for the form.</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FormId">
      <summary>Gets or sets the form identifier.</summary>
      <returns>The form identifier.</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetJsonValidationMetadata">
      <summary>Retrieves a serialized object that contains the form identifier and field-validation values for the form.</summary>
      <returns>A serialized object that contains the form identifier and field-validation values for the form.</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String)">
      <summary>Retrieves the validation value for the specified input field.</summary>
      <returns>The value to validate the field input with.</returns>
      <param name="fieldName">The name of the field to retrieve the validation value for.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fieldName" /> parameter is either null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String,System.Boolean)">
      <summary>Retrieves the validation value for the specified input field and a value that indicates what to do if the validation value is not found.</summary>
      <returns>The value to validate the field input with.</returns>
      <param name="fieldName">The name of the field to retrieve the validation value for.</param>
      <param name="createIfNotFound">true to create a validation value if one is not found; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fieldName" /> parameter is either null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ReplaceValidationSummary">
      <summary>Determines whether client validation errors should be dynamically added to the validation summary.</summary>
      <returns>true if client validation errors should be added to the validation summary; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ValidationSummaryId">
      <summary>Gets or sets the identifier for the validation summary.</summary>
      <returns>The identifier for the validation summary.</returns>
    </member>
    <member name="T:System.Web.Mvc.FormMethod">
      <summary>Enumerates the HTTP request types for a form.</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Get">
      <summary>Specifies a GET request.</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Post">
      <summary>Specifies a POST request.</summary>
    </member>
    <member name="T:System.Web.Mvc.FormValueProvider">
      <summary>Represents a value provider for form values that are contained in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.FormValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of a form-value provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a form-value provider object for the specified controller context.</summary>
      <returns>A form-value provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorAttribute">
      <summary>Represents an attribute that is used to handle an exception that is thrown by an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.ExceptionType">
      <summary>Gets or sets the type of the exception.</summary>
      <returns>The type of the exception.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.Master">
      <summary>Gets or sets the master view for displaying exception information.</summary>
      <returns>The master view.</returns>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an exception occurs.</summary>
      <param name="filterContext">The action-filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.TypeId">
      <summary>Gets the unique identifier for this attribute.</summary>
      <returns>The unique identifier for this attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.View">
      <summary>Gets or sets the page view for displaying exception information.</summary>
      <returns>The page view.</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorInfo">
      <summary>Encapsulates information for handling an error that was thrown by an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorInfo.#ctor(System.Exception,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HandleErrorInfo" /> class.</summary>
      <param name="exception">The exception.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="controllerName" /> or <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ActionName">
      <summary>Gets or sets the name of the action that was executing when the exception was thrown.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ControllerName">
      <summary>Gets or sets the name of the controller that contains the action method that threw the exception.</summary>
      <returns>The name of the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="T:System.Web.Mvc.HiddenInputAttribute">
      <summary>Represents an attribute that is used to indicate whether a property or field value should be rendered as a hidden input element.</summary>
    </member>
    <member name="M:System.Web.Mvc.HiddenInputAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HiddenInputAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.HiddenInputAttribute.DisplayValue">
      <summary>Gets or sets a value that indicates whether to display the value of the hidden input element.</summary>
      <returns>true if the value should be displayed; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper">
      <summary>Represents support for rendering HTML controls in a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> or the <paramref name="viewDataContainer" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The route collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more parameters is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String)">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
      <param name="salt">The salt value, which can be any non-empty string.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String,System.String,System.String)">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value, domain, and path.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
      <param name="salt">The salt value, which can be any non-empty string.</param>
      <param name="domain">The application domain.</param>
      <param name="path">The virtual path.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.Object)">
      <summary>Converts the specified attribute object to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.</returns>
      <param name="value">The object to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.String)">
      <summary>Converts the specified attribute string to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.</returns>
      <param name="value">The string to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation">
      <summary>Enables input validation that is performed by using client script in the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.Object)">
      <summary>Converts the value of the specified object to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string.</returns>
      <param name="value">The object to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.String)">
      <summary>Converts the specified string to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string.</returns>
      <param name="value">The string to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String)">
      <summary>Creates an HTML element ID using the specified element name.</summary>
      <returns>The ID of the HTML element.</returns>
      <param name="name">The name of the HTML element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String,System.String)">
      <summary>Creates an HTML element ID using the specified element name and a string that replaces dots in the name.</summary>
      <returns>The ID of the HTML element.</returns>
      <param name="name">The name of the HTML element.</param>
      <param name="idAttributeDotReplacement">The string that replaces dots (.) in the <paramref name="name" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter or the <paramref name="idAttributeDotReplacement" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified action method, and enables the user to specify the communication protocol, name of the host, and a URL fragment.</summary>
      <returns>An HTML element that links to the specified action method.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.</param>
      <param name="hostName">The name of the host.</param>
      <param name="fragment">The fragment identifier.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified action method.</summary>
      <returns>An HTML element that links to the specified action method.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified URL route, and enables the user to specify the communication protocol, name of the host, and a URL fragment.</summary>
      <returns>An HTML element that links to the specified URL route.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.</param>
      <param name="hostName">The name of the host.</param>
      <param name="fragment">The fragment identifier.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified URL route.</summary>
      <returns>An HTML element that links to the specified URL route.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetFormMethodString(System.Web.Mvc.FormMethod)">
      <summary>Returns the HTTP method that handles form input (GET or POST) as a string.</summary>
      <returns>The form method string, either "get" or "post".</returns>
      <param name="method">The HTTP method that handles the form.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetInputTypeString(System.Web.Mvc.InputType)">
      <summary>Returns the HTML input control type as a string.</summary>
      <returns>The input type string ("checkbox", "hidden", "password", "radio", or "text").</returns>
      <param name="inputType">The enumerated input type.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.String)">
      <summary>Returns a hidden input element that identifies the override method for the specified HTTP data-transfer method that was used by the client.</summary>
      <returns>The override method that uses the HTTP data-transfer method that was used by the client.</returns>
      <param name="httpMethod">The HTTP data-transfer method that was used by the client (DELETE, HEAD, or PUT).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="httpVerb" /> parameter is not "PUT", "DELETE", or "HEAD".</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.Web.Mvc.HttpVerbs)">
      <summary>Returns a hidden input element that identifies the override method for the specified verb that represents the HTTP data-transfer method used by the client.</summary>
      <returns>The override method that uses the verb that represents the HTTP data-transfer method used by the client.</returns>
      <param name="httpVerb">The verb that represents the HTTP data-transfer method used by the client.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="httpVerb" /> parameter is not "PUT", "DELETE", or "HEAD".</exception>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.IdAttributeDotReplacement">
      <summary>Gets or sets the character that replaces periods in the ID attribute of an element.</summary>
      <returns>The character that replaces periods in the ID attribute of an element.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.RouteCollection">
      <summary>Gets or sets the collection of routes for the application.</summary>
      <returns>The collection of routes for the application.</returns>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputCssClassName">
      <summary>The name of the CSS class that is used to style an input field when a validation error occurs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputValidCssClassName">
      <summary>The name of the CSS class that is used to style an input field when the input is valid.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageCssClassName">
      <summary>The name of the CSS class that is used to style the error message when a validation error occurs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageValidCssClassName">
      <summary>The name of the CSS class that is used to style the validation message when the input is valid.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryCssClassName">
      <summary>The name of the CSS class that is used to style validation summary error messages.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryValidCssClassName">
      <summary>The name of the CSS class that is used to style the validation summary when the input is valid.</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewContext">
      <summary>Gets or sets the context information about the view.</summary>
      <returns>The context of the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewData">
      <summary>Gets the current view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewDataContainer">
      <summary>Gets or sets the view data container.</summary>
      <returns>The view data container.</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper`1">
      <summary>Represents support for rendering HTML controls in a strongly typed view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper`1" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper`1" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The route collection.</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper`1.ViewData">
      <summary>Gets the strongly typed view data dictionary.</summary>
      <returns>The strongly typed view data dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpAntiForgeryException">
      <summary>Represents an HTTP anti-forgery exception.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpAntiForgeryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpAntiForgeryException" /> class by using a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpAntiForgeryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpAntiForgeryException" /> class by using a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Web.Mvc.HttpAntiForgeryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpAntiForgeryException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Web.Mvc.HttpDeleteAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP DELETE requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpDeleteAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP DELETE request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProvider">
      <summary>Represents a value provider to use with values that come from a collection of HTTP files.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpFileCollectionValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of an HTTP file collection value provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value provider object for the specified controller context.</summary>
      <returns>An HTTP file collection value provider.</returns>
      <param name="controllerContext">An object that encapsulates information about the HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpGetAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP GET requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpGetAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP GET request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP POST requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPostAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP POST request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostedFileBaseModelBinder">
      <summary>Binds a model to a posted file.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPostedFileBaseModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model.</summary>
      <returns>The bound value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
      <exception cref="T:System.ArgumentNullException">One or both parameters are null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpPutAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP PUT requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPutAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP PUT request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpRequestExtensions">
      <summary>Extends the <see cref="T:System.Web.HttpRequestBase" /> class that contains the HTTP values that were sent by a client during a Web request.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpRequestExtensions.GetHttpMethodOverride(System.Web.HttpRequestBase)">
      <summary>Retrieves the HTTP data-transfer method override that was used by the client.</summary>
      <returns>The HTTP data-transfer method override that was used by the client.</returns>
      <param name="request">An object that contains the HTTP values that were sent by a client during a Web request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> parameter is null.</exception>
      <exception cref="T:System.NotImplementedException">The HTTP data-transfer method override was not implemented.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpUnauthorizedResult">
      <summary>Represents the result of an unauthorized HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpVerbs">
      <summary>Enumerates the HTTP verbs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Get">
      <summary>Retrieves the information or entity that is identified by the URI of the request.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Post">
      <summary>Posts a new entity as an addition to a URI.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Put">
      <summary>Replaces an entity that is identified by a URI.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Delete">
      <summary>Requests that a specified URI be deleted.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Head">
      <summary>Retrieves the message headers for the information or entity that is identified by the URI of the request.</summary>
    </member>
    <member name="T:System.Web.Mvc.IActionFilter">
      <summary>Defines the methods that are used in an action filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called after the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called before an action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IActionInvoker">
      <summary>Defines the contract for an action invoker, which is used to invoke an action in response to an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Invokes the specified action by using the specified controller context.</summary>
      <returns>true if the action was found; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="T:System.Web.Mvc.IAuthorizationFilter">
      <summary>Defines the methods that are required for an authorization filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IAuthorizationFilter.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IController">
      <summary>Defines the methods that are required for a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.IController.Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerFactory">
      <summary>Defines the methods that are  required for a controller factory.</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>Creates the specified controller by using the specified request context.</summary>
      <returns>The controller.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>Releases the specified controller.</summary>
      <param name="controller">The controller.</param>
    </member>
    <member name="T:System.Web.Mvc.IExceptionFilter">
      <summary>Defines the methods that are required for an exception filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an exception occurs.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IModelBinder">
      <summary>Defines the methods that are required for a model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model to a value by using the specified controller context and binding context.</summary>
      <returns>The bound value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
    </member>
    <member name="T:System.Web.Mvc.InputType">
      <summary>Enumerates the types of input controls.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.CheckBox">
      <summary>A check box.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Hidden">
      <summary>A hidden field.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Password">
      <summary>A password box.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Radio">
      <summary>A radio button.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Text">
      <summary>A text box.</summary>
    </member>
    <member name="T:System.Web.Mvc.IResultFilter">
      <summary>Defines the methods that are required for a result filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called after an action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before an action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IRouteWithArea">
      <summary>Associates a route with an area in an ASP.NET MVC application.</summary>
    </member>
    <member name="P:System.Web.Mvc.IRouteWithArea.Area">
      <summary>Gets the name of the area to associate the route with.</summary>
      <returns>The name of the area to associate the route with.</returns>
    </member>
    <member name="T:System.Web.Mvc.ITempDataProvider">
      <summary>Defines the contract for temporary-data providers that store data that is viewed on the next request.</summary>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>Loads the temporary data.</summary>
      <returns>The temporary data.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Saves the temporary data.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="values">The values.</param>
    </member>
    <member name="T:System.Web.Mvc.IValueProvider">
      <summary>Defines the methods that are required for a value provider in ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.GetValue(System.String)">
      <summary>Retrieves a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
    </member>
    <member name="T:System.Web.Mvc.IView">
      <summary>Defines the methods that are required for a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.IView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>Renders the specified view context by using the specified the writer object.</summary>
      <param name="viewContext">The view context.</param>
      <param name="writer">The writer object.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewDataContainer">
      <summary>Defines the methods that are required for a view data dictionary.</summary>
    </member>
    <member name="P:System.Web.Mvc.IViewDataContainer.ViewData">
      <summary>Gets or sets the view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.IViewEngine">
      <summary>Defines the methods that are required for a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="useCache">true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>Finds the specified view by using the specified controller context.</summary>
      <returns>The page view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master.</param>
      <param name="useCache">true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>Releases the specified view by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="view">The view.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewLocationCache">
      <summary>Defines the methods that are required in order to cache view locations in memory.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>Gets the view location by using the specified HTTP context and the cache key.</summary>
      <returns>The view location.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>Inserts the specified view location into the cache by using the specified HTTP context and the cache key.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="T:System.Web.Mvc.JavaScriptResult">
      <summary>Sends JavaScript content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JavaScriptResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.JavaScriptResult.Script">
      <summary>Gets or sets the script.</summary>
      <returns>The script.</returns>
    </member>
    <member name="T:System.Web.Mvc.JsonRequestBehavior">
      <summary>Specifies whether HTTP GET requests from the client are allowed.</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.AllowGet">
      <summary>HTTP GET requests from the client are allowed.</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.DenyGet">
      <summary>HTTP GET requests from the client are not allowed.</summary>
    </member>
    <member name="T:System.Web.Mvc.JsonResult">
      <summary>Represents a class that is used to send JSON-formatted content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JsonResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentEncoding">
      <summary>Gets or sets the content encoding.</summary>
      <returns>The content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.Data">
      <summary>Gets or sets the data.</summary>
      <returns>The data.</returns>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.JsonRequestBehavior">
      <summary>Gets or sets a value that indicates whether HTTP GET requests from the client are allowed.</summary>
      <returns>A value that indicates whether HTTP GET requests from the client are allowed.</returns>
    </member>
    <member name="T:System.Web.Mvc.LinqBinaryModelBinder">
      <summary>Maps a browser request to a LINQ <see cref="T:System.Data.Linq.Binary" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.LinqBinaryModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound data object. If the model cannot be bound, this method returns null.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderAttribute">
      <summary>Represents an attribute that is used to associate a model type to a model-builder type.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderAttribute" /> class.</summary>
      <param name="binderType">The type of the binder.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="binderType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderAttribute.BinderType">
      <summary>Gets or sets the type of the binder.</summary>
      <returns>The type of the binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.GetBinder">
      <summary>Retrieves an instance of the model binder.</summary>
      <returns>A reference to an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</returns>
      <exception cref="T:System.InvalidOperationException">An error occurred while an instance of the model binder was being created.</exception>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderDictionary">
      <summary>Represents a class that contains all model binders for the application, listed by binder type.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Adds the specified item to the model binder dictionary.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Type,System.Web.Mvc.IModelBinder)">
      <summary>Adds the specified item to the model binder dictionary using the specified key.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Clear">
      <summary>Removes all items from the model binder dictionary.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Determines whether the model binder dictionary contains a specified value.</summary>
      <returns>true if <paramref name="item" /> is found in the model binder dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.ContainsKey(System.Type)">
      <summary>Determines whether the model binder dictionary contains an element that has the specified key.</summary>
      <returns>true if the model binder dictionary contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder}[],System.Int32)">
      <summary>Copies the elements of the model binder dictionary to an array, starting at a specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination array. -or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Count">
      <summary>Gets the number of elements in the model binder dictionary.</summary>
      <returns>The number of elements in the model binder dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.DefaultBinder">
      <summary>Gets or sets the default model binder.</summary>
      <returns>The default model binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type)">
      <summary>Retrieves the model binder for the specified type.</summary>
      <returns>The model binder.</returns>
      <param name="modelType">The type of the model to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type,System.Boolean)">
      <summary>Retrieves the model binder for the specified type or retrieves the default model binder.</summary>
      <returns>The model binder.</returns>
      <param name="modelType">The type of the model to retrieve.</param>
      <param name="fallbackToDefault">true to retrieve the default model binder.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the model binder dictionary is read-only.</summary>
      <returns>true if the model binder dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Item(System.Type)">
      <summary>Gets or sets the specified key in an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</summary>
      <returns>The key for the specified item.</returns>
      <param name="key">The item key.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Keys">
      <summary>Gets a collection that contains the keys in the model binder dictionary.</summary>
      <returns>A collection that contains the keys in the model binder dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Removes the first occurrence of the specified element from the model binder dictionary.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the model binder dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the model binder dictionary.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Type)">
      <summary>Removes the element that has the specified key from the model binder dictionary.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the model binder dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.TryGetValue(System.Type,System.Web.Mvc.IModelBinder@)">
      <summary>Gets the value that is associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Values">
      <summary>Gets a collection that contains the values in the model binder dictionary.</summary>
      <returns>A collection that contains the values in the model binder dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinders">
      <summary>Provides global access to the model binders for the application.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinders.Binders">
      <summary>Gets the model binders for the application.</summary>
      <returns>The model binders for the application.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBindingContext">
      <summary>Provides the context in which a model binder functions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBindingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor(System.Web.Mvc.ModelBindingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBindingContext" /> class using the binding context.</summary>
      <param name="bindingContext">The binding context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>Gets or sets a value that indicates whether the binder should use an empty prefix.</summary>
      <returns>true if the binder should use an empty prefix; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.Model">
      <summary>Gets or sets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelMetadata">
      <summary>Gets or sets the model metadata.</summary>
      <returns>The model metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelName">
      <summary>Gets or sets the name of the model.</summary>
      <returns>The name of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelState">
      <summary>Gets or sets the state of the model.</summary>
      <returns>The state of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelType">
      <summary>Gets or sets the type of the model.</summary>
      <returns>The type of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyFilter">
      <summary>Gets or sets the property filter.</summary>
      <returns>The property filter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyMetadata">
      <summary>Gets the property metadata.</summary>
      <returns>The property metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ValueProvider">
      <summary>Gets or sets the value provider.</summary>
      <returns>The value provider.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRangeRule">
      <summary>Provides a container for a range-validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRangeRule.#ctor(System.String,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRangeRule" /> class.</summary>
      <param name="errorMessage">The error message.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRegexRule">
      <summary>Provides a container for a regular-expression client validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRegexRule.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRegexRule" /> class.</summary>
      <param name="errorMessage">The error message to display when the regular expression validation fails.</param>
      <param name="pattern">The regular expression.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRequiredRule">
      <summary>Provides a container for client validation for required field.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRequiredRule.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRule" /> class.</summary>
      <param name="errorMessage">The error message to display when a value for the required field is not provided.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRule">
      <summary>Provides a base class container for a client validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRule" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ErrorMessage">
      <summary>Gets or sets the error message for the client validation rule.</summary>
      <returns>The error message for the client validation rule.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ValidationParameters">
      <summary>Gets the list of validation parameters.</summary>
      <returns>A list of validation parameters.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ValidationType">
      <summary>Gets or sets the validation type.</summary>
      <returns>The validation type.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationStringLengthRule">
      <summary>Provides a container for a string-length validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationStringLengthRule.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationStringLengthRule" /> class.</summary>
      <param name="errorMessage">The validation error message.</param>
      <param name="minimumLength">The minimum length of the string.</param>
      <param name="maximumLength">The maximum length of the string.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelError">
      <summary>Represents an error that occurs during model binding.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified exception.</summary>
      <param name="exception">The exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified exception and error message.</summary>
      <param name="exception">The exception.</param>
      <param name="errorMessage">The error message.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified error message.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelError.ErrorMessage">
      <summary>Gets or sets the error message.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelError.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelErrorCollection">
      <summary>A collection of <see cref="T:System.Web.Mvc.ModelError" /> instances.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelErrorCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.Exception)">
      <summary>Adds the specified <see cref="T:System.Exception" /> object to the model-error collection.</summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.String)">
      <summary>Adds the specified error message to the model-error collection.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadata">
      <summary>Provides a container for common metadata, for the <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> class, and for the <see cref="T:System.Web.Mvc.ModelValidator" /> class for a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.#ctor(System.Web.Mvc.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</summary>
      <param name="provider">The provider.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.AdditionalValues">
      <summary>Gets a dictionary that contains additional metadata about the model.</summary>
      <returns>A dictionary that contains additional metadata about the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ContainerType">
      <summary>Gets or sets the type of the container for the model.</summary>
      <returns>The type of the container for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty strings that are posted back in forms should be converted to null.</summary>
      <returns>true if empty strings that are posted back in forms should be converted to null; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DataTypeName">
      <summary>Gets or sets meta information about the data type. </summary>
      <returns>Meta information about the data type. </returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Description">
      <summary>Gets or sets the description of the model.</summary>
      <returns>The description of the model. The default value is null.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayFormatString">
      <summary>Gets or sets the display format string for the model.</summary>
      <returns>The display format string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayName">
      <summary>Gets or sets the display name of the model.</summary>
      <returns>The display name of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.EditFormatString">
      <summary>Gets or sets the edit format string of the model.</summary>
      <returns>The edit format string of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromLambdaExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.Mvc.ViewDataDictionary{``0})">
      <summary>Gets the metadata from the <see cref="T:System.Linq.Expressions.Expression" /> parameter for the model.</summary>
      <returns>The metadata for the model.</returns>
      <param name="expression">An expression that identifies the model.</param>
      <param name="viewData">The view data dictionary.</param>
      <typeparam name="TParameter">The type of the parameter.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromStringExpression(System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Gets the metadata from the expression parameter for the model.</summary>
      <returns>The metadata for the model.</returns>
      <param name="expression">An expression that identifies the model.</param>
      <param name="viewData">The view data dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetDisplayName">
      <summary>Gets the display name for the model.</summary>
      <returns>The display name for the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetSimpleDisplayText">
      <summary>Returns the simple description of the model.</summary>
      <returns>The simple description of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetValidators(System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of validators for the model.</summary>
      <returns>A list of validators for the model.</returns>
      <param name="context">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.HideSurroundingHtml">
      <summary>Gets or sets a value that indicates whether the model object should be rendered using associated HTML elements.</summary>
      <returns>true if the associated HTML elements that contains the model object should be included with the object; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsComplexType">
      <summary>Gets or sets a value that indicates whether the model is a complex type.</summary>
      <returns>A value that indicates whether the model is considered a complex type by the MVC framework.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsNullableValueType">
      <summary>Gets a value that indicates whether the type is nullable.</summary>
      <returns>true if the type is nullable; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the model is read-only.</summary>
      <returns>true if the model is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsRequired">
      <summary>Gets or sets a value that indicates whether the model is required.</summary>
      <returns>true if the model is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Model">
      <summary>Gets the value of the model.</summary>
      <returns>The value of the model. For more information about <see cref="T:System.Web.Mvc.ModelMetadata" />, see the entry ASP.NET MVC 2 Templates, Part 2: ModelMetadata on Brad Wilson's blog</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ModelType">
      <summary>Gets the type of the model.</summary>
      <returns>The type of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.NullDisplayText">
      <summary>Gets or sets the string to display for null values.</summary>
      <returns>The string to display for null values.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Properties">
      <summary>Gets a collection of model metadata objects that describe the properties of the model.</summary>
      <returns>A collection of model metadata objects that describe the properties of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.PropertyName">
      <summary>Gets the property name.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Provider">
      <summary>Gets or sets the provider.</summary>
      <returns>The provider.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShortDisplayName">
      <summary>Gets or sets a short display name.</summary>
      <returns>The short display name.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForDisplay">
      <summary>Gets or sets a value that indicates whether the property should be displayed in read-only views such as list and detail views.</summary>
      <returns>true if the model should be displayed in read-only views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForEdit">
      <summary>Gets or sets a value that indicates whether the model should be displayed in editable views.</summary>
      <returns>true if the model should be displayed in editable views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.SimpleDisplayText">
      <summary>Gets or sets the simple display string for the model.</summary>
      <returns>The simple display string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.TemplateHint">
      <summary>Gets or sets a hint that suggests what template to use for this model.</summary>
      <returns>A hint that suggests what template to use for this model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Watermark">
      <summary>Gets or sets a value that can be used as a watermark.</summary>
      <returns>The watermark.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProvider">
      <summary>Provides an abstract base class for a custom metadata provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the object that derives from the <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Gets a <see cref="T:System.Web.Mvc.ModelMetadata" /> object for each property of a model.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ModelMetadata" /> object for each property of a model.</returns>
      <param name="container">The container.</param>
      <param name="containerType">The type of the container.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Gets metadata for the specified property.</summary>
      <returns>The metadata model for the specified property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyName">The property to get the metadata model for.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Gets metadata for the specified model accessor and model type.</summary>
      <returns>The metadata.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">They type of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProviders">
      <summary>Provides a container for the current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> instance.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadataProviders.Current">
      <summary>Gets or sets the current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> object.</summary>
      <returns>The current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> object.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelState">
      <summary>Encapsulates the state of model binding to a property of an action-method argument, or to the argument itself.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelState" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Errors">
      <summary>Returns a <see cref="T:System.Web.Mvc.ModelErrorCollection" /> object that contains any errors that occurred during model binding.</summary>
      <returns>The errors.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Value">
      <summary>Returns a <see cref="T:System.Web.Mvc.ValueProviderResult" /> object that encapsulates the value that was being bound during model binding.</summary>
      <returns>The value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelStateDictionary">
      <summary>Represents the state of an attempt to bind a posted form to an action method, which includes validation information.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor(System.Web.Mvc.ModelStateDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> class by using values that are copied from the specified model-state dictionary.</summary>
      <param name="dictionary">The model-state dictionary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Adds the specified item to the model-state dictionary.</summary>
      <param name="item">The object to add to the model-state dictionary.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.String,System.Web.Mvc.ModelState)">
      <summary>Adds an element that has the specified key and value to the model-state dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already occurs in the model-state dictionary.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>Adds the specified model error to the errors collection for the model-state dictionary that is associated with the specified key.</summary>
      <param name="key">The key.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>Adds the specified error message to the errors collection for the model-state dictionary that is associated with the specified key.</summary>
      <param name="key">The key.</param>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Clear">
      <summary>Removes all items from the model-state dictionary.</summary>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Determines whether the model-state dictionary contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the model-state dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the model-state dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.ContainsKey(System.String)">
      <summary>Determines whether the model-state dictionary contains the specified key.</summary>
      <returns>true if the model-state dictionary contains the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the model-state dictionary. </param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState}[],System.Int32)">
      <summary>Copies the elements of the model-state dictionary to an array, starting at a specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Count">
      <summary>Gets the number of key/value pairs in the collection.</summary>
      <returns>The number of key/value pairs in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsValid">
      <summary>Gets a value that indicates whether this instance of the model-state dictionary is valid.</summary>
      <returns>true if this instance is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.IsValidField(System.String)">
      <summary>Determines whether there are any <see cref="T:System.Web.Mvc.ModelError" /> objects that are associated with or prefixed with the specified key.</summary>
      <returns>true if the model-state dictionary contains a value that is associated with the specified key; otherwise, false.</returns>
      <param name="key">The key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Item(System.String)">
      <summary>Gets or sets the value that is associated with the specified key.</summary>
      <returns>The model state item.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Keys">
      <summary>Gets a collection that contains the keys in the dictionary.</summary>
      <returns>A collection that contains the keys of the model-state dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Merge(System.Web.Mvc.ModelStateDictionary)">
      <summary>Copies the values from the specified <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object into this dictionary, overwriting existing values if keys are the same.</summary>
      <param name="dictionary">The dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Removes the first occurrence of the specified object from the model-state dictionary.</summary>
      <returns>true if <paramref name="item" /> was successfully removed the model-state dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the model-state dictionary.</returns>
      <param name="item">The object to remove from the model-state dictionary.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the model-state dictionary.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the model-state dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.SetModelValue(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>Sets the value for the specified key by using the specified value provider dictionary.</summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.TryGetValue(System.String,System.Web.Mvc.ModelState@)">
      <summary>Attempts to gets the value that is associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A collection that contains the values of the model-state dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidationResult">
      <summary>Provides a container for a validation result.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidationResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidationResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.MemberName">
      <summary>Gets or sets the name of the member.</summary>
      <returns>The name of the member.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.Message">
      <summary>Gets or sets the validation result message.</summary>
      <returns>The validation result message.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidator">
      <summary>Provides a base class for implementing validation logic.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.Web.Mvc.ModelValidator" /> class.</summary>
      <param name="metadata">The metadata.</param>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.ControllerContext">
      <summary>Gets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetClientValidationRules">
      <summary>When implemented in a derived class, returns metadata for client validation.</summary>
      <returns>The metadata for client validation.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetModelValidator(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns a composite model validator for the model.</summary>
      <returns>A composite model validator for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.IsRequired">
      <summary>Gets or sets a value that indicates whether a model property is required.</summary>
      <returns>true if the model property is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.Metadata">
      <summary>Gets the metadata for the model validator.</summary>
      <returns>The metadata for the model validator.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.Validate(System.Object)">
      <summary>When implemented in a derived class, validates the object.</summary>
      <returns>A list of validation results.</returns>
      <param name="container">The container.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProvider">
      <summary>Provides a list of validators for a model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of validators.</summary>
      <returns>A list of validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviderCollection">
      <summary>Provides a container for a list of validation providers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ModelValidatorProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> class using a list of model-validation providers.</summary>
      <param name="list">A list of model-validation providers.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns the list of model validators.</summary>
      <returns>The list of model validators.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.InsertItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>Inserts a model-validator provider into the collection.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The model-validator provider object to insert.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.SetItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>Replaces the model-validator provider element at the specified index.</summary>
      <param name="index">The zero-based index of the model-validator provider element to replace.</param>
      <param name="item">The new value for the model-validator provider element.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviders">
      <summary>Provides a container for the current validation provider.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidatorProviders.Providers">
      <summary>Gets the model validator provider collection.</summary>
      <returns>The model validator provider collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.MultiSelectList">
      <summary>Represents a list of items that users can select more than one item from.</summary>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the specified items to include in the list.</summary>
      <param name="items">The items.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the specified items to include in the list and the selected values.</summary>
      <param name="items">The items.</param>
      <param name="selectedValues">The selected values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the items to include in the list, the data value field, and the data text field.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the items to include in the list, the data value field, the data text field, and the selected values.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <param name="selectedValues">The selected values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataTextField">
      <summary>Gets or sets the data text field.</summary>
      <returns>The data text field.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataValueField">
      <summary>Gets or sets the data value field.</summary>
      <returns>The data value field.</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.Items">
      <summary>Gets or sets the items in the list.</summary>
      <returns>The items in the list.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.SelectedValues">
      <summary>Gets or sets the selected values.</summary>
      <returns>The selected values.</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcHandler">
      <summary>Selects the controller that will handle an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.#ctor(System.Web.Routing.RequestContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHandler" /> class.</summary>
      <param name="requestContext">The request context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.AddVersionHeader(System.Web.HttpContextBase)">
      <summary>Adds the version header by using the specified HTTP context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state of the asynchronous object.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing using the base HTTP context.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state of the asynchronous object.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.DisableMvcResponseHeader">
      <summary>Gets or sets a value that indicates whether the MVC response header is disabled.</summary>
      <returns>true if the MVC response header is disabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.IsReusable">
      <summary>Gets a value that indicates whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
    </member>
    <member name="F:System.Web.Mvc.MvcHandler.MvcVersionHeaderName">
      <summary>Contains the header name of the ASP.NET MVC version.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>Processes the request by using the specified HTTP request context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContextBase)">
      <summary>Processes the request by using the specified base HTTP request context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.RequestContext">
      <summary>Gets the request context.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing using the base HTTP context.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="context">The HTTP context.</param>
      <param name="cb">The asynchronous callback method.</param>
      <param name="extraData">The data.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="result">The asynchronous result.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#IsReusable">
      <summary>Gets a value that indicates whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of HTTP Web requests by a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
      <param name="httpContext">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) that are used to service HTTP requests.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHtmlString">
      <summary>Represents an HTML-encoded string that should not be encoded again.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHtmlString" /> class.</summary>
      <param name="value">The string to create. If no value is assigned, the object is created using an empty-string value.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.Create(System.String)">
      <summary>Creates an HTML-encoded string using the specified text value.</summary>
      <returns>An HTML-encoded string.</returns>
      <param name="value">The value of the string to create .</param>
    </member>
    <member name="F:System.Web.Mvc.MvcHtmlString.Empty">
      <summary>Contains an empty HTML string.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.IsNullOrEmpty(System.Web.Mvc.MvcHtmlString)">
      <summary>Determines whether the specified string contains content or is either null or empty.</summary>
      <returns>true if the string is null or empty; otherwise, false.</returns>
      <param name="value">The string.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.ToHtmlString">
      <summary>Returns an HTML-encoded string that represents the current object.</summary>
      <returns>An HTML-encoded string that represents the current object.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcHttpHandler">
      <summary>Verifies and processes an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHttpHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The base HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="context">The context.</param>
      <param name="cb">The asynchronous callback method.</param>
      <param name="extraData">An object that contains data.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="result">The status of the asynchronous operations.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.VerifyAndProcessRequest(System.Web.IHttpHandler,System.Web.HttpContextBase)">
      <summary>Verifies and processes an HTTP request.</summary>
      <param name="httpHandler">The HTTP handler.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcRouteHandler">
      <summary>Creates an object that implements the IHttpHandler interface and gives it the request context.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcRouteHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>Retrieves the HTTP handler by using the specified HTTP context.</summary>
      <returns>The HTTP handler.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>Retrieves the HTTP handler by using the specified request context.</summary>
      <returns>The HTTP handler.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionExtensions">
      <summary>Extends a NameValueCollection object so that the collection can be copied to a specified dictionary.</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Copies the specified collection to the specified destination.</summary>
      <param name="collection">The collection.</param>
      <param name="destination">The destination.</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
      <summary>Copies the specified collection to the specified destination, and optionally replaces previous entries.</summary>
      <param name="collection">The collection.</param>
      <param name="destination">The destination.</param>
      <param name="replaceEntries">true to replace previous entries; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionValueProvider">
      <summary>Represents the base class for value providers whose values come from a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NameValueCollectionValueProvider" /> class.</summary>
      <param name="collection">A collection that contains the values that are used to initialize the provider.</param>
      <param name="culture">An object that contains information about the target culture.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="prefix" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.NoAsyncTimeoutAttribute">
      <summary>Provides a convenience wrapper for the <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.NoAsyncTimeoutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NoAsyncTimeoutAttribute" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.NonActionAttribute">
      <summary>Represents an attribute that is used to indicate that a controller method is not an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NonActionAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the attribute marks a method that is not an action method by using the specified controller context.</summary>
      <returns>true if the attribute marks a valid non-action method; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method information.</param>
    </member>
    <member name="T:System.Web.Mvc.OutputCacheAttribute">
      <summary>Represents an attribute that is used to mark an action method whose output will be cached.</summary>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.OutputCacheAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.CacheProfile">
      <summary>Gets or sets the cache profile name.</summary>
      <returns>The cache profile name.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Duration">
      <summary>Gets or sets the cache duration.</summary>
      <returns>The cache duration.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Location">
      <summary>Gets or sets the location.</summary>
      <returns>The location.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.NoStore">
      <summary>Gets or sets a value that indicates whether to store the cache.</summary>
      <returns>true if the cache should be stored; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before the action result executes.</summary>
      <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.SqlDependency">
      <summary>Gets or sets the SQL dependency.</summary>
      <returns>The SQL dependency.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByContentEncoding">
      <summary>Gets or sets the vary-by-content encoding.</summary>
      <returns>The vary-by-content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByCustom">
      <summary>Gets or sets the vary-by-custom value.</summary>
      <returns>The vary-by-custom value.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByHeader">
      <summary>Gets or sets the vary-by-header value.</summary>
      <returns>The vary-by-header value.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByParam">
      <summary>Gets or sets the vary-by-param value.</summary>
      <returns>The vary-by-param value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterBindingInfo">
      <summary>Encapsulates information for binding action-method parameters to a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterBindingInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ParameterBindingInfo" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Binder">
      <summary>Gets the model binder.</summary>
      <returns>The model binder.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Exclude">
      <summary>Gets a comma-delimited list of property names for which binding is disabled.</summary>
      <returns>The exclude list.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Include">
      <summary>Gets a comma-delimited list of property names for which binding is enabled.</summary>
      <returns>The include list.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Prefix">
      <summary>Gets the prefix to use when the MVC framework binds a value to an action parameter or to a model property.</summary>
      <returns>The prefix.</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterDescriptor">
      <summary>Contains information that describes a parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ParameterDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ActionDescriptor">
      <summary>Gets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.BindingInfo">
      <summary>Gets the binding information.</summary>
      <returns>The binding information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.DefaultValue">
      <summary>Gets the default value of the parameter.</summary>
      <returns>The default value of the parameter.</returns>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterName">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterType">
      <summary>Gets the type of the parameter.</summary>
      <returns>The type of the parameter.</returns>
    </member>
    <member name="T:System.Web.Mvc.PartialViewResult">
      <summary>Represents a base class that is used to send a partial view to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.PartialViewResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Returns the <see cref="T:System.Web.Mvc.ViewEngineResult" /> object that is used to render the view.</summary>
      <returns>The view engine result.</returns>
      <param name="context">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the method was attempting to find the view.</exception>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProvider">
      <summary>Represents a value provider for query strings that are contained in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.QueryStringValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of a query-string value-provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.QueryStringValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A query-string value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.RangeAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RangeAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The range attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of client validation rules for a range check.</summary>
      <returns>A list of client validation rules for a range check.</returns>
    </member>
    <member name="T:System.Web.Mvc.RedirectResult">
      <summary>Controls the processing of application actions by redirecting to a specified URI.</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class.</summary>
      <param name="url">The target URL.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Url">
      <summary>Gets or sets the target URL.</summary>
      <returns>The target URL.</returns>
    </member>
    <member name="T:System.Web.Mvc.RedirectToRouteResult">
      <summary>Represents a result that performs a redirection by using the specified route values dictionary.</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route name and route values.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.Web.Routing.RouteValueDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route values.</summary>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteName">
      <summary>Gets or sets the name of the route.</summary>
      <returns>The name of the route.</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteValues">
      <summary>Gets or sets the route values.</summary>
      <returns>The route values.</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedActionDescriptor">
      <summary>Contains information that describes a reflected action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.#ctor(System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedActionDescriptor" /> class.</summary>
      <param name="methodInfo">The action-method information.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="methodInfo" /> or <paramref name="controllerDescriptor" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ActionName">
      <summary>Gets the name of the action.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the specified controller context by using the specified action-method parameters.</summary>
      <returns>The action return value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameters" /> or <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetFilters">
      <summary>Retrieves information about action filters.</summary>
      <returns>The filter information.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetParameters">
      <summary>Retrieves the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetSelectors">
      <summary>Retrieves the action selectors.</summary>
      <returns>The action selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.MethodInfo">
      <summary>Gets or sets the action-method information.</summary>
      <returns>The action-method information.</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedControllerDescriptor">
      <summary>Contains information that describes a reflected controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedControllerDescriptor" /> class.</summary>
      <param name="controllerType">The type of the controller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds the specified action for the specified controller context.</summary>
      <returns>The information about the action.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCanonicalActions">
      <summary>Returns the list of actions for the controller.</summary>
      <returns>A list of action descriptors for the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.ReflectedParameterDescriptor">
      <summary>Contains information that describes a reflected action-method parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.#ctor(System.Reflection.ParameterInfo,System.Web.Mvc.ActionDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedParameterDescriptor" /> class.</summary>
      <param name="parameterInfo">The parameter information.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> or <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ActionDescriptor">
      <summary>Gets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.BindingInfo">
      <summary>Gets the binding information.</summary>
      <returns>The binding information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.DefaultValue">
      <summary>Gets the default value of the reflected parameter.</summary>
      <returns>The default value of the reflected parameter.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterInfo">
      <summary>Gets or sets the parameter information.</summary>
      <returns>The parameter information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterName">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterType">
      <summary>Gets the type of the parameter.</summary>
      <returns>The type of the parameter.</returns>
    </member>
    <member name="T:System.Web.Mvc.RegularExpressionAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RegularExpressionAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RegularExpressionAttributeAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The regular expression attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of regular-expression client validation rules.</summary>
      <returns>A list of regular-expression client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.RequiredAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The required attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of required-value client validation rules.</summary>
      <returns>A list of required-value client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.RequireHttpsAttribute">
      <summary>Represents an attribute that forces an unsecured HTTP request to be re-sent over HTTPS.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>Handles unsecured HTTP requests that are sent to the action method.</summary>
      <param name="filterContext">An object that encapsulates information that is required in order to use the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> attribute.</param>
      <exception cref="T:System.InvalidOperationException">The HTTP request contains an invalid transfer method override. All GET requests are considered invalid.</exception>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Determines whether a request is secured (HTTPS) and, if it is not, calls the <see cref="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)" /> method.</summary>
      <param name="filterContext">An object that encapsulates information that is required in order to use the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutedContext">
      <summary>Provides the context for the <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutedContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutedContext" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="result">The result object.</param>
      <param name="canceled">true to cancel execution; otherwise, false.</param>
      <param name="exception">The exception object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="result" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Canceled">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.ResultExecutedContext" /> instance is canceled.</summary>
      <returns>true if the instance is canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception has been handled.</summary>
      <returns>true if the exception has been handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutingContext">
      <summary>Provides the context for the <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutingContext" /> class by using the specified controller context and action result.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="result">The action result.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="result" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Cancel">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.ResultExecutingContext" /> value is "cancel".</summary>
      <returns>true if the value is "cancel"; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.RouteCollectionExtensions">
      <summary>Extends a <see cref="T:System.Web.Routing.RouteCollection" /> object for MVC routing.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.</summary>
      <returns>An object that contains information about the route and virtual path that are the result of generating a URL in the current area.</returns>
      <param name="routes">An object that contains the routes for the applications.</param>
      <param name="requestContext">An object that encapsulates information about the requested route.</param>
      <param name="name">The name of the route to use when information about the URL path is retrieved.</param>
      <param name="values">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.</summary>
      <returns>An object that contains information about the route and virtual path that are the result of generating a URL in the current area.</returns>
      <param name="routes">An object that contains the routes for the applications.</param>
      <param name="requestContext">An object that encapsulates information about the requested route.</param>
      <param name="values">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String)">
      <summary>Ignores the specified URL route for the given list of available routes.</summary>
      <param name="routes">A collection of routes for the application.</param>
      <param name="url">The URL pattern for the route to ignore.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String,System.Object)">
      <summary>Ignores the specified URL route for the given list of the available routes and a list of constraints.</summary>
      <param name="routes">A collection of routes for the application.</param>
      <param name="url">The URL pattern for the route to ignore.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
      <summary>Maps the specified URL route.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>Maps the specified URL route and sets default route values.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>Maps the specified URL route and sets default route values and constraints.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>Maps the specified URL route and sets default route values, constraints, and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String[])">
      <summary>Maps the specified URL route and sets default route values and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.String[])">
      <summary>Maps the specified URL route and sets the namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProvider">
      <summary>Represents a value provider for route data that is contained in an object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RouteDataValueProvider" /> class.</summary>
      <param name="controllerContext">An object that contain information about the HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProviderFactory">
      <summary>Represents a factory for creating route-data value provider objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.#ctor">
      <summary>Initialized a new instance of the <see cref="T:System.Web.Mvc.RouteDataValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.SelectList">
      <summary>Represents a list that lets users select one item.</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list.</summary>
      <param name="items">The items.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list and a selected value.</summary>
      <param name="items">The items.</param>
      <param name="selectedValue">The selected value.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list, the data value field, and the data text field.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list, the data value field, the data text field, and a selected value.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <param name="selectedValue">The selected value.</param>
    </member>
    <member name="P:System.Web.Mvc.SelectList.SelectedValue">
      <summary>Gets or sets the selected value.</summary>
      <returns>The selected value.</returns>
    </member>
    <member name="T:System.Web.Mvc.SelectListItem">
      <summary>Represents the selected item in an instance of the <see cref="T:System.Web.Mvc.SelectList" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectListItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectListItem" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Selected">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.SelectListItem" /> is selected.</summary>
      <returns>true if the item is selected; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Text">
      <summary>Gets or sets the text of the selected item.</summary>
      <returns>The text.</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Value">
      <summary>Gets or sets the value of the selected item.</summary>
      <returns>The value.</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateTempDataProvider">
      <summary>Provides session-state data to the current <see cref="T:System.Web.Mvc.TempDataDictionary" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SessionStateTempDataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>Loads the temporary data by using the specified controller context.</summary>
      <returns>The temporary data.</returns>
      <param name="controllerContext">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred when the session context was being retrieved.</exception>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Saves the specified values in the temporary data dictionary by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="values">The values.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred the session context was being retrieved.</exception>
    </member>
    <member name="T:System.Web.Mvc.StringLengthAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.StringLengthAttributeAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The string-length attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of string-length client validation rules.</summary>
      <returns>A list of string-length client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.TagBuilder">
      <summary>Represents a class that is used by HTML helpers to build HTML elements.</summary>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TagBuilder" /> class.</summary>
      <param name="tagName">The name of the tag.</param>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.AddCssClass(System.String)">
      <summary>Adds the specified CSS class to the tag-builder attributes.</summary>
      <param name="value">The CSS class value string.</param>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.Attributes">
      <summary>Gets or sets the collection of attributes for the tag.</summary>
      <returns>The collection of attributes for the tag.</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.GenerateId(System.String)">
      <summary>Generates the id attribute for the tag by using the specified name.</summary>
      <param name="name">The name to use to generate the id value.</param>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.IdAttributeDotReplacement">
      <summary>Gets or sets the character that is used to replace the periods (dots) in the id attribute.</summary>
      <returns>The character that is used to replace periods (dots) in the id attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.InnerHtml">
      <summary>Gets or sets the inner HTML for the tag (element).</summary>
      <returns>The inner HTML for the tag (element).</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttribute(System.String,System.String)">
      <summary>Adds an attribute to the tag by using the specified key/value pair.</summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="key" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttribute(System.String,System.String,System.Boolean)">
      <summary>Adds an attribute to the tag by using the specified key/value pair.</summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <param name="replaceExisting">true to replace the existing attribute.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="key" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1})">
      <summary>Adds an attribute to the specified collection of attributes for the tag.</summary>
      <param name="attributes">The attributes.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.MergeAttributes``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
      <summary>Adds an attribute to the specified collection of attributes for the tag.</summary>
      <param name="attributes">The attributes.</param>
      <param name="replaceExisting">true to replace the existing attributes.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.SetInnerText(System.String)">
      <summary>Sets the inner text of the tag (element).</summary>
      <param name="innerText">The inner text for the tag (element).</param>
    </member>
    <member name="P:System.Web.Mvc.TagBuilder.TagName">
      <summary>Gets or sets the name of the tag.</summary>
      <returns>The name of the tag.</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:System.Web.Mvc.TagBuilder.ToString(System.Web.Mvc.TagRenderMode)">
      <summary>Returns a string that represents the current object by using the specified tag-render mode.</summary>
      <returns>A string that represents the current object.</returns>
      <param name="renderMode">The tag-render mode.</param>
    </member>
    <member name="T:System.Web.Mvc.TagRenderMode">
      <summary>Enumerates the modes that are available for rendering HTML tags.</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.Normal">
      <summary>Represents normal mode.</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.StartTag">
      <summary>Represents the start-tag mode.</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.EndTag">
      <summary>Represents end-tag mode.</summary>
    </member>
    <member name="F:System.Web.Mvc.TagRenderMode.SelfClosing">
      <summary>Represents self-closing-tag mode.</summary>
    </member>
    <member name="T:System.Web.Mvc.TempDataDictionary">
      <summary>Represents a set of data that persists only from one request to the next.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TempDataDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TempDataDictionary" /> class.</summary>
      <param name="info">The information.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Add(System.String,System.Object)">
      <summary>Adds an element that has the specified key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance contains an element that has the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsValue(System.Object)">
      <summary>Determines whether the dictionary contains the specified value.</summary>
      <returns>true if the dictionary contains the specified value; otherwise, false.</returns>
      <param name="value">The value.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Count">
      <summary>Gets the number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.GetEnumerator">
      <summary>Gets the enumerator.</summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class by using the data that is that is required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization. For more information, see <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Item(System.String)">
      <summary>Gets or sets the object that has the specified key.</summary>
      <returns>The object that has the specified key.</returns>
      <param name="key">The key to access.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep">
      <summary>Marks all keys in the dictionary for retention.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep(System.String)">
      <summary>Marks the specified key in the dictionary for retention.</summary>
      <param name="key">The key to retain in the dictionary.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains the keys of elements in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>The keys of the elements in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Load(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>Loads the specified controller context by using the specified data provider.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="tempDataProvider">The temporary data provider.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Peek(System.String)">
      <summary>Returns an object that contains the element that is associated with the specified key, without marking the key for deletion.</summary>
      <returns>An object that contains the element that is associated with the specified key.</returns>
      <param name="key">The key of the element to return.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>true if the element was removed successfully; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the <see cref="T:System.Collections.Generic.IDictionary`2" />. instance.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Save(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>Saves the specified controller context by using the specified data provider.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="tempDataProvider">The temporary data provider.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified key/value pair to the dictionary.</summary>
      <param name="keyValuePair">The key/value pair.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the dictionary contains the specified key/value pair; otherwise, false.</returns>
      <param name="keyValuePair">The key/value pair to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies a key/value pair to the specified array at the specified index.</summary>
      <param name="array">The target array.</param>
      <param name="index">The index.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary is read-only.</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Deletes the specified key/value pair from the dictionary.</summary>
      <returns>true if the key/value pair was removed successfully; otherwise, false.</returns>
      <param name="keyValuePair">The key/value pair.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object by using the data that is that is required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization. For more information, see <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value of the element that has the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Values">
      <summary>Gets the <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>The values of the elements in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.TemplateInfo">
      <summary>Encapsulates information about the current template context.</summary>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TemplateInfo" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.FormattedModelValue">
      <summary>Gets or sets the formatted model value.</summary>
      <returns>The formatted model value.</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldId(System.String)">
      <summary>Retrieves the full DOM ID of a field using the specified HTML name attribute.</summary>
      <returns>The full DOM ID.</returns>
      <param name="partialFieldName">The value of the HTML name attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldName(System.String)">
      <summary>Retrieves the fully qualified name (including a prefix) for a field using the specified HTML name attribute.</summary>
      <returns>The prefixed name of the field.</returns>
      <param name="partialFieldName">The value of the HTML name attribute.</param>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.HtmlFieldPrefix">
      <summary>Gets or sets the HTML field prefix.</summary>
      <returns>The HTML field prefix.</returns>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.TemplateDepth">
      <summary>Contains the number of objects that were visited by the user.</summary>
      <returns>The number of objects.</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.Visited(System.Web.Mvc.ModelMetadata)">
      <summary>Determines whether the template has been visited by the user.</summary>
      <returns>true if the template has been visited by the user; otherwise, false.</returns>
      <param name="metadata">An object that encapsulates information that describes the model.</param>
    </member>
    <member name="T:System.Web.Mvc.UrlHelper">
      <summary>Contains methods to build URLs for ASP.NET MVC within an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.UrlHelper" /> class using the specified request context.</summary>
      <param name="requestContext">An object that contains information about the current request and about the route that it matched.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.UrlHelper" /> class by using the specified request context and route collection.</summary>
      <param name="requestContext">An object that contains information about the current request and about the route that it matched.</param>
      <param name="routeCollection">A collection of routes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> or the <paramref name="routeCollection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Object)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name and controller name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object,System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, route values, and protocol to use.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>Generates a fully qualified URL for an action method by using the specified action name, controller name, route values, protocol to use, and host name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL to an action method for the specified action name and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Content(System.String)">
      <summary>Converts a virtual (relative) path to an application absolute path.</summary>
      <returns>The application absolute path.</returns>
      <param name="contentPath">The virtual path of the content.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Encode(System.String)">
      <summary>Encodes special characters in a URL string into character-entity equivalents.</summary>
      <returns>An encoded URL string.</returns>
      <param name="url">The text to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateContentUrl(System.String,System.Web.HttpContextBase)">
      <summary>Returns a string that contains a content URL.</summary>
      <returns>A string that contains a content URL.</returns>
      <param name="contentPath">The content path.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>Returns a string that contains a URL.</summary>
      <returns>A string that contains a URL.</returns>
      <param name="routeName">The route name.</param>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="protocol">The HTTP protocol.</param>
      <param name="hostName">The host name.</param>
      <param name="fragment">The fragment.</param>
      <param name="routeValues">The route values.</param>
      <param name="routeCollection">The route collection.</param>
      <param name="requestContext">The request context.</param>
      <param name="includeImplicitMvcValues">true to include implicit MVC values; otherwise false.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>Returns a string that contains a URL.</summary>
      <returns>A string that contains a URL.</returns>
      <param name="routeName">The route name.</param>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="routeValues">The route values.</param>
      <param name="routeCollection">The route collection.</param>
      <param name="requestContext">The request context.</param>
      <param name="includeImplicitMvcValues">true to include implicit MVC values; otherwise. false.</param>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RequestContext">
      <summary>Gets information about an HTTP request that matches a defined route.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RouteCollection">
      <summary>Gets a collection that contains the routes that are registered for the application.</summary>
      <returns>The route collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Object)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String)">
      <summary>Generates a fully qualified URL for the specified route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object,System.String)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name and the protocol to use.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>Generates a fully qualified URL for the specified route values by using the specified route name, protocol to use, and host name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="T:System.Web.Mvc.UrlParameter">
      <summary>Represents an optional parameter that is used by the <see cref="T:System.Web.Mvc.MvcHandler" /> class during routing.</summary>
    </member>
    <member name="F:System.Web.Mvc.UrlParameter.Optional">
      <summary>Contains the read-only value for the optional parameter.</summary>
    </member>
    <member name="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute">
      <summary>Represents an attribute that is used to detect whether a server request has been tampered with.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.Salt">
      <summary>Gets or sets the salt string.</summary>
      <returns>The salt string.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidateInputAttribute">
      <summary>Represents an attribute that is used to mark action methods whose input must be validated.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidateInputAttribute" /> class.</summary>
      <param name="enableValidation">true to enable validation.</param>
    </member>
    <member name="P:System.Web.Mvc.ValidateInputAttribute.EnableValidation">
      <summary>Gets or sets a value that indicates whether to enable validation.</summary>
      <returns>true if validation is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderCollection">
      <summary>Represents the collection of value-provider objects for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IValueProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderCollection" /> class and registers the specified value providers.</summary>
      <param name="list">A list of value providers to register.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key</returns>
      <param name="key">The key of the value object to retrieve.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>Inserts the specified value-provider object into the collection at the specified index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider object to insert.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.SetItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>Replaces the value provider at the specified index location with a new value provider.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderDictionary">
      <summary>Represents a dictionary of value providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderDictionary" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Adds the specified item to the collection of value providers.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Object)">
      <summary>Adds an element that has the specified key and value to the collection of value providers.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>Adds an element that has the specified key and value to the collection of value providers.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Clear">
      <summary>Removes all items from the collection of value providers.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Determines whether the collection of value providers contains the specified item.</summary>
      <returns>true if <paramref name="item" /> is found in the collection of value providers; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.ContainsKey(System.String)">
      <summary>Determines whether the collection of value providers contains an element that has the specified key.</summary>
      <returns>true if the collection of value providers contains an element that has the key; otherwise, false.</returns>
      <param name="key">The key of the element to find in the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.ControllerContext">
      <summary>Gets or sets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.ValueProviderResult" /> object that has the specified key.</summary>
      <returns>The <see cref="T:System.Web.Mvc.ValueProviderResult" /> object.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Keys">
      <summary>Gets a collection that contains the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</summary>
      <returns>A collection that contains the keys of the object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Removes the first occurrence of the specified item from the collection of value providers.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the collection.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the collection of value providers.</summary>
      <returns>true if the element was successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the collection.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to return.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.TryGetValue(System.String,System.Web.Mvc.ValueProviderResult@)">
      <summary>Gets the value of the element that has the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the element to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Values">
      <summary>Gets a collection that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>A collection of the values in the object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactories">
      <summary>Represents a container for value-provider factory objects.</summary>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderFactories.Factories">
      <summary>Gets the collection of value-provider factories for the application.</summary>
      <returns>The collection of value-provider factory objects.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactory">
      <summary>Represents a factory for creating value-provider objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactoryCollection">
      <summary>Represents the collection of value-provider factories for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ValueProviderFactory})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> class using the specified list of value-provider factories.</summary>
      <param name="list">A list of value-provider factories to initialize the collection with.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns the value-provider factory for the specified controller context.</summary>
      <returns>The value-provider factory object for the specified controller context.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.InsertItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>Inserts the specified value-provider factory object at the specified index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider factory object to insert.</param>
      <exception cref="ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.SetItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>Sets the specified value-provider factory object at the given index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider factory object to set.</param>
      <exception cref="ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderResult">
      <summary>Represents the result of binding a value (such as from a form post or query string) to an action-method argument property, or to the argument itself.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderResult" /> class by using the specified raw value, attempted value, and culture information.</summary>
      <param name="rawValue">The raw value.</param>
      <param name="attemptedValue">The attempted value.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.AttemptedValue">
      <summary>Gets or sets the raw value that is converted to a string for display.</summary>
      <returns>The raw value.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type)">
      <summary>Converts the value that is encapsulated by this result to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="type">The target type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>Converts the value that is encapsulated by this result to the specified type by using the specified culture information.</summary>
      <returns>The converted value.</returns>
      <param name="type">The target type.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.Culture">
      <summary>Gets or sets the culture.</summary>
      <returns>The culture.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.RawValue">
      <summary>Gets or set the raw value that is supplied by the value provider.</summary>
      <returns>The raw value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewContext">
      <summary>Encapsulates information that is related to rendering a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView,System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.TempDataDictionary,System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewContext" /> class by using the specified controller context, view, view data dictionary, temporary data dictionary, and text writer.</summary>
      <param name="controllerContext">Encapsulates information about the HTTP request.</param>
      <param name="view">The view to render.</param>
      <param name="viewData">The dictionary that contains the data that is required in order to render the view.</param>
      <param name="tempData">The dictionary that contains temporary data for the view.</param>
      <param name="writer">The text writer object that is used to write HTML output.</param>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ClientValidationEnabled">
      <summary>Gets or sets a value that indicates whether client-side validation is enabled.</summary>
      <returns>true if client-side validation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.FormContext">
      <summary>Gets or sets an object that encapsulates information that is required in order to validate and process the input data from an HTML form.</summary>
      <returns>An object that encapsulates information that is required in order to validate and process the input data from an HTML form.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.OutputClientValidation">
      <summary>Writes the client validation information to the HTTP response.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.TempData">
      <summary>Gets data that is associated with this request and that is available for only one request.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.View">
      <summary>Gets an object that implements the <see cref="T:System.Web.Mvc.IView" /> interface to render in the browser.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ViewData">
      <summary>Gets the view data that is passed to the view.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.Writer">
      <summary>Gets or sets the text writer object that is used to write HTML output.</summary>
      <returns>The object that is used to write the HTML output.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary">
      <summary>Represents a container that is used to pass data between a controller and a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class by using the specified model.</summary>
      <param name="model">The model.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class by using the specified dictionary.</summary>
      <param name="dictionary">The dictionary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified item to the collection.</summary>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.String,System.Object)">
      <summary>Adds an element to the collection using the specified key and value .</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Clear">
      <summary>Removes all items from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the collection contains the specified item.</summary>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
      <param name="item">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.ContainsKey(System.String)">
      <summary>Determines whether the collection contains an element that has the specified key.</summary>
      <returns>true if the collection contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the element to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a particular index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String)">
      <summary>Evaluates the specified expression.</summary>
      <returns>The results of the evaluation.</returns>
      <param name="expression">The expression.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String,System.String)">
      <summary>Evaluates the specified expression by using the specified format.</summary>
      <returns>The results of the evaluation.</returns>
      <param name="expression">The expression.</param>
      <param name="format">The format.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetViewDataInfo(System.String)">
      <summary>Returns information about the view data as defined by the <paramref name="expression" /> parameter.</summary>
      <returns>An object that contains the view data information that is defined by the <paramref name="expression" /> parameter.</returns>
      <param name="expression">A set of key/value pairs that define the view-data information to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is either null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Item(System.String)">
      <summary>Gets or sets the item that is associated with the specified key.</summary>
      <returns>The value of the selected item.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Keys">
      <summary>Gets a collection that contains the keys of this dictionary.</summary>
      <returns>A collection that contains the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Model">
      <summary>Gets or sets the model that is associated with the view data.</summary>
      <returns>The model that is associated with the view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelMetadata">
      <summary>Gets or sets information about the model.</summary>
      <returns>Information about the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelState">
      <summary>Gets the state of the model.</summary>
      <returns>The state of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the first occurrence of a specified object from the collection.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the collection.</returns>
      <param name="item">The object to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.String)">
      <summary>Removes the element from the collection using the specified key.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the original collection.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.SetModel(System.Object)">
      <summary>Sets the data model to use for the view.</summary>
      <param name="value">The data model to use for the view.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.TemplateInfo">
      <summary>Gets or sets an object that encapsulates information about the current template context.</summary>
      <returns>An object that contains information about the current template.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Attempts to retrieve the value that is associated with the specified key.</summary>
      <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Values">
      <summary>Gets a collection that contains the values in this dictionary.</summary>
      <returns>A collection that contains the values of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary`1">
      <summary>Represents a container that is used to pass strongly typed data between a controller and a view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class by using the specified view data dictionary.</summary>
      <param name="viewDataDictionary">An existing view data dictionary to copy into this instance.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class by using the specified model.</summary>
      <param name="model">The data model to use for the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.Model">
      <summary>Gets or sets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.ModelMetadata">
      <summary>Gets or sets information about the model.</summary>
      <returns>Information about the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.SetModel(System.Object)">
      <summary>Sets the data model to use for the view.</summary>
      <param name="value">The data model to use for the view.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the model was being set.</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewDataInfo">
      <summary>Encapsulates information about the current template content that is used to develop templates and about HTML helpers that interact with templates.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataInfo" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor(System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataInfo" /> class and associates a delegate for accessing the view data information.</summary>
      <param name="valueAccessor">A delegate that defines how the view data information is accessed.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Container">
      <summary>Gets or sets the object that contains the values to be displayed by the template.</summary>
      <returns>The object that contains the values to be displayed by the template.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.PropertyDescriptor">
      <summary>Gets or sets the description of the property to be displayed by the template.</summary>
      <returns>The description of the property to be displayed by the template.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Value">
      <summary>Gets or sets the current value to be displayed by the template.</summary>
      <returns>The current value to be displayed by the template.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineCollection">
      <summary>Represents a collection of view engines that are available to the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IViewEngine})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineCollection" /> class by using the specified list of view engines.</summary>
      <param name="list">The list that is wrapped by the new collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindPartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="partialViewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Finds the specified view by using the specified controller context and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.InsertItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>Inserts an element into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.SetItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineResult">
      <summary>Represents the result of locating a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineResult" /> class by using the specified searched locations.</summary>
      <param name="searchedLocations">The searched locations.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="searchedLocations" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Web.Mvc.IView,System.Web.Mvc.IViewEngine)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineResult" /> class by using the specified view and view engine.</summary>
      <param name="view">The view.</param>
      <param name="viewEngine">The view engine.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="view " />or <paramref name="viewEngine" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.SearchedLocations">
      <summary>Gets or sets the searched locations.</summary>
      <returns>The searched locations.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.View">
      <summary>Gets or sets the view.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.ViewEngine">
      <summary>Gets or sets the view engine.</summary>
      <returns>The view engine.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngines">
      <summary>Represents a collection of view engines that are available to the application.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewEngines.Engines">
      <summary>Gets the view engines.</summary>
      <returns>The view engines.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage">
      <summary>Represents the information that is needed to build a master view page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewMasterPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Ajax">
      <summary>Gets the AJAX script for the master page.</summary>
      <returns>The AJAX script for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Html">
      <summary>Gets the HTML for the master page.</summary>
      <returns>The HTML for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Model">
      <summary>Gets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.TempData">
      <summary>Gets the temporary data.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Url">
      <summary>Gets the URL.</summary>
      <returns>The URL.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewContext">
      <summary>Gets the view context.</summary>
      <returns>The view context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewData">
      <summary>Gets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Writer">
      <summary>Gets the writer that is used to render the master page.</summary>
      <returns>The writer that is used to render the master page.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage`1">
      <summary>Represents the information that is required in order to build a strongly typed master view page.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewMasterPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Ajax">
      <summary>Gets the AJAX script for the master page.</summary>
      <returns>The AJAX script for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Html">
      <summary>Gets the HTML for the master page.</summary>
      <returns>The HTML for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Model">
      <summary>Gets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.ViewData">
      <summary>Gets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage">
      <summary>Represents the properties and methods that are needed to render a view as a Web Forms page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML in Ajax scenarios.</summary>
      <returns>The Ajax helper object that is associated with the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</summary>
      <returns>The HTML helper object that is associated with the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.InitHelpers">
      <summary>Initializes the <see cref="P:System.Web.Mvc.ViewPage.Ajax" />, <see cref="P:System.Web.Mvc.ViewPage.Html" />, and <see cref="P:System.Web.Mvc.ViewPage.Url" /> properties.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.MasterLocation">
      <summary>Gets or sets the path of the master view.</summary>
      <returns>The path of the master view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Model">
      <summary>Gets the Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <returns>The Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.OnPreInit(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Web.UI.Page.PreInit" /> event at the beginning of page initialization.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of the specified HTTP request by the ASP.NET MVC framework.</summary>
      <param name="context">An object that encapsulates HTTP-specific information about the current HTTP request.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.Render(System.Web.UI.HtmlTextWriter)">
      <summary>Initializes the <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the page content to be rendered.</summary>
      <param name="writer">The object that receives the page content.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.RenderView(System.Web.Mvc.ViewContext)">
      <summary>Renders the view page to the response using the specified view context.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render the view, which includes the controller context, form context, the temporary data, and the view data for the associated view.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetTextWriter(System.IO.TextWriter)">
      <summary>Sets the text writer that is used to render the view to the response.</summary>
      <param name="textWriter">The writer that is used to render the view to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data dictionary for the associated view.</summary>
      <param name="viewData">A dictionary of data to pass to the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.TempData">
      <summary>Gets the temporary data to pass to the view.</summary>
      <returns>The temporary data to pass to the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Url">
      <summary>Gets or sets the URL of the rendered page.</summary>
      <returns>The URL of the rendered page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewContext">
      <summary>Gets or sets the information that is used to render the view.</summary>
      <returns>The information that is used to render the view, which includes the form context, the temporary data, and the view data of the associated view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Writer">
      <summary>Gets the text writer that is used to render the view to the response.</summary>
      <returns>The text writer that is used to render the view to the response.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage`1">
      <summary>Represents the information that is required in order to render a strongly typed view as a Web Forms page.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> object that supports rendering HTML in Ajax scenarios.</summary>
      <returns>The Ajax helper object that is associated with the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that provides support for rendering elements.</summary>
      <returns>The HTML helper object that is associated with the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.InitHelpers">
      <summary>Instantiates and initializes the <see cref="P:System.Web.Mvc.ViewPage`1.Ajax" /> and <see cref="P:System.Web.Mvc.ViewPage`1.Html" /> properties.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Model">
      <summary>Gets the <see cref="P:System.Web.Mvc.ViewDataDictionary`1.Model" /> property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> object.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data dictionary for the associated view.</summary>
      <param name="viewData">A dictionary of data to pass to the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResult">
      <summary>Represents a class that is used to render a view by using an <see cref="T:System.Web.Mvc.IView" /> instance that is returned by an <see cref="T:System.Web.Mvc.IViewEngine" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Searches the registered view engines and returns the object that is used to render the view.</summary>
      <returns>The object that is used to render the view.</returns>
      <param name="context">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the method was searching for the view.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewResult.MasterName">
      <summary>Gets the name of the master view (such as a master page or template) to use when the view is rendered.</summary>
      <returns>The name of the master view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResultBase">
      <summary>Represents a base class that is used to provide the model to the view and then render the view to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewResultBase" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>When called by the action invoker, renders the view to the response.</summary>
      <param name="context">The context that the result is executed in.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Returns the <see cref="T:System.Web.Mvc.ViewEngineResult" /> object that is used to render the view.</summary>
      <returns>The view engine.</returns>
      <param name="context">The context.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.TempData">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.TempDataDictionary" /> object for this result.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.View">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.IView" /> object that is rendered to the response.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewData">
      <summary>Gets or sets the view data <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object for this result.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewEngineCollection">
      <summary>Gets or sets the collection of view engines that are associated with this result.</summary>
      <returns>The collection of view engines.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewName">
      <summary>Gets or sets the name of the view to render.</summary>
      <returns>The name of the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl">
      <summary>Provides a container for <see cref="T:System.Web.Mvc.TemplateInfo" /> objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewTemplateUserControl" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl`1">
      <summary>Provides a container for <see cref="T:System.Web.Mvc.TemplateInfo" /> objects.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewTemplateUserControl`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewTemplateUserControl`1.FormattedModelValue">
      <summary>Gets the formatted value.</summary>
      <returns>The formatted value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewType">
      <summary>Represents the type of a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewType" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewType.TypeName">
      <summary>Gets or sets the name of the type.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl">
      <summary>Represents the information that is needed to build a user control.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewUserControl" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Ajax">
      <summary>Gets the AJAX script for the view.</summary>
      <returns>The AJAX script for the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.EnsureViewData">
      <summary>Ensures that view data is added to the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object of the user control if the view data exists.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Html">
      <summary>Gets the HTML for the view.</summary>
      <returns>The HTML for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Model">
      <summary>Gets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.RenderView(System.Web.Mvc.ViewContext)">
      <summary>Renders the view by using the specified view context.</summary>
      <param name="viewContext">The view context.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetTextWriter(System.IO.TextWriter)">
      <summary>Sets the text writer that is used to render the view to the response.</summary>
      <param name="textWriter">The writer that is used to render the view to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view-data dictionary by using the specified view data.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.TempData">
      <summary>Gets the temporary-data dictionary.</summary>
      <returns>The temporary-data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Url">
      <summary>Gets the URL for the view.</summary>
      <returns>The URL for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewContext">
      <summary>Gets or sets the view context.</summary>
      <returns>The view context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewData">
      <summary>Gets or sets the view-data dictionary.</summary>
      <returns>The view-data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewDataKey">
      <summary>Gets or sets the view-data key.</summary>
      <returns>The view-data key.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Writer">
      <summary>Gets the writer that is used to render the view to the response.</summary>
      <returns>The writer that is used to render the view to the response.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl`1">
      <summary>Represents the information that is required in order to build a strongly typed user control.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewUserControl`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Ajax">
      <summary>Gets the AJAX script for the view.</summary>
      <returns>The AJAX script for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Html">
      <summary>Gets the HTML for the view.</summary>
      <returns>The HTML for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Model">
      <summary>Gets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data for the view.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.ViewData">
      <summary>Gets or sets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.VirtualPathProviderViewEngine">
      <summary>Represents an abstract base-class implementation of the <see cref="T:System.Web.Mvc.IViewEngine" /> interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.VirtualPathProviderViewEngine" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaMasterLocationFormats">
      <summary>Gets or sets the area-enabled master location formats.</summary>
      <returns>The area-enabled master location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaPartialViewLocationFormats">
      <summary>Gets or sets the area-enabled partial-view location formats.</summary>
      <returns>The area-enabled partial-view location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaViewLocationFormats">
      <summary>Gets or sets the area-enabled view location formats.</summary>
      <returns>The area-enabled view location formats.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates the specified partial view by using the specified controller context.</summary>
      <returns>A reference to the partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The partial path for the new partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates the specified view by using the controller context, path of the view, and path of the master view.</summary>
      <returns>A reference to the view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The path of the view.</param>
      <param name="masterPath">The path of the master view.</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Returns a value that indicates whether the file is in the specified path by using the specified controller context.</summary>
      <returns>true if the file is in the specified path; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="useCache">true to use the cached partial view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="partialViewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>Finds the specified view by using the specified controller context and master view name.</summary>
      <returns>The page view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master view.</param>
      <param name="useCache">true to use the cached view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.MasterLocationFormats">
      <summary>Gets or sets the master location formats.</summary>
      <returns>The master location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.PartialViewLocationFormats">
      <summary>Gets or sets the partial-view location formats.</summary>
      <returns>The partial-view location formats.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>Releases the specified view by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="view">The view to release.</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationCache">
      <summary>Gets or sets the view location cache.</summary>
      <returns>The view location cache.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationFormats">
      <summary>Gets or sets the view location formats.</summary>
      <returns>The view location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.VirtualPathProvider">
      <summary>Gets or sets the virtual path provider.</summary>
      <returns>The virtual path provider.</returns>
    </member>
    <member name="T:System.Web.Mvc.WebFormView">
      <summary>Represents the information that is needed to build a Web Forms page in MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class by using the specified path to the view.</summary>
      <param name="viewPath">The view path.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewPath" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class by using the specified paths to the view and master view.</summary>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The master path.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewPath" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Web.Mvc.WebFormView.MasterPath">
      <summary>Gets or sets the master path.</summary>
      <returns>The master path.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>Renders the specified view context by using the specified writer for rendering the view to the response.</summary>
      <param name="viewContext">The view context.</param>
      <param name="writer">The writer that is used to render the view to the response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> parameter is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while attempting to render the view.</exception>
    </member>
    <member name="P:System.Web.Mvc.WebFormView.ViewPath">
      <summary>Gets or sets the view path.</summary>
      <returns>The view path.</returns>
    </member>
    <member name="T:System.Web.Mvc.WebFormViewEngine">
      <summary>Represents a view engine that is used to render a Web Forms page to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormViewEngine" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The partial path.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates the specified view by using the specified controller context and the paths of the view and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The master-view path.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Determines whether a file at the specified location exists for the specified controller context.</summary>
      <returns>true if the file exists; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxExtensions">
      <summary>Represents support for ASP.NET AJAX within an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. </summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element..</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper)">
      <summary>Returns an HTML script element that contains a reference to a globalization script that defines the culture information.</summary>
      <returns>A script element whose src attribute is set to the globalization script, as in the following example: &lt;script type="text/javascript"     src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">The AJAX helper object that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper,System.Globalization.CultureInfo)">
      <summary>Returns an HTML script element that contains a reference to a globalization script that defines the specified culture information.</summary>
      <returns>An HTML script element whose src attribute is set to the globalization script, as in the following example:&lt;script type="text/javascript"    src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">The AJAX helper object that this method extends.</param>
      <param name="cultureInfo">Encapsulates information about the target culture, such as date formats.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cultureInfo" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxOptions">
      <summary>Represents option settings for running AJAX scripts in an MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Ajax.AjaxOptions" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Confirm">
      <summary>Gets or sets the message to display in a confirmation window before a request is submitted.</summary>
      <returns>The message to display in a confirmation window.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.HttpMethod">
      <summary>Gets or sets the HTTP request method ("Get" or "Post").</summary>
      <returns>The HTTP request method.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.InsertionMode">
      <summary>Gets or sets the mode that specifies how to insert the response into the target DOM element.</summary>
      <returns>The insertion mode ("InsertAfter", "InsertBefore", or "Replace").</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementId">
      <summary>Gets or sets the id attribute of an HTML element that is displayed while the Ajax function is loading.</summary>
      <returns>The ID of the element that is displayed while the Ajax function is loading.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnBegin">
      <summary>Gets or sets the name of the JavaScript function to call immediately before the page is updated.</summary>
      <returns>The name of the JavaScript function to call before the page is updated.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnComplete">
      <summary>Gets or sets the JavaScript function to call when response data has been instantiated but before the page is updated.</summary>
      <returns>The JavaScript function to call when the response data has been instantiated.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnFailure">
      <summary>Gets or sets the JavaScript function to call if the page update fails.</summary>
      <returns>The JavaScript function to call if the page update fails.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnSuccess">
      <summary>Gets or sets the JavaScript function to call after the page is successfully updated.</summary>
      <returns>The JavaScript function to call after the page is successfully updated.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.UpdateTargetId">
      <summary>Gets or sets the ID of the DOM element to update by using the response from the server.</summary>
      <returns>The ID of the DOM element to update.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Url">
      <summary>Gets or sets the URL to make the request to.</summary>
      <returns>The URL to make the request to.</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.InsertionMode">
      <summary>Enumerates the AJAX script insertion modes.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.Replace">
      <summary>Replace the element.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertBefore">
      <summary>Insert before the element.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertAfter">
      <summary>Insert after the element.</summary>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncActionDescriptor">
      <summary>Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncActionDescriptor" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>An object that contains the result of an asynchronous call.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>Returns the result of an asynchronous operation.</summary>
      <returns>The result of an asynchronous operation.</returns>
      <param name="asyncResult">An object that represents the status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>The result of executing the asynchronous action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncControllerActionInvoker">
      <summary>Represents a class that is responsible for invoking the action methods of an asynchronous controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncControllerActionInvoker" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, action name, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, action descriptor, parameters, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters for the asynchronous action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, filters, action descriptor, parameters, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters for the asynchronous action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>Returns the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncManager">
      <summary>Provides asynchronous operations for the <see cref="T:System.Web.Mvc.AsyncController" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncManager" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor(System.Threading.SynchronizationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncManager" /> class using the synchronization context.</summary>
      <param name="syncContext">The synchronization context.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Finish">
      <summary>Notifies ASP.NET that all asynchronous operations are complete.</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.AsyncManager.Finished">
      <summary>Occurs when the <see cref="M:System.Web.Mvc.Async.AsyncManager.Finish" /> method is called.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.OutstandingOperations">
      <summary>Gets the number of outstanding operations.</summary>
      <returns>The number of outstanding operations.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Parameters">
      <summary>Gets the parameters that were passed to the asynchronous completion method.</summary>
      <returns>The parameters that were passed to the asynchronous completion method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Sync(System.Action)">
      <summary>Executes a callback in the current synchronization context.</summary>
      <param name="action">The asynchronous action.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Timeout">
      <summary>Gets or sets the asynchronous timeout value, in milliseconds.</summary>
      <returns>The asynchronous timeout value, in milliseconds.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncActionInvoker">
      <summary>Defines the interface for an action invoker, which is used to invoke an asynchronous action in response to an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>Invokes the specified action.</summary>
      <returns>The status of the asynchronous result.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the asynchronous action.</param>
      <param name="callback">The callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>Cancels the asynchronous action.</summary>
      <returns>true if the asynchronous method could be canceled; otherwise, false.</returns>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncController">
      <summary>Defines the methods that are required for an asynchronous controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Executes the specified request context.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.EndExecute(System.IAsyncResult)">
      <summary>Ends the asynchronous operation.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncManagerContainer">
      <summary>Provides a container for the asynchronous manager object.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.IAsyncManagerContainer.AsyncManager">
      <summary>Gets the asynchronous manager object.</summary>
      <returns>The asynchronous manager object.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.OperationCounter">
      <summary>Provides a container that maintains a count of pending asynchronous operations.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.OperationCounter" /> class.</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.OperationCounter.Completed">
      <summary>Occurs when an asynchronous method completes.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.OperationCounter.Count">
      <summary>Gets the operation count.</summary>
      <returns>The operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement">
      <summary>Reduces the operation count by 1.</summary>
      <returns>The updated operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement(System.Int32)">
      <summary>Reduces the operation count by the specified value.</summary>
      <returns>The updated operation count.</returns>
      <param name="value">The number of operations to reduce the count by.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment">
      <summary>Increments the operation count by one.</summary>
      <returns>The updated operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment(System.Int32)">
      <summary>Increments the operation count by the specified value.</summary>
      <returns>The updated operation count.</returns>
      <param name="value">The number of operations to increment the count by.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor">
      <summary>Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor" /> class.</summary>
      <param name="asyncMethodInfo">An object that contains information about the method that begins the asynchronous operation (the method whose name ends with "Asynch").</param>
      <param name="completedMethodInfo">An object that contains information about the completion method (method whose name ends with "Completed").</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ActionName">
      <summary>Gets the name of the action method.</summary>
      <returns>The name of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.AsyncMethodInfo">
      <summary>Gets the method information for the asynchronous action method.</summary>
      <returns>The method information for the asynchronous action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Begins running the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>An object that contains the result of an asynchronous call.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.CompletedMethodInfo">
      <summary>Gets the method information for the asynchronous completion method.</summary>
      <returns>The method information for the asynchronous completion method.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor for the asynchronous action method.</summary>
      <returns>The controller descriptor for the asynchronous action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>Returns the result of an asynchronous operation.</summary>
      <returns>The result of an asynchronous operation.</returns>
      <param name="asyncResult">An object that represents the status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes of the specified type exist.</returns>
      <param name="attributeType">The type of the custom attributes to return.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetFilters">
      <summary>Returns the filters that are associated with the action method.</summary>
      <returns>The filters that are associated with the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetParameters">
      <summary>Returns the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetSelectors">
      <summary>Returns the action method selectors.</summary>
      <returns>The action method selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether one or more instances of the specified attribute type are defined for the action member.</summary>
      <returns>true if an attribute of type that is represented by <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor">
      <summary>Encapsulates information that describes an asynchronous controller, such as its name, type, and actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor" /> class.</summary>
      <param name="controllerType">The type of the controller.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds an action method by using the specified name and controller context.</summary>
      <returns>The information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCanonicalActions">
      <summary>Returns a list of action method descriptors in the controller.</summary>
      <returns>A list of action method descriptors in the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns custom attributes of a specified type that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of the specified custom attribute are defined for this member.</summary>
      <returns>true if an attribute of the type represented by <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.SynchronousOperationException">
      <summary>Represents an exception that occurred during the synchronous processing of an HTTP request in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using a system-supplied message.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using the specified message.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Web.Mvc.Html.ChildActionExtensions">
      <summary>Represents support for calling child action methods and rendering the result inline in a parent view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Invokes the specified child action method and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Invokes the specified child action method with the specified parameters and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Invokes the specified child action method using the specified controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Invokes the specified child action method and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Invokes the specified child action method using the specified controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayExtensions">
      <summary>Represents support for rendering object values as HTML.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by a string expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by a string expression, using additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template and an HTML field ID.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template, HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData"></param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns HTML markup for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a string that contains each property value in the object that is represented by the specified expression, using additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns a string that contains each property value in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" />, using the specified template.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns a string that contains each property value in the object that is represented by the specified expression, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" />, using the specified template and an HTML field ID.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression, using the template, an HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns HTML markup for each property in the model.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Returns HTML markup for each property in the model, using the additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the model using the specified template.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the model, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns HTML markup for each property in the model using the specified template and HTML field ID.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the model, using the specified template, an HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayTextExtensions">
      <summary>Provides a way to render object values as HTML.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayText(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="name">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayTextFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TResult">The type of the value.</typeparam>
    </member>
    <member name="T:System.Web.Mvc.Html.EditorExtensions">
      <summary>Represents support for the HTML input element in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and HTML field name.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression, using the specified template.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression, using the specified template and HTML field name.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an HTML input element for each property in the model.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML input element for each property in the model, using the specified template.</summary>
      <returns>An HTML input element for each property in the model and in the specified template.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the model, using the specified template name and HTML field name.</summary>
      <returns>An HTML input element for each property in the model and in the named template.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using the template name, HTML field name and additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.FormExtensions">
      <summary>Represents support for HTML in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag. </returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.EndForm(System.Web.Mvc.HtmlHelper)">
      <summary>Renders the closing &lt;/form&gt; tag to the response. </summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.InputExtensions">
      <summary>Represents support for HTML input controls in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a check box input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and a value to indicate whether the check box is selected.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, a value to indicate whether the check box is selected, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Object)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, a value that indicates whether the check box is selected, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a hidden input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a password input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Object)">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a text input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.LabelExtensions">
      <summary>Represents support for the HTML label element in an ASP.NET MVC view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the model.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.LinkExtensions">
      <summary>Represents support for HTML links in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. The attributes are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. </param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.MvcForm">
      <summary>Represents an HTML form element in an MVC view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.HttpResponseBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class using the specified HTTP response object.</summary>
      <param name="httpResponse">The HTTP response object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpResponse " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.Mvc.ViewContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class using the specified view context.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render a view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources used by the current instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.EndForm">
      <summary>Ends the form and disposes of all form resources.</summary>
    </member>
    <member name="T:System.Web.Mvc.Html.PartialExtensions">
      <summary>Represents the functionality to render a partial view as an HTML-encoded string.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
      <param name="model">The model for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model for the partial view.</param>
      <param name="viewData">The view data dictionary for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
      <param name="viewData">The view data dictionary for the partial view.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.RenderPartialExtensions">
      <summary>Provides support for rendering a partial view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Renders the specified partial view by using the specified HMTL helper.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Renders the specified partial view, passing it a copy of the current <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object, but with the Model property set to the specified model.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view, replacing the partial view's ViewData property with the specified <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object and setting the Model property of the view data to the specified model.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model for the partial view.</param>
      <param name="viewData">The view data for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view, replacing its ViewData property with the specified <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="viewData">The view data.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.SelectExtensions">
      <summary>Represents support for making selections in a list.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper and the name of the form field.</summary>
      <returns>An HTML select element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and an option label.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, and an option label.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and option label.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a multi-select select element using the specified HTML helper and the name of the form field.</summary>
      <returns>An HTML select element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HMTL attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list..</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list..</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression and using the specified list items.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the list.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.TextAreaExtensions">
      <summary>Represents support for HTML textarea controls.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns the specified textarea element by using the specified HTML helper and the name of the form field.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper and HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the text content.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Object)">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.ValidationExtensions">
      <summary>Provides support for validating the input from an HTML form.</summary>
    </member>
    <member name="P:System.Web.Mvc.Html.ValidationExtensions.ResourceClassKey">
      <summary>Gets or sets the name of the resource file (class key) that contains localized string values.</summary>
      <returns>The name of the resource file (class key).</returns>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.Validate(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Retrieves the validation metadata for the specified model and applies each rule to the data field.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelName" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidateFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Retrieves the validation metadata and validates each data field that is represented by the specified expression.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression.</summary>
      <returns>The HTML markup for a validation-error message for each data field that is represented by the expression. If no validation error occurs or client validation is disabled, this method returns null.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message.</summary>
      <returns>The HTML markup for a validation-error message for each data field that is represented by the expression. If no validation error occurs or client validation is disabled, this method returns null.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.</summary>
      <returns>The HTML markup for a validation-error message for each data field that is represented by the expression. If no validation error occurs or client validation is disabled, this method returns null.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.</summary>
      <returns>The HTML markup for a validation-error message for each data field that is represented by the expression. If no validation error occurs or client validation is disabled, this method returns null.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Object)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HMTL helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an unordered list (ul element) of validation messages in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\ASP.NET MVC\v3.0\System.Web.Mvc.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Mvc</name>
  </assembly>
  <members>
    <member name="T:System.Web.Mvc.AcceptVerbsAttribute">
      <summary>Represents an attribute that specifies which HTTP verbs an action method will respond to.</summary>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> class by using a list of HTTP verbs that the action method will respond to.</summary>
      <param name="verbs">The HTTP verbs that the action method will respond to.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="verbs" /> parameter is null or zero length.</exception>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.#ctor(System.Web.Mvc.HttpVerbs)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AcceptVerbsAttribute" /> class using the HTTP verbs that the action method will respond to.</summary>
      <param name="verbs">The HTTP verbs that the action method will respond to.</param>
    </member>
    <member name="M:System.Web.Mvc.AcceptVerbsAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the specified method information is valid for the specified controller context.</summary>
      <returns>true if the method information is valid; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext " />parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AcceptVerbsAttribute.Verbs">
      <summary>Gets or sets the list of HTTP verbs that the action method will respond to.</summary>
      <returns>The list of HTTP verbs that the action method will respond to.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionDescriptor">
      <summary>Provides information about an action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ActionName">
      <summary>Gets the name of the action method.</summary>
      <returns>The name of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the action method by using the specified parameters and controller context.</summary>
      <returns>The result of executing the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes of the specified type exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attritubeType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetFilters">
      <summary>Returns the filters that are associated with this action method.</summary>
      <returns>The filters that are associated with this action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetParameters">
      <summary>Returns the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.GetSelectors">
      <summary>Returns the action-method selectors.</summary>
      <returns>The action-method selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.ActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether one or more instances of the specified attribute type are defined for this member.</summary>
      <returns>true if <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attritubeType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionDescriptor.UniqueId">
      <summary>Gets the unique ID for the action descriptor using lazy initialization.</summary>
      <returns>The unique ID.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutedContext">
      <summary>Provides the context for the ActionExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutedContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutedContext" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action method descriptor.</param>
      <param name="canceled">true if the action is canceled.</param>
      <param name="exception">The exception object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ActionDescriptor">
      <summary>Gets or sets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Canceled">
      <summary>Gets or sets a value that indicates that this <see cref="T:System.Web.Mvc.ActionExecutedContext" /> object is canceled.</summary>
      <returns>true if the context canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Exception">
      <summary>Gets or sets the exception that occurred during the execution of the action method, if any.</summary>
      <returns>The exception that occurred during the execution of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception is handled.</summary>
      <returns>true if the exception is handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutedContext.Result">
      <summary>Gets or sets the result returned by the action method.</summary>
      <returns>The result returned by the action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionExecutingContext">
      <summary>Provides the context for the ActionExecuting method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionExecutingContext" /> class by using the specified controller context, action descriptor, and action-method parameters.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="actionParameters">The action-method parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ActionParameters" /> or <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionDescriptor">
      <summary>Gets or sets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.ActionParameters">
      <summary>Gets or sets the action-method parameters.</summary>
      <returns>The action-method parameters.</returns>
    </member>
    <member name="P:System.Web.Mvc.ActionExecutingContext.Result">
      <summary>Gets or sets the result that is returned by the action method.</summary>
      <returns>The result that is returned by the action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionFilterAttribute">
      <summary>Represents the base class for filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called by the ASP.NET MVC framework after the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called by the ASP.NET MVC framework before the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called by the ASP.NET MVC framework after the action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called by the ASP.NET MVC framework before the action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionMethodSelectorAttribute">
      <summary>Represents an attribute that is used to influence the selection of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionMethodSelectorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionMethodSelectorAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the action method selection is valid for the specified controller context.</summary>
      <returns>true if the action method selection is valid for the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionNameAttribute">
      <summary>Represents an attribute that is used for the name of an action.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionNameAttribute" /> class.</summary>
      <param name="name">Name of the action.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ActionNameAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>Determines whether the action name is valid within the specified controller context.</summary>
      <returns>true if the action name is valid within the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="P:System.Web.Mvc.ActionNameAttribute.Name">
      <summary>Gets or sets the name of the action.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="T:System.Web.Mvc.ActionNameSelectorAttribute">
      <summary>Represents an attribute that affects the selection of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionNameSelectorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionNameSelectorAttribute.IsValidName(System.Web.Mvc.ControllerContext,System.String,System.Reflection.MethodInfo)">
      <summary>Determines whether the action name is valid in the specified controller context.</summary>
      <returns>true if the action name is valid in the specified controller context; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="methodInfo">Information about the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionResult">
      <summary>Encapsulates the result of an action method and is used to perform a framework-level operation on behalf of the action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="T:System.Web.Mvc.ActionSelector">
      <summary>Represents a delegate that contains the logic for selecting an action method.</summary>
      <returns>true if an action method was successfully selected; otherwise, false.</returns>
      <param name="controllerContext">The current HTTP request context.</param>
    </member>
    <member name="T:System.Web.Mvc.AdditionalMetadataAttribute">
      <summary>Provides a class that implements the <see cref="T:System.Web.Mvc.IMetadataAware" /> interface in order to support additional metadata. </summary>
    </member>
    <member name="M:System.Web.Mvc.AdditionalMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AdditionalMetadataAttribute" /> class.</summary>
      <param name="name">The name of the model metadata.</param>
      <param name="value">The value of the model metadata.</param>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.Name">
      <summary>Gets the name of the additional metadata attribute.</summary>
      <returns>The name of the of the additional metadata attribute.</returns>
    </member>
    <member name="M:System.Web.Mvc.AdditionalMetadataAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>Provides metadata to the model metadata creation process.</summary>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.TypeId">
      <summary>Gets the type of the of the additional metadata attribute.</summary>
      <returns>The type of the of the additional metadata attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AdditionalMetadataAttribute.Value">
      <summary>Gets the value of the of the additional metadata attribute.</summary>
      <returns>The value of the of the additional metadata attribute.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper">
      <summary>Represents support for rendering HTML in AJAX scenarios within a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper" /> class using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the parameters is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The URL route collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.GlobalizationScriptPath">
      <summary>Gets or sets the root path for the location to use for globalization script files.</summary>
      <returns>The location of the folder where globalization script files are stored. The default location is "~/Scripts/Globalization".</returns>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper.JavaScriptStringEncode(System.String)">
      <summary>Serializes the specified message and returns the resulting JSON-formatted string.</summary>
      <returns>The serialized message as a JSON-formatted string.</returns>
      <param name="message">The message to serialize.</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.RouteCollection">
      <summary>Gets the collection of URL routes for the application.</summary>
      <returns>The collection of routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewContext">
      <summary>Gets the context information about the view.</summary>
      <returns>The context of the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewData">
      <summary>Gets the current view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper.ViewDataContainer">
      <summary>Gets the view data container.</summary>
      <returns>The view data container.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxHelper`1">
      <summary>Represents support for rendering HTML in AJAX scenarios within a strongly typed view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
    </member>
    <member name="M:System.Web.Mvc.AjaxHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> class by using the specified view context, view data container, and URL route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The URL route collection.</param>
    </member>
    <member name="P:System.Web.Mvc.AjaxHelper`1.ViewData">
      <summary>Gets the strongly typed version of the view data dictionary.</summary>
      <returns>The strongly typed data dictionary of the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.AjaxRequestExtensions">
      <summary>Represents a class that extends the <see cref="T:System.Web.HttpRequestBase" /> class by adding the ability to determine whether an HTTP request is an AJAX request.</summary>
    </member>
    <member name="M:System.Web.Mvc.AjaxRequestExtensions.IsAjaxRequest(System.Web.HttpRequestBase)"></member>
    <member name="T:System.Web.Mvc.AllowHtmlAttribute">
      <summary>Allows a request to include HTML markup during model binding by skipping request validation for the property. (It is strongly recommended that your application explicitly check all models where you disable request validation in order to prevent script exploits.)</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowHtmlAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AllowHtmlAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AllowHtmlAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>This method supports the ASP.NET MVC validation infrastructure and is not intended to be used directly from your code.</summary>
      <param name="metadata">The model metadata.</param>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistration">
      <summary>Provides a way to register one or more areas in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistration" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistration.AreaName">
      <summary>Gets the name of the area to register.</summary>
      <returns>The name of the area to register.</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas">
      <summary>Registers all areas in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterAllAreas(System.Object)">
      <summary>Registers all areas in an ASP.NET MVC application by using the specified user-defined information.</summary>
      <param name="state">An object that contains user-defined information to pass to the area.</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistration.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
      <summary>Registers an area in an ASP.NET MVC application using the specified area's context information.</summary>
      <param name="context">Encapsulates the information that is required in order to register the area.</param>
    </member>
    <member name="T:System.Web.Mvc.AreaRegistrationContext">
      <summary>Encapsulates the information that is required in order to register an area within an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> class using the specified area name and routes collection.</summary>
      <param name="areaName">The name of the area to register.</param>
      <param name="routes">The collection of routes for the application.</param>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.#ctor(System.String,System.Web.Routing.RouteCollection,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AreaRegistrationContext" /> class using the specified area name, routes collection, and user-defined data.</summary>
      <param name="areaName">The name of the area to register.</param>
      <param name="routes">The collection of routes for the application.</param>
      <param name="state">An object that contains user-defined information to pass to the area.</param>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.AreaName">
      <summary>Gets the name of the area to register.</summary>
      <returns>The name of the area to register.</returns>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object)">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values and constraint.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify valid values for a URL parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values, constraints, and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify valid values for a URL parameter.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.Object,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified route default values and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AreaRegistrationContext.MapRoute(System.String,System.String,System.String[])">
      <summary>Maps the specified URL route and associates it with the area that is specified by the <see cref="P:System.Web.Mvc.AreaRegistrationContext.AreaName" /> property, using the specified namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="namespaces">An enumerable set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Namespaces">
      <summary>Gets the namespaces for the application.</summary>
      <returns>An enumerable set of namespaces for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.Routes">
      <summary>Gets a collection of defined routes for the application.</summary>
      <returns>A collection of defined routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.AreaRegistrationContext.State">
      <summary>Gets an object that contains user-defined information to pass to the area.</summary>
      <returns>An object that contains user-defined information to pass to the area.</returns>
    </member>
    <member name="T:System.Web.Mvc.AssociatedMetadataProvider">
      <summary>Provides an abstract class to implement a metadata provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.#ctor">
      <summary>Called from constructors in a derived class to initialize the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>When overridden in a derived class, creates the model metadata for the property.</summary>
      <returns>The model metadata for the property.</returns>
      <param name="attributes">The set of attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.FilterAttributes(System.Type,System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets a list of attributes.</summary>
      <returns>A list of attributes.</returns>
      <param name="containerType">The type of the container.</param>
      <param name="propertyDescriptor">The property descriptor.</param>
      <param name="attributes">The attribute container.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Returns a list of properties for the model.</summary>
      <returns>A list of properties for the model.</returns>
      <param name="container">The model container.</param>
      <param name="containerType">The type of the container.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the metadata for the specified property using the container type and property descriptor.</summary>
      <returns>The metadata for the specified property using the container type and property descriptor.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyDescriptor">The property descriptor</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Returns the metadata for the specified property using the container type and property name.</summary>
      <returns>The metadata for the specified property using the container type and property name.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Returns the metadata for the specified property using the type of the model.</summary>
      <returns>The metadata for the specified property using the type of the model.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedMetadataProvider.GetTypeDescriptor(System.Type)">
      <summary>Returns the type descriptor from the specified type.</summary>
      <returns>The type descriptor.</returns>
      <param name="type">The type.</param>
    </member>
    <member name="T:System.Web.Mvc.AssociatedValidatorProvider">
      <summary>Provides an abstract class for classes that implement a validation provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.#ctor">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>Gets a type descriptor for the specified type.</summary>
      <returns>A type descriptor for the specified type.</returns>
      <param name="type">The type of the validation provider.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets the validators for the model using the metadata and controller context.</summary>
      <returns>The validators for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.AssociatedValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets the validators for the model using the metadata, the controller context, and a list of attributes.</summary>
      <returns>The validators for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attributes">The list of attributes.</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncController">
      <summary>Provides the base class for asynchronous controllers.</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AsyncController" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.AsyncController.AsyncManager">
      <summary>Gets the asynchronous manager instance.</summary>
      <returns>The asynchronous manager instance.</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to initialize asynchronous request processing.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state object.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.BeginExecuteCore(System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET during initialization of asynchronous request processing.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state object.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.CreateActionInvoker">
      <summary>Creates an action invoker.</summary>
      <returns>An action invoker.</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.EndExecute(System.IAsyncResult)">
      <summary>Cancels the execution of an asynchronous action method.</summary>
      <param name="asyncResult">The status of the asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.EndExecuteCore(System.IAsyncResult)">
      <summary>Called by ASP.NET when the current asynchronous action has completed.</summary>
      <param name="asyncResult">The status of the asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.System#Web#Mvc#Async#IAsyncController#BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin the execution of an asynchronous action method.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.AsyncController.System#Web#Mvc#Async#IAsyncController#EndExecute(System.IAsyncResult)">
      <summary>Cancels the execution of an asynchronous action method by ASP.NET at the end of the execution of an asynchronous action method.</summary>
      <param name="asyncResult">The status of the asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.AsyncTimeoutAttribute">
      <summary>Represents an attribute that is used to set the timeout value, in milliseconds, for an asynchronous method.</summary>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> class.</summary>
      <param name="duration">The timeout value, in milliseconds.</param>
    </member>
    <member name="P:System.Web.Mvc.AsyncTimeoutAttribute.Duration">
      <summary>Gets the timeout duration, in milliseconds.</summary>
      <returns>The timeout duration, in milliseconds.</returns>
    </member>
    <member name="M:System.Web.Mvc.AsyncTimeoutAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called by ASP.NET before the asynchronous action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.AuthorizationContext">
      <summary>Encapsulates the information that is required for using an <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class using the specified controller context.</summary>
      <param name="controllerContext">The context within which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizationContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizationContext" /> class using the specified controller context and action descriptor.</summary>
      <param name="controllerContext">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="actionDescriptor">An object that provides information about an action method, such as its name, controller, parameters, attributes, and filters.</param>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.ActionDescriptor">
      <summary>Provides information about the action method that is marked by the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute, such as its name, controller, parameters, attributes, and filters.</summary>
      <returns>The action descriptor for the action method that is marked by the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizationContext.Result">
      <summary>Gets or sets the result that is returned by an action method.</summary>
      <returns>The result that is returned by an action method.</returns>
    </member>
    <member name="T:System.Web.Mvc.AuthorizeAttribute">
      <summary>Represents an attribute that is used to restrict access by callers to an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
      <summary>When overridden, provides an entry point for custom authorization checks.</summary>
      <returns>true if the user is authorized; otherwise, false.</returns>
      <param name="httpContext">The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>Processes HTTP requests that fail authorization.</summary>
      <param name="filterContext">Encapsulates the information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />. The <paramref name="filterContext" /> object contains the controller, HTTP context, request context, action result, and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when a process requests authorization.</summary>
      <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.AuthorizeAttribute.OnCacheAuthorization(System.Web.HttpContextBase)">
      <summary>Called when the caching module requests authorization.</summary>
      <returns>A reference to the validation status.</returns>
      <param name="httpContext">The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Roles">
      <summary>Gets or sets the user roles.</summary>
      <returns>The user roles.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.TypeId">
      <summary>Gets the unique identifier for this attribute.</summary>
      <returns>The unique identifier for this attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.AuthorizeAttribute.Users">
      <summary>Gets or sets the authorized users.</summary>
      <returns>The authorized users.</returns>
    </member>
    <member name="T:System.Web.Mvc.BindAttribute">
      <summary>Represents an attribute that is used to provide details about how model binding to a parameter should occur.</summary>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BindAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Exclude">
      <summary>Gets or sets a comma-delimited list of property names for which binding is not allowed.</summary>
      <returns>The exclude list.</returns>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Include">
      <summary>Gets or sets a comma-delimited list of property names for which binding is allowed.</summary>
      <returns>The include list.</returns>
    </member>
    <member name="M:System.Web.Mvc.BindAttribute.IsPropertyAllowed(System.String)">
      <summary>Determines whether the specified property is allowed.</summary>
      <returns>true if the specified property is allowed; otherwise, false.</returns>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="P:System.Web.Mvc.BindAttribute.Prefix">
      <summary>Gets or sets the prefix to use when markup is rendered for binding to an action argument or to a model property.</summary>
      <returns>The prefix to use.</returns>
    </member>
    <member name="T:System.Web.Mvc.BuildManagerCompiledView">
      <summary>Represents the base class for views that are compiled by the BuildManager class before being rendered by a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.#ctor(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerCompiledView" /> class using the specified controller context and view path.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerCompiledView" /> class using the specified controller context, view path, and view page activator.</summary>
      <param name="controllerContext">Context information for the current controller. This information includes the HTTP context, request context, route data, parent action view context, and more.</param>
      <param name="viewPath">The path to the view that will be rendered.</param>
      <param name="viewPageActivator">The object responsible for dynamically constructing the view page at run time. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewPath" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>Renders the specified view context by using the specified the writer object.</summary>
      <param name="viewContext">Information related to rendering a view, such as view data, temporary data, and form context.</param>
      <param name="writer">The writer object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> parameter is null.</exception>
      <exception cref="T:SInvalidOperationException">An instance of the view type could not be created.</exception>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerCompiledView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>When overridden in a derived class, renders the specified view context by using the specified writer object and object instance.</summary>
      <param name="viewContext">Information related to rendering a view, such as view data, temporary data, and form context.</param>
      <param name="writer">The writer object.</param>
      <param name="instance">An object that contains additional information that can be used in the view.</param>
    </member>
    <member name="P:System.Web.Mvc.BuildManagerCompiledView.ViewPath">
      <summary>Gets or sets the view path.</summary>
      <returns>The view path.</returns>
    </member>
    <member name="T:System.Web.Mvc.BuildManagerViewEngine">
      <summary>Provides a base class for view engines.</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerViewEngine" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.BuildManagerViewEngine" /> class using the specified view page activator.</summary>
      <param name="viewPageActivator">The view page activator.</param>
    </member>
    <member name="M:System.Web.Mvc.BuildManagerViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Gets a value that indicates whether a file exists in the specified virtual file system (path).</summary>
      <returns>true if the file exists in the virtual file system; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="P:System.Web.Mvc.BuildManagerViewEngine.ViewPageActivator">
      <summary>Gets the view page activator.</summary>
      <returns>The view page activator.</returns>
    </member>
    <member name="T:System.Web.Mvc.ByteArrayModelBinder">
      <summary>Maps a browser request to a byte array.</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ByteArrayModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ByteArrayModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound data object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ChildActionOnlyAttribute">
      <summary>Represents an attribute that is used to indicate that an action method should be called only as a child action.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ChildActionOnlyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionOnlyAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">An object that encapsulates the information that is required in order to authorize access to the child action.</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionValueProvider">
      <summary>Represents a value provider for values from child actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProvider.GetValue(System.String)">
      <summary>Retrieves a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="T:System.Web.Mvc.ChildActionValueProviderFactory">
      <summary>Represents a factory for creating value provider objects for child actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ChildActionValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ChildActionValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> object for the specified controller context.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ChildActionValueProvider" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider">
      <summary>Returns the client data-type model validators.</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ClientDataTypeModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ClientDataTypeModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns the client data-type model validators.</summary>
      <returns>The client data-type model validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.CompareAttribute">
      <summary>Provides an attribute that compares two properties of a model.</summary>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CompareAttribute" /> class.</summary>
      <param name="otherProperty">The property to compare with the current property.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the compare error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name of the field that caused the validation failure.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.FormatPropertyForClientValidation(System.String)">
      <summary>Formats the property for client validation by prepending an asterisk (*) and a dot.</summary>
      <returns>The string "*." is prepended to the property.</returns>
      <param name="property">The property.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of compare-value client validation rules for the property using the specified model metadata and controller context.</summary>
      <returns>A list of compare-value client validation rules.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.CompareAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is equal to the compared object.</summary>
      <returns>null if the value of the compared property is equal to the value parameter; otherwise, a validation result that contains the error message that indicates that the comparison failed.</returns>
      <param name="value">The value of the object to compare.</param>
      <param name="validationContext">The validation context.</param>
    </member>
    <member name="P:System.Web.Mvc.CompareAttribute.OtherProperty">
      <summary>Gets the property to compare with the current property.</summary>
      <returns>The property to compare with the current property.</returns>
    </member>
    <member name="T:System.Web.Mvc.ContentResult">
      <summary>Represents a user-defined content type that is the result of an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ContentResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.Content">
      <summary>Gets or sets the content.</summary>
      <returns>The content.</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentEncoding">
      <summary>Gets or sets the content encoding.</summary>
      <returns>The content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.ContentResult.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="M:System.Web.Mvc.ContentResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Controller">
      <summary>Provides methods that respond to HTTP requests that are made to an ASP.NET MVC Web site.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Controller" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.Controller.ActionInvoker">
      <summary>Gets the action invoker for the controller.</summary>
      <returns>The action invoker.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Binders">
      <summary>Gets or sets the binder.</summary>
      <returns>The binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String)">
      <summary>Creates a content result object by using a string.</summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String)">
      <summary>Creates a content result object by using a string and the content type. </summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Content(System.String,System.String,System.Text.Encoding)">
      <summary>Creates a content result object by using a string, the content type, and content encoding.</summary>
      <returns>The content result instance.</returns>
      <param name="content">The content to write to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateActionInvoker">
      <summary>Creates an action invoker.</summary>
      <returns>An action invoker.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.CreateTempDataProvider">
      <summary>Creates a temporary data provider.</summary>
      <returns>A temporary data provider.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Web.Mvc.Controller" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.Dispose(System.Boolean)">
      <summary>Releases unmanaged resources and optionally releases managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ExecuteCore">
      <summary>Invokes the action in the current controller context.</summary>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileContentResult" /> object by using the file contents and file type.</summary>
      <returns>The file-content result object.</returns>
      <param name="fileContents">The binary content to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.Byte[],System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileContentResult" /> object by using the file contents, content type, and the destination file name.</summary>
      <returns>The file-content result object.</returns>
      <param name="fileContents">The binary content to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileStreamResult" /> object by using the <see cref="T:System.IO.Stream" /> object and content type.  </summary>
      <returns>The file-content result object.</returns>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.IO.Stream,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FileStreamResult" /> object using the <see cref="T:System.IO.Stream" /> object, the content type, and the target file name. </summary>
      <returns>The file-stream result object.</returns>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type (MIME type)</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FilePathResult" /> object by using the file name and the content type.</summary>
      <returns>The file-stream result object.</returns>
      <param name="fileName">The path of the file to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.File(System.String,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.FilePathResult" /> object by using the file name, the content type, and the file download name.</summary>
      <returns>The file-stream result object.</returns>
      <param name="fileName">The path of the file to send to the response.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="fileDownloadName">The file name to use in the file-download dialog box that is displayed in the browser.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.HandleUnknownAction(System.String)">
      <summary>Called when a request matches this controller, but no method with the specified action name is found in the controller.</summary>
      <param name="actionName">The name of the attempted action.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.HttpContext">
      <summary>Gets HTTP-specific information about an individual HTTP request.</summary>
      <returns>The HTTP context.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.HttpNotFound">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.HttpNotFound(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</returns>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Initialize(System.Web.Routing.RequestContext)">
      <summary>Initializes data that might not be available when the constructor is called.</summary>
      <param name="requestContext">The HTTP context and route data.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.JavaScript(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JavaScriptResult" /> object.</summary>
      <returns>The <see cref="T:System.Web.Mvc.JavaScriptResult" /> object that writes the script to the response.</returns>
      <param name="script">The JavaScript code to run on the client</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON).</summary>
      <returns>The JSON result object that serializes the specified object to JSON format. The result object that is prepared by this method is written to the response by the ASP.NET MVC framework when the object is executed.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format.</summary>
      <returns>The JSON result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format.</summary>
      <returns>The JSON result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Text.Encoding,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the content type, content encoding, and the JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="contentEncoding">The content encoding.</param>
      <param name="behavior">The JSON request behavior </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.String,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified content type and JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="contentType">The content type (MIME type).</param>
      <param name="behavior">The JSON request behavior</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Json(System.Object,System.Web.Mvc.JsonRequestBehavior)">
      <summary>Creates a <see cref="T:System.Web.Mvc.JsonResult" /> object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified JSON request behavior.</summary>
      <returns>The result object that serializes the specified object to JSON format.</returns>
      <param name="data">The JavaScript object graph to serialize.</param>
      <param name="behavior">The content type (MIME type).</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.ModelState">
      <summary>Gets the model state dictionary object that contains the state of the model and of model-binding validation.</summary>
      <returns>The model state dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called after the action method is invoked.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called before the action method is invoked.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization occurs.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an unhandled exception occurs in the action.</summary>
      <param name="filterContext">Information about the current request and action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called after the action result that is returned by an action method is executed.</summary>
      <param name="filterContext">Information about the current request and action result</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before the action result that is returned by an action method is executed.</summary>
      <param name="filterContext">Information about the current request and action result</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view.</summary>
      <returns>A partial-view result object.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified model. </summary>
      <returns>A partial-view result object.</returns>
      <param name="model">The model that is rendered by the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified view name. </summary>
      <returns>A partial-view result object.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.PartialView(System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.PartialViewResult" /> object that renders a partial view, by using the specified view name and model. </summary>
      <returns>A partial-view result object.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.Redirect(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.RedirectResult" /> object that redirects to the specified URL.</summary>
      <returns>The redirect result object.</returns>
      <param name="url">The URL to redirect to.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectPermanent(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</returns>
      <param name="url">The URL to redirect to.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String)">
      <summary>Redirects to the specified action using the action name.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Object)">
      <summary>Redirects to the specified action using the action name and route values.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String)">
      <summary>Redirects to the specified action using the action name and controller name.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Object)">
      <summary>Redirects to the specified action using the action name, controller name, and route values.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified action using the action name, controller name, and route dictionary.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToAction(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified action using the action name and route dictionary.</summary>
      <returns>The redirect result object.</returns>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</returns>
      <param name="actionName">The action name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, and route values.</returns>
      <param name="actionName">The action name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and controller name.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and controller name.</returns>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String,System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</returns>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name, controller name, and route values.</returns>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToActionPermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified action name,  and route values.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Object)">
      <summary>Redirects to the specified route using the specified route values.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String)">
      <summary>Redirects to the specified route using the route name.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Object)">
      <summary>Redirects to the specified route using the route name and route values.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
      <param name="routeValues">The parameters for a route. </param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified route using the route name and route dictionary.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeName">The name of the route</param>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoute(System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects to the specified route using the route dictionary.</summary>
      <returns>The redirect-to-route result object.</returns>
      <param name="routeValues">The parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route values.</summary>
      <returns>Returns <see cref="T:System.Web.Mvc.RedirectToRouteResult" />.</returns>
      <param name="routeValues">The route name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name.</summary>
      <returns>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name.</returns>
      <param name="routeName">The route name.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String,System.Object)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true.</returns>
      <param name="routeName">The route name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name and route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route name and route values.</returns>
      <param name="routeName">The route name.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route values.</summary>
      <returns>An instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class with the <see cref="P:System.Web.Mvc.RedirectResult.Permanent" /> property set to true using the specified route values.</returns>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.Request">
      <summary>Gets the <see cref="T:System.Web.HttpRequestBase" /> object for the current HTTP request.</summary>
      <returns>The request object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Response">
      <summary>Gets the <see cref="T:System.Web.HttpResponseBase" /> object for the current HTTP response.</summary>
      <returns>The response object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.RouteData">
      <summary>Gets the route data for the current request.</summary>
      <returns>The route data.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Server">
      <summary>Gets the <see cref="T:System.Web.HttpServerUtilityBase" /> object that provides methods that are used during Web request processing.</summary>
      <returns>The HTTP server object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.Session">
      <summary>Gets the <see cref="T:System.Web.HttpSessionStateBase" /> object for the current HTTP request.</summary>
      <returns>The HTTP session-state object for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IActionFilter#OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IAuthorizationFilter#OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnAuthorization(System.Web.Mvc.AuthorizationContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IExceptionFilter#OnException(System.Web.Mvc.ExceptionContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.System#Web#Mvc#IResultFilter#OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.Controller.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> method.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="P:System.Web.Mvc.Controller.TempDataProvider">
      <summary>Gets the temporary-data provider object that is used to store data for the next request.</summary>
      <returns>The temporary-data provider.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0)">
      <summary>Updates the specified model instance using values from the controller's current value provider.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String)">
      <summary>Updates the specified model instance using values from the controller's current value provider and a prefix.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude , and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a prefix.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider and included properties.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="model" /> parameter or the <see cref="P:System.Web.Mvc.ControllerBase.ValueProvider" /> property is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a list of properties to include.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryUpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider.</summary>
      <returns>true if the update is successful; otherwise, false.</returns>
      <param name="model">The model instance to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object)">
      <summary>Validates the specified model instance.</summary>
      <returns>true if the model validation is successful; otherwise, false.</returns>
      <param name="model">The model instance to validate.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.TryValidateModel(System.Object,System.String)">
      <summary>Validates the specified model instance using an HTML prefix.</summary>
      <returns>true if the model validation is successful; otherwise, false.</returns>
      <param name="model">The model to validate.</param>
      <param name="prefix">The prefix to use when looking up values in the model provider.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0)">
      <summary>Updates the specified model instance using values from the controller's current value provider.</summary>
      <param name="model">The model instance to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
      <exception cref="T:System.InvalidOperationException">The model was not successfully updated.</exception>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String)">
      <summary>Updates the specified model instance using values from the controller's current value provider and a prefix.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[])">
      <summary>Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">A prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> list.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="excludeProperties">A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the <paramref name="includeProperties" /> parameter list.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider and a prefix.</summary>
      <param name="model">The model instance to update.</param>
      <param name="prefix">The prefix to use when looking up values in the value provider.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[])">
      <summary>Updates the specified model instance using values from the controller object's current value provider.</summary>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.String[],System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.</summary>
      <param name="model">The model instance to update.</param>
      <param name="includeProperties">A list of properties of the model to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Controller.UpdateModel``1(``0,System.Web.Mvc.IValueProvider)">
      <summary>Updates the specified model instance using values from the value provider.</summary>
      <param name="model">The model instance to update.</param>
      <param name="valueProvider">A dictionary of values that is used to update the model.</param>
      <typeparam name="TModel">The type of the model object.</typeparam>
    </member>
    <member name="P:System.Web.Mvc.Controller.Url">
      <summary>Gets the URL helper object that is used to generate URLs by using routing.</summary>
      <returns>The URL helper object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Controller.User">
      <summary>Gets the user security information for the current HTTP request.</summary>
      <returns>The user security information for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object)">
      <summary>Validates the specified model instance.</summary>
      <param name="model">The model to validate.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.ValidateModel(System.Object,System.String)">
      <summary>Validates the specified model instance using an HTML prefix.</summary>
      <param name="model">The model to validate.</param>
      <param name="prefix">The prefix to use when looking up values in the model provider.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders a view to the response.</summary>
      <returns>The view result that renders a view to the response.</returns>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the model that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the view name that renders a view.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object by using the view name and model that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object using the view name and master-page name that renders a view to the response.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="masterName">The name of the master page or template to use when the view is rendered.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.String,System.String,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object using the view name, master-page name, and model that renders a view.</summary>
      <returns>The view result.</returns>
      <param name="viewName">The name of the view that is rendered to the response.</param>
      <param name="masterName">The name of the master page or template to use when the view is rendered.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders the specified <see cref="T:System.Web.Mvc.IView" /> object.</summary>
      <returns>The view result.</returns>
      <param name="view">The view that is rendered to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.Controller.View(System.Web.Mvc.IView,System.Object)">
      <summary>Creates a <see cref="T:System.Web.Mvc.ViewResult" /> object that renders the specified <see cref="T:System.Web.Mvc.IView" /> object.</summary>
      <returns>The view result.</returns>
      <param name="view">The view that is rendered to the response.</param>
      <param name="model">The model that is rendered by the view.</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerActionInvoker">
      <summary>Represents a class that is responsible for invoking the action methods of a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerActionInvoker" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerActionInvoker.Binders">
      <summary>Gets or sets the model binders that are associated with the action.</summary>
      <returns>The model binders that are associated with the action.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.CreateActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Object)">
      <summary>Creates the action result.</summary>
      <returns>The action result object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="actionReturnValue">The action return value.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
      <summary>Finds the information about the action method.</summary>
      <returns>Information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>Retrieves information about the controller by using the specified controller context.</summary>
      <returns>Information about the controller.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Retrieves information about the action filters.</summary>
      <returns>Information about the action filters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
      <summary>Gets the value of the specified action-method parameter.</summary>
      <returns>The value of the action-method parameter.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameterDescriptor">The parameter descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.GetParameterValues(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Gets the values of the action-method parameters.</summary>
      <returns>The values of the action-method parameters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Invokes the specified action by using the specified controller context.</summary>
      <returns>The result of executing the action.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.Threading.ThreadAbortException">The thread was aborted during invocation of the action.</exception>
      <exception cref="T:System.Exception">An unspecified error occurred during invocation of the action.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the specified action method by using the specified parameters and the controller context.</summary>
      <returns>The result of executing the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Invokes the specified action method by using the specified parameters, controller context, and action filters.</summary>
      <returns>The context for the ActionExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The action filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>Invokes the specified action result by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="actionResult">The action result.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IResultFilter},System.Web.Mvc.ActionResult)">
      <summary>Invokes the specified action result by using the specified action filters and the controller context.</summary>
      <returns>The context for the ResultExecuted method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The action filters.</param>
      <param name="actionResult">The action result.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeAuthorizationFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IAuthorizationFilter},System.Web.Mvc.ActionDescriptor)">
      <summary>Invokes the specified authorization filters by using the specified action descriptor and controller context.</summary>
      <returns>The context for the <see cref="T:System.Web.Mvc.AuthorizeAttribute" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The authorization filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerActionInvoker.InvokeExceptionFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IExceptionFilter},System.Exception)">
      <summary>Invokes the specified exception filters by using the specified exception and controller context.</summary>
      <returns>The context for the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> object.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The exception filters.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="T:System.Web.Mvc.ControllerBase">
      <summary>Represents the base class for all MVC controllers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerBase" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ControllerContext">
      <summary>Gets or sets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.ExecuteCore">
      <summary>Executes the request.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.Initialize(System.Web.Routing.RequestContext)">
      <summary>Initializes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerBase.System#Web#Mvc#IController#Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.TempData">
      <summary>Gets or sets the dictionary for temporary data.</summary>
      <returns>The dictionary for temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValidateRequest">
      <summary>Gets or sets a value that indicates whether request validation is enabled for this request.</summary>
      <returns>true if request validation is enabled for this request; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ValueProvider">
      <summary>Gets or sets the value provider for the controller.</summary>
      <returns>The value provider for the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewBag">
      <summary>Gets the dynamic view data dictionary.</summary>
      <returns>The dynamic view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBase.ViewData">
      <summary>Gets or sets the dictionary for view data.</summary>
      <returns>The dictionary for the view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerBuilder">
      <summary>Represents a class that is responsible for dynamically building a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerBuilder" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.Current">
      <summary>Gets the current controller builder object.</summary>
      <returns>The current controller builder.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerBuilder.DefaultNamespaces">
      <summary>Gets the default namespaces.</summary>
      <returns>The default namespaces.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.GetControllerFactory">
      <summary>Gets the associated controller factory.</summary>
      <returns>The controller factory.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Type)">
      <summary>Sets the controller factory by using the specified type.</summary>
      <param name="controllerFactoryType">The type of the controller factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerFactoryType" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The controller factory cannot be assigned from the type in the <paramref name="controllerFactoryType" /> parameter.</exception>
      <exception cref="T:System.InvalidOperationException">An error occurred while the controller factory was being set.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerBuilder.SetControllerFactory(System.Web.Mvc.IControllerFactory)">
      <summary>Sets the specified controller factory.</summary>
      <param name="controllerFactory">The controller factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerFactory" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ControllerContext">
      <summary>Encapsulates information about an HTTP request that matches specified <see cref="T:System.Web.Routing.RouteBase" /> and <see cref="T:System.Web.Mvc.ControllerBase" /> instances.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData,System.Web.Mvc.ControllerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified HTTP context, URL route data, and controller.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="routeData">The route data.</param>
      <param name="controller">The controller.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerContext.#ctor(System.Web.Routing.RequestContext,System.Web.Mvc.ControllerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerContext" /> class by using the specified request context and controller.</summary>
      <param name="requestContext">The request context.</param>
      <param name="controller">The controller.</param>
      <exception cref="T:System.ArgumentNullException">One or both parameters are null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.Controller">
      <summary>Gets or sets the controller.</summary>
      <returns>The controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.HttpContext">
      <summary>Gets or sets the HTTP context.</summary>
      <returns>The HTTP context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.IsChildAction">
      <summary>Gets a value that indicates whether the associated action method is a child action.</summary>
      <returns>true if the associated action method is a child action; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.ParentActionViewContext">
      <summary>Gets an object that contains the view context information for the parent action method.</summary>
      <returns>An object that contains the view context information for the parent action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RequestContext">
      <summary>Gets or sets the request context.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerContext.RouteData">
      <summary>Gets or sets the URL route data.</summary>
      <returns>The URL route data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerDescriptor">
      <summary>Encapsulates information that describes a controller, such as its name, type, and actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerName">
      <summary>Gets the name of the controller.</summary>
      <returns>The name of the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds an action method by using the specified name and controller context.</summary>
      <returns>The information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCanonicalActions">
      <summary>Retrieves a list of action-method descriptors in the controller.</summary>
      <returns>A list of action-method descriptors in the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Retrieves custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Retrieves custom attributes of a specified type that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Web.Mvc.ControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Retrieves a value that indicates whether one or more instance of the specified custom attribute are defined for this member.</summary>
      <returns>true if the <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Web.Mvc.ControllerDescriptor.UniqueId">
      <summary>When implemented in a derived class, gets the unique ID for the controller descriptor using lazy initialization.</summary>
      <returns>The unique ID.</returns>
    </member>
    <member name="T:System.Web.Mvc.ControllerInstanceFilterProvider">
      <summary>Adds the controller to the <see cref="T:System.Web.Mvc.FilterProviderCollection" /> instance.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerInstanceFilterProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ControllerInstanceFilterProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ControllerInstanceFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Returns the collection of controller instance filters.</summary>
      <returns>The collection of controller instance filters.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.CustomModelBinderAttribute">
      <summary>Represents an attribute that invokes a custom model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.CustomModelBinderAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.CustomModelBinderAttribute.GetBinder">
      <summary>Retrieves the associated model binder.</summary>
      <returns>A reference to an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadata">
      <summary>Provides a container for common metadata, for the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class, and for the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class for a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.#ctor(System.Web.Mvc.DataAnnotationsModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class.</summary>
      <param name="provider">The data-annotations model metadata provider.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
      <param name="displayColumnAttribute">The display column attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadata.GetSimpleDisplayText">
      <summary>Returns simple text for the model data.</summary>
      <returns>Simple text for the model data.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider">
      <summary>Implements the default model metadata provider for ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Gets the metadata for the specified property.</summary>
      <returns>The metadata for the property.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidationFactory">
      <summary>Represents the method that creates a <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> instance.</summary>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator">
      <summary>Provides a model validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class.</summary>
      <param name="metadata">The metadata for the model.</param>
      <param name="context">The controller context for the model.</param>
      <param name="attribute">The validation attribute for the model.</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.Attribute">
      <summary>Gets the validation attribute for the model validator.</summary>
      <returns>The validation attribute for the model validator.</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.ErrorMessage">
      <summary>Gets the error message for the validation failure.</summary>
      <returns>The error message for the validation failure.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.GetClientValidationRules">
      <summary>Retrieves a collection of client validation rules.</summary>
      <returns>A collection of client validation rules.</returns>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator.IsRequired">
      <summary>Gets a value that indicates whether model validation is required.</summary>
      <returns>true if model validation is required; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator.Validate(System.Object)">
      <summary>Returns a list of validation error messages for the model.</summary>
      <returns>A list of validation error messages for the model, or an empty list if no errors have occurred.</returns>
      <param name="container">The container for the model.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidator`1">
      <summary>Provides a model validator for a specified validation type.</summary>
      <typeparam name="TAttribute"></typeparam>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidator`1.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidator" /> class.</summary>
      <param name="metadata">The metadata for the model.</param>
      <param name="context">The controller context for the model.</param>
      <param name="attribute">The validation attribute for the model.</param>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidator`1.Attribute">
      <summary>Gets the validation attribute from the model validator.</summary>
      <returns>The validation attribute from the model validator.</returns>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider">
      <summary>Implements the default validation provider for ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataAnnotationsModelValidatorProvider" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DataAnnotationsModelValidatorProvider.AddImplicitRequiredAttributeForValueTypes">
      <summary>Gets or sets a value that indicates whether non-nullable value types are required.</summary>
      <returns>true if non-nullable value types are required; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>Gets a list of validators.</summary>
      <returns>A list of validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
      <param name="attributes">The list of validation attributes.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>Registers an adapter to provide client-side validation.</summary>
      <param name="attributeType">The type of the validation attribute.</param>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>Registers an adapter factory for the validation provider.</summary>
      <param name="attributeType">The type of the attribute.</param>
      <param name="factory">The factory that will be used to create the <see cref="T:System.Web.Mvc.ModelValidator" /> object for the specified attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>Registers the default adapter.</summary>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Mvc.DataAnnotationsModelValidationFactory)">
      <summary>Registers the default adapter factory.</summary>
      <param name="factory">The factory that will be used to create the <see cref="T:System.Web.Mvc.ModelValidator" /> object for the default adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>Registers an adapter to provide default object validation.</summary>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Registers an adapter factory for the default object validation provider.</summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>Registers an adapter to provide object validation.</summary>
      <param name="modelType">The type of the model.</param>
      <param name="adapterType">The type of the adapter.</param>
    </member>
    <member name="M:System.Web.Mvc.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>Registers an adapter factory for the object validation provider.</summary>
      <param name="modelType">The type of the model.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="T:System.Web.Mvc.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>Provides a factory for validators that are based on <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />.</summary>
    </member>
    <member name="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider">
      <summary>Provides a container for the error-information model validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DataErrorInfoModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DataErrorInfoModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of error-information model validators.</summary>
      <returns>A list of error-information model validators.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultControllerFactory">
      <summary>Represents the controller factory that is registered by default.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultControllerFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.#ctor(System.Web.Mvc.IControllerActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultControllerFactory" /> class using a controller activator.</summary>
      <param name="controllerActivator">An object that implements the controller activator interface.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>Creates the specified controller by using the specified request context.</summary>
      <returns>The controller.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerName">The name of the controller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="controllerName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(System.Web.Routing.RequestContext,System.Type)">
      <summary>Retrieves the controller instance for the specified request context and controller type.</summary>
      <returns>The controller instance.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerType">The type of the controller.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="controllerType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="controllerType" /> cannot be assigned.</exception>
      <exception cref="T:System.InvalidOperationException">An instance of <paramref name="controllerType" /> cannot be created.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.Type)">
      <summary>Returns the controller's session behavior.</summary>
      <returns>The controller's session behavior.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerType">The type of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
      <summary>Retrieves the controller type for the specified name and request context.</summary>
      <returns>The controller type.</returns>
      <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>Releases the specified controller.</summary>
      <param name="controller">The controller to release.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultControllerFactory.System#Web#Mvc#IControllerFactory#GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the <see cref="M:System.Web.Mvc.DefaultControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.Type)" /> method.</summary>
      <returns>The controller's session behavior.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">The controller name.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultModelBinder">
      <summary>Maps a browser request to a data object. This class provides a concrete implementation of a model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultModelBinder" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.Binders">
      <summary>Gets or sets the model binders for the application.</summary>
      <returns>The model binders for the application.</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.BindProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
      <summary>Binds the specified property by using the specified controller context and binding context and the specified property descriptor.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be bound. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.Type)">
      <summary>Creates the specified model type by using the specified controller context and binding context.</summary>
      <returns>A data object of the specified type.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="modelType">The type of the model object to return.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.Int32)">
      <summary>Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is an integer.</summary>
      <returns>The name of the subindex.</returns>
      <param name="prefix">The prefix for the subindex.</param>
      <param name="index">The index value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubIndexName(System.String,System.String)">
      <summary>Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is a string.</summary>
      <returns>The name of the subindex.</returns>
      <param name="prefix">The prefix for the subindex.</param>
      <param name="index">The index value.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.CreateSubPropertyName(System.String,System.String)">
      <summary>Creates the name of the subproperty by using the specified prefix and property name.</summary>
      <returns>The name of the subproperty.</returns>
      <param name="prefix">The prefix for the subproperty.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetFilteredModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns a set of properties that match the property filter restrictions that are established by the specified <paramref name="binding context" />.</summary>
      <returns>An enumerable set of property descriptors.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetModelProperties(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns the properties of the model by using the specified controller context and binding context.</summary>
      <returns>A collection of property descriptors.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetPropertyValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Web.Mvc.IModelBinder)">
      <summary>Returns the value of a property using the specified controller context, binding context, property descriptor, and property binder.</summary>
      <returns>An object that represents the property value.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">The descriptor for the property to access. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="propertyBinder">An object that provides a way to bind the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.GetTypeDescriptor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Returns the descriptor object for a type that is specified by its controller context and binding context.</summary>
      <returns>A custom type descriptor object.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.IsModelValid(System.Web.Mvc.ModelBindingContext)">
      <summary>Determines whether a data model is valid for the specified binding context.</summary>
      <returns>true if the model is valid; otherwise, false.</returns>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bindingContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Called when the model is updated.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnModelUpdating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Called when the model is updating.</summary>
      <returns>true if the model is updating; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Called when the specified property is validated.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be validated. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.OnPropertyValidating(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Called when the specified property is validating.</summary>
      <returns>true if the property is validating; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property being validated. The descriptor provides information such as component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="P:System.Web.Mvc.DefaultModelBinder.ResourceClassKey">
      <summary>Gets or sets the name of the resource file (class key) that contains localized string values.</summary>
      <returns>The name of the resource file (class key).</returns>
    </member>
    <member name="M:System.Web.Mvc.DefaultModelBinder.SetProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Sets the specified property by using the specified controller context, binding context, and property value.</summary>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
      <param name="propertyDescriptor">Describes a property to be set. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.</param>
      <param name="value">The value to set for the property.</param>
    </member>
    <member name="T:System.Web.Mvc.DefaultViewLocationCache">
      <summary>Represents a memory cache for view locations.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DefaultViewLocationCache" /> class by using the specified cache time span.</summary>
      <param name="timeSpan">The cache time span.</param>
      <exception cref="T:System.InvalidOperationException">The Ticks attribute of the <paramref name="timeSpan" /> parameter is set to a negative number.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>Retrieves the default view location by using the specified HTTP context and cache key.</summary>
      <returns>The default view location.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DefaultViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>Inserts the view in the specified virtual path by using the specified HTTP context, cache key, and virtual path.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
      <param name="virtualPath">The virtual path</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpContext" /> parameter is null.</exception>
    </member>
    <member name="F:System.Web.Mvc.DefaultViewLocationCache.Null">
      <summary>Creates an empty view location cache.</summary>
    </member>
    <member name="P:System.Web.Mvc.DefaultViewLocationCache.TimeSpan">
      <summary>Gets or sets the cache time span.</summary>
      <returns>The cache time span.</returns>
    </member>
    <member name="T:System.Web.Mvc.DependencyResolver">
      <summary>Provides a registration point for dependency resolvers that implement <see cref="T:System.Web.Mvc.IDependencyResolver" /> or the Common Service Locator IServiceLocator interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DependencyResolver" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.DependencyResolver.Current">
      <summary>Gets the implementation of the dependency resolver.</summary>
      <returns>The implementation of the dependency resolver.</returns>
    </member>
    <member name="P:System.Web.Mvc.DependencyResolver.InnerCurrent">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <returns>The implementation of the dependency resolver.</returns>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <param name="getService">The function that provides the service.</param>
      <param name="getServices">The function that provides the services.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Object)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <param name="commonServiceLocator">The common service locator.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.InnerSetResolver(System.Web.Mvc.IDependencyResolver)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <param name="resolver">The object that implements the dependency resolver.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>Provides a registration point for dependency resolvers using the specified service delegate and specified service collection delegates.</summary>
      <param name="getService">The service delegate.</param>
      <param name="getServices">The services delegates.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Object)">
      <summary>Provides a registration point for dependency resolvers using the provided common service locator when using a service locator interface.</summary>
      <param name="commonServiceLocator">The common service locator.</param>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolver.SetResolver(System.Web.Mvc.IDependencyResolver)">
      <summary>Provides a registration point for dependency resolvers, using the specified dependency resolver interface.</summary>
      <param name="resolver">The dependency resolver.</param>
    </member>
    <member name="T:System.Web.Mvc.DependencyResolverExtensions">
      <summary>Provides a type-safe implementation of <see cref="M:System.Web.Mvc.IDependencyResolver.GetService(System.Type)" /> and <see cref="M:System.Web.Mvc.IDependencyResolver.GetServices(System.Type)" />.</summary>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolverExtensions.GetService``1(System.Web.Mvc.IDependencyResolver)">
      <summary>Resolves singly registered services that support arbitrary object creation.</summary>
      <returns>The requested service or object.</returns>
      <param name="resolver">The dependency resolver instance that this method extends.</param>
      <typeparam name="TService">The type of the requested service or object.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DependencyResolverExtensions.GetServices``1(System.Web.Mvc.IDependencyResolver)">
      <summary>Resolves multiply registered services.</summary>
      <returns>The requested services.</returns>
      <param name="resolver">The dependency resolver instance that this method extends.</param>
      <typeparam name="TService">The type of the requested services.</typeparam>
    </member>
    <member name="T:System.Web.Mvc.DictionaryValueProvider`1">
      <summary>Represents the base class for value providers whose values come from a collection that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</summary>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0},System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.DictionaryValueProvider`1" /> class.</summary>
      <param name="dictionary">The name/value pairs that are used to initialize the value provider.</param>
      <param name="culture">Information about a specific culture, such as the names of the culture, the writing system, and the calendar used.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="prefix" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.DictionaryValueProvider`1.GetValue(System.String)">
      <summary>Returns a value object using the specified key and controller context.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelMetadataProvider">
      <summary>Provides an empty metadata provider for data models that do not require metadata.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</summary>
      <returns>A new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</returns>
      <param name="attributes">The attributes.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyModelValidatorProvider">
      <summary>Provides an empty validation provider for models that do not require a validator.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets the empty model validator.</summary>
      <returns>The empty model validator.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.EmptyResult">
      <summary>Represents a result that does nothing, such as a controller action method that returns nothing.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.EmptyResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.EmptyResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Executes the specified result context.</summary>
      <param name="context">The result context.</param>
    </member>
    <member name="T:System.Web.Mvc.ExceptionContext">
      <summary>Provides the context for using the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ExceptionContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExceptionContext.#ctor(System.Web.Mvc.ControllerContext,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ExceptionContext" /> class for the specified exception by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="exception">The exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception has been handled.</summary>
      <returns>true if the exception has been handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ExceptionContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.ExpressionHelper">
      <summary>Provides a helper class to get the model name from an expression.</summary>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.Linq.Expressions.LambdaExpression)">
      <summary>Gets the model name from a lambda expression.</summary>
      <returns>The model name.</returns>
      <param name="expression">The expression.</param>
    </member>
    <member name="M:System.Web.Mvc.ExpressionHelper.GetExpressionText(System.String)">
      <summary>Gets the model name from a string expression.</summary>
      <returns>The model name.</returns>
      <param name="expression">The expression.</param>
    </member>
    <member name="T:System.Web.Mvc.FieldValidationMetadata">
      <summary>Provides a container for client-side field validation metadata.</summary>
    </member>
    <member name="M:System.Web.Mvc.FieldValidationMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FieldValidationMetadata" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.FieldName">
      <summary>Gets or sets the name of the data field.</summary>
      <returns>The name of the data field.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ReplaceValidationMessageContents">
      <summary>Gets or sets a value that indicates whether the validation message contents should be replaced with the client validation error.</summary>
      <ret