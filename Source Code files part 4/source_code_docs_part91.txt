/summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.Low">
      <summary>
        <para> Cache items with this priority level are
      the most likely to be deleted from the cache as the server frees system
      memory.</para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.BelowNormal">
      <summary>
        <para> 
      Cache items with this priority level are more likely to
      be deleted from the cache as the server frees system memory than items assigned
      a <see langword="Normal" />
      
      priority. </para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.Normal">
      <summary>
        <para> Cache items with this priority level are likely to be 
      deleted from the cache as the server frees system memory only after those items
      with <see langword="Low" /> or <see langword="BelowNormal" />
      priority. This is the default. </para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.AboveNormal">
      <summary>
        <para> Cache items with this priority level are less likely to 
      be deleted as the server frees system memory than those assigned a
   <see langword="Normal" />
   
   priority. </para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.High">
      <summary>
        <para> Cache items with this priority level are the least likely
      to be deleted from the cache as the server frees system memory. </para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.NotRemovable">
      <summary>
        <para> The cache items with this priority level will not be deleted
      from the cache as the server frees system memory. </para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.Default">
      <summary>
        <para>The default value for a cached item's priority is 
    <see langword="Normal" /> .</para>
      </summary>
    </member>
    <member name="T:System.Web.Caching.CacheItemRemovedReason">
      <summary>
        <para> Specifies the reason an item was removed from
      the <see cref="T:System.Web.Caching.Cache" /> .</para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.Removed">
      <summary>
        <para>The item is removed from the cache by a <see cref="M:System.Web.Caching.Cache.Remove(System.String)" /> method call or by an <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> method call that specified the same key.</para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.Expired">
      <summary>
        <para>The item is removed from the cache because it expired. </para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.Underused">
      <summary>
        <para>The item
      is removed from the cache because the system removed it to free memory.</para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged">
      <summary>
        <para> The item is removed from the cache because a file or key dependency
      changed.</para>
      </summary>
    </member>
    <member name="T:System.Web.Caching.Cache">
      <summary>
        <para>Implements the cache for a Web application. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.Cache.NoAbsoluteExpiration">
      <summary>
        <para> Used in the
   <paramref name="absoluteExpiration" /> parameter in an <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> method call
      to indicate the item should never
      expire. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.Caching.Cache.NoSlidingExpiration">
      <summary>
        <para> Used as the <paramref name="slidingExpiration" />
parameter in an <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> method call
to disable sliding
expirations. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Web.Caching.Cache.GetEnumerator">
      <summary>
        <para> Retrieves a dictionary
      enumerator used to iterate through the
      key settings and their values contained in the cache.</para>
      </summary>
      <returns>
        <para>An enumerator to iterate through the <see cref="T:System.Web.Caching.Cache" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Web.Caching.Cache.Get(System.String)">
      <summary>
        <para>Retrieves the specified item from the <see cref="T:System.Web.Caching.Cache" /> object.</para>
      </summary>
      <param name="key">The identifier for the cache item to retrieve.</param>
      <returns>
        <para>The retrieved cache item, or <see langword="null" /> if the key is not found.</para>
      </returns>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object)">
      <summary>
        <para>Inserts an item into the <see cref="T:System.Web.Caching.Cache" /> object with a cache key to reference its
   location and using default values provided by the <see cref="T:System.Web.Caching.CacheItemPriority" />
   enumeration.</para>
      </summary>
      <param name="key">The cache key used to reference the item.</param>
      <param name="value">The object to be inserted into the cache.</param>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
      <summary>
        <para>Inserts an object into the <see cref="T:System.Web.Caching.Cache" /> that has file or key
   dependencies.</para>
      </summary>
      <param name="key">The cache key used to identify the item.</param>
      <param name="value">The object to be inserted in the cache.</param>
      <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains <see langword="null" /> .</param>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
      <summary>
        <para>Inserts an object into the <see cref="T:System.Web.Caching.Cache" />
with dependencies and expiration policies. </para>
      </summary>
      <param name="key">The cache key used to reference the object.</param>
      <param name="value">The object to be inserted in the cache.</param>
      <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains <see langword="null" /> . </param>
      <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache.</param>
      <param name="slidingExpiration">The interval between the time the inserted object is last accessed and when that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed.</param>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
      <summary>
        <para>Inserts an object into the <see cref="T:System.Web.Caching.Cache" /> object with dependencies,
   expiration and priority policies, and a delegate you can
   use to notify your application when the inserted item is removed from
   the <see langword="Cache" />
   . </para>
      </summary>
      <param name="key">The cache key used to reference the object.</param>
      <param name="value">The object to be inserted in the cache.</param>
      <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains <see langword="null" /> . </param>
      <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache.</param>
      <param name="slidingExpiration">The interval between the time the inserted object was last accessed and when that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed.</param>
      <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the <see cref="T:System.Web.Caching.CacheItemPriority" /> enumeration. This value is used by the cache when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
      <param name="onRemoveCallback">A delegate that, if provided, will be called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
    </member>
    <member name="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
      <summary>
        <para>Adds the specified item to the <see cref="T:System.Web.Caching.Cache" /> object with dependencies, expiration
   and priority policies, and a delegate you can use to notify your application
   when the inserted item is removed from the <see langword="Cache" />
   . </para>
      </summary>
      <param name="key">The cache key used to reference the item.</param>
      <param name=" value">The item to be added to the cache.</param>
      <param name=" dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this paramter contains <see langword="null" /> .</param>
      <param name=" absoluteExpiration">The time at which the added object expires and is removed from the cache.</param>
      <param name=" slidingExpiration">The interval between the time the added object was last accessed and when that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed.</param>
      <param name=" priority">The relative cost of the object, as expressed by the <see cref="T:System.Web.Caching.CacheItemPriority" /> enumeration. The cache uses this value when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
      <param name=" onRemoveCallback">A delegate that, if provided, is called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
      <returns>
        <para>The <see cref="T:System.Object" /> item added to the <see langword="Cache" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.Caching.Cache.Remove(System.String)">
      <summary>
        <para>Removes the specified item from the
      application's <see cref="T:System.Web.Caching.Cache" /> object. </para>
      </summary>
      <param name="key">A <see cref="T:System.String" /> identifier for the cache item to remove.</param>
      <returns>
        <para> The item removed from the <see langword="Cache" /> . If the value in the key parameter is not found,
   returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.Caching.Cache.Count">
      <summary>
        <para> Gets the number of items stored in the
      cache.</para>
      </summary>
    </member>
    <member name="P:System.Web.Caching.Cache.Item(System.String)">
      <summary>
        <para> Gets or sets the cache item at the specified key.</para>
      </summary>
      <param name="key">A <see cref="T:System.String" /> object that represents the key for the cache item.</param>
    </member>
    <member name="T:System.Web.Caching.CacheDependency">
      <summary>
        <para>Tracks cache dependencies, which can be files, directories,
      or keys to other objects in your application's <see cref="T:System.Web.Caching.Cache" /> . This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that
   monitors a file or directory for changes.</para>
      </summary>
      <param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors a file or directory for
   changes and indicates when change tracking is to begin.</para>
      </summary>
      <param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.</param>
      <param name=" start">The time when change tracking begins.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of file paths (to files or
   directories) for
   changes.</para>
      </summary>
      <param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of file paths
   (to files or directories) for changes and specifies a time when change
   monitoring begins.</para>
      </summary>
      <param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
      <param name=" start">The time when change tracking begins.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of file paths (to files or directories), an
   array of cache keys, or both for changes.</para>
      </summary>
      <param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache. </param>
      <param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of file paths
   (to files or directories), an array of cache keys, or both for changes.</para>
      </summary>
      <param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache. </param>
      <param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
      <param name=" start">The time when change tracking begins.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of file paths
   (to files or directories), an array of cache keys, or both for changes. It also
   makes itself dependent upon a separate instance of the
<see langword="CacheDependency" /> class.</para>
      </summary>
      <param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
      <param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
      <param name=" dependency">Another instance of the <see langword="CacheDependency" /> class that this instance is dependent upon.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of file paths
   (to files or directories), an array of cache keys, or both for changes. It also
   makes itself dependent upon another instance of the
<see langword="CacheDependency" /> class and a time when the change monitoring begins.</para>
      </summary>
      <param name="filenames">An array of file paths (to files or directories) that the cached object is dependent upon. When any of these resources change, the cached object becomes obsolete and is removed from the cache.</param>
      <param name=" cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys change, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</param>
      <param name=" dependency">Another instance of the <see langword="CacheDependency" /> class that this instance is dependent upon.</param>
      <param name=" start">The time when change tracking begins.</param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.Dispose">
      <summary>
        <para>Releases the resources used by the <see cref="T:System.Web.Caching.CacheDependency" /> object.</para>
      </summary>
    </member>
    <member name="P:System.Web.Caching.CacheDependency.HasChanged">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.Caching.CacheDependency" /> object has changed.</para>
      </summary>
    </member>
    <member name="T:System.Web.Configuration.AuthenticationMode">
      <summary>
        <para> Provides enumerated values that specify the 
 authentication mode
 for an application.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.None">
      <summary>
        <para>Specifies no authentication. Only anonymous users are 
      expected. Also, applications can handle events to provide their own authentication.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.Windows">
      <summary>
        <para> Specifies Windows authentication as
      the
      default authentication mode. Use this mode when using any form of
      Internet Information Services (IIS) authentication: Basic, Digest, Integrated Windows
      (NTLM/Kerberos), or certificates.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.Passport">
      <summary>
        <para>Specifies Microsoft Passport authentication as the 
 default authentication
 mode.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.Forms">
      <summary>
        <para> Specifies ASP.NET forms-based authentication as
      the default authentication
      mode.</para>
      </summary>
    </member>
    <member name="T:System.Web.Configuration.FormsAuthPasswordFormat">
      <summary>
        <para> Specifies the encryption format for storing passwords.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.FormsAuthPasswordFormat.Clear">
      <summary>
        <para>Specifies that passwords are not encrypted.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.FormsAuthPasswordFormat.SHA1">
      <summary>
        <para>Specifies that passwords are encrypted using the SHA1 hash algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.FormsAuthPasswordFormat.MD5">
      <summary>
        <para>Specifies that passwords are encrypted using the MD5 hash algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Web.Configuration.FormsProtectionEnum">
      <summary>
        <para> Specifies the forms protection method that
      the application uses.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.FormsProtectionEnum.All">
      <summary>
        <para> Specifies that the application uses both data validation and encryption
      to protect cookies. This option uses the configured data validation algorithm (based
      on the &lt;machineKey&gt; element). Triple-DES (3DES) is used
      for encryption, if it is available and if the key is at least 48 bytes
      longs. <see langword="All" />
      
      is the default (and recommended) value.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.FormsProtectionEnum.None">
      <summary>
        <para> Specifies that both encryption and validation are
      disabled for sites that use cookies only for personalization and have weaker
      security requirements. Using cookies in this manner is not recommended; however,
      it is the least resource-intensive way to enable personalization using the .NET Framework.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.FormsProtectionEnum.Encryption">
      <summary>
        <para> Specifies that cookies are
      encrypted using Triple-DES or DES, but data validation is not performed on cookies. Cookies used this
      way might be subject to chosen plain-text security attacks.</para>
      </summary>
    </member>
    <member name="F:System.Web.Configuration.FormsProtectionEnum.Validation">
      <summary>
        <para>Specifies that the application uses a validation scheme 
 to verify that the contents of an encrypted cookie have not been altered in
 transit. The cookie is created by concatenating a validation key with the
 cookie data, computing a Message Authentication Code (MAC), and appending the
 MAC to the outgoing cookie.</para>
      </summary>
    </member>
    <member name="T:System.Web.Configuration.HttpConfigurationContext">
      <summary>
        <para> Supplies current context information to configuration section handlers
      in ASP.NET applications.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Configuration.HttpConfigurationContext.VirtualPath">
      <summary>
        <para>Gets the virtual path to the Web.config configuration file.</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.IAppDomainFactory.Create(System.String,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.AppDomainFactory.Create(System.String,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Web.Hosting.ApplicationHost">
      <summary>
        <para> Enables hosting of ASP.NET pages outside
      the Internet Information Services (IIS) application. This class
      enables the host to create application domains for processing ASP.NET requests.</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.ApplicationHost.CreateApplicationHost(System.Type,System.String,System.String)">
      <summary>
        <para>Creates and configures an application domain for hosting
      ASP.NET.</para>
      </summary>
      <param name="hostType">The name of a user-supplied class to be created in the new application domain.</param>
      <param name=" virtualDir">The virtual directory for the application domain; for example, /myapp.</param>
      <param name=" physicalDir">The physical directory for the application domain where ASP.NET pages are located; for example, c:\mypages.</param>
      <returns>
        <para>An instance of a user-suplied class used to marshal calls into the newly created 
      application domain.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.IISAPIRuntime.StartProcessing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.IISAPIRuntime.StopProcessing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.IISAPIRuntime.ProcessRequest(System.IntPtr,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.IISAPIRuntime.DoGCCollect">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.ISAPIRuntime.StartProcessing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.ISAPIRuntime.StopProcessing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.ISAPIRuntime.ProcessRequest(System.IntPtr,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.ISAPIRuntime.DoGCCollect">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Web.Hosting.SimpleWorkerRequest">
      <summary>
        <para>Provides a simple implementation of the <see cref="T:System.Web.HttpWorkerRequest" /><see langword=" " /> abstract class that can
   be used to host ASP.NET applications outside an Internet Information Server (IIS)
   application. You can employ <see langword="SimpleWorkerRequest" /> directly or extend it.</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetUriPath">
      <summary>
        <para>Returns the virtual path to the requested URI.</para>
      </summary>
      <returns>
        <para>The path to the requested URI.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetQueryString">
      <summary>
        <para>Returns the query string specified in the request URL.</para>
      </summary>
      <returns>
        <para>The request query string.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetRawUrl">
      <summary>
        <para>Returns the URL path contained in the request header 
      with the query string appended.</para>
      </summary>
      <returns>
        <para>The raw URL path of the request header.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetHttpVerbName">
      <summary>
        <para>Returns the specified member of the request header.</para>
      </summary>
      <returns>
   The HTTP verb returned in the request
   header.
</returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetHttpVersion">
      <summary>
        <para> Returns the HTTP version of the request (for
      example, "HTTP/1.1").</para>
      </summary>
      <returns>
        <para>The HTTP version number returned in the request header.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetRemoteAddress">
      <summary>
        <para>Returns the IP address of the client.</para>
      </summary>
      <returns>
        <para>The client's IP address.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetRemotePort">
      <summary>
        <para>Returns the client's port number.</para>
      </summary>
      <returns>
        <para>The client's HTTP port number.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetLocalAddress">
      <summary>
        <para>Returns the server IP address that is in the request header.</para>
      </summary>
      <returns>
        <para>The server IP address returned in the request header.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetLocalPort">
      <summary>
        <para>Provides access to the specified member of the request header.</para>
      </summary>
      <returns>
        <para>The server port number returned in the request header.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetUserToken">
      <summary>
        <para>Returns the client's impersonation token.</para>
      </summary>
      <returns>
        <para>A value representing the client's impersonation token. 
      The default is <see cref="F:System.IntPtr.Zero" />
      .</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetFilePath">
      <summary>
        <para>Returns the physical path to the requested URI.</para>
      </summary>
      <returns>
        <para>The physical path to the requested URI.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetFilePathTranslated">
      <summary>
        <para>Returns the physical file path to the requested URI (and 
      translates it from virtual path to physical path: for example,
      "/proj1/page.aspx" to "c:\dir\page.aspx")</para>
      </summary>
      <returns>
        <para>The translated physical file path to the requested URI.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetPathInfo">
      <summary>
        <para> Returns additional path information for a resource with
      a URL extension. That is, for the path /virdir/page.html/tail, the return
      value is /tail.</para>
      </summary>
      <returns>
        <para>Additional path information for a resource.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetAppPath">
      <summary>
        <para>Returns the virtual path to the currently executing 
      server application.</para>
      </summary>
      <returns>
        <para>The virtual path of the current application.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetAppPathTranslated">
      <summary>
        <para>Returns the UNC-translated path to the currently 
      executing server application.</para>
      </summary>
      <returns>
        <para>The physical path of the current application.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.GetServerVariable(System.String)">
      <summary>
        <para>Returns a single server variable from a dictionary of 
      server variables associated with the request.</para>
      </summary>
      <param name="name">The name of the requested server variable.</param>
      <returns>
        <para>The requested server variable.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.MapPath(System.String)">
      <summary>
        <para>Returns the physical path corresponding to the specified virtual path.</para>
      </summary>
      <param name="path">The virtual path.</param>
      <returns>
        <para>The physical path that corresponds to the virtual path 
      specified in the <paramref name="path " />
      parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.SendStatus(System.Int32,System.String)">
      <summary>
        <para>Specifies the HTTP status code and status description of
      the response; for example, SendStatus(200, "Ok").</para>
      </summary>
      <param name="statusCode">The status code to send</param>
      <param name=" statusDescription">The status description to send.</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.SendKnownResponseHeader(System.Int32,System.String)">
      <summary>
        <para>Adds a standard HTTP header to the response.</para>
      </summary>
      <param name="index">The header index. For example, <see cref="F:System.Web.HttpWorkerRequest.HeaderContentLength" />.</param>
      <param name=" value">The header value.</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.SendUnknownResponseHeader(System.String,System.String)">
      <summary>
        <para>Adds a nonstandard HTTP header to the response.</para>
      </summary>
      <param name="name">The name of the header to send.</param>
      <param name=" value">The value of the header.</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.SendResponseFromMemory(System.Byte[],System.Int32)">
      <summary>
        <para>Adds the contents of a byte array to the response 
      and specifies the number of bytes to send.</para>
      </summary>
      <param name="data">The byte array to send.</param>
      <param name=" length">The number of bytes to send.</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.SendResponseFromFile(System.String,System.Int64,System.Int64)">
      <summary>
        <para> Adds the contents of the file with the specified name to the response and
      specifies the starting position in the file and the number of bytes to send.</para>
      </summary>
      <param name="filename">The name of the file to send.</param>
      <param name=" offset">The starting position in the file.</param>
      <param name=" length">The number of bytes to send.</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.SendResponseFromFile(System.IntPtr,System.Int64,System.Int64)">
      <summary>
        <para>Adds the contents of the file with the specified handle to the response and
      specifies the starting position in the file and the number of bytes to send.</para>
      </summary>
      <param name="handle">The handle of the file to send.</param>
      <param name=" offset">The starting position in the file.</param>
      <param name=" length">The number of bytes to send.</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.FlushResponse(System.Boolean)">
      <summary>
        <para>Sends all pending response data to the client.</para>
      </summary>
      <param name="finalFlush">
        <see langword="true" /> if this is the last time response data will be flushed; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.EndOfRequest">
      <summary>
        <para> Notifies the <see cref="T:System.Web.HttpWorkerRequest" />
that request processing for the current request is complete.</para>
      </summary>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.#ctor(System.String,System.String,System.IO.TextWriter)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Hosting.SimpleWorkerRequest" /> class when the target application
   domain has been created using the <see cref="M:System.Web.Hosting.ApplicationHost.CreateApplicationHost(System.Type,System.String,System.String)" />
   method.</para>
      </summary>
      <param name="page"> The page to be requested (or the virtual path to the page, relative to the application directory).</param>
      <param name=" query"> The text of the query string.</param>
      <param name=" output">A <see cref="T:System.IO.TextWriter" /> that captures output from the response</param>
    </member>
    <member name="M:System.Web.Hosting.SimpleWorkerRequest.#ctor(System.String,System.String,System.String,System.String,System.IO.TextWriter)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Hosting.SimpleWorkerRequest" /> class for use in an arbitrary application domain, when the
   user code creates an <see cref="T:System.Web.HttpContext" /> (passing the <see langword="SimpleWorkerRequest" /> as
   an argument to the <see langword="HttpContext" /> constructor)</para>
      </summary>
      <param name="appVirtualDir">The virtual path to the application directory; for example, “/app”.</param>
      <param name=" appPhysicalDir">The physical path to the application directory; for example, "c:\app".</param>
      <param name=" page">The virtual path for the request (relative to the application directory).</param>
      <param name=" query">The text of the query string.</param>
      <param name=" output">A <see cref="T:System.IO.TextWriter" /> that captures the output from the response.</param>
    </member>
    <member name="P:System.Web.Hosting.SimpleWorkerRequest.MachineConfigPath">
      <summary>
        <para>Gets the full physical path to the Machine.config file.</para>
      </summary>
    </member>
    <member name="P:System.Web.Hosting.SimpleWorkerRequest.MachineInstallDirectory">
      <summary>
        <para>Gets the physical path to the directory where the ASP.NET
      binaries are installed.</para>
      </summary>
    </member>
    <member name="P:System.Web.Handlers.BatchHandler.IsReusable">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.DefaultAuthenticationModule">
      <summary>
        <para>Insures that an <see langword="Authentication" /> object is present in
   the context. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.DefaultAuthenticationModule.Dispose">
      <summary>
        <para> Called by the HTTP runtime to Dispose of the module
      (derived from <see langword="IHttpModule" /> ).</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.DefaultAuthenticationModule.Init(System.Web.HttpApplication)">
      <summary>
        <para>Initializes the module.</para>
      </summary>
      <param name="app">The <see langword="HTTP application" /> .</param>
    </member>
    <member name="E:System.Web.Security.DefaultAuthenticationModule.Authenticate">
      <summary>
        <para>Defines the event raised by the <see cref="T:System.Web.Security.DefaultAuthenticationModule" /> . Used by the
   DefaultAuthentication_OnAuthenticate
   handler, if one exists.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.FileAuthorizationModule">
      <summary>
        <para> Verifies that the remote user has NT permissions to access the file requested. This class cannot
      be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FileAuthorizationModule.Init(System.Web.HttpApplication)">
      <summary>
        <para>Initializes the module.</para>
      </summary>
      <param name="app">The <see langword="HttpApplication" /> module.</param>
    </member>
    <member name="M:System.Web.Security.FileAuthorizationModule.Dispose">
      <summary>
        <para>Disposes of the module derived from
   <see langword="IHttpModule" /> when called by the
   <see langword="HttpRuntime" />
   .</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.FormsAuthenticationEventArgs">
      <summary>
        <para>Provides data for the <c>FormsAuthentication_OnAuthenticate</c> event. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsAuthenticationEventArgs.#ctor(System.Web.HttpContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Security.FormsAuthenticationEventArgs" />class.</para>
      </summary>
      <param name="context">The context for the event.</param>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationEventArgs.User">
      <summary>
        <para>Gets or sets the <see cref="T:System.Security.Principal.IPrincipal" /> object to be associated with the request. </para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationEventArgs.Context">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpContext" /> object for the current HTTP
   request. </para>
      </summary>
    </member>
    <member name="T:System.Web.Security.FormsAuthenticationEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.Security.FormsAuthenticationModule.Authenticate" /> event of a <see cref="T:System.Web.Security.FormsAuthenticationModule" />
.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.Security.FormsAuthenticationEventArgs" />that contains the event data.</param>
    </member>
    <member name="T:System.Web.Security.FormsAuthenticationModule">
      <summary>
        <para>Enables ASP.NET applications to use forms authentication. This class cannot
      be inherited. </para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsAuthenticationModule.Dispose">
      <summary>
        <para>Disposes of the module derived from <see cref="T:System.Web.IHttpModule" /> when 
   called by the HttpRuntime .</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsAuthenticationModule.Init(System.Web.HttpApplication)">
      <summary>
        <para>Initializes the module derived from <see cref="T:System.Web.IHttpModule" /> when 
   called by the HttpRuntime<see langword="." /></para>
      </summary>
      <param name="app">The <see cref="T:System.Web.HttpApplication" /> module.</param>
    </member>
    <member name="E:System.Web.Security.FormsAuthenticationModule.Authenticate">
      <summary>
        <para>Defines the event raised during authentication. This is
      a Global.asax event that must be named <c>FormsAuthentication_OnAuthenticate</c> .
   You can use this event to
   customize cookie authentication.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.FormsAuthentication">
      <summary>
        <para> Provides static methods that supply helper utilities for manipulating
      authentication tickets. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)">
      <summary>
        <para>Given a password and a string identifying the hash type,
      this routine produces a hash password suitable for storing in a configuration
      file.</para>
      </summary>
      <param name="password">
        <para>The password to hash.</para>
      </param>
      <param name="passwordFormat">
        <para>The hash algorithm to use. Choices are "sha1" or "md5".</para>
      </param>
      <returns>
        <para>Returns a <see langword="String " /> containing a hashed password.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.Initialize">
      <summary>
        <para>Initializes <see cref="T:System.Web.Security.FormsAuthentication" /> by reading the
   configuration and getting the cookie values and encryption keys for the given
   application.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.Decrypt(System.String)">
      <summary>
        <para> Returns an instance of a <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> class, given
   an encrypted authentication ticket obtained from an HTTP
   cookie.</para>
      </summary>
      <param name="encryptedTicket">The encrypted authentication ticket.</param>
      <returns>
        <para>Returns a <see cref="T:System.Web.Security.FormsAuthenticationTicket" />
object.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)">
      <summary>
        <para>Produces a string containing an encrypted authentication 
      ticket suitable for use in an HTTP cookie, given a <see cref="T:System.Web.Security.FormsAuthenticationTicket" />
      .</para>
      </summary>
      <param name="ticket">An authentication ticket class.</param>
      <returns>
        <para> A string containing an
      encrypted authentication ticket.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)">
      <summary>
        <para> Attempts to validate the
      credentials against those contained in the configured credential store, given the
      supplied credentials.</para>
      </summary>
      <param name="name">The user name</param>
      <param name=" password">The user password.</param>
      <returns>
        <para>
          <see langword="true " />if the credentials are
   valid, otherwise returns <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.SignOut">
      <summary>
        <para>Removes the authentication ticket.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)">
      <summary>
        <para> Creates an authentication ticket for the given 
 <paramref name="userName" /> and <paramref name="createPersistentCookie" />
 and attaches it to the cookie's collection of the outgoing
 response. It does not perform a redirect.</para>
      </summary>
      <param name="userName">The name of an authenticated user. This does not have to map to a Windows account.</param>
      <param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)">
      <summary>
        <para>Creates an authentication ticket for the given <paramref name="userName," /><paramref name="createPersistentCookie," /> and <paramref name="strCookiePath" /> and attaches it 
to the cookie's collection of the outgoing response. It does not perform a
redirect.</para>
      </summary>
      <param name="userName">The name of an authenticated user. This does not have to map to a Windows account.</param>
      <param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
      <param name="strCookiePath"> Specifies cookie path.</param>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)">
      <summary>
        <para>Creates an authentication cookie for a given
      user name. This does not set the cookie as part of the outgoing response, so
      that an application can have more control over how the cookie is issued.</para>
      </summary>
      <param name="userName">Name of the authenticated user. This does not have to map to a Windows account.</param>
      <param name=" createPersistentCookie">Specifies whether or not a durable cookie (a cookie that is saved across browser sessions) should be issued. Cookie path defaults to'/'.</param>
      <returns>
        <para>Returns an HTTP cookie.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)">
      <summary>
        <para>Creates an authentication cookie for a given user name.
      This does not set the cookie as part of the outgoing response, so that an
      application can have more control over how the cookie is issued.</para>
      </summary>
      <param name="userName">Name of the authenticated user. This does not have to map to a Windows account.</param>
      <param name=" createPersistentCookie">Specifies whether or not a durable cookie (a cookie that is saved across browser sessions) should be issued.</param>
      <param name=" strCookiePath">Specifies cookie path.</param>
      <returns>
        <para>Returns an HTTP cookie. </para>
      </returns>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)">
      <summary>
        <para>Returns the redirect URL for the original
      request that caused the redirect to the logon page.</para>
      </summary>
      <param name="userName">Name of the authenticated user. This does not have to map to a Windows account.</param>
      <param name=" createPersistentCookie">Specifies whether or not a durable cookie (a cookie that is saved across browser sessions) should be issued. Cookie path defaults to'/'.</param>
      <returns>
        <para>A string containing the redirect URL.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)">
      <summary>
        <para> Redirects an
      authenticated user back to the originally requested URL.</para>
      </summary>
      <param name="userName">Name of the user for cookie authentication purposes. This does not need to map to an account name and will be used by URL Authorization.</param>
      <param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)">
      <summary>
        <para> Redirects an authenticated user back to the originally requested
      URL.</para>
      </summary>
      <param name="userName">Name of the user for cookie authentication purposes. This does not need to map to an account name and will be used by URL Authorization.</param>
      <param name=" createPersistentCookie">Specifies whether or not a durable cookie (one that is saved across browser sessions) should be issued.</param>
      <param name=" strCookiePath">Specifies cookie path.</param>
    </member>
    <member name="M:System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)">
      <summary>
        <para>Conditionally
      updates the sliding expiration on a <see cref="T:System.Web.Security.FormsAuthenticationTicket" />.
      </para>
      </summary>
      <param name="tOld">Authentication ticket.</param>
      <returns>
        <para> The updated <see cref="T:System.Web.Security.FormsAuthenticationTicket" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.Security.FormsAuthentication.FormsCookieName">
      <summary>
        <para>Returns the configured cookie name used for the current application.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthentication.FormsCookiePath">
      <summary>
        <para>Returns the configured cookie path used for the current application.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.FormsAuthenticationTicket">
      <summary>
        <para> Provides the information represented in
      an authentication cookie as used by <see cref="T:System.Web.Security.FormsAuthenticationModule" />
      . This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsAuthenticationTicket.#ctor(System.Int32,System.String,System.DateTime,System.DateTime,System.Boolean,System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Web.Security.FormsAuthenticationTicket" />
instance with explicit values.</para>
      </summary>
      <param name="version">The version number.</param>
      <param name="name">User name associated with the ticket.</param>
      <param name="expiration">Expiration date for the cookie.</param>
      <param name="issueDate">Time at which the cookie was issued.</param>
      <param name="isPersistent">
        <see langword="True" /> if the cookie is persistent.</param>
      <param name="userData">User-defined data to be stored in the cookie.</param>
    </member>
    <member name="M:System.Web.Security.FormsAuthenticationTicket.#ctor(System.Int32,System.String,System.DateTime,System.DateTime,System.Boolean,System.String,System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Web.Security.FormsAuthenticationTicket" />
instance with explicit values.</para>
      </summary>
      <param name="version">The version number.</param>
      <param name="name">User name associated with the ticket.</param>
      <param name="expiration">Expiration date for the cookie.</param>
      <param name="issueDate">Time at which the cookie was issued.</param>
      <param name="isPersistent">
        <see langword="True" /> if the cookie is persistent.</param>
      <param name="userData">User-defined data to be stored in the cookie.</param>
      <param name="cookiePath">The path for the cookie.</param>
    </member>
    <member name="M:System.Web.Security.FormsAuthenticationTicket.#ctor(System.String,System.Boolean,System.Int32)">
      <summary>
        <para> Creates a <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> instance with the
   specified name and cookie durability, and default values for the
   other settings (version set internally, dates set to current date,
   and expiration determined on durability of cookie).</para>
      </summary>
      <param name="name">User name associated with the ticket.</param>
      <param name="isPersistent">If true, use a persistent cookie.</param>
      <param name="timeout">Specifies the time in minutes (as an integer) for which the authentication ticket is valid.</param>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.Version">
      <summary>
        <para>Returns a byte version number for future
      use.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.Name">
      <summary>
        <para>Gets the user name associated with the authentication cookie. </para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.Expiration">
      <summary>
        <para>Gets the date/time at which the cookie
      expires.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.IssueDate">
      <summary>
        <para> Gets
      the date/time at which the cookie was originally issued.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.IsPersistent">
      <summary>
        <para>Returns <see langword="true" /> if a durable cookie was issued.
   Otherwise, the authentication cookie is scoped to the browser lifetime.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.Expired">
      <summary>
        <para>Returns <see langword="true" /> if the cookie has expired.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.UserData">
      <summary>
        <para> Gets an application-defined string
      stored in the cookie.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsAuthenticationTicket.CookiePath">
      <summary>
        <para>Returns the path for which the cookie was issued.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.FormsIdentity">
      <summary>
        <para> Provides a class to
      be used by <see cref="T:System.Web.Security.FormsAuthenticationModule" />
      .
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.FormsIdentity.#ctor(System.Web.Security.FormsAuthenticationTicket)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Security.FormsIdentity" />class.</para>
      </summary>
      <param name="ticket">The authentication ticket upon which this identity is based.</param>
    </member>
    <member name="P:System.Web.Security.FormsIdentity.Name">
      <summary>
        <para> Gets the name of the identity (in this case,
      the user name).</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsIdentity.AuthenticationType">
      <summary>
        <para>Gets the type of the identity (in this case,
      "Forms").</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsIdentity.IsAuthenticated">
      <summary>
        <para> Indicates whether authentication took
      place.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.FormsIdentity.Ticket">
      <summary>
        <para>Gets the <see cref="T:System.Web.Security.FormsAuthenticationTicket" />
associated with the current request.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.DefaultAuthenticationEventArgs">
      <summary>
        <para>Provides a wrapper around the default authentication services. This class 
      cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.DefaultAuthenticationEventArgs.#ctor(System.Web.HttpContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Security.DefaultAuthenticationEventArgs" /> class.</para>
      </summary>
      <param name=" context">The context for the event.</param>
    </member>
    <member name="P:System.Web.Security.DefaultAuthenticationEventArgs.Context">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpContext" /> object for the current HTTP request. </para>
      </summary>
    </member>
    <member name="T:System.Web.Security.DefaultAuthenticationEventHandler">
      <summary>
        <para>Represents the method that handles the <see cref="E:System.Web.Security.DefaultAuthenticationModule.Authenticate" /> event of a <see cref="T:System.Web.Security.DefaultAuthenticationModule" />.</para>
      </summary>
      <param name="sender">The object that raised the event.</param>
      <param name=" e">A <see cref="T:System.Web.Security.DefaultAuthenticationEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:System.Web.Security.PassportAuthenticationModule">
      <summary>
        <para>Provides a wrapper around PassportAuthentication services.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.PassportAuthenticationModule.Dispose">
      <summary>
        <para>Disposes of the module derived from <see cref="T:System.Web.IHttpModule" /> when 
   called by the HttpRuntime<see langword="." /></para>
      </summary>
    </member>
    <member name="M:System.Web.Security.PassportAuthenticationModule.Init(System.Web.HttpApplication)">
      <summary>
        <para> Initializes the module derived from <see cref="T:System.Web.IHttpModule" /> when 
   called by the HttpRuntime
   .</para>
      </summary>
      <param name="app">The <see cref="T:System.Web.HttpApplication" /> module</param>
    </member>
    <member name="E:System.Web.Security.PassportAuthenticationModule.Authenticate">
      <summary>
        <para>Raised during authentication. This is a Global.asax event
      that must be named <c>PassportAuthentication_OnAuthenticate</c>
   .</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.PassportAuthenticationEventArgs">
      <summary>
        <para>The event argument passed to the <see cref="E:System.Web.Security.PassportAuthenticationModule.Authenticate" /> event by a <see cref="T:System.Web.Security.PassportAuthenticationModule" />. Since there is already an identity at this 
   point, this is useful mainly for attaching a custom <see cref="T:System.Security.Principal.IPrincipal" />
   object to the context using the supplied
   identity.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.PassportAuthenticationEventArgs.#ctor(System.Web.Security.PassportIdentity,System.Web.HttpContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Security.PassportAuthenticationEventArgs" />class.</para>
      </summary>
      <param name="identity">The identity object</param>
      <param name=" context">The context for the event.</param>
    </member>
    <member name="P:System.Web.Security.PassportAuthenticationEventArgs.User">
      <summary>
        <para>Gets or sets the <see cref="T:System.Security.Principal.IPrincipal" /> object to be associated with the
   request. </para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportAuthenticationEventArgs.Context">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpContext" /> object for the current HTTP request.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportAuthenticationEventArgs.Identity">
      <summary>
        <para>Gets an authenticated Passport identity.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.PassportAuthenticationEventHandler">
      <summary>
        <para> Represents the method that handles the
      PassportAuthentication_OnAuthenticate event of a <see cref="T:System.Web.Security.PassportAuthenticationModule" />.</para>
      </summary>
      <param name="sender">The object that raised the event.</param>
      <param name=" e">A <see cref="T:System.Web.Security.PassportAuthenticationEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:System.Web.Security.PassportIdentity">
      <summary>
        <para>Provides a class to be used by <see cref="T:System.Web.Security.PassportAuthenticationModule" /> . It provides a
   way for an application to access the <see cref="M:System.Web.Security.PassportIdentity.Ticket(System.String)" />method. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.Web.Security.PassportIdentity" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.Finalize">
      <summary>
        <para>Frees resources used by the <see cref="T:System.Web.Security.PassportIdentity" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetIsAuthenticated(System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Indicates whether the user is authenticated by a a central site
      responsible for Passport authentication.</para>
      </summary>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on to the calling domain.</param>
      <param name="bForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter is used.</param>
      <param name="bCheckSecure">Enables checking for a secure logon.</param>
      <returns>
        <para>
          <see langword="true" /> if the user is
   authenticated by a Passport authority; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetIsAuthenticated(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Indicates whether the user is authenticated by a
      Passport authority.</para>
      </summary>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on to the calling domain.</param>
      <param name="iForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter is used.</param>
      <param name="iCheckSecure">Enables checking for a secure logon.</param>
      <returns>
        <para>
          <see langword="true" /> if the user is 
   authenticated by a
   central site responsible for Passport authentication; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetProfileObject(System.String)">
      <summary>
        <para>Returns Passport profile information for
      the specified profile attribute.</para>
      </summary>
      <param name="strProfileName">The Passport profile attribute to return.</param>
      <returns>
        <para>The value of the Passport profile attribute specified by
      the <paramref name="strProfileName " />parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetDomainFromMemberName(System.String)">
      <summary>
        <para> Returns the Passport domain from the member
      name string.</para>
      </summary>
      <param name="strMemberName">The name of the Passport member</param>
      <returns>
        <para>The Passport domain for the specified member.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.HasProfile(System.String)">
      <summary>
        <para>Indicates whether a given profile
      attribute exists in this user's profile.</para>
      </summary>
      <param name="strProfile">The Passport profile attribute to query.</param>
      <returns>
        <para>
          <see langword="true" /> if the profile attribute <paramref name="strProfile" /> exists in this user's
   profile; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.HasFlag(System.Int32)">
      <summary>
        <para>Indicates whether a given flag is set in this user's profile.</para>
      </summary>
      <param name="iFlagMask">The Passport profile flag to query.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   Passport profile flag <paramref name="iFlagMask" /> is set in this
   user's profile; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.HaveConsent(System.Boolean,System.Boolean)">
      <summary>
        <para>Indicates whether full consent is granted in this user's
      profile.</para>
      </summary>
      <param name="bNeedFullConsent">
        <see langword="true" /> to indicate full consent is required for Passport Authentication; otherwise, <see langword="false" /> .</param>
      <param name="bNeedBirthdate">
        <see langword="true" /> to indicate the user's birthdate is required for Passport Authentication; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if full consent is granted in this user's profile.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LogoTag">
      <summary>
        <para>Returns an HTML fragment containing an image tag for a Passport link. </para>
      </summary>
      <returns>
        <para>An HTML fragment containing an image tag for a Passport link.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LogoTag2">
      <summary>
        <para>Returns an HTML fragment containing an image tag for a Passport link. </para>
      </summary>
      <returns>
        <para> 
      An HTML fragment containing an image tag for a Passport link.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LogoTag(System.String,System.Int32,System.Boolean,System.String,System.Int32,System.Boolean,System.String,System.Int32,System.Boolean)">
      <summary>
        <para> Returns an HTML fragment containing an HTML &lt;img&gt; tag for a Passport
      link. </para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location to which the Login server should redirect members after they log on.</param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on. </param>
      <param name="fForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter gets used.</param>
      <param name="strCoBrandedArgs">Specifies variables to be appended as query string variables to the URL of the participant's Cobranding Template script page.</param>
      <param name="iLangID">Specifies the language to be used for the logon page that is displayed to the member.</param>
      <param name="fSecure">Declares whether this method is being called from an HTTPS (SSL) page. </param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created.</param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance. </param>
      <param name="bUseSecureAuth">Declares whether the actual logon UI should be served HTTPS from the Passport domain authority. </param>
      <returns>
        <para>An HTML fragment containing an image tag for a Passport link.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LogoTag(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para> Returns an HTML fragment containing an HTML &lt;img&gt; tag for a Passport
      link. </para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location to which the Login server should redirect members after they log on.</param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on.</param>
      <param name="iForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter gets used.</param>
      <param name="strCoBrandedArgs">Specifies variables to be appended as query string variables to the URL of the participant's Cobranding Template script page.</param>
      <param name="iLangID">Specifies the language to be used for the logon page that is displayed to the member.</param>
      <param name="iSecure">Declares whether this method is being called from an HTTPS (SSL) page.</param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created.</param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance.</param>
      <param name="iUseSecureAuth">Declares whether the actual logon UI should be served HTTPS from the Passport domain authority.</param>
      <returns>
        <para>An HTML fragment containing an image tag for a Passport link.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LogoTag2(System.String,System.Int32,System.Boolean,System.String,System.Int32,System.Boolean,System.String,System.Int32,System.Boolean)">
      <summary>
        <para> Returns an HTML fragment containing an HTML &lt;img&gt; tag for a Passport
      link. </para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location to which the Login server should redirect members after they log on.</param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on.</param>
      <param name="fForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter gets used.</param>
      <param name="strCoBrandedArgs">Specifies variables to be appended as query string variables to the URL of the participant's Cobranding Template script page.</param>
      <param name="iLangID">Specifies the language to be used for the logon page that is displayed to the member.</param>
      <param name="fSecure">Declares whether this method is being called from an HTTPS (SSL) page.</param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created.</param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance.</param>
      <param name="bUseSecureAuth">Declares whether the actual logon UI should be served HTTPS from the Passport domain authority.</param>
      <returns>
        <para>An HTML fragment containing an image tag for a Passport link.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LogoTag2(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para> Returns an HTML fragment containing an HTML &lt;img&gt; tag for a Passport
      link. </para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location to which the Login server should redirect members after they log on.</param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on.</param>
      <param name="iForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter gets used.</param>
      <param name="strCoBrandedArgs">Specifies variables to be appended as query string variables to the URL of the participant's Cobranding Template script page.</param>
      <param name="iLangID">Specifies the language to be used for the logon page that is displayed to the member.</param>
      <param name="iSecure">Declares whether this method is being called from an HTTPS (SSL) page.</param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created.</param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance.</param>
      <param name="iUseSecureAuth">Declares whether the actual logon UI should be served HTTPS from the Passport domain authority.</param>
      <returns>
        <para>An HTML fragment containing an image tag for a Passport link.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.AuthUrl">
      <summary>
        <para> Returns a string
      containing the Login server URL for a member, along with optional information sent to the Login
      server in the query string.</para>
      </summary>
      <returns>
        <para> The Login server URL for a member, as well as optional information sent
      to the Login server in the query string. </para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.AuthUrl2">
      <summary>
        <para> Returns a string containing the Login server URL for a member,
      as well as optional information sent to the Login server in the query string.</para>
      </summary>
      <returns>
        <para> The Login server URL for a member, as well as optional information sent
      to the Login server in the query string. </para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.AuthUrl(System.String,System.Int32,System.Boolean,System.String,System.Int32,System.String,System.Int32,System.Boolean)">
      <summary>
        <para> Returns the authentication server URL for
      a member.</para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location that the Login server should redirect to after logon is complete.</param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on. </param>
      <param name="fForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter will be used.</param>
      <param name="strCoBrandedArgs">Specifies variables to be appended to the URL of the Cobranding Template script page that was specified at initial participant registration.</param>
      <param name="iLangID">Specifies the language in which the required domain authority page should be displayed. </param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created.</param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance. </param>
      <param name="bUseSecureAuth">Declares whether the actual logon UI should be served HTTPS from the Passport domain authority. </param>
      <returns>
        <para>The Login server URL for a member, as well as the optional information sent
      to the Login server in the query string. </para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.AuthUrl2(System.String,System.Int32,System.Boolean,System.String,System.Int32,System.String,System.Int32,System.Boolean)">
      <summary>
        <para>Returns a string containing the Login server URL for a member, as well as the optional
      information sent to the Login server in the query string.</para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location that the Login server should redirect to after logon is complete. </param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on.</param>
      <param name="fForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter will be used. </param>
      <param name="strCoBrandedArgs">Specifies variables to be appended to the URL of the Cobranding Template script page that was specified at initial participant registration. </param>
      <param name="iLangID">Specifies the language in which the required domain authority page should be displayed. </param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created. </param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance. </param>
      <param name="bUseSecureAuth">Declares whether the actual logon UI should be served HTTPS from the Passport domain authority. </param>
      <returns>
        <para>The Login server URL for a member, as well as the optional information sent
      to the Login server in the query string. </para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.AuthUrl(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Returns a string containing the Login
      server URL for a member, along with the optional information sent to the Login
      server in the query string</para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location that the Login server should redirect to after logon is complete.</param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on. </param>
      <param name="iForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter will be used.</param>
      <param name="strCoBrandedArgs">Specifies variables to be appended to the URL of the Cobranding Template script page that was specified at initial participant registration.</param>
      <param name="iLangID">Specifies the language in which the required domain authority page should be displayed.</param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created.</param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance.</param>
      <param name="iUseSecureAuth">Declares whether the actual Login UI should be served HTTPS from the Passport domain authority.</param>
      <returns>
        <para>The Login server URL for a member, as well as the optional information sent
      to the Login server in the query string.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.AuthUrl2(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Retrieves a string containing the Login server URL for a member, as well as the optional
      information sent to the Login server in the query string.</para>
      </summary>
      <param name="strReturnUrl">Sets the URL of the location that the Login server should redirect to after logon is complete.</param>
      <param name="iTimeWindow">Specifies the interval during which members must have last logged on.</param>
      <param name="iForceLogin">Determines how the <paramref name="iTimeWindow" /> parameter will be used.</param>
      <param name="strCoBrandedArgs">Specifies variables to be appended to the URL of the Cobranding Template script page that was specified at initial participant registration.</param>
      <param name="iLangID">Specifies the language in which the required domain authority page should be displayed.</param>
      <param name="strNameSpace">Specifies the domain in which the Passport should be created.</param>
      <param name="iKPP">Specifies data collection policies for purposes of Children's Online Privacy Protection Act (COPPA) compliance.</param>
      <param name="iUseSecureAuth">Declares whether the actual logon UI should be served HTTPS from the Passport domain authority.</param>
      <returns>
        <para>The Login server URL for a member, as well as the optional information sent
      to the Login server in the query string.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LoginUser(System.String,System.Int32,System.Boolean,System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Object)">
      <summary>
        <para> Logs the user on, either by generating a 302 redirect URL or by
      initiating a Passport-aware client authentication exchange.</para>
      </summary>
      <param name="szRetURL">The URL to which the Login server should redirect users after sign in is complete.</param>
      <param name="iTimeWindow">The time value, in seconds.</param>
      <param name="fForceLogin">
        <see langword="true" />to have the Login server compare the <paramref name="iTimeWindow" /> parameter against the time since the user last signed in; <see langword="false" /> to have the Login server compare <paramref name="iTimeWindow" /> against the last time the Ticket was refreshed.</param>
      <param name="szCOBrandArgs">A string specifying variables to be appended as query string variables to the URL of the participant's Cobranding Template script page.</param>
      <param name="iLangID">A locale identifier (LCID) specifying the language in which the Login page should be displayed.</param>
      <param name="strNameSpace">A domain name space to which you want to direct users without Passports to register. The specified name space must appear as a "domain name" entry in the Partner.xml Component Configuration Document (CCD). The typical default name space is "passport.com".</param>
      <param name="iKPP">Do not use; leave as default/blank. This parameter is only relevant when implementing Kids Passport service; however, Kids Passport service cannot currently support use of this method.</param>
      <param name="fUseSecureAuth">Secure sign in is not available as an option in the current version Login servers. Passport Manager methods include secure sign-in parameters and they may be required for syntax, but they are currently ignored at the server. Check the Passport Web site for updates on the status of secure sign in.</param>
      <param name="oExtraParams">Name-value pairs to be inserted directly into the challenge authentication header, specifically for Passport-aware authentication interaction.</param>
      <returns>
        <para>An integer result code.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LoginUser(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Object)">
      <summary>
        <para> Logs the user on, either by generating a 302 redirect URL or initiating
      a Passport-aware client authentication exchange.</para>
      </summary>
      <param name="szRetURL">The URL to which the Login server should redirect users after sign in is complete.</param>
      <param name="iTimeWindow">The time value, in seconds.</param>
      <param name="fForceLogin">Indicates whether the Login server should compare the <paramref name="iTimeWindow" /> parameter against the time since the user last signed in or against the last time the Ticket was refreshed.</param>
      <param name="szCOBrandArgs">A string specifying variables to be appended as query string variables to the URL of the participant's Cobranding Template script page.</param>
      <param name="iLangID">A locale identifier (LCID) specifying the language in which the Login page should be displayed.</param>
      <param name="strNameSpace">A domain name space to which you want to direct users without Passports to register. The specified name space must appear as a "domain name" entry in the Partner.xml Component Configuration Document (CCD). The typical default name space is "passport.com".</param>
      <param name="iKPP">Do not use; leave as default/blank. This parameter is only relevant when implementing Kids Passport service; however, Kids Passport service cannot currently support use of this method.</param>
      <param name="iUseSecureAuth">Secure sign in is not available as an option in the current version Login servers. Passport Manager methods include secure sign-in parameters and they may be required for syntax, but they are currently ignored at the server. Check the Passport Web site for updates on the status of secure sign in.</param>
      <param name="oExtraParams">Name-value pairs to be inserted directly into the challenge authentication header, specifically for Passport-aware authentication interaction.</param>
      <returns>
        <para>An integer result code.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.LoginUser">
      <summary>
        <para> Logs the user on, either by generating a 302 redirect URL or initiating
      a Passport-aware client authentication exchange.</para>
      </summary>
      <returns>
        <para>An integer result code.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetLoginChallenge">
      <summary>
        <para>Logs the user on, either by generating a 302 redirect URL or initiating a
      Passport-aware client authentication exchange.</para>
      </summary>
      <returns>
        <para>A string representing the Passport Login Challenge.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetLoginChallenge(System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Object)">
      <summary>
        <para>Logs the user on, either by generating a 302 redirect
      URL or initiating a Passport-aware client authentication exchange.</para>
      </summary>
      <param name="szRetURL">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="iTimeWindow">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="fForceLogin">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="szCOBrandArgs">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="iLangID">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="strNameSpace">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="iKPP">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="iUseSecureAuth">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <param name="oExtraParams">See Passport documentation for IPassportManager3.GetLoginChallenge .</param>
      <returns>
        <para>A string representing the Passport Login Challenge.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetDomainAttribute(System.String,System.Int32,System.String)">
      <summary>
        <para>Provides information for a Passport domain by querying 
      the Passport manager for the requested domain attribute.</para>
      </summary>
      <param name="strAttribute">The name of the attribute value to retrieve.</param>
      <param name="iLCID">The language in which various Passport network pages should be displayed to the member. </param>
      <param name="strDomain">The domain authority name to query for an attribute. </param>
      <returns>
        <para>A string
      representing the requested attribute.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.Ticket(System.String)">
      <summary>
        <para>Gets information on a specific attribute of the Passport authentication ticket.</para>
      </summary>
      <param name="strAttribute">A string identifying the Passport authentication ticket to return<see langword="." /></param>
      <returns>
        <para>An object representing an attribute of the Passport authentication
      ticket.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.GetCurrentConfig(System.String)">
      <summary>
        <para>Gets the contents of a registry key under the HKLM\SW\Microsoft\Passport
      hive. </para>
      </summary>
      <param name="strAttribute">The name of the registry key.</param>
      <returns>
        <para>The contents of the registry key.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.SignOut(System.String)">
      <summary>
        <para>Logs off the given Passport member from
      the current session.</para>
      </summary>
      <param name="strSignOutDotGifFileName">An HTML fragment containing an image for the user to click on to sign out.</param>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.Encrypt(System.String)">
      <summary>
        <para>Encrypts data using the Passport participant key for the
      current site.</para>
      </summary>
      <param name="strData">The data to be encrypted.</param>
      <returns>
        <para>Data encrypted using the Passport participant key for
      the current site.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.Decrypt(System.String)">
      <summary>
        <para>Decrypts data using the Passport
      participant key for the current site.</para>
      </summary>
      <param name="strData">The data to be decrypted.</param>
      <returns>
        <para>Data decrypted using the Passport participant key
      for the current site.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.Compress(System.String)">
      <summary>
        <para>Compresses data.</para>
      </summary>
      <param name="strData">The data to be compressed.</param>
      <returns>
        <para>The compressed data.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.Decompress(System.String)">
      <summary>
        <para>Decompresses data that has been compressed by the
   <see cref="M:System.Web.Security.PassportIdentity.Compress(System.String)" /> method.</para>
      </summary>
      <param name="strData">The data to be decompressed.</param>
      <returns>
        <para>The decompressed data.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.CryptPutHost(System.String)">
      <summary>
        <para>Sets the key being used for Passport encryption and decryption. </para>
      </summary>
      <param name="strHost">The host name or IP address.</param>
      <returns>
        <para>An integer result code.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.CryptPutSite(System.String)">
      <summary>
        <para>Sets the key being used for Passport encryption and decryption by
      referring to the site-name label assigned to that key when the key was first installed.</para>
      </summary>
      <param name="strSite">The site label.</param>
      <returns>
        <para>An integer result code.</para>
      </returns>
    </member>
    <member name="M:System.Web.Security.PassportIdentity.CryptIsValid">
      <summary>
        <para>Gets the state of a flag indicating if the Passport
      Manager is in a valid state for encryption.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the key used for encryption and decryption is valid
   and if the Passport Manager is in a valid state for encryption</para>
      </returns>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.Name">
      <summary>
        <para>Gets the name of the current user. </para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.AuthenticationType">
      <summary>
        <para>Gets the type of authentication used to identify the user.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.IsAuthenticated">
      <summary>
        <para>Gets a value indicating whether
      the user is authenticated against a
      Passport authority.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.Item(System.String)">
      <summary>
        <para> Gets Passport profile attributes. </para>
      </summary>
      <param name="strProfileName">The Passport profile attribute to return.</param>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.Error">
      <summary>
        <para>Gets a value indicating the error state associated with the current Passport ticket. </para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.GetFromNetworkServer">
      <summary>
        <para>Gets information on a Passport server connection and query string.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.HasSavedPassword">
      <summary>
        <para> Gets information on whether the Passport member's password was
      saved.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.HasTicket">
      <summary>
        <para>Gets a value indicating whether the query string includes a Passport
      ticket as a cookie.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.TicketAge">
      <summary>
        <para> Gets the time, in seconds, since the last ticket was
      issued or refreshed.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.TimeSinceSignIn">
      <summary>
        <para> Gets the time, in seconds, since a member's
      logon to the Passport logon server.</para>
      </summary>
    </member>
    <member name="P:System.Web.Security.PassportIdentity.HexPUID">
      <summary>
        <para>Gets the Passport Unique Identifier (PUID) for the
      currently authenticated user, in hexadecimal form.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.UrlAuthorizationModule">
      <summary>
        <para> Provides URL-based authorization services for allowing or
      denying access to specified resources. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)">
      <summary>
        <para>Initializes the module.</para>
      </summary>
      <param name="app">The <see langword="Http application" /> .</param>
    </member>
    <member name="M:System.Web.Security.UrlAuthorizationModule.Dispose">
      <summary>
        <para>Called by the HTTP runtime to dispose of
      the module.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.WindowsAuthenticationEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.Security.WindowsAuthenticationModule.Authenticate" /> event. This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.WindowsAuthenticationEventArgs.#ctor(System.Security.Principal.WindowsIdentity,System.Web.HttpContext)">
      <summary>
        <para>Initializes a newly created instance of the <see cref="T:System.Web.Security.WindowsAuthenticationEventArgs" />
class.</para>
      </summary>
      <param name="identity">The windows identity object.</param>
      <param name=" context">The context for the event.</param>
    </member>
    <member name="P:System.Web.Security.WindowsAuthenticationEventArgs.User">
      <summary>
        <para>Gets or sets the <see cref="T:System.Security.Principal.IPrincipal" /> object to be associated with the
   request. </para>
      </summary>
    </member>
    <member name="P:System.Web.Security.WindowsAuthenticationEventArgs.Context">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpContext" /> object for the current HTTP
   request. </para>
      </summary>
    </member>
    <member name="P:System.Web.Security.WindowsAuthenticationEventArgs.Identity">
      <summary>
        <para>Gets an authenticated Windows identity.</para>
      </summary>
    </member>
    <member name="T:System.Web.Security.WindowsAuthenticationEventHandler">
      <summary>
        <para> Represents the method that handles the <c>WindowsAuthentication_OnAuthenticate</c> event of a <see cref="T:System.Web.Security.WindowsAuthenticationModule" />
.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.Security.WindowsAuthenticationEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.Security.WindowsAuthenticationModule">
      <summary>
        <para> Enables ASP.NET applications to use Windows/IIS authentication. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.Security.WindowsAuthenticationModule.Dispose">
      <summary>
        <para>Disposes of the module derived from
   <see cref="T:System.Web.IHttpModule" /> when called by the <see cref="T:System.Web.HttpRuntime" />
   .</para>
      </summary>
    </member>
    <member name="M:System.Web.Security.WindowsAuthenticationModule.Init(System.Web.HttpApplication)">
      <summary>
        <para>Initializes the module derived from
   <see cref="T:System.Web.IHttpModule" /> when called by the
      HttpRuntime.
      </para>
      </summary>
      <param name="app">The <see cref="T:System.Web.HttpApplication" /> module.</param>
    </member>
    <member name="E:System.Web.Security.WindowsAuthenticationModule.Authenticate">
      <summary>
        <para>Raised during authentication. This is a Global.asax event
      that must be named <c>WindowsAuthentication_OnAuthenticate</c> . It is used
   primarily to attach a custom <see cref="T:System.Security.Principal.IPrincipal" />
   
   object to the context.</para>
      </summary>
    </member>
    <member name="T:System.Web.SessionState.IReadOnlySessionState">
      <summary>
        <para> Specifies that the target HTTP handler
      interface has read-only access to session-state values. This is a marker interface only and
      has no methods.</para>
      </summary>
    </member>
    <member name="T:System.Web.SessionState.IRequiresSessionState">
      <summary>
        <para> Specifies that the target HTTP handler interface
      has read
      and write access to session-state values. This is a marker interface only and
      has no methods.</para>
      </summary>
    </member>
    <member name="T:System.Web.SessionState.SessionStateMode">
      <summary>
        <para> Specifies the session-state mode.</para>
      </summary>
    </member>
    <member name="F:System.Web.SessionState.SessionStateMode.Off">
      <summary>
        <para>Session state is disabled.</para>
      </summary>
    </member>
    <member name="F:System.Web.SessionState.SessionStateMode.InProc">
      <summary>
        <para>Session state is in process with an ASP.NET worker process.
   <see langword="InProc" />is the default.</para>
      </summary>
    </member>
    <member name="F:System.Web.SessionState.SessionStateMode.StateServer">
      <summary>
        <para>Session state is using an out-of-process Windows NT Server to
      store state information.</para>
      </summary>
    </member>
    <member name="F:System.Web.SessionState.SessionStateMode.SQLServer">
      <summary>
        <para>Session state is using an out-of-process SQL Server to store state information.</para>
      </summary>
    </member>
    <member name="T:System.Web.SessionState.HttpSessionState">
      <summary>
        <para> Provides access to session-state values as well as
      session-level settings and lifetime management methods.</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.Abandon">
      <summary>
        <para>Cancels the current session.</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)">
      <summary>
        <para> Adds a new item to session state.</para>
      </summary>
      <param name="name"> The name of the session-state item to add.</param>
      <param name=" value">The value to add to session state.</param>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.Remove(System.String)">
      <summary>
        <para> Deletes an item from the session-state collection.</para>
      </summary>
      <param name="name"> The name of the session-state item to remove.</param>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)">
      <summary>
        <para> Deletes an item at a specified index from the session-state collection.</para>
      </summary>
      <param name="index">The index of the item to remove.</param>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.Clear">
      <summary>
        <para>Clears all values from session state.</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.RemoveAll">
      <summary>
        <para> Clears all session-state values.</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.GetEnumerator">
      <summary>
        <para> Gets an enumerator of all session state-values in the current session.</para>
      </summary>
      <returns>
        <para> The enumerator for session-state values.</para>
      </returns>
    </member>
    <member name="M:System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies the collection of session-state values to
      a one-dimensional array, starting at the specified index in the array.</para>
      </summary>
      <param name="array">The <see cref="T:System.Array" /> that receives the session values.</param>
      <param name=" index">The index in <paramref name="array" /> where copying starts.</param>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.SessionID">
      <summary>
        <para>Gets the unique session ID used to identify the session.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.Timeout">
      <summary>
        <para> Gets and sets the time-out period (in minutes) allowed between requests before
      the session-state provider terminates the session.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.IsNewSession">
      <summary>
        <para> Gets a value indicating whether
      the session was created with the current request.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.Mode">
      <summary>
        <para> Gets the current session-state mode.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.IsCookieless">
      <summary>
        <para>Gets a value indicating whether the session ID is embedded in the URL or stored
      in an HTTP cookie.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.LCID">
      <summary>
        <para>Gets or sets the locale identifier (LCID) of the current session.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.CodePage">
      <summary>
        <para>Gets or sets the code page identifier for the current session.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.Contents">
      <summary>
        <para> Gets a reference to the current session-state object.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.StaticObjects">
      <summary>
        <para>Gets a collection of objects declared by
   <see langword="&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;" /> tags within the ASP.NET application file global.asax.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.Item(System.String)">
      <summary>
        <para>Gets or sets a session value by name.</para>
      </summary>
      <param name="name">The key name of the session value.</param>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.Item(System.Int32)">
      <summary>
        <para>Gets or sets a session value by numerical index.</para>
      </summary>
      <param name="index">The numerical index of the session value.</param>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.Count">
      <summary>
        <para> Gets the number of items in the session-state collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.Keys">
      <summary>
        <para>Gets a collection of the keys of all values stored in the session.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.SyncRoot">
      <summary>
        <para> Gets an object that can be used to synchronize access
      to the collection of session-state values.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the session is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.SessionState.HttpSessionState.IsSynchronized">
      <summary>
        <para> Gets a value indicating whether access to the
      collection of session-state values is synchronized (thread safe).</para>
      </summary>
    </member>
    <member name="T:System.Web.SessionState.SessionStateModule">
      <summary>
        <para>Provides session-state services for an application.</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.SessionStateModule.Init(System.Web.HttpApplication)">
      <summary>
        <para> Executes initialization code when a session-state
      module is created.</para>
      </summary>
      <param name="app">The current application.</param>
    </member>
    <member name="M:System.Web.SessionState.SessionStateModule.Dispose">
      <summary>
        <para> Executes final cleanup code before the session-state
      module is released from memory.</para>
      </summary>
    </member>
    <member name="E:System.Web.SessionState.SessionStateModule.Start">
      <summary>
        <para> Occurs when a session is created.</para>
      </summary>
    </member>
    <member name="E:System.Web.SessionState.SessionStateModule.End">
      <summary>
        <para> Occurs when a session ends.</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.SessionStateSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.IStateRuntime.StopProcessing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.IStateRuntime.ProcessRequest(System.IntPtr,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.StateRuntime.StopProcessing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.SessionState.StateRuntime.ProcessRequest(System.IntPtr,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateParser.CompileIntoType">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.AttributeCollection">
      <summary>
        <para>Provides object-model access to all attributes declared
      in the opening tag of an ASP.NET server control element. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.AttributeCollection.#ctor(System.Web.UI.StateBag)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.AttributeCollection" /> class.</para>
      </summary>
      <param name="bag">A <see cref="T:System.Web.UI.StateBag" /> object that contains the attribute keys and their values that are in the opening tag of the server control. </param>
    </member>
    <member name="M:System.Web.UI.AttributeCollection.Add(System.String,System.String)">
      <summary>
        <para> Adds an attribute to a server contol's
   <see cref="T:System.Web.UI.AttributeCollection" /> object.</para>
      </summary>
      <param name="key">The index assigned to the new attribute in the collection.</param>
      <param name=" value">The attribute to store in the collection.</param>
    </member>
    <member name="M:System.Web.UI.AttributeCollection.Remove(System.String)">
      <summary>
        <para> Removes an attribute from a server
      control's <see cref="T:System.Web.UI.AttributeCollection" />object.</para>
      </summary>
      <param name="key">The key of the attribute to remove.</param>
    </member>
    <member name="M:System.Web.UI.AttributeCollection.Clear">
      <summary>
        <para> Removes all attributes from a server
      control's <see cref="T:System.Web.UI.AttributeCollection" /> object.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.AttributeCollection.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Writes the collection of attributes to the
      specified <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream. In turn, the output stream writes
      the collection to the Web Forms page.</para>
      </summary>
      <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> object that writes the attribute collection to the current output stream location.</param>
    </member>
    <member name="M:System.Web.UI.AttributeCollection.AddAttributes(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Adds attributes from the
   <see langword="AttributeCollection" /> class to the <see cref="T:System.Web.UI.HtmlTextWriter" />
   object that is responsible for rendering the attributes as HTML to an
   ASP.NET server control.</para>
      </summary>
      <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that writes the added attribute to the opening tag of an ASP.NET server control.</param>
    </member>
    <member name="P:System.Web.UI.AttributeCollection.Item(System.String)">
      <summary>
        <para> Gets or sets a specified attribute value for a server control.</para>
      </summary>
      <param name="key">The location of the attribute within the collection.</param>
    </member>
    <member name="P:System.Web.UI.AttributeCollection.Keys">
      <summary>
        <para> Gets a collection of keys to all attributes in
      the server control's <see cref="T:System.Web.UI.AttributeCollection" /> object.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.AttributeCollection.Count">
      <summary>
        <para> Gets the number of attributes in the
   <see cref="T:System.Web.UI.AttributeCollection" /> object.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.AttributeCollection.CssStyle">
      <summary>
        <para>Gets a collection of styles for the ASP.NET server control to which the
      current <see cref="T:System.Web.UI.AttributeCollection" /> object belongs. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ControlBuilder">
      <summary>
        <para> Supports the page parser in building a control and the child controls it
 contains. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)">
      <summary>
        <para>Initializes the control builder when a Web request is made.</para>
      </summary>
      <param name="parser">The <see cref="T:System.Web.UI.TemplateParser" /> object responsible for parsing the control.</param>
      <param name=" parentBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object responsible for building the control.</param>
      <param name=" type">The <see cref="T:System.Type" /> assigned to the control that the builder will create.</param>
      <param name=" tagName">The name of the tag to be built. This allows the builder to support multiple tag types.</param>
      <param name=" id">The <see cref="P:System.Web.UI.ControlBuilder.ID" /> attribute assigned to the control.</param>
      <param name=" attribs">The <see cref="T:System.Collections.IDictionary" /> object that holds all the specified tag attributes.</param>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)">
      <summary>
        <para> Obtains the <see cref="T:System.Type" /> for the control's children.</para>
      </summary>
      <param name="tagName">The tag name of the child.</param>
      <param name=" attribs">An array of attributes contained in the child control.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> of 
 the specified control's child.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.HasBody">
      <summary>
        <para>Determines if a control has both an opening and closing tag. </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the control has an opening and closing tag; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.AllowWhitespaceLiterals">
      <summary>
        <para> Determines whether the
 white space literals in the control must be processed or ignored.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the white 
 space literals in the control must be processed; otherwise,
<see langword="false" /> 
.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.AppendSubBuilder(System.Web.UI.ControlBuilder)">
      <summary>
        <para>Adds builders to the <see cref="T:System.Web.UI.ControlBuilder" /> object for any child controls that
 belong to the container control.</para>
      </summary>
      <param name="subBuilder">The <see langword="ControlBuilder" /> object assigned to the child control.</param>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.AppendLiteralString(System.String)">
      <summary>
        <para> Adds literal content to a
 control.</para>
      </summary>
      <param name="s">The content to add to the control.</param>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.CloseControl">
      <summary>
        <para> Called by the parser to inform the builder that the parsing of the control is complete.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.HtmlDecodeLiterals">
      <summary>
        <para>Determines whether the literal string of an HTML control must be
 HTML decoded.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the HTML 
 control literal string is to be decoded; otherwise, <see langword="false" />
 .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.NeedsTagInnerText">
      <summary>
        <para>Determines if the control builder needs to get its inner text. If so, the <see cref="M:System.Web.UI.ControlBuilder.SetTagInnerText(System.String)" /> method must be called.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the control
 builder needs to get its inner text. The default is <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.SetTagInnerText(System.String)">
      <summary>
        <para>Provides the <see cref="T:System.Web.UI.ControlBuilder" /> with the inner text of the control
 tag.</para>
      </summary>
      <param name="text">The text to be provided.</param>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.OnAppendToParentBuilder(System.Web.UI.ControlBuilder)">
      <summary>
        <para> Notifies the <see cref="T:System.Web.UI.ControlBuilder" /> that it is being
 added to a parent control builder.</para>
      </summary>
      <param name="parentBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object to which the current builder is added.</param>
    </member>
    <member name="M:System.Web.UI.ControlBuilder.CreateBuilderFromType(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary,System.Int32,System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Web.UI.ControlBuilder" /> object for the specified tag.</para>
      </summary>
      <param name="parser">The <see cref="T:System.Web.UI.TemplateParser" /> object responsible for parsing the control.</param>
      <param name=" parentBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object responsible for building the control.</param>
      <param name=" type">The <see cref="T:System.Type" /> assigned to the control that the builder will create.</param>
      <param name=" tagName">The name of the tag to be built. This allows the builder to support multiple tag types.</param>
      <param name=" id">The <see cref="P:System.Web.UI.ControlBuilder.ID" /> attribute assigned to the control.</param>
      <param name=" attribs">The <see cref="T:System.Collections.IDictionary" /> object that holds all the specified tag attributes.</param>
      <param name=" line">The source file line number for the specified control.</param>
      <param name=" sourceFileName">The name of the source file from which the control is to be created.</param>
      <returns>
        <para>The builder that is responsible for creating the control.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.ControlBuilder.InDesigner">
      <summary>
        <para>Returns whether the <see cref="T:System.Web.UI.ControlBuilder" /> is running in the designer.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlBuilder.FIsNonParserAccessor">
      <summary>
        <para>Determines whether the control implements the <see cref="T:System.Web.UI.IParserAccessor" />
interface.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlBuilder.FChildrenAsProperties">
      <summary>
        <para>Determines whether the control has a <see cref="T:System.Web.UI.ParseChildrenAttribute" /> with <see cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" /> set to 
<see langword="true." /></para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlBuilder.ControlType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> for the control to be created.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlBuilder.ID">
      <summary>
        <para>Gets or sets the identifier property for the control to be built.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlBuilder.TagName">
      <summary>
        <para>Gets the tag name for the control to be built.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlBuilder.HasAspCode">
      <summary>
        <para> Gets a value indicating whether the control contains any
 code blocks.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.CollectionBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)">
      <summary>
        <para>Initializes the <see cref="T:System.Web.UI.CollectionBuilder" /> object when a Web request is
   made.</para>
      </summary>
      <param name="parser">The <see cref="T:System.Web.UI.TemplateParser" /> object for the currently requested server control.</param>
      <param name=" parentBuilder">The <see cref="T:System.Web.UI.ControlBuilder" /> object for the parent server control.</param>
      <param name=" type">The <see cref="T:System.Type" /> assigned to the collection.</param>
      <param name=" tagName">The tag name assigned to the collection.</param>
      <param name="ID">The programmatic identifier of the parent control.</param>
      <param name=" attribs">An array that contains the attributes assigned to the parent control.</param>
    </member>
    <member name="M:System.Web.UI.CollectionBuilder.GetChildControlType(System.String,System.Collections.IDictionary)">
      <summary>
        <para>Maps the tag name of the child control to its specified 
       type.</para>
      </summary>
      <param name="tagName">The tag name of the child control.</param>
      <param name=" attribs">The array of attributes that belong to the child control.</param>
      <returns>
        <para>A parser mapping from the given <paramref name="tagName" /> 
 parameter to a <see cref="T:System.Type" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.CollectionBuilder.AppendLiteralString(System.String)">
      <summary>
        <para>Adds whitespace literal content to the child control.</para>
      </summary>
      <param name="s">The literal string to add to the control.</param>
    </member>
    <member name="T:System.Web.UI.Control">
      <summary>
        <para> Defines the properties, methods, and events
      that are shared by all ASP.NET server controls.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.IParserAccessor">
      <summary>
        <para> Defines the method that ASP.NET server controls must
      implement to recognize when elements, either HTML or XML, are parsed.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.IParserAccessor.AddParsedSubObject(System.Object)">
      <summary>
        <para>When implemented by an ASP.NET server control, notifies
      the server control that an element, either XML or HTML, was parsed.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> that was parsed.</param>
    </member>
    <member name="T:System.Web.UI.IDataBindingsAccessor">
      <summary>
        <para>Allows access to the collection of data-binding
 expressions on a control at design time.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.IDataBindingsAccessor.DataBindings">
      <summary>
        <para>Indicates a collection of all data bindings on the control. This property is
 read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.IDataBindingsAccessor.HasDataBindings">
      <summary>
        <para> Returns whether the
 control contains any data-binding logic.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Control.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Control" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Control.OnDataBinding(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.Control.DataBinding" />
event.</para>
      </summary>
      <param name="e">An <see langword="EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.Control.DataBind">
      <summary>
        <para> Binds a data source to the invoked server control and all its child
      controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Control.AddParsedSubObject(System.Object)">
      <summary>
        <para>Notifies the server control that an element, either XML
      or HTML, was parsed, and adds the element to the server control's <see cref="T:System.Web.UI.ControlCollection" />
      object.</para>
      </summary>
      <param name="obj">An <see cref="T:System.Object" /> that represents the parsed element.</param>
    </member>
    <member name="M:System.Web.UI.Control.OnInit(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.Control.Init" />
event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.Control.ClearChildViewState">
      <summary>
        <para> Deletes the view-state information for all the server control's child
      controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Control.LoadViewState(System.Object)">
      <summary>
        <para> Restores view-state information from a previous page
      request that was saved by the <see cref="M:System.Web.UI.Control.SaveViewState" /> method.</para>
      </summary>
      <param name="savedState">An <see cref="T:System.Object" /> that represents the control state to be restored.</param>
    </member>
    <member name="M:System.Web.UI.Control.MapPathSecure(System.String)">
      <summary>
        <para> Retrieves a mapped physical file path relative
      to the source file, if the requesting server control has sufficient
      security permissions to read the mapped result.</para>
      </summary>
      <param name="virtualPath">A relative or root relative URL.</param>
      <returns>
        <para>The physical path to the requested file.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.OnLoad(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.Control.Load" />
event.</para>
      </summary>
      <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.Control.OnPreRender(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.Control.PreRender" />
event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.Control.SaveViewState">
      <summary>
        <para> Saves any server control view-state changes that have occurred since the time the page
      was posted back to the server. </para>
      </summary>
      <returns>
        <para>Returns the server control's current view state. If there is no
      view state associated with the control, this method returns <see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to
   be rendered on
   the client.</para>
      </summary>
      <param name="writer">The <see langword="HtmlTextWriter" /> object that receives the server control content.</param>
    </member>
    <member name="M:System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Outputs the content of a server control's children to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes
   the content to be rendered on
   the client.</para>
      </summary>
      <param name="writer">The <see langword="HtmlTextWriter" /> object that receives the rendered content.</param>
    </member>
    <member name="M:System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores
   tracing information about the control if tracing is enabled.</para>
      </summary>
      <param name="writer">The <see langword="HtmlTextWriter" /> object that receives the control content.</param>
    </member>
    <member name="M:System.Web.UI.Control.OnUnload(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.Control.Unload" /> event.</para>
        <note type="note">
   
   Server controls should perform any final cleanup, such as
   closing files, closing database connections, and discarding objects, during this stage
   of the server control lifecycle.
</note>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.Control.Dispose">
      <summary>
        <para> Enables a server control
      to perform final clean up before it is released from memory.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)">
      <summary>
        <para> Assigns any sources of the event and its information to the control's parent. </para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" args">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)">
      <summary>
        <para> Determines whether the event for the server control is passed up the page's UI server
      control hierarchy.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" args">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
      <returns>
        <para>
          <see langword="true" /> if the event has been canceled; otherwise,
<see langword="false" />. The default is <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.CreateControlCollection">
      <summary>
        <para>Creates a new <see cref="T:System.Web.UI.ControlCollection" /> object to hold the child controls (both literal and server) of the server control.</para>
      </summary>
      <returns>
        <para>A <see langword="ControlCollection" /> object to contain the current server control's
   child server controls.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.CreateChildControls">
      <summary>
        <para> Notifies server controls that use composition-based implementation to create any child
      controls they contain in preparation for posting back or rendering.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Control.ResolveUrl(System.String)">
      <summary>
        <para>Resolves a relative URL to an absolute URL based on the
      value passed to the <see cref="P:System.Web.UI.Control.TemplateSourceDirectory" />
      property. </para>
      </summary>
      <param name="relativeUrl">The relative URL associated with the <see langword="TemplateSourceDirectory" /> property.</param>
      <returns>
        <para>The absolute URL.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.FindControl(System.String)">
      <summary>
        <para>Searches the current naming container for a server control with
      the specified <paramref name="id" /> parameter.</para>
      </summary>
      <param name="id">The identifier for the control to be found.</param>
      <returns>
        <para>The specified control, or <see langword="null" /> if the specified control
   does not exist.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.HasControls">
      <summary>
        <para>Determines if the server control contains any child
      controls.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the control contains other
   controls; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.IsLiteralContent">
      <summary>
        <para> Determines
      if the server control holds only literal content.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the server control contains solely
   literal content; otherwise <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Control.TrackViewState">
      <summary>
        <para> Causes tracking of view-state changes to the server control so
      they can be stored in the server control's <see cref="T:System.Web.UI.StateBag" /> object. This object is accessible through
      the <see cref="P:System.Web.UI.Control.ViewState" qualify="true" />
      property.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Control.EnsureChildControls">
      <summary>
        <para> Determines whether the server control contains child controls.
      If it does not, it creates child
      controls. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.ClientID">
      <summary>
        <para> Gets the server control identifier
      generated by ASP.NET. </para>
      </summary>
    </member>
    <member name="E:System.Web.UI.Control.Disposed">
      <summary>
        <para> Occurs when a server control is released from memory,
      which is the last stage of the server control
      lifecycle when an ASP.NET page is requested.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.Context">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpContext" /> object associated with the server control for the current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.Events">
      <summary>
        <para>Gets a list of event handler delegates for the control. This property is
      read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.ID">
      <summary>
        <para> Gets or
      
      sets the programmatic identifier assigned to the server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.EnableViewState">
      <summary>
        <para> Gets or sets a value indicating whether the server control persists
      its view state, and the view state of any child controls it contains, to
      the requesting client.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.NamingContainer">
      <summary>
        <para> Gets a reference to the server control's naming
      container, which creates a unique namespace for differentiating between server
      controls with the same <see cref="P:System.Web.UI.Control.ID" qualify="true" />
      property value.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.Page">
      <summary>
        <para> Gets a reference to the <see cref="T:System.Web.UI.Page" /> instance that contains the
   server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.Parent">
      <summary>
        <para> Gets a reference to the server control's parent control in the page control hierarchy.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.TemplateSourceDirectory">
      <summary>
        <para> Gets the virtual directory of the <see cref="T:System.Web.UI.Page" />
or <see cref="T:System.Web.UI.UserControl" /> that contains the current server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.Site">
      <summary>
        <para> Gets information about the Web site to which the server control belongs.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.Visible">
      <summary>
        <para> Gets or sets a value that indicates whether a server control is rendered as UI on
      the page.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.UniqueID">
      <summary>
        <para> Gets the unique, hierarchically-qualified identifier for the server control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.Control.DataBinding">
      <summary>
        <para> Occurs when the server control binds to a data source.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.Control.Init">
      <summary>
        <para> Occurs when
      the server control is initialized, which is the first step in the its
      lifecycle.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.Control.Load">
      <summary>
        <para>Occurs when the server control is loaded into the <see cref="T:System.Web.UI.Page" />
object.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.Control.PreRender">
      <summary>
        <para>Occurs when the server control is about to render to its
      containing <see cref="T:System.Web.UI.Page" /> object.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.Control.Unload">
      <summary>
        <para> Occurs
      when the server control is unloaded from memory. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.HasChildViewState">
      <summary>
        <para> Gets a value indicating whether the current server control's child controls have any
      saved view-state settings.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.Controls">
      <summary>
        <para> Gets a <see cref="T:System.Web.UI.ControlCollection" /> object that represents the child controls for a specified server control in the
   UI hierarchy.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.ViewState">
      <summary>
        <para>Gets a dictionary of state information that allows you to save and restore the view
      state of a server control across multiple requests for the same page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.ViewStateIgnoresCase">
      <summary>
        <para>Gets a value that indicates whether the <see cref="T:System.Web.UI.StateBag" /> object is case-insensitive.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.ChildControlsCreated">
      <summary>
        <para>Gets a value that indicates whether the server control's child controls have been created.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Control.IsTrackingViewState">
      <summary>
        <para>Gets a value that indicates whether ther server control
      is saving changes to
      its view state. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ControlBuilderAttribute">
      <summary>
        <para> Specifies a <see cref="T:System.Web.UI.ControlBuilder" /> class for building a custom control within
 the ASP.NET parser. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlBuilderAttribute.BuilderType">
      <summary>
        <para> Gets the <see cref="T:System.Type" /> of the control associated with
 the attribute. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ControlCollection">
      <summary>
        <para> Provides a collection
      container that enables ASP.NET server controls to maintain a
      list of their child controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ControlCollection.#ctor(System.Web.UI.Control)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ControlCollection" /> class for the parent 
   server control specified in the <paramref name="owner" /> parameter.</para>
      </summary>
      <param name="owner">The ASP.NET server control that the control collection is created for.</param>
    </member>
    <member name="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.Control" />
object to the collection.</para>
      </summary>
      <param name="child">The <see langword="Control" /> object to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.Control" /> object to the collection at the specified index location.</para>
      </summary>
      <param name=" index">The location in the array to add the child control.</param>
      <param name="child">The <see langword="Control" /> object to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.ControlCollection.Clear">
      <summary>
        <para>Removes all controls from the current server 
      control's <see cref="T:System.Web.UI.ControlCollection" /> object.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ControlCollection.Contains(System.Web.UI.Control)">
      <summary>
        <para>Determines whether the specified server control is in the parent server control's <see cref="T:System.Web.UI.ControlCollection" /> object.</para>
      </summary>
      <param name="c">The server control to search for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified server control exists
   in the collection; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlCollection.IndexOf(System.Web.UI.Control)">
      <summary>
        <para>Retrieves the index of a specified <see cref="T:System.Web.UI.Control" />
object in the collection.</para>
      </summary>
      <param name="value">The <see langword="Control" /> object for which the index is returned.</param>
      <returns>
        <para>The index of the specified server control. If the server 
 control is not currently a member of the collection, it returns
 -1.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlCollection.GetEnumerator">
      <summary>
        <para>Retrieves an enumerator that can iterate through the
   <see langword="ControlCollection" /> object.</para>
      </summary>
      <returns>
        <para>The enumerator to iterate through the collection.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ControlCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies the child controls stored in the <see cref="T:System.Web.UI.ControlCollection" />
object to an <see cref="T:System.Array" qualify="true" /> object, beginning at the specified index location in
the <see langword="Array" /> .</para>
      </summary>
      <param name="array">The <see langword="Array" /> to copy the child controls to.</param>
      <param name=" index">The zero-based relative index in <paramref name="array" /> where copying begins.</param>
    </member>
    <member name="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes a child control, at the specified index location, from the <see cref="T:System.Web.UI.ControlCollection" /> object.</para>
      </summary>
      <param name="index">The ordinal index of the server control to be removed from the collection.</param>
    </member>
    <member name="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)">
      <summary>
        <para> Removes the specified server control from the parent server control's <see cref="T:System.Web.UI.ControlCollection" />
      object.</para>
      </summary>
      <param name="value">The server control to be removed.</param>
    </member>
    <member name="P:System.Web.UI.ControlCollection.Count">
      <summary>
        <para> Gets the number of server controls in the
   <see langword="ControlCollection" /> object for the specified ASP.NET
      server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlCollection.Owner">
      <summary>
        <para>Gets the ASP.NET server control to which the <see cref="T:System.Web.UI.ControlCollection" /> object belongs.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlCollection.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the collection of controls.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the
   <see langword="ControlCollection" /> object is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlCollection.IsSynchronized">
      <summary>
        <para> Gets a value indicating whether the
 <see langword="ControlCollection" />
 is synchronized.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ControlCollection.Item(System.Int32)">
      <summary>
        <para>Gets a reference to the server control at the specified index location in the
 <see langword="ControlCollection" /> object.</para>
      </summary>
      <param name="index">The location of the server control in the <see langword="ControlCollection" /> .</param>
    </member>
    <member name="T:System.Web.UI.CssStyleCollection">
      <summary>
        <para> Contains the HTML cascading-style sheets (CSS) inline style attributes for a specified HTML server
      control. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.CssStyleCollection.Add(System.String,System.String)">
      <summary>
        <para>Adds a style item to the
   <see langword="CssStyleCollection" /> object.</para>
      </summary>
      <param name="key">The index assigned to the new style in the collection.</param>
      <param name=" value">The style to store in the collection.</param>
    </member>
    <member name="M:System.Web.UI.CssStyleCollection.Remove(System.String)">
      <summary>
        <para>Removes a style item from the <see langword="CssStyleCollection" /> object.</para>
      </summary>
      <param name="key">The index of the style item to remove.</param>
    </member>
    <member name="M:System.Web.UI.CssStyleCollection.Clear">
      <summary>
        <para>Removes all style items from the <see langword="CssStyleCollection" /> object.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.CssStyleCollection.Item(System.String)">
      <summary>
        <para>Gets or sets a specified CSS value for the specified HTML server control.</para>
      </summary>
      <param name="key">The index to the CSS attribute.</param>
    </member>
    <member name="P:System.Web.UI.CssStyleCollection.Keys">
      <summary>
        <para>Gets a collection of keys to all the styles in the
   <see langword="CssStyleCollection" /> object for a specific HTML server
      control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.CssStyleCollection.Count">
      <summary>
        <para>Gets the number of items in the
   <see langword="CssStyleCollection " />object.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.DataBinder">
      <summary>
        <para> Provides support for RAD designers to
      generate and parse <see topic="cpconDatabindingExpressionSyntax" /> . This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.DataBinder.Eval(System.Object,System.String)">
      <summary>
        <para> Evaluates data-binding expressions at runtime.</para>
      </summary>
      <param name="container">The object reference against which the expression is evaluated. This must be a valild object identifier in the page's specified language.</param>
      <param name=" expression">The navigation path from the <paramref name="container" /> to the property value to be placed in the bound control property. This must be a string type of property or field names separated by dots, such as <see langword="Tables[0].DefalutView.[0].Price" /> in C# or <see langword="Tables(0).DefaultView.(0).Price" /> in Visual Basic.</param>
      <returns>
        <para> An <see cref="T:System.Object" /> that results from the evaluation
   of the data-binding expression.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.DataBinder.Eval(System.Object,System.String,System.String)">
      <summary>
        <para> Evaluates data-binding expressions at runtime and formats the result as text to be displayed
      in the requesting browser.</para>
      </summary>
      <param name="container">The object reference against which the expression is evaluated. This must be a valild object identifier in the page's specified language.</param>
      <param name=" expression">The navigation path from the <paramref name="container" /> to the property value to be placed in the bound control property. This must be a string type of property or field names separated by dots, such as <see langword="Tables[0].DefalutView.[0].Price" /> in C# or <see langword="Tables(0).DefaultView.(0).Price" /> in Visual Basic. </param>
      <param name=" format">A .NET Framework format string, similar to those used by <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" /> , that converts the <see cref="T:System.Object" /> (which results from the evaluation of the data-binding expression) to a <see cref="T:System.String" /> that can be displayed by the requesting browser.</param>
      <returns>
        <para>A<see cref="T:System.String" />
that results from the evaluation
of the data-binding expression and conversion to a string type.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.DataBinding">
      <summary>
        <para>Contains information about a single data-binding expression in an ASP.NET
      server control, which allows rapid-application development (RAD) designers, such as Visual Studio .NET, to
      create data-binding expressions at design time. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.DataBinding.#ctor(System.String,System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.DataBinding" /> class.</para>
      </summary>
      <param name="propertyName">The property to bind data to.</param>
      <param name=" propertyType">The .NET Framework type of the property to bind data to.</param>
      <param name=" expression">The data-binding expression to be evaluated.</param>
    </member>
    <member name="M:System.Web.UI.DataBinding.GetHashCode">
      <summary>
        <para>Retrieves the hash code for an instance of the <see cref="T:System.Web.UI.DataBinding" />
object.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.DataBinding.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object is the same 
 instance of the <see cref="T:System.Web.UI.DataBinding" />
 class as the current object.</para>
      </summary>
      <param name="obj">The object to compare against the current <see langword="DataBinding" /> object.</param>
      <returns>
        <para>
          <see langword="true" />
if the data binding property names match; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.DataBinding.Expression">
      <summary>
        <para> Gets or sets the data-binding expression to be evaluated.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBinding.PropertyName">
      <summary>
        <para> Gets the name of the ASP.NET server control property
      to bind data against.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBinding.PropertyType">
      <summary>
        <para> Gets the .NET Framework type of the data-bound ASP.NET server control
      property.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.DataBindingCollection">
      <summary>
        <para> Provides a collection of <see cref="T:System.Web.UI.DataBinding" /> objects for an ASP.NET server control. This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.DataBindingCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.Add(System.Web.UI.DataBinding)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.DataBinding" />
object to the <see cref="T:System.Web.UI.DataBindingCollection" /> .</para>
      </summary>
      <param name="binding">The data binding object to add.</param>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.Web.UI.DataBinding" /> objects from the <see cref="T:System.Web.UI.DataBindingCollection" /> .</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see langword="DataBindingCollection " />values to a
   one-dimensional <see cref="T:System.Array" />, beginning at the
<see langword="Array" /> object's specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the values copied from <see langword="DataBindingCollection" />.</param>
      <param name=" index">The index in the array, specified by the <paramref name="array" /> parameter, where copying begins.</param>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.GetEnumerator">
      <summary>
        <para> Returns an enumerator to iterate through the <see cref="T:System.Web.UI.DataBindingCollection" /> object.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> that contains the collection's members.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.Remove(System.String)">
      <summary>
        <para>Removes the <see cref="T:System.Web.UI.DataBinding" /> object associated with the specified
   property name from the <see cref="T:System.Web.UI.DataBindingCollection" /> and adds it
   to the <see cref="P:System.Web.UI.DataBindingCollection.RemovedBindings" />
   collection.</para>
      </summary>
      <param name="propertyName">The property name associated with the <see cref="T:System.Web.UI.DataBinding" /> object to be removed.</param>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.Remove(System.Web.UI.DataBinding)">
      <summary>
        <para>Removes the specified <see cref="T:System.Web.UI.DataBinding" /> object from the
<see cref="T:System.Web.UI.DataBindingCollection" /> and adds it to 
   the <see cref="P:System.Web.UI.DataBindingCollection.RemovedBindings" /> collection.</para>
      </summary>
      <param name="binding">
        <para>The <see cref="T:System.Web.UI.DataBinding" /> object to be removed from the <see cref="T:System.Web.UI.DataBindingCollection" />.</para>
      </param>
    </member>
    <member name="M:System.Web.UI.DataBindingCollection.Remove(System.String,System.Boolean)">
      <summary>
        <para>Removes the <see cref="T:System.Web.UI.DataBinding" /> object, associated with the
   specified property name, from the <see cref="T:System.Web.UI.DataBindingCollection" /> and controls
   whether to add the binding to the <see cref="P:System.Web.UI.DataBindingCollection.RemovedBindings" /> list.</para>
      </summary>
      <param name="propertyName">The property associated with the <see langword="DataBinding" /> object to be removed.</param>
      <param name=" addToRemovedList">A <see langword="Boolean" /> that indicates whether to add the property name to the <see langword="RemovedBindings" /> list. <see langword="true" /> indicates that an empty string is added to the list, while <see langword="false" /> indicates that the property name is added to the list.</param>
    </member>
    <member name="P:System.Web.UI.DataBindingCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.DataBinding" /> objects in the <see cref="T:System.Web.UI.DataBindingCollection" /> object.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBindingCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.DataBindingCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBindingCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.DataBindingCollection" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBindingCollection.RemovedBindings">
      <summary>
        <para>Gets an array of the names of the <see cref="T:System.Web.UI.DataBinding" /> objects removed from the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBindingCollection.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
 the <see cref="T:System.Web.UI.DataBindingCollection" /> .</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBindingCollection.Item(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.DataBinding" /> object with the specified property name.</para>
      </summary>
      <param name="propertyName">The name of the property to be found.</param>
    </member>
    <member name="T:System.Web.UI.DataBindingHandlerAttribute">
      <summary>
        <para>Specifies a design-time class that performs data binding of controls within a designer.
 This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.DataBindingHandlerAttribute.Default">
      <summary>
 Defines the default attribute for the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class.
</summary>
    </member>
    <member name="M:System.Web.UI.DataBindingHandlerAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class using no parameters. This is the default 
    constructor.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.DataBindingHandlerAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class of the
 specified <see cref="T:System.Type" />
 .</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> for the data-binding handler.</param>
    </member>
    <member name="M:System.Web.UI.DataBindingHandlerAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.DataBindingHandlerAttribute" /> class with the
 specified type name.</para>
      </summary>
      <param name="typeName">The fully-qualified name of the data-binding handler <see cref="T:System.Type" /> .</param>
    </member>
    <member name="P:System.Web.UI.DataBindingHandlerAttribute.HandlerTypeName">
      <summary>
        <para>Gets the type name of the data binding handler. If the type name is
 <see langword="null" />, this property returns an empty string.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.DataBoundLiteralControl">
      <summary>
        <para>Creates a control for HTML text to allow the handling of &lt;%# … %&gt; data-binding expressions that
 are processed by the server. It persists the value of its <see cref="P:System.Web.UI.DataBoundLiteralControl.Text" />
 property to view state. This class cannot be inherited. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.DataBoundLiteralControl.Text">
      <summary>
        <para> Gets the text content of the <see cref="T:System.Web.UI.DataBoundLiteralControl" /> object. This is
 a read-only property.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.DesignTimeParseData.#ctor(System.ComponentModel.Design.IDesignerHost,System.String)">
    </member>
    <member name="P:System.Web.UI.DesignTimeParseData.DataBindingHandler">
    </member>
    <member name="P:System.Web.UI.DesignTimeParseData.DesignerHost">
    </member>
    <member name="P:System.Web.UI.DesignTimeParseData.DocumentUrl">
    </member>
    <member name="P:System.Web.UI.DesignTimeParseData.ParseText">
    </member>
    <member name="M:System.Web.UI.DesignTimeTemplateParser.ParseControl(System.Web.UI.DesignTimeParseData)">
    </member>
    <member name="M:System.Web.UI.DesignTimeTemplateParser.ParseTemplate(System.Web.UI.DesignTimeParseData)">
    </member>
    <member name="T:System.Web.UI.ConstructorNeedsTagAttribute">
      <summary>
        <para> Specifies that a server control needs a
 tag name in its constructor.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ConstructorNeedsTagAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ConstructorNeedsTagAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ConstructorNeedsTagAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ConstructorNeedsTagAttribute" /> class.</para>
      </summary>
      <param name="needsTag">
        <see langword="true" /> to add a tag to a control; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Web.UI.ConstructorNeedsTagAttribute.NeedsTag">
      <summary>
        <para>Indicates whether a control needs a tag name in its contstructor. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.EmptyControlCollection">
      <summary>
        <para>Provides standard support for a <see cref="T:System.Web.UI.ControlCollection" /> that is
 always empty.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.EmptyControlCollection.#ctor(System.Web.UI.Control)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.EmptyControlCollection" /> class.</para>
      </summary>
      <param name="owner">The <see cref="T:System.Web.UI.Control" /> which owns this collection as its collection of child controls</param>
    </member>
    <member name="M:System.Web.UI.EmptyControlCollection.Add(System.Web.UI.Control)">
      <summary>
        <para>Denies the addition of the specified <see cref="T:System.Web.UI.Control" /> to
 the collection.</para>
      </summary>
      <param name="child">The <see cref="T:System.Web.UI.Control" /> to be added. This parameter is always ignored.</param>
    </member>
    <member name="M:System.Web.UI.EmptyControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
      <summary>
        <para>Denies the addition of the specified <see cref="T:System.Web.UI.Control" /> to
 the collection, at the specified index position.</para>
      </summary>
      <param name="index">The index at which to add the <see cref="T:System.Web.UI.Control" />. This parameter is always ignored.</param>
      <param name=" child">The <see cref="T:System.Web.UI.Control" /> to be added. This parameter is always ignored.</param>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlForm">
      <summary>
        <para> Provides programmatic access to the HTML
 <see langword="&lt;form&gt;" />
 element on the server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlContainerControl">
      <summary>
        <para> Defines the methods,
 properties, and events
 available to all HTML server controls that must have a
 closing tag.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlControl">
      <summary>
        <para> Defines the methods, properties, and events
 common to all HTML server controls in the Web Forms page framework.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.IAttributeAccessor">
      <summary>
        <para> 
      Defines methods used
      by ASP.NET server controls to provide programmatic access to any
      attribute declared in the opening tag of a server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.IAttributeAccessor.GetAttribute(System.String)">
      <summary>
        <para>When implemented by a class, retrieves the specified attribute property from the server control.</para>
      </summary>
      <param name="key">A <see cref="T:System.String" /> object that represents the name of the server control attribute. </param>
      <returns>
        <para>The value of the specified attribute.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.IAttributeAccessor.SetAttribute(System.String,System.String)">
      <summary>
        <para> When implemented by a class, designates an
      attribute and its value to assign to the ASP.NET server control.</para>
      </summary>
      <param name="key">The name of the attribute to be set.</param>
      <param name=" value">The value assigned to the attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlControl" /> class using default
 values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlControl.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlControl" /> class using the
 specified tag.</para>
      </summary>
      <param name="tag">A string that specifies the tag name of the control. </param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlControl.Attributes">
      <summary>
        <para>Gets a collection of all attribute name and value pairs
      expressed on a server control tag within the .aspx file.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlControl.Style">
      <summary>
        <para> Gets a
      collection of all cascading style sheet
      (CSS) properties
      applied to a specified HTML server control in the .aspx
      file.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlControl.TagName">
      <summary>
        <para> Gets the element name of a tag that contains a
   <see langword="runat=server " />attribute and
      value pair.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlControl.Disabled">
      <summary>
        <para> Gets or sets
      a value indicating whether the HTML server
      control is disabled.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlContainerControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" /> class using
 default values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlContainerControl.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" /> class
 using the specified
 tag name.</para>
      </summary>
      <param name="tag">A string that specifies the tag name of the control.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlContainerControl.InnerHtml">
      <summary>
        <para> Gets or sets the
 content found between the opening and closing tags of the specified HTML server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlContainerControl.InnerText">
      <summary>
        <para> Gets or sets the text between the opening and closing tags
 of the specified HTML server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlForm.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlForm.Enctype">
      <summary>
        <para> Gets or
      sets the encoding type browsers
      use when posting the form's data to the server.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlForm.Method">
      <summary>
        <para> 
       Gets or sets a value that indicates how a browser posts
       form data to the server for processing.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlForm.Name">
      <summary>
        <para>Gets the identifier name for the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlForm.Target">
      <summary>
        <para> Gets or sets the frame or window to render the
      results of information posted to the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ITagNameToTypeMapper.GetControlType(System.String,System.Collections.IDictionary)">
      <summary>
        <para> Retrieves the .NET Framework type that processes
      the control declared in the .aspx file.</para>
      </summary>
      <param name="tagName">The element name of the control sent from the .aspx file.</param>
      <param name=" attribs">A collection of the attributes on the control in the .aspx file.</param>
      <returns>
        <para>The .NET Framework type that is assigned to the control.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.TagPrefixAttribute">
      <summary>
        <para> Defines the tag prefix used in a Web page to identify custom controls. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TagPrefixAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.TagPrefixAttribute" />
class.</para>
      </summary>
      <param name="namespaceName">A string that indentifies the custom control namespace.</param>
      <param name=" tagPrefix">A string that indentifies the custom control prefix.</param>
    </member>
    <member name="P:System.Web.UI.TagPrefixAttribute.NamespaceName">
      <summary>
        <para> Gets the namespace prefix for the specified control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.TagPrefixAttribute.TagPrefix">
      <summary>
        <para>Gets the tag prefix for the specified control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlTextWriter">
      <summary>
        <para>Writes a sequential series of HTML-specific characters
      and text on a Web Forms page. This class
      provides formatting capabilities that ASP.NET server controls use when rendering
      HTML content to clients.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.TagLeftChar">
      <summary>
        <para> Represents the opening angle-bracket
      (<see langword="&lt;" /> ) of an HTML tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.TagRightChar">
      <summary>
        <para> Represents the closing angle-bracket
      (<see langword="&gt;" /> ) of an HTML tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.SelfClosingChars">
      <summary>
        <para>Represents the self-closing back slash
      (<see langword="/" /> ) character of
      an HTML tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd">
      <summary>
        <para>Represents the closing back slash and right angle 
      bracket (<see langword="/&gt;" />
      ) of a self-closing HTML element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars">
      <summary>
        <para>Represents the left angle bracket and back slash 
      (<see langword="&lt;/" />
      ) of the closing tag of an HTML element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar">
      <summary>
        <para>Represents the double-quote (<see langword="&quot;" /> ) character.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar">
      <summary>
        <para>Represents a single quote (') character.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.SpaceChar">
      <summary>
        <para>Represents a space character.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.EqualsChar">
      <summary>
        <para>Represents the equal sign (<see langword="=" /> ) character.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.SlashChar">
      <summary>
        <para> Represents the backslash (<see langword="/" /> ) character.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString">
      <summary>
        <para> Represents an equals sign and a double
      quote character together in a <see cref="T:System.String" /> .</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.SemicolonChar">
      <summary>
        <para>Represents the semicolon (<see langword=";" /> ) character.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar">
      <summary>
        <para>Represents the colon character (<see langword=":" />) used 
   to set style attributes equal to values in the opening tag of an HTML element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriter.DefaultTabString">
      <summary>
        <para> Represents a single tab character.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Close">
      <summary>
        <para>Closes the current <see cref="T:System.Web.UI.HtmlTextWriter" /> and releases any system resources associated with it.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Flush">
      <summary>
        <para>Clears all buffers for the current <see cref="T:System.Web.UI.HtmlTextWriter" /> and causes any buffered data to be
   written to the text stream.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.OutputTabs">
      <summary>
        <para> Writes a series of blank characters that represent
      the tab spacing for a line of HTML characters.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.String)">
      <summary>
        <para>Writes the specified string to the text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> to be written to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)">
      <summary>
        <para>Writes the text representation of a
   <see langword="Boolean" /> value to the text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="value">The <see langword="Boolean" /> value to be written to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Char)">
      <summary>
        <para>Writes a unicode character to the text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="value">The unicode character to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])">
      <summary>
        <para> Writes a character array to the text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="buffer">The character array to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a subarray of characters to the text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="buffer">The array of characters from which the subarray is written to the text stream.</param>
      <param name=" index">The index location in the array where writing begins.</param>
      <param name=" count">The number of characters to be written to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Double)">
      <summary>
        <para>Writes the text representation of a double-precision floating point number to the HTML text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="value">The double-precision floating point number to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Single)">
      <summary>
        <para>Writes the text representation of a single-precision floating point
 number to the HTML text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="value">The single-precision floating point number to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)">
      <summary>
        <para>Writes the text representation of a 32-byte signed integer to the text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="value">The 32-byte signed integer to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)">
      <summary>
        <para>Writes the text representation of an 64-byte signed integer to the text stream, along with
 any specified tab spacing.</para>
      </summary>
      <param name="value">The 64-byte signed integer to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.Object)">
      <summary>
        <para>Writes the text representation of an <see cref="T:System.Object" /> to the text stream, along with any specified tab spacing.</para>
      </summary>
      <param name="value">The <see langword="Object" /> to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)">
      <summary>
        <para>Writes a tab string and a formatted string to 
 the HTML text stream, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" /> .</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name=" arg0">An object to write into the formatted string.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes a tab string and a formatted string to the HTML 
 text stream, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" /> .</para>
      </summary>
      <param name="format">
        <para>The formatting string.</para>
      </param>
      <param name=" arg0">An object to write into the formatted string.</param>
      <param name=" arg1">An object to write into the formatted string.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])">
      <summary>
        <para>Writes a tab string and a formatted string to the HTML 
 text stream, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" /> .</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name=" arg">The object array to write into the formatted string.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)">
      <summary>
        <para>Writes a <see cref="T:System.String" /> followed by a line terminator to an HTML text stream. This method ignores any specified tab spacing.</para>
      </summary>
      <param name="s">The <see langword="String" /> to write to the HTML text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)">
      <summary>
        <para>Writes a tab string and a <see cref="T:System.String" />, followed by a line terminator, to an HTML text stream.</para>
      </summary>
      <param name="s">The <see langword="String" /> to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine">
      <summary>
        <para>Writes a line terminator to the HTML text stream.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)">
      <summary>
        <para>Writes a tab string and the text representation of a <see langword="Boolean" />, followed by a line terminator, to the HTML text stream.</para>
      </summary>
      <param name="value">The <see langword="Boolean" /> to be written to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)">
      <summary>
        <para>Writes a tab string and a character, followed by a line terminator, to the
      HTML text stream.</para>
      </summary>
      <param name="value">The character to be written to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])">
      <summary>
        <para>Writes a tab string and a character array, followed by a line
      terminator, to the HTML text stream.</para>
      </summary>
      <param name="buffer">The character array to be written to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a tab string and a subarray of characters, followed by a line
      terminator, to the HTML text stream.</para>
      </summary>
      <param name="buffer">The character array from which to write to the text stream.</param>
      <param name=" index">The location in the character array where writing begins.</param>
      <param name=" count">The number of characters in the array to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)">
      <summary>
        <para> Writes a tab string and the
 text representation of an 8-byte floating-point value, followed by a line terminator,
 to the HTML text stream.</para>
      </summary>
      <param name="value">The 8-byte floating-point value to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)">
      <summary>
        <para>Writes a tab string and the text representation of a
      single-precision floating point number, followed by a line terminator, to the HTML text stream.</para>
      </summary>
      <param name="value">The single-precision floating point number to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)">
      <summary>
        <para>Writes a tab string and the text representation of a
      32-byte signed integer, followed by a line terminator, to the HTML text stream.</para>
      </summary>
      <param name="value">The 32-byte signed integer to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)">
      <summary>
        <para>Writes a tab string and the text representation of a
      64-byte signed integer, followed by a line terminator, to the HTML text stream.</para>
      </summary>
      <param name="value">The 64-byte signed integer to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)">
      <summary>
        <para>Writes any tab strings and the text representation of an
 <see cref="T:System.Object" />, followed
 by a line terminator, to the HTML text stream.</para>
      </summary>
      <param name="value">The <see langword="Object" /> to write to the text stream.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)">
      <summary>
        <para>Writes any tab strings and a formatted string, followed 
 by a line terminator, to the HTML text stream. The method uses the same
 semantics as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" />
 .</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name=" arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes any tab strings and a formatted string, followed 
 by a line terminator, to the HTML text stream. The method uses the same
 semantics as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" /> .</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name=" arg0">An object to write into the formatted string.</param>
      <param name=" arg1">An object to write into the formatted string.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])">
      <summary>
        <para>Writes any tab strings and a formatted string, followed 
 by a line terminator, to the HTML text stream. The method uses the same
 semantics as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" /> .</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name=" arg">The array of objects to write into the formatted string.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)">
      <summary>
        <para>Writes any tab strings and the text representation of a
      4-byte unsigned integer, followed by a line terminator, to the HTML text stream.</para>
      </summary>
      <param name="value">The 4-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Registers HTML tags, whether literals or
      dynamically generated, from the source file so that they can be properly
      rendered to the requesting client.</para>
      </summary>
      <param name="name">A <see cref="T:System.String" /> that contains the HTML tag.</param>
      <param name=" key">An <see cref="T:System.Web.UI.HtmlTextWriterTag" /> value that specifies which element is to be rendered.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)">
      <summary>
        <para>Registers HTML attributes, whether literals or
      dynamically generated, from the source file so that they can be properly
      rendered to the requesting client.</para>
      </summary>
      <param name="name">The HTML attribute to be registered.</param>
      <param name=" key">An <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> value that corresponds with the attribute name. </param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)">
      <summary>
        <para>Registers HTML style properties, whether literals or dynamically
      generated, from the source file so that they can be properly rendered to the
      requesting client.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> passed from the source file specifying the style name.</param>
      <param name=" key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> value that corresponds with the specified style.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> class that uses the <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
constant when indentation of a line is necessary.</para>
      </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> object to render the HMTL content.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> class with the line indentation as specified in
   the <paramref name="tabString" />
   parameter.</para>
      </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> object to render the HMTL content.</param>
      <param name=" tabString">A <see cref="T:System.String" /> that represents the number of spaces defined in the <see cref="P:System.Web.UI.HtmlTextWriter.Indent" /> property. </param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)">
      <summary>
        <para>Adds the specified HTML attribute and value to the
   <see langword="HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="name">The HTML attribute to add.</param>
      <param name=" value">The value to assign to the HTML attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)">
      <summary>
        <para>Adds the specified HTML attribute and value to the
   <see langword="HtmlTextWriter" /> output stream with a value
      that indicates if the attribute and value should be HTML encoded.</para>
      </summary>
      <param name="name">The HTML attribute to add.</param>
      <param name=" value">The value to assign to the HTML attribute.</param>
      <param name=" fEndode">
        <see langword="true" /> to HTML encode the attribute and its value; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)">
      <summary>
        <para>Adds the HTML attribute, associated with the
      specified <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> key and the specified value, to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="key">An <see langword="HtmlTextWriterAttribute" /> value that represents the HTML attribute.</param>
      <param name=" value">The value to assign to the HTML attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)">
      <summary>
        <para> Adds the HTML attribute associated with
      the <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> value specified by the
   <paramref name="key" /> parameter to the <see cref="T:System.Web.UI.HtmlTextWriter" /> 
   output stream. This method also adds the specified attribute value, and uses the
   value passed to the <paramref name="fEncode" /> parameter to determine whether the
   attribute and value should be
   HTML encoded.</para>
      </summary>
      <param name="key">An <see langword="HtmlTextWriterAttribute" /> value that represents the HTML attribute.</param>
      <param name=" value">The value to assign to the HTML attribute.</param>
      <param name=" fEncode">
        <see langword="true" /> to HTML encode the attribute and its value; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)">
      <summary>
        <para>Adds the specified HTML attribute and its value, along
      with an <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> value, to the
   <see langword="HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="name">The HTML attribute to add.</param>
      <param name=" value">The value to assign to the HTML attribute.</param>
      <param name=" key">An <see langword="HtmlTextWriterAttribute" /> value that represents the HTML attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)">
      <summary>
        <para>Adds the specified HTML style attribute and its value to
      the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="name">The HTML style attribute to add.</param>
      <param name=" value">The value assigned to the HTML style attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)">
      <summary>
        <para>Adds the HTML style attribute associated with
      the <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> value, specified by the <paramref name="key" /> parameter, and
      the attribute's value to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="key">An <see langword="HtmlTextWriterStyle" /> value that represents the HTML style attribute to add.</param>
      <param name=" value">The value to assign to the HTML attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)">
      <summary>
        <para>Adds the specified HTML style attribute, along with its
      value, to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="name">The HTML style attribute to add to the output stream.</param>
      <param name=" value">The value to assign to the HTML attribute.</param>
      <param name=" key">An <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> value that represents the HTML style attribute to add.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)">
      <summary>
        <para>HTML encodes the specified HTML attribute's value.</para>
      </summary>
      <param name="value">The attribute value to encode.</param>
      <param name=" fEncode">
        <see langword="true" /> to HTML encode the attribute value; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The HTML-encoded attribute value, <see langword="null" /> if
   the <paramref name="value" /> parameter is empty, or the unencoded attribute value if
<paramref name="fEncode" /> is <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)">
      <summary>
        <para>HTML encodes the specified HTML attribute's value.</para>
      </summary>
      <param name="attrKey">An <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> value representing the HTML attribute to which the <paramref name="value" /> parameter is assigned.</param>
      <param name=" value">The value assigned to the specified HTML attribute.</param>
      <returns>
        <para>The encoded attribute value.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)">
      <summary>
        <para>Performs minimal URL encoding by converting spaces passed
      in the <paramref name="url" /> parameter to <see langword="%20" /> .</para>
      </summary>
      <param name="url">The URL to be encoded.</param>
      <returns>
        <para> The encoded URL.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)">
      <summary>
        <para>Obtains the corresponding <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> enumeration value for the specified HTML attribute.</para>
      </summary>
      <param name="attrName">The HTML attribute to obtain the <see langword="HtmlTextWriterAttribute" /> value for.</param>
      <returns>
        <para>The <see langword="HtmlTextWriterAttribute" /> enumeration value for the
   specified HTML attribute, or <see langword="unkown" />
   if the attribute is
   not a member of the enumeration.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)">
      <summary>
        <para>Obtains the name of the HTML attribute associated with
      the specified <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> value.</para>
      </summary>
      <param name="attrKey">The <see langword="HtmlTextWriterAttribute" /> to obtain the HTML attribute name for.</param>
      <returns>
        <para>The name of the HTML attribute.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)">
      <summary>
        <para>Obtains the <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value for the specified HTML style.</para>
      </summary>
      <param name="styleName">The HTML style attribute to obtain the <see langword="HtmlTextWriterStyle" /> value for.</param>
      <returns>
        <para>The <see langword="HtmlTextWriterStyle" /> enumeration value, or
<see langword="HtmlTextWriterStyle.Unknown" /> if the HTML style is not a member of the enumeration.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)">
      <summary>
        <para>Obtains the HTML style attribute associated with the
      specified <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value.</para>
      </summary>
      <param name="styleKey">The <see langword="HtmlTextWriterStyle" /> value to obtain the HTML style attribute for.</param>
      <returns>
        <para>The HTML style attribute.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)">
      <summary>
        <para>Obtains the <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 
enumeration value associated with the specified HTML element.</para>
      </summary>
      <param name="tagName">The HTML element to obtain the <see langword="HtmlTextWriterTag" /> value for.</param>
      <returns>
        <para>The <see langword="HtmlTextWriterTag" /> value; if the 
<paramref name="tagName" /> parameter is not associated with a specific 
<see langword="HtmlTextWriterTag" /> value, 
<see langword="HtmlTextWriterTag.Unknown" />is returned.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Obtains the HTML element associated with the 
 specified <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value.</para>
      </summary>
      <param name="tagKey">The <see langword="HtmlTextWriterTag" /> value to obtain the HTML element for.</param>
      <returns>
        <para>The HTML element.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)">
      <summary>
        <para>Determines whether the specified HTML attribute is
      rendered during the next call to the <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" /> method.</para>
      </summary>
      <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associated with the HTML attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the HTML
   attribute is rendered during the next call to the
<see langword="RenderBeginTag" /> method;
   otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)">
      <summary>
        <para>Determines whether the specified HTML attribute and its value are 
      rendered during the next call to the <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" /> method.</para>
      </summary>
      <param name="key">
        <para>The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associated with the HTML attribute.</para>
      </param>
      <param name=" value">The value assigned to the HTML attribute.</param>
      <returns>
        <para>
          <see langword="true " />if the HTML attribute is rendered 
   during the next call to the <see langword="RenderBeginTag " />
   method; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)">
      <summary>
        <para>Determines whether the specified HTML style attribute is
      rendered during the next call to the <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" /> method.</para>
      </summary>
      <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> value associated with the HTML attribute. </param>
      <returns>
        <para>
          <see langword="true" /> if the HTML
   attribute is rendered during the next call to the
<see langword="RenderBeginTag" /> 
method; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)">
      <summary>
        <para>Determines whether the specified HTML style attribute
      and its value are rendered during the next call to the <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" /> method.</para>
      </summary>
      <param name="key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> value associated with the HTML attribute. </param>
      <param name=" value">The value assigned to the HTML style attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the HTML 
   attribute and its value are rendered during the next call to the
<see langword="RenderBeginTag" /> 
method; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)">
      <summary>
        <para>Determines whether the specified HTML attribute and its
      value will be rendered to the requesting page.</para>
      </summary>
      <param name="name">The HTML attribute to render.</param>
      <param name=" value">The value that is assinged to the HTML attribute.</param>
      <param name=" key">The <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> enumeration value associated with the HTML attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute will be rendered
   to the page; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)">
      <summary>
        <para>Determines whether the specified HTML style attribute
      and its value will be rendered to the requesting page.</para>
      </summary>
      <param name="name">The HTML style attribute to render.</param>
      <param name=" value">The value that is assinged to the HTML style attribute.</param>
      <param name=" key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value associated with the HTML style attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the HTML
   style attribute will be rendered to the page;
   otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Determines whether the specified HTML element will be
      rendered to the requesting page.</para>
      </summary>
      <param name="name">The HTML element to render.</param>
      <param name=" key">The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value associated with the HTML element.</param>
      <returns>
        <para>
          <see langword="true" /> if the HTML element will be
   rendered to the page; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.PopEndTag">
      <summary>
        <para>Removes an HTML element from the list of rendered elements.</para>
      </summary>
      <returns>
        <para>A list of the HTML elements that have been rendered.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)">
      <summary>
        <para>Saves the specifed HTML element for a later call to
      the <see cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      method.</para>
      </summary>
      <param name="endTag">The closing tag of the HTML element.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.FilterAttributes">
      <summary>
        <para>Filters all HTML attributes and style attributes by
      calling <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" qualify="true" /> and <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" qualify="true" /> on all properites of the page or ASP.NET server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)">
      <summary>
        <para>Writes the opening tag of the specified HTML element to
      the output stream.</para>
      </summary>
      <param name="tagName">The HTML element to render the opening tag for.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Writes the opening tag of the HTML element associated
      with the specified <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value to the output stream.</para>
      </summary>
      <param name="tagKey">An <see langword="HtmlTextWriterTag" /> value that defines the opening tag of the HTML element to render.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RenderEndTag">
      <summary>
        <para>Writes the end tag of an HTML element to
      the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag">
      <summary>
        <para>Writes any text or tab spacing that occurs before the
      opening tag of an HTML element to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <returns>
        <para>The text or tab spacing to write to the output stream. If not overridden,
      this method returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent">
      <summary>
        <para>Writes any text or spacing before the content and after the opening tag of
      an HTML element.</para>
      </summary>
      <returns>
        <para> The text or spacing to write prior to the content
      of the HTML element. If not overridden, this method returns
   <see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RenderAfterContent">
      <summary>
        <para>Writes any text or spacing that occurs after the content and before the closing tag of the
      HTML element to render to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <returns>
        <para> The spacing or text to write after the content of the HTML
      element. If not overridden, this method returns <see langword="null" /> . </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.RenderAfterTag">
      <summary>
        <para>Writes any spacing or text that occurs after an HTML
      element's closing tag.</para>
      </summary>
      <returns>
        <para>The spacing or text to write after the closing tag of
      the HTML element. If not overridden, this method returns <see langword="null" /> . </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)">
      <summary>
        <para>Writes the specified HTML attribute and value to
      the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="name">The HTML attribute to write to the output stream.</param>
      <param name=" value">The value assigned to the HTML attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)">
      <summary>
        <para>Writes the specified HTML attribute and value to the
   <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream and HTML encodes them if specified
      in the <paramref name="fEncode" /> parameter.</para>
      </summary>
      <param name="name">The HTML attribute to write to the output stream.</param>
      <param name=" value">The value assigned to the HTML attribute.</param>
      <param name=" fEncode">
        <see langword="true" /> to HTML encode the attribute and its assigned value; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)">
      <summary>
        <para>Writes any tab spacing and the opening tag of the
      specified HTML element to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="tagName">The HTML element to write the opening tag of.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)">
      <summary>
        <para>Writes any tab spacing and the opening tag of the
      specified HTML element to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="tagName">The HTML element to write.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)">
      <summary>
        <para>Writes any tab spacing and the closing tag of the
      specified HTML element.</para>
      </summary>
      <param name="tagName">The HTML element to write the closing tag for.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)">
      <summary>
        <para>Writes the specified HTML style attribute to
      the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="name">The HTML style attribute to write to the output stream.</param>
      <param name=" value">The value assigned to the HTML style attribute.</param>
    </member>
    <member name="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)">
      <summary>
        <para>Writes the specified HTML attribute and value to the
   <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream, and HTML encodes them if specified
      in the <paramref name="fEncode" /> parameter.</para>
      </summary>
      <param name="name">The HTML style attribute to write to the output stream.</param>
      <param name=" value">The value assigned to the HTML style attribute.</param>
      <param name=" fEncode">
        <see langword="true" /> to HTML encode the style attribute and its assigned value; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Web.UI.HtmlTextWriter.Encoding">
      <summary>
        <para>Gets the <see cref="T:System.Text.Encoding" /> that the <see cref="T:System.Web.UI.HtmlTextWriter" />
object uses to write content to the page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlTextWriter.NewLine">
      <summary>
        <para>Gets or sets the line terminator string used by the
      current <see cref="T:System.Web.UI.HtmlTextWriter" /> .</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlTextWriter.Indent">
      <summary>
        <para>Gets or sets the number of spaces to indent at the beginning of a line of HTML.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlTextWriter.InnerWriter">
      <summary>
        <para>Gets or sets the text writer that writes the inner content of
      the HTML element.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlTextWriter.TagKey">
      <summary>
        <para>Gets or sets the <see cref="T:System.Web.UI.HtmlTextWriterTag" />
value for the specified HTML element.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlTextWriter.TagName">
      <summary>
        <para> Gets or sets the tag name of the
      HTML element being rendered.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlTextWriterTag">
      <summary>
        <para>Specifies the HTML tags that can be passed to an <see cref="T:System.Web.UI.HtmlTextWriter" /> or <see cref="T:System.Web.UI.Html32TextWriter" />
object output stream.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Unknown">
      <summary>
        <para>The <see cref="T:System.String" /> passed as an HTML tag is not recognized.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.A">
      <summary>
        <para> Specifies the HTML <see langword="a" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Acronym">
      <summary>
        <para>Specifies the HTML <see langword="acronym" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Address">
      <summary>
        <para>Specifies the HTML <see langword="address" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Area">
      <summary>
        <para>Specifies the HTML <see langword="area" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.B">
      <summary>
        <para>Specifies the HTML <see langword="b" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Base">
      <summary>
        <para>Specifies the HTML <see langword="base" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Basefont">
      <summary>
        <para>Specifies the HTML <see langword="basefont" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Bdo">
      <summary>
        <para>Specifies the HTML <see langword="bdo" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Bgsound">
      <summary>
        <para>Specifies the HTML <see langword="bgsound" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Big">
      <summary>
        <para>Specifies the HTML <see langword="big" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Blockquote">
      <summary>
        <para>Specifies the HTML <see langword="blockquote" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Body">
      <summary>
        <para>Specifies the HTML <see langword="body" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Br">
      <summary>
        <para>Specifies the HTML <see langword="br" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Button">
      <summary>
        <para>Specifies the HTML <see langword="button" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Caption">
      <summary>
        <para>Specifies the HTML <see langword="caption" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Center">
      <summary>
        <para>Specifies the HTML <see langword="center" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Cite">
      <summary>
        <para>Specifies the HTML <see langword="cite" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Code">
      <summary>
        <para>Specifies the HTML <see langword="code" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Col">
      <summary>
        <para>Specifies the HTML <see langword="col" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Colgroup">
      <summary>
        <para>Specifies the HTML <see langword="colgroup" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Dd">
      <summary>
        <para>Specifies the HTML <see langword="dd" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Del">
      <summary>
        <para>Specifies the HTML <see langword="cel" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Dfn">
      <summary>
        <para>Specifies the HTML <see langword="dfn" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Dir">
      <summary>
        <para>Specifies the HTML <see langword="dir" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Div">
      <summary>
        <para>Specifies the HTML <see langword="div" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Dl">
      <summary>
        <para>Specifies the HTML <see langword="dl" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Dt">
      <summary>
        <para>Specifies the HTML <see langword="dt" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Em">
      <summary>
        <para>Specifies the HTML <see langword="em" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Embed">
      <summary>
        <para>Specifies the HTML <see langword="embed" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Fieldset">
      <summary>
        <para>Specifies the HTML <see langword="fieldset" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Font">
      <summary>
        <para>Specifies the HTML <see langword="font" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Form">
      <summary>
        <para>Specifies the HTML <see langword="form" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Frame">
      <summary>
        <para>Specifies the HTML <see langword="frame" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Frameset">
      <summary>
        <para>Specifies the HTML <see langword="frameset" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.H1">
      <summary>
        <para>Specifies the HTML <see langword="H1" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.H2">
      <summary>
        <para>Specifies the HTML <see langword="H2" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.H3">
      <summary>
        <para>Specifies the HTML <see langword="H3" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.H4">
      <summary>
        <para>Specifies the HTML <see langword="H4" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.H5">
      <summary>
        <para>Specifies the HTML <see langword="H5" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.H6">
      <summary>
        <para>Specifies the HTML <see langword="H6" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Head">
      <summary>
        <para>Specifies the HTML <see langword="head" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Hr">
      <summary>
        <para>Specifies the HTML <see langword="hr" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Html">
      <summary>
        <para>Specifies the HTML <see langword="html" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.I">
      <summary>
        <para>Specifies the HTML <see langword="i" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Iframe">
      <summary>
        <para>Specifies the HTML <see langword="iframe" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Img">
      <summary>
        <para>Specifies the HTML <see langword="img" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Input">
      <summary>
        <para>Specifies the HTML <see langword="input" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Ins">
      <summary>
        <para>Specifies the HTML <see langword="ins" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Isindex">
      <summary>
        <para>Specifies the HTML <see langword="isindex" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Kbd">
      <summary>
        <para>Specifies the HTML <see langword="kbd" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Label">
      <summary>
        <para>Specifies the HTML <see langword="label" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Legend">
      <summary>
        <para>Specifies the HTML <see langword="legend" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Li">
      <summary>
        <para>Specifies the HTML <see langword="li" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Link">
      <summary>
        <para>Specifies the HTML <see langword="link" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Map">
      <summary>
        <para>Specifies the HTML <see langword="map" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Marquee">
      <summary>
        <para>Specifies the HTML <see langword="marquee" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Menu">
      <summary>
        <para>Specifies the HTML <see langword="menu" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Meta">
      <summary>
        <para>Specifies the HTML <see langword="meta" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Nobr">
      <summary>
        <para>Specifies the HTML <see langword="nobr" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Noframes">
      <summary>
        <para>Specifies the HTML <see langword="noframes" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Noscript">
      <summary>
        <para>Specifies the HTML <see langword="noscript" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Object">
      <summary>
        <para>Specifies the HTML <see langword="object" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Ol">
      <summary>
        <para>Specifies the HTML <see langword="ol" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Option">
      <summary>
        <para>Specifies the HTML <see langword="option" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.P">
      <summary>
        <para>Specifies the HTML <see langword="p" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Param">
      <summary>
        <para>Specifies the HTML <see langword="param" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Pre">
      <summary>
        <para>Specifies the HTML <see langword="pre" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Q">
      <summary>
        <para>Specifies the HTML <see langword="q" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Rt">
      <summary>
        <para>Specifies the DHTML <see langword="rt" /> element, which specifies text for the 
<see langword="ruby" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Ruby">
      <summary>
        <para>Specifies the DHTML <see langword="ruby" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.S">
      <summary>
        <para>Specifies the HTML <see langword="s" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Samp">
      <summary>
        <para>Specifies the HTML <see langword="samp" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Script">
      <summary>
        <para>Specifies the HTML <see langword="script" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Select">
      <summary>
        <para>Specifies the HTML <see langword="select" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Small">
      <summary>
        <para>Specifies the HTML <see langword="small" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Span">
      <summary>
        <para>Specifies the HTML <see langword="span" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Strike">
      <summary>
        <para>Specifies the HTML <see langword="strike" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Strong">
      <summary>
        <para>Specifies the HTML <see langword="strong" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Style">
      <summary>
        <para>Specifies the HTML <see langword="style" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Sub">
      <summary>
        <para>Specifies the HTML <see langword="sub" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Sup">
      <summary>
        <para>Specifies the HTML <see langword="sup" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Table">
      <summary>
        <para>Specifies the HTML <see langword="table" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Tbody">
      <summary>
        <para>Specifies the HTML <see langword="tbody" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Td">
      <summary>
        <para>Specifies the HTML <see langword="td" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Textarea">
      <summary>
        <para>Specifies the HTML <see langword="textarea" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Tfoot">
      <summary>
        <para>Specifies the HTML <see langword="tfoot" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Th">
      <summary>
        <para>Specifies the HTML <see langword="th" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Thead">
      <summary>
        <para>Specifies the HTML <see langword="thead" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Title">
      <summary>
        <para>Specifies the HTML <see langword="title" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Tr">
      <summary>
        <para>Specifies the HTML <see langword="tr" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Tt">
      <summary>
        <para>Specifies the HTML <see langword="tt" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.U">
      <summary>
        <para>Specifies the HTML <see langword="u" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Ul">
      <summary>
        <para>Specifies the HTML <see langword="ul" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Var">
      <summary>
        <para>Specifies the HTML <see langword="var" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Wbr">
      <summary>
        <para>Specifies the HTML <see langword="wbr" /> element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterTag.Xml">
      <summary>
        <para>Specifies the HTML <see langword="xml" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlTextWriterAttribute">
      <summary>
        <para> Specifies the HTML attributes that an <see cref="T:System.Web.UI.HtmlTextWriter" /> 
or <see cref="T:System.Web.UI.Html32TextWriter" /> object writes to the opening tag of an HTML element when a Web
request is processed. </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Accesskey">
      <summary>
        <para>Specifies that the HTML <see langword="acesskey" /> attribute be written to the
   tag. </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Align">
      <summary>
        <para>Specifies that the HTML <see langword="align" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Alt">
      <summary>
        <para>Specifies that the HTML <see langword="alt" /> attribute be written to the tag. </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Background">
      <summary>
        <para>Specifies that the HTML <see langword="background" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Bgcolor">
      <summary>
        <para>Specifies that the HTML <see langword="bgcolor" /> attribute be
   written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Border">
      <summary>
        <para>Specifies that the HTML <see langword="border" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Bordercolor">
      <summary>
        <para>Specifies that the HTML
   <see langword="bordercolor" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Cellpadding">
      <summary>
        <para>Specifies that the HTML <see langword="cellpadding" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Cellspacing">
      <summary>
        <para>Specifies that the HTML <see langword="cellspacing" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Checked">
      <summary>
        <para>Specifies that the HTML <see langword="checked" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Class">
      <summary>
        <para>Specifies that the HTML <see langword="class" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Cols">
      <summary>
        <para>Specifies that the HTML <see langword="cols" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Colspan">
      <summary>
        <para>Specifies that the HTML <see langword="colspan" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Disabled">
      <summary>
        <para>Specifies that the HTML <see langword="disabled" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.For">
      <summary>
        <para>Specifies that the HTML <see langword="for" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Height">
      <summary>
        <para>Specifies that the HTML <see langword="height" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Href">
      <summary>
        <para>Specifies that the HTML <see langword="href" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Id">
      <summary>
        <para>Specifies that the HTML <see langword="id" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Maxlength">
      <summary>
        <para>Specifies that the HTML <see langword="maxlength" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Multiple">
      <summary>
        <para>Specifies that the HTML <see langword="multiple" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Name">
      <summary>
        <para>Specifies that the HTML <see langword="name" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Nowrap">
      <summary>
        <para>Specifies that the HTML <see langword="nowrap" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Onchange">
      <summary>
        <para>Specifies that the HTML <see langword="onchange" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Onclick">
      <summary>
        <para>Specifies that the HTML <see langword="onclick" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.ReadOnly">
      <summary>
        <para>Specifies that the HTML <see langword="readonly" /> attribute be written
   to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Rows">
      <summary>
        <para>Specifies that the HTML <see langword="rows" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Rowspan">
      <summary>
        <para>Specifies that the HTML <see langword="rowspan" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Rules">
      <summary>
        <para>Specifies that the HTML <see langword="rules" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Selected">
      <summary>
        <para>Specifies that the HTML <see langword="selected" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Size">
      <summary>
        <para>Specifies that the HTML <see langword="size" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Src">
      <summary>
        <para>Specifies that the HTML <see langword="src" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Style">
      <summary>
        <para>Specifies that the HTML <see langword="style" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Tabindex">
      <summary>
        <para>Specifies that the HTML <see langword="tabindex" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Target">
      <summary>
        <para>Specifies that the HTML<see langword=" target" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Title">
      <summary>
        <para>Specifies that the HTML <see langword="title" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Type">
      <summary>
        <para>Specifies that the HTML <see langword="type" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Valign">
      <summary>
        <para>Specifies that the HTML <see langword="valign" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Value">
      <summary>
        <para>Specifies that the HTML <see langword="value" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Width">
      <summary>
        <para>Specifies that the HTML <see langword="width" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterAttribute.Wrap">
      <summary>
        <para>Specifies that the HTML <see langword="wrap" /> attribute be written to the tag.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlTextWriterStyle">
      <summary>
        <para> Specifies the HTML styles available to
 an <see cref="T:System.Web.UI.HtmlTextWriter" /> or <see cref="T:System.Web.UI.Html32TextWriter" /> object output stream.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.BackgroundColor">
      <summary>
        <para>Specifies the HTML <see langword="backgroundcolor" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.BackgroundImage">
      <summary>
        <para>Specifies the HTML <see langword="backgroundimage" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.BorderCollapse">
      <summary>
        <para>Specifies the HTML <see langword="bordercollapse" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.BorderColor">
      <summary>
        <para>Specifies the HTML <see langword="bordercolor" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.BorderStyle">
      <summary>
        <para>Specifies the HTML <see langword="borderstyle" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.BorderWidth">
      <summary>
        <para>Specifies the HTML <see langword="borderwidth" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.Color">
      <summary>
        <para>Specifies the HTML <see langword="color" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.FontFamily">
      <summary>
        <para>Specifies the HTML <see langword="fontfamily" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.FontSize">
      <summary>
        <para>Specifies the HTML <see langword="fontsize" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.FontStyle">
      <summary>
        <para>Specifies the HTML <see langword="fontstyle" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.FontWeight">
      <summary>
        <para>Specifies the HTML <see langword="fontweight" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.Height">
      <summary>
        <para>Specifies the HTML <see langword="height" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.TextDecoration">
      <summary>
        <para>Specifies the HTML <see langword="textdecoration" /> style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.HtmlTextWriterStyle.Width">
      <summary>
        <para>Specifies the HTML <see langword="width" /> style.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Html32TextWriter">
      <summary>
        <para>Provides a text writer for ASP.NET pages and server controls that
      render content to HTML 3.2 clients.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.#ctor(System.IO.TextWriter)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Html32TextWriter" /> 
class that uses the <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> constant when indentation of a
line is necessary.</para>
      </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> object to render the HMTL content.</param>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Html32TextWriter" /> 
class using the specified tab spacing.</para>
      </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> object to render the HMTL content.</param>
      <param name=" tabString">A <see cref="T:System.String" /> that represents the number of spaces defined in the <see cref="P:System.Web.UI.HtmlTextWriter.Indent" /> property. </param>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)">
      <summary>
        <para>Determines whether the specified HTML style attribute
      and its value have been rendered on the requesting page.</para>
      </summary>
      <param name="name">The HTML style attribute to render to the client.</param>
      <param name=" value">The value associated with the HTML style attribute.</param>
      <param name=" key">The <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> enumeration value associated with the HTML style attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the HTML style attribute and
   its value have been rendered on the requesting page; otherwise,
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Determines whether the specified HTML element has been
      rendered to the requesting page.</para>
      </summary>
      <param name="name">The HTML element to render.</param>
      <param name=" key">The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value associated with the HTML element.</param>
      <returns>
        <para>
          <see langword="true" /> if the HTML element has been rendered to the requesting
   page; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Obtains the HTML element associated with the specified
   <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value.</para>
      </summary>
      <param name="tagKey">The <see langword="HtmlTextWriterTag" /> value to obtain the HTML element for.</param>
      <returns>
        <para>The HTML element.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Writes the opening tag of the specified HTML element to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <param name="tagKey">The <see cref="T:System.Web.UI.HtmlTextWriterTag" /> enumeration value that indicates the HTML element to write.</param>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.RenderBeforeTag">
      <summary>
        <para>Writes any text or tab spacing that occurs before the 
 opening tag of an HTML element to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <returns>
        <para>Any HTML font and spacing information to render before 
 the tag; if there is no such information to render, this method returns
 <see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.RenderBeforeContent">
      <summary>
        <para>Writes any tab spacing or font information that appears 
 before the content contained in an HTML element.</para>
      </summary>
      <returns>
        <para>The font information or spacing to write prior to the 
 content of the HTML element. If there is no such information to render, this
 method returns <see langword="null" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.RenderAfterContent">
      <summary>
        <para>Writes any text or spacing that occurs after the content
      of the HTML element to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream.</para>
      </summary>
      <returns>
        <para>The spacing or text to write after to the content of the
      HTML element. If there is no such information to render, this method
      returns <see langword="null" />
      . </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.RenderAfterTag">
      <summary>
        <para>Writes any spacing or text that occurs after an HTML 
 element's closing tag.</para>
      </summary>
      <returns>
        <para>The spacing or text to write after the closing tag of 
 the HTML element. If there is no such information to render, this method returns
 <see langword="null" /> 
 .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Html32TextWriter.RenderEndTag">
      <summary>
        <para>Writes the end tag of an HTML element to the <see cref="T:System.Web.UI.HtmlTextWriter" /> output stream, along
   with any font information that is associated with the element.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ImageClickEventArgs">
      <summary>
        <para>Provides data for any events that occur when a user
      clicks on a image-based ASP.NET server control, such as the <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage" /> or <see cref="T:System.Web.UI.WebControls.ImageButton" />
      server controls.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.ImageClickEventArgs.X">
      <summary>
        <para>An integer that represents the x-coordinate where a user clicked on an image-based ASP.NET
      server control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.ImageClickEventArgs.Y">
      <summary>
        <para>An integer that represents the y-coordinate where a user clicked on
      an image-based ASP.NET server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ImageClickEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ImageClickEventArgs" /> class.</para>
      </summary>
      <param name="x">The x-coordinate where the user clicked on an image-based ASP.NET server control.</param>
      <param name=" y">The y-coordinate where the user clicked on an image-based ASP.NET server control.</param>
    </member>
    <member name="T:System.Web.UI.ImageClickEventHandler">
      <summary>
        <para>Represents the method that will handle any events that are
      raised when a user clicks on an image-based ASP.NET server control.</para>
      </summary>
      <param name="sender">The server control that is the source of the event.</param>
      <param name=" e">An <see cref="T:System.Web.UI.ImageClickEventArgs" /> object that contains event data.</param>
    </member>
    <member name="T:System.Web.UI.INamingContainer">
      <summary>
        <para>Identifies a container control that creates a new ID
      namespace within a <see cref="T:System.Web.UI.Page" />
      object's control
      hierarchy. This is a marker interface only.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.IPostBackDataHandler">
      <summary>
        <para> Defines methods that ASP.NET server controls must implement to
      automatically load post back data.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
        <para> When implemented by a class, processes post back data for an ASP.NET server control. </para>
      </summary>
      <param name="postDataKey">The key identifier for the control.</param>
      <param name=" postCollection">The collection of all incoming name values.</param>
      <returns>
        <para>
          <see langword="true" /> if the server control's state changes as a result of the
   post back; otherwise <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <summary>
        <para>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the
      control has changed.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.IPostBackEventHandler">
      <summary>
        <para> Defines the method ASP.NET server controls must implement
      to handle post back events.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)">
      <summary>
        <para> When implemented by a class, enables a server control to process an event raised when a form is posted to the server.</para>
      </summary>
      <param name="eventArgument">A <see cref="T:System.String" /> that represents an optional event argument to be passed to the event handler.</param>
    </member>
    <member name="T:System.Web.UI.IStateManager">
      <summary>
        <para> Defines the properties and methods any class must implement to support view state management for a server
      control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.IStateManager.LoadViewState(System.Object)">
      <summary>
        <para>When implemented by a class, loads the server control's previously saved view state to the control.</para>
      </summary>
      <param name="state">An <see cref="T:System.Object" /> that contains the saved view state values for the control.</param>
    </member>
    <member name="M:System.Web.UI.IStateManager.SaveViewState">
      <summary>
        <para>When implemented by a class, saves the changes to a server control's view state to an
   <see cref="T:System.Object" /> .</para>
      </summary>
      <returns>
        <para>The <see langword="Object" /> that contains the view state changes. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.IStateManager.TrackViewState">
      <summary>
        <para> When implemented by a class, instructs the server control to track changes to its view state.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.IStateManager.IsTrackingViewState">
      <summary>
        <para>When implemented by a class, gets a value indicating whether a server control is tracking its view state changes.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ITemplate">
      <summary>
        <para> Defines the method to implement for populating an ASP.NET server control with child controls when using a control
      with inline templates when declared in an .aspx file.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ITemplate.InstantiateIn(System.Web.UI.Control)">
      <summary>
        <para>When implemented by a class, defines the <see cref="T:System.Web.UI.Control" /> object that child
   controls and templates belong to. These child controls
   are in turn defined within an inline template.</para>
      </summary>
      <param name="container">The <see langword="Control" /> object to contain the instantiated controls from the inline template.</param>
    </member>
    <member name="T:System.Web.UI.IValidator">
      <summary>
        <para> Defines the properties and methods that objects that participate in validation must implement.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.IValidator.Validate">
      <summary>
        <para> When implemented by a
 class, evaluates the condition it checks and upates the <see cref="P:System.Web.UI.IValidator.IsValid" />
 property.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.IValidator.IsValid">
      <summary>
        <para> When implemented by a class, gets or sets a value indicating whether the
      user-entered content in the specified control passes validation.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.IValidator.ErrorMessage">
      <summary>
        <para> When implemented by a class, gets or sets the error message text generated when the condition being validated
 fails.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.LiteralControl">
      <summary>
        <para> Represents HTML elements, text, and any other strings in 
 an ASP.NET page that do not require
 processing on the
 server. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.LiteralControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.LiteralControl" /> class that contains a literal string to be rendered on the requested ASP.NET page.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.LiteralControl.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.LiteralControl" /> class with
   the specified text.</para>
      </summary>
      <param name="text">The text to be rendered on the requested Web page.</param>
    </member>
    <member name="M:System.Web.UI.LiteralControl.CreateControlCollection">
      <summary>
        <para>Creates an <see cref="T:System.Web.UI.EmptyControlCollection" /> object for the current instance of the <see cref="T:System.Web.UI.LiteralControl" /> .</para>
      </summary>
      <returns>
        <para>The <see langword="EmptyControlCollection" /> object for
   the current control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.LiteralControl.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Writes the content of the <see cref="T:System.Web.UI.LiteralControl" />
object to the ASP.NET page.</para>
      </summary>
      <param name="output">An <see cref="T:System.Web.UI.HtmlTextWriter" /> object that renders the content of the <see langword="LiteralControl" /> object to the requesting client. </param>
    </member>
    <member name="P:System.Web.UI.LiteralControl.Text">
      <summary>
        <para>Gets or sets the text content of the <see cref="T:System.Web.UI.LiteralControl" /> object.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.LosFormatter.Deserialize(System.IO.Stream)">
      <summary>
        <para> Deserializes a LOS-formatted object from a <see cref="T:System.IO.Stream" /> object.</para>
      </summary>
      <param name="stream">The source of the object to be deserialized.</param>
      <returns>
        <para>Returns the deserialized object.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.LosFormatter.Deserialize(System.IO.TextReader)">
      <summary>
        <para>Deserializes a LOS-formatted object from a <see cref="T:System.IO.TextReader" /> object.</para>
      </summary>
      <param name="input">The source of the object to be deserialized.</param>
      <returns>
        <para>Returns the deserialized object.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.LosFormatter.Deserialize(System.String)">
      <summary>
        <para>Deserializes a LOS formatted object from a string.</para>
      </summary>
      <param name="input">The source of the object to be deserialized.</param>
      <returns>
        <para>Returns the deserialized object.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.LosFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>
        <para>Serializes the Web Forms view state value into 
       a <see cref="T:System.IO.Stream" /> object.</para>
      </summary>
      <param name="stream">The object to serialize into.</param>
      <param name=" value">The view state information to pass.</param>
    </member>
    <member name="M:System.Web.UI.LosFormatter.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
        <para>Serializes the view state value into a <see cref="T:System.IO.TextWriter" /> object.</para>
      </summary>
      <param name="output"> The object to serialize into.</param>
      <param name=" value">The view state information to pass.</param>
    </member>
    <member name="T:System.Web.UI.Pair">
      <summary>
        <para>Holds two objects that can be added together to an ASP.NET
      server control's view state.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Pair.First">
      <summary>
        <para>Represents the first object added to the server control's view state using the <see cref="T:System.Web.UI.Pair" /> class.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Pair.Second">
      <summary>
        <para>Represents the second object added to the server control's view state using
      the <see cref="T:System.Web.UI.Pair" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Pair.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Pair" /> class.</para>
      </summary>
      <returns>
        <para>The objects inserted in the server control's view state.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Pair.#ctor(System.Object,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Pair" /> class 
   containing the specifed objects.</para>
      </summary>
      <param name="x">The first object to add to view state.</param>
      <param name=" y">The second object to add to view state.</param>
      <returns>
        <para>The objects to be added to view state.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Triplet">
      <summary>
        <para>Holds three objects that can be added together to an
      ASP.NET server control's view state.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Triplet.First">
      <summary>
        <para>Represents the first object added to the server control's view state using the <see cref="T:System.Web.UI.Triplet" /> class.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Triplet.Second">
      <summary>
        <para>Represents the second object added to the server control's view state using the <see cref="T:System.Web.UI.Triplet" /> class.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Triplet.Third">
      <summary>
        <para>Represents the third object added to the server control's view state using the <see cref="T:System.Web.UI.Triplet" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Triplet.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Triplet" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Triplet.#ctor(System.Object,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Triplet" /> class that
   contains two objects.</para>
      </summary>
      <param name="x">The first object to add to view state.</param>
      <param name=" y">The second object to add to view state.</param>
    </member>
    <member name="M:System.Web.UI.Triplet.#ctor(System.Object,System.Object,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Triplet" /> class 
   that contains three objects.</para>
      </summary>
      <param name="x">The first object to add to view state.</param>
      <param name=" y">The second object to add to view state.</param>
      <param name=" z">The third object to add to view state.</param>
    </member>
    <member name="T:System.Web.UI.Page">
      <summary>
        <para> Represents an .aspx file requested from a server
      that hosts an ASP.NET Web
      application.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.TemplateControl">
      <summary>
        <para>Provides the <see cref="T:System.Web.UI.Page" /> class and the <see cref="T:System.Web.UI.UserControl" /> class with a base set of functionality.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.TemplateControl" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateControl.Construct">
      <summary>
        <para> 
 Performs construction time logic.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateControl.OnCommitTransaction(System.EventArgs)">
      <summary>
        <para>Raises the <see langword="CommitTransaction" />
event.</para>
      </summary>
      <param name="e">An <see langword="EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.TemplateControl.OnAbortTransaction(System.EventArgs)">
      <summary>
        <para>Raises the <see langword="AbortTransaction" /> event.</para>
      </summary>
      <param name="e">An <see langword="EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.TemplateControl.OnError(System.EventArgs)">
      <summary>
        <para>Raises the <see langword="Error" /> event.
 </para>
      </summary>
      <param name="e">An <see langword="EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.TemplateControl.LoadControl(System.String)">
      <summary>
        <para>Obtains a <see cref="T:System.Web.UI.UserControl" /> object from a user control file.</para>
      </summary>
      <param name="virtualPath">The virtual path to a user control file.</param>
      <returns>
        <para> Returns the specified <see langword="UserControl" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.TemplateControl.LoadTemplate(System.String)">
      <summary>
        <para> Obtains an instance of the <see langword="ITemplate" /> interface from an
 external file.
 </para>
      </summary>
      <param name="virtualPath">The virtual path to a user control file. </param>
      <returns>
        <para> An instance of the specified template.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.TemplateControl.ParseControl(System.String)">
      <summary>
        <para>Parses an input string into a <see cref="T:System.Web.UI.Control" /> on the
 Web Forms page or user control. <see langword=" " /></para>
      </summary>
      <param name="content">A <see cref="T:System.String" /> that contains a user control.</param>
      <returns>
        <para>Returns the parsed <see cref="T:System.Web.UI.Control" /> .</para>
      </returns>
    </member>
    <member name="E:System.Web.UI.TemplateControl.CommitTransaction">
      <summary>
        <para> Occurs when a transaction completes.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.TemplateControl.AbortTransaction">
      <summary>
        <para>Occurs when a user aborts a transaction.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.TemplateControl.Error">
      <summary>
        <para>Occurs when an unhandled exception is thrown.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Page.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Page" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Page.CreateHtmlTextWriter(System.IO.TextWriter)">
      <summary>
        <para>Creates an <see cref="T:System.Web.UI.HtmlTextWriter" />
object to render the page's content.</para>
      </summary>
      <param name="tw">The text writer to create.</param>
      <returns>
        <para>The specified <see cref="T:System.Web.UI.HtmlTextWriter" /> or <see cref="T:System.Web.UI.Html32TextWriter" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.GetTypeHashCode">
      <summary>
        <para>Retrieves a hash code that is generated by <see langword="Page" /> objects that are generated at run time. This 
 hash code is unique to the <see langword="Page" />
 object's control
 hierarchy.</para>
      </summary>
      <returns>
        <para>The hash code generated at run time. The default is 0.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.DesignerInitialize">
      <summary>
        <para>Performs any initialization of the instance of
      the <see cref="T:System.Web.UI.Page" /> class that is required
      by RAD designers. This method is used only at design time.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Page.DeterminePostBackMode">
      <summary>
        <para>Determines the type of request made for the
   <see langword="Page" />
   class.</para>
      </summary>
      <returns>
        <para>If the post back used the <see langword="POST" /> method, the form
   information is returned from the <see langword="Context" /> object. If the postback used the
<see langword="GET" />
method,
the query string information is returned. If the page is being requested
for the first time, <see langword="null" />is returned.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.LoadPageStateFromPersistenceMedium">
      <summary>
        <para>Loads any saved view-state information to
      the <see cref="T:System.Web.UI.Page" /> object. Override this method if you want to load
      the <see langword="Page" /> view-state information in anything other than a hidden field.</para>
      </summary>
      <returns>
        <para>The saved view state.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control)">
      <summary>
        <para>Obtains a reference to a client-side script function that causes, when invoked, the
      server to post back to the page.</para>
      </summary>
      <param name="control">The server control to process the post back on the server.</param>
      <returns>
        <para>The text of the client-side function call that can be inserted in a client-side event handler.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control,System.String)">
      <summary>
        <para>Obtains a reference to a client-side script function that causes, when
      invoked, the server to post back to the page. This method also passes a parameter to the server control that performs the post-back processing on the
      server.</para>
      </summary>
      <param name="control">The server control to process the post back.</param>
      <param name=" argument">The parameter passed to the server control.</param>
      <returns>
        <para> The text of the
      client-side function call that can be inserted into a client-side event
      handler. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.GetPostBackClientEvent(System.Web.UI.Control,System.String)">
      <summary>
        <para>Obtains a reference to a client-side script function
 that causes, when invoked, a server postback to the form.</para>
      </summary>
      <param name="control">The server control that receives the client event postback.</param>
      <param name=" argument">A <see cref="T:System.String" /> argument that is passed to the <see cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" qualify="true" /> method.</param>
      <returns>
        <para>The <see langword="String" /> that represents the client event.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
      <summary>
        <para>Appends <see langword="javascript:" /> to the beginning of
   the return from a <see cref="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control)" />
   call to allow hyperlink post-back processing on the server.</para>
      </summary>
      <param name="control">The server control to process the postback.</param>
      <param name=" argument">The parameter passed to the server control.</param>
      <returns>
        <para> The name of the client-side function and the 
   <see langword="ID" /> property of the server control
      that processed the function and argument passed to the control. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)">
      <summary>
        <para> Declares a value that is declared as an
      ECMAScript array declaration when the page renders.</para>
      </summary>
      <param name="arrayName">The name of the array in which to declare the value.</param>
      <param name=" arrayValue">The value to place in the array.</param>
    </member>
    <member name="M:System.Web.UI.Page.RegisterHiddenField(System.String,System.String)">
      <summary>
        <para> Allows server controls to automatically register a
      hidden field on the form. The field will be sent to the <see langword="Page" />
      when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />
      server control is rendered.
      </para>
      </summary>
      <param name="hiddenFieldName">The unique name of the hidden field to be rendered. </param>
      <param name=" hiddenFieldInitialValue">The value to be emitted in the hidden form. </param>
    </member>
    <member name="M:System.Web.UI.Page.IsStartupScriptRegistered(System.String)">
      <summary>
        <para>Determines if the client startup script is registered
      with the <see cref="T:System.Web.UI.Page" />
      object.</para>
      </summary>
      <param name="key">The string key of the startup script to search for.</param>
      <returns>
        <para>
          <see langword="true" /> if the startup script is
   registered; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.IsClientScriptBlockRegistered(System.String)">
      <summary>
        <para>Determines if the client script block is registered with the page.</para>
      </summary>
      <param name="key">The string key of the client script to search for.</param>
      <returns>
        <para>Returns <see langword="true" /> if the script block is registered; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.RegisterClientScriptBlock(System.String,System.String)">
      <summary>
        <para> Allows ASP.NET server controls to emit client-side script
      blocks in the <see cref="T:System.Web.UI.Page" />
      .</para>
      </summary>
      <param name=" key">Unique key that identifies a script block.</param>
      <param name="script">Content of script that is sent to the client.</param>
    </member>
    <member name="M:System.Web.UI.Page.RegisterStartupScript(System.String,System.String)">
      <summary>
        <para> Allows ASP.NET server controls to emit client-side script
      blocks in the <see cref="T:System.Web.UI.Page" />
      .
      </para>
      </summary>
      <param name=" key">Unique key that identifies a script block. </param>
      <param name="script">Content of script that will be sent to the client. </param>
    </member>
    <member name="M:System.Web.UI.Page.RegisterOnSubmitStatement(System.String,System.String)">
      <summary>
        <para> Allows a page to access the client
   <see langword="OnSubmit" /> event.
      The script should be a function call to client code registered elsewhere.</para>
      </summary>
      <param name=" key">Unique key that identifies a script block.</param>
      <param name="script">The client-side script to be sent to the client.</param>
    </member>
    <member name="M:System.Web.UI.Page.RegisterRequiresPostBack(System.Web.UI.Control)">
      <summary>
        <para>Registers a control as one that requires post-back handling.</para>
      </summary>
      <param name="control">The control to be registered.</param>
    </member>
    <member name="M:System.Web.UI.Page.RaisePostBackEvent(System.Web.UI.IPostBackEventHandler,System.String)">
      <summary>
        <para>Notifies the server control that caused the postback that it should handle an incoming
      post back event.</para>
      </summary>
      <param name="sourceControl">The ASP.NET server control that caused the postback. This control must implement the <see langword="IPostBackEventHandler" /> interface.</param>
      <param name=" eventArgument">The post-back argument.</param>
    </member>
    <member name="M:System.Web.UI.Page.RegisterRequiresRaiseEvent(System.Web.UI.IPostBackEventHandler)">
      <summary>
        <para>Registers an ASP.NET server control as requiring an
      event to be raised when the control is processed on the
   <see langword="Page" />
   .</para>
      </summary>
      <param name="control">The control to register.</param>
    </member>
    <member name="M:System.Web.UI.Page.MapPath(System.String)">
      <summary>
        <para>Retrieves the physical path that a virtual path, either absolute or relative, maps to.</para>
      </summary>
      <param name="virtualPath">A <see cref="T:System.String" /> that represents the virtual path.</param>
      <returns>
        <para>The physical path associated with the virtual path.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Page.RegisterViewStateHandler">
      <summary>
        <para> Causes page view state to be persisted, if called.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Page.SavePageStateToPersistenceMedium(System.Object)">
      <summary>
        <para> Saves any view-state information for the page.</para>
      </summary>
      <param name="viewState">An <see cref="T:System.Object" /> in which to store the view-state information.</param>
    </member>
    <member name="M:System.Web.UI.Page.Validate">
      <summary>
        <para> Instructs any validation controls included on
      the page to validate their assigned information.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Page.VerifyRenderingInServerForm(System.Web.UI.Control)">
      <summary>
        <para>Confirms that an <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> control is rendered for
   the specified ASP.NET server control at run time.</para>
      </summary>
      <param name="control">The ASP.NET server control that is required to be in the <see langword="HtmlForm" /> control.</param>
    </member>
    <member name="P:System.Web.UI.Page.Context">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpContext" />
object associated with the page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Application">
      <summary>
        <para>Gets the <see langword="Application" /> object for the current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.ClientTarget">
      <summary>
        <para> Gets or sets a value that allows you to override automatic
      detection of browser capabilities and
      to specify how a page renders
      for particular browser clients.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.ErrorPage">
      <summary>
        <para> Gets or sets the error page to which the requesting browser is
      redirected in the event of an unhandled page exception.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Trace">
      <summary>
        <para>Gets the <see cref="T:System.Web.TraceContext" /> object for the current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Request">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpRequest" />
object for the requested page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Response">
      <summary>
        <para>Gets the <see cref="T:System.Web.HttpResponse" /><see langword=" " />object associated with the <see cref="T:System.Web.UI.Page" />
. This object allows you to send HTTP
response data to a client and contains information about that response.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Server">
      <summary>
        <para>Gets the <see langword="Server" /> object, which is an
   instance of the <see cref="T:System.Web.HttpServerUtility" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Cache">
      <summary>
        <para>Gets the <see cref="T:System.Web.Caching.Cache" /> object associated with the
   application in which the page resides.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Session">
      <summary>
        <para>Gets the current <see langword="Session" />
object provided by ASP.NET.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.User">
      <summary>
        <para>Gets information about the user making the page request. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.IsPostBack">
      <summary>
        <para>Gets a value indicating whether the page is being loaded in response to a
      client postback, or if it is being loaded and accessed for the first time.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.EnableViewState">
      <summary>
        <para>Gets or sets a value indicating whether the page
 maintains its view state, and the view state of any server controls it contains,
 when the current page request ends.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.ID">
      <summary>
        <para>Gets or sets an identifier for a particular instance of
 the <see cref="T:System.Web.UI.Page" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Visible">
      <summary>
        <para> Gets or sets a value indicating whether
      the <see cref="T:System.Web.UI.Page" />
      object is rendered.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.IsValid">
      <summary>
        <para> Gets a value indicating whether page validation succeeded.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.Validators">
      <summary>
        <para>Gets a collection of all validation controls contained on the requested page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Page.SmartNavigation">
      <summary>
        <para>Gets or sets a value indicating whether smart navigation is enabled.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.OutputCacheLocation">
      <summary>
        <para> Specifies the valid values for the location of the output
      cache.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.OutputCacheLocation.Any">
      <summary>
        <para>The output cache can be located on the browser client (where the request originated), on a proxy server (or any other
      server) participating in the request, or on the server where the request was
      processed.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.OutputCacheLocation.Client">
      <summary>
        <para>The output cache is located on the browser client where the request originated. </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.OutputCacheLocation.Downstream">
      <summary>
        <para>The output cache can be stored in any HTTP 1.1
      cache-capable devices other than the origin server. This includes proxy servers and the client that
      made the request.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.OutputCacheLocation.Server">
      <summary>
        <para>The output cache is located on the Web server where the request was
 processed.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.OutputCacheLocation.None">
      <summary>
        <para> The output cache is disabled for the requested page.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.PageParser.GetCompiledPageInstance(System.String,System.String,System.Web.HttpContext)">
      <summary>
        <para>Compiles a requested .aspx file into a <see cref="T:System.Web.UI.Page" /> object. </para>
      </summary>
      <param name="virtualPath">The virtual path to the requested file.</param>
      <param name=" inputFile">The name of the requested file.</param>
      <param name=" context">The <see cref="T:System.Web.HttpContext" /> object that contains information about the current Web request.</param>
      <returns>
        <para>Returns the compiled instance of the requested <see cref="T:System.Web.UI.Page" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.PageParser.CompileIntoType">
      <summary>
        <para>Compiles the requested page into the specified type.</para>
      </summary>
      <returns>
        <para>Returns the compiled page.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.PartialCachingAttribute">
      <summary>
        <para>Defines the metadata attribute that Web Forms user controls use to
      indicate how their output is cached. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.PartialCachingAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.PartialCachingAttribute" /> class with the
 specified duration assigned to the user control to be cached.</para>
      </summary>
      <param name="duration">An integer that represents the number of seconds a user control is to remain in the output cache.</param>
    </member>
    <member name="M:System.Web.UI.PartialCachingAttribute.#ctor(System.Int32,System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.PartialCachingAttribute" /> class with
   the <paramref name="duration" />
   , <paramref name="varyByParams," /><paramref name="varyByControls" />, and <paramref name="varyByCustom" /> parameter values specified
   for the user control to be cached.</para>
      </summary>
      <param name="duration"> The time, in seconds, that the user control is cached.</param>
      <param name=" varyByParams">A semicolon-separated list of strings used to vary the output cache. By default, these strings correspond to a query string value sent with <see langword="GET" /> method attributes, or a parameter sent using the <see langword="POST" /> method. When this attribute is set to multiple parameters, the output cache contains a different version of the requested document for each specified parameter. Possible values include <see langword="none" />, <see langword="*" />, and any valid query string or <see langword="POST" /> parameter name.</param>
      <param name=" varyByControls">A semicolon-separated list of strings used to vary the output cache. These strings represent fully qualified names of properties on a user control. When this attribute is used for a user control, the user control output is varied to the cache for each specified user control property. </param>
      <param name=" varyByCustom">Any text that represents custom output caching requirements. If this attribute is given a value of <see langword="browser" />, the cache is varied by browser name and major version information. If a custom string is entered, you must override the <see cref="M:System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)" qualify="true" /> method in your application's Global.asax file.</param>
    </member>
    <member name="P:System.Web.UI.PartialCachingAttribute.Duration">
      <summary>
        <para>Gets the amount of time that cached items are to remain in
 the output cache.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.PartialCachingAttribute.VaryByParams">
      <summary>
        <para>Gets a list of query string or form POST paramaters that the
 output cache will use to vary the user control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.PartialCachingAttribute.VaryByControls">
      <summary>
        <para> Gets a list of user control properties
      that the output cache uses to vary the user control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.PartialCachingAttribute.VaryByCustom">
      <summary>
        <para> Gets a list of custom strings that the output cache wil
 use to vary the user control. .</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.BasePartialCachingControl">
      <summary>
        <para> Provides the base functionality for
      the <see cref="T:System.Web.UI.StaticPartialCachingControl" /> and the <see cref="T:System.Web.UI.PartialCachingControl" />
      classes.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.BasePartialCachingControl.Dependency">
      <summary>
        <para>Gets or sets an instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class associated with the cached user control output.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.StaticPartialCachingControl">
      <summary>
        <para>Represents an instance of the <see cref="T:System.Web.UI.UserControl" /> class when it has been specifed for output
   caching and included declaratively in
   a page or another user control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.PartialCachingControl">
      <summary>
        <para> Created when a user control
      (.ascx file) is specified for output caching, using either the <see topic="cpconoutputcache" /> directive or
      the <see cref="T:System.Web.UI.PartialCachingAttribute" /> , and is added to
      a page programmatically.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.PartialCachingControl.CachedControl">
      <summary>
        <para>Gets a reference to the user control that is to be cached.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ParseChildrenAttribute">
      <summary>
        <para>Defines a metadata attribute that you can use when developing ASP.NET server controls. Use it to indicate
      whether XML elements nested within the server control's tags, when the control is used declaratively on a page, should be treated
      as properties or as child controls. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.ParseChildrenAttribute.Default">
      <summary>
        <para>Defines the default value for the <see cref="T:System.Web.UI.ParseChildrenAttribute" /> class. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ParseChildrenAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ParseChildrenAttribute" />

class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ParseChildrenAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ParseChildrenAttribute" /> class using the <see cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" />
property to determine whether child XML elements of
a server control are parsed as though they were properties of the control.</para>
      </summary>
      <param name="childrenAsProperties">
        <see langword="true" /> if the child XML elements are parsed as properties of the server control; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.ParseChildrenAttribute.#ctor(System.Boolean,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ParseChildrenAttribute" /> class using the
<paramref name="childrenAsProperties" /> 
and <paramref name="defaultProperty" />
parameters.</para>
      </summary>
      <param name="childrenAsProperties">
        <see langword="true" /> if the child XML elements are parsed as properties of the server control; otherwise, <see langword="false" />.</param>
      <param name=" defaultProperty">A string that defines a collection property of the server control into which child controls are parsed by default.</param>
    </member>
    <member name="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties">
      <summary>
        <para> Gets or sets a value indicating whether child XML elements are parsed as though they are properties
      of a server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ParseChildrenAttribute.DefaultProperty">
      <summary>
        <para> Gets or sets the default property for
      the parent server control into which child elements are parsed.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.PersistChildrenAttribute">
      <summary>
        <para>Defines a metadata attribute used by ASP.NET server controls. The attribute indicates
 whether, at design time, the child controls of an ASP.NET server control
 should be persisted as nested inner controls. This class cannot be
 inherited.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistChildrenAttribute.Yes">
      <summary>
        <para> Indicates that the child controls of an ASP.NET server control
 should persist as nested controls at design-time. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistChildrenAttribute.No">
      <summary>
        <para> Indicates that the child controls of an ASP.NET server control should
 not persist as nested controls at design-time. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistChildrenAttribute.Default">
      <summary>
        <para> Indicates the
 default attribute state. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.PersistChildrenAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.PersistChildrenAttribute" /> class.</para>
      </summary>
      <param name="persist">
        <see langword="true" /> to persist the child controls as server control tags; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Web.UI.PersistChildrenAttribute.Persist">
      <summary>
        <para> Gets a value that indicates whether
      the child controls of an ASP.NET server control are persisted as nested inner
      controls at design-time.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.PersistenceMode">
      <summary>
        <para> Specifies how an ASP.NET server control property or
      event is persisted declaratively in an .aspx or .ascx file.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceMode.Attribute">
      <summary>
        <para> Specifies that the property or event persists as an attribute.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceMode.InnerProperty">
      <summary>
        <para> Specifies that the property persists in the ASP.NET 
      server control as a nested tag. This is commonly used for complex objects; those that have persistable properties of their own.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceMode.InnerDefaultProperty">
      <summary>
        <para> Specifies that the property
      persists in the ASP.NET server control as a inner text. Also indicates that this property is defined as the element's default property. Only one property can be designated the default property.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceMode.EncodedInnerDefaultProperty">
      <summary>
        <para> Specifies that the property persists as the only inner text of the ASP.NET server control. The property value is HTML encoded. Only a string can be given this designation.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.PersistenceModeAttribute">
      <summary>
        <para> Defines the metadata attribute that specifies how an ASP.NET server control property or event is persisted to an ASP.NET page. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceModeAttribute.Attribute">
      <summary>
        <para> Specifies that the property or event persists in the opening tag of the server control as an attribute. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceModeAttribute.InnerProperty">
      <summary>
        <para> Specifies that the property persists as a nested tag within the opening and closing tags of the server control. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceModeAttribute.InnerDefaultProperty">
      <summary>
        <para> Specifies that a property persists as the only inner content of the ASP.NET server control. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceModeAttribute.EncodedInnerDefaultProperty">
      <summary>
        <para>Specifies that a property is HTML-encoded and persists
 as the only inner content of the ASP.NET server control. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.PersistenceModeAttribute.Default">
      <summary>
        <para>Specifies the default type for the <see cref="T:System.Web.UI.PersistenceModeAttribute" /> class. The default is 
<see langword="PersistenceMode.Attribute" /> . This field is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.PersistenceModeAttribute.Mode">
      <summary>
        <para>Gets the current value of the <see cref="T:System.Web.UI.PersistenceMode" /> enumeration.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.PropertyConverter.EnumFromString(System.Type,System.String)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.PropertyConverter.EnumToString(System.Type,System.Object)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.PropertyConverter.ObjectFromString(System.Type,System.Reflection.MemberInfo,System.String)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateBuilder.NeedsTagInnerText">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateBuilder.SetTagInnerText(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateBuilder.InstantiateIn(System.Web.UI.Control)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.TemplateBuilder.Text">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.RootBuilder.#ctor(System.Web.UI.TemplateParser)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.RootBuilder.GetChildControlType(System.String,System.Collections.IDictionary)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.SimpleWebHandlerParser.#ctor(System.Web.HttpContext,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.SimpleWebHandlerParser.GetCompiledTypeFromCache">
      <summary>
        <para>Compiles the Web handler file into the 
      object <see cref="T:System.Type" /> stored in the cache. If the type for the object is not
      in the cache, this method places it there.</para>
      </summary>
      <returns>
        <para>The Type object assigned to the currently requested file.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.SimpleWebHandlerParser.DefaultDirectiveName">
      <summary>
        <para>When overridden in a derived class, this property gets the default directive 
       name that you assign to the files processed by your parser class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebHandlerParser.DefaultDirectiveName">
      <summary>
        <para>Gets the default directive name for all Web page requests.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebServiceParser.GetCompiledType(System.String,System.Web.HttpContext)">
      <summary>
        <para>Compiles the requested file using information obtained from the <see cref="T:System.Web.HttpContext" /> object 
    for the current request.</para>
      </summary>
      <param name="inputFile">The file to be compiled.</param>
      <param name=" context">The <see cref="T:System.Web.HttpContext" /> object for the current request.</param>
      <returns>
        <para>Returns a <see cref="T:System.Type" /> object as specified by the <see cref="T:System.Web.HttpContext" /> 
 object.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebServiceParser.DefaultDirectiveName">
      <summary>
        <para>Gets the default directive name for all Web service requests.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.StateBag">
      <summary>
        <para> Manages the view state of ASP.NET server controls,
 including pages. This class cannot
 be inherited. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.StateBag.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.StateBag" /> class. This is the default constructor for this
   class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.StateBag.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.StateBag" /> class that allows stored state
   values to be case-insensitive.</para>
      </summary>
      <param name="ignoreCase">
        <see langword="true" /> to ignore case; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.StateBag.Add(System.String,System.Object)">
      <summary>
        <para>Adds a new <see cref="T:System.Web.UI.StateItem" /> object to the <see cref="T:System.Web.UI.StateBag" />
object. If the item already exists in the <see langword="StateBag" />, it updates the
value of the item.</para>
      </summary>
      <param name="key">The attribute name for the <see langword="StateItem" /> object.</param>
      <param name=" value">The value of the item to add to the <see langword="StateBag" /> .</param>
      <returns>
        <para>Returns a <see cref="T:System.Web.UI.StateItem" /> object that represents the object added to
   view state.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.StateBag.Clear">
      <summary>
        <para>Removes all items from the current <see cref="T:System.Web.UI.StateBag" /> object.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.StateBag.GetEnumerator">
      <summary>
        <para> Returns an enumerator that iterates over all the
      key/value pairs of the <see cref="T:System.Web.UI.StateItem" /> objects stored in
      the <see langword="StateBag" />.</para>
      </summary>
      <returns>
        <para>The enumerator to iterate through the state bag.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.StateBag.IsItemDirty(System.String)">
      <summary>
        <para>Checks a <see cref="T:System.Web.UI.StateItem" /> object stored in the <see cref="T:System.Web.UI.StateBag" /> to evaluate if it has been modified since the call to
<see cref="M:System.Web.UI.Control.TrackViewState" qualify="true" /> 
.</para>
      </summary>
      <param name="key">The key of the item to check.</param>
      <returns>
        <para>
          <see langword="true" /> if the item has been modified; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.StateBag.Remove(System.String)">
      <summary>
        <para>Removes the specified key/value pair from the <see cref="T:System.Web.UI.StateBag" /> object.</para>
      </summary>
      <param name="key">The item to remove.</param>
    </member>
    <member name="P:System.Web.UI.StateBag.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.StateItem" /> objects in the <see cref="T:System.Web.UI.StateBag" />
object.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.StateBag.Keys">
      <summary>
        <para>Gets a collection of keys representing the items in the <see cref="T:System.Web.UI.StateBag" />
object.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.StateBag.Values">
      <summary>
        <para> Gets a collection of the view-state values stored in the <see cref="T:System.Web.UI.StateBag" />
object.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.StateBag.Item(System.String)">
      <summary>
        <para> Gets or sets the value of an item stored in
      the <see cref="T:System.Web.UI.StateBag" />
      object.</para>
      </summary>
      <param name="key">The key for the item.</param>
    </member>
    <member name="T:System.Web.UI.StateItem">
      <summary>
        <para>Represents an item that is saved in the <see cref="T:System.Web.UI.StateBag" /> class when view state information is persisted between Web
   requests. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.StateItem.IsDirty">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.StateItem" /> object has been modified.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.StateItem.Value">
      <summary>
        <para>Gets or sets the value of the <see cref="T:System.Web.UI.StateItem" /> object that is stored in the <see cref="T:System.Web.UI.StateBag" />
object.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.TemplateContainerAttribute">
      <summary>
        <para> Declares the type of the <see cref="T:System.Web.UI.INamingContainer" /> that will contain the
 template once it is created.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.TemplateContainerAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.TemplateContainerAttribute" />
class.</para>
      </summary>
      <param name="containerType">The <see cref="T:System.Type" />for the container control.</param>
    </member>
    <member name="P:System.Web.UI.TemplateContainerAttribute.ContainerType">
      <summary>
        <para> Gets the container control
 type.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.CompiledTemplateBuilder.InstantiateIn(System.Web.UI.Control)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ToolboxDataAttribute">
      <summary>
        <para>Specifies the default tag generated for a custom control
 when it is dragged from a toolbox in a tool such as Visual Studio.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.ToolboxDataAttribute.Default">
      <summary>
        <para> Represents the default <see cref="T:System.Web.UI.ToolboxDataAttribute" /> value for a custom control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ToolboxDataAttribute.GetHashCode">
      <summary>
        <para> Returns the hash code of the custom control.</para>
      </summary>
      <returns>
        <para> A 32-bit signed <see langword="integer" /> representing the
 hash code.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.ToolboxDataAttribute.Data">
      <summary>
        <para>Gets the string representing the initial values of the
 control’s property, which is used in a visual designer for instantiating the
 control. </para>
      </summary>
    </member>
    <member name="T:System.Web.TraceContext">
      <summary>
        <para>Captures and presents execution details about a Web request. This class
      cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.TraceContext.#ctor(System.Web.HttpContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.TraceContext" /> class.</para>
      </summary>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that contains information about the current Web request.</param>
    </member>
    <member name="M:System.Web.TraceContext.Write(System.String)">
      <summary>
        <para> Writes a trace message to the trace log.</para>
      </summary>
      <param name="message">The trace message to write to the log.</param>
    </member>
    <member name="M:System.Web.TraceContext.Write(System.String,System.String)">
      <summary>
        <para> Writes trace information to the trace log, including
      a message and any user-defined categories.</para>
      </summary>
      <param name="category">The trace category that receives the message.</param>
      <param name="message">The trace message to write to the log.</param>
    </member>
    <member name="M:System.Web.TraceContext.Write(System.String,System.String,System.Exception)">
      <summary>
        <para> Writes trace information to the trace log, including any user-defined
      categories,trace messages, and error information.</para>
      </summary>
      <param name="category">The trace category that receives the message.</param>
      <param name="message">The trace message to write to the log.</param>
      <param name="errorInfo">An <see cref="T:System.Exception" /> that contains information about the error.</param>
    </member>
    <member name="M:System.Web.TraceContext.Warn(System.String)">
      <summary>
        <para> Writes a trace message to
      the trace log. All warnings appear as in the log as red text.</para>
      </summary>
      <param name="message">The trace message to write to the log.</param>
    </member>
    <member name="M:System.Web.TraceContext.Warn(System.String,System.String)">
      <summary>
        <para> Writes trace information to the trace log, including any user-defined categories
      and trace messages. All warnings appear in the log as red text.</para>
      </summary>
      <param name="category">The trace category that receives the message.</param>
      <param name="message">The trace message to write to the log.</param>
    </member>
    <member name="M:System.Web.TraceContext.Warn(System.String,System.String,System.Exception)">
      <summary>
        <para> Writes trace information to the trace log, including any user-defined categories,trace messages, and error information. All warnings appear in
      the log as red text. </para>
      </summary>
      <param name="category">The trace category that receives the message.</param>
      <param name="message">The trace message to write to the log.</param>
      <param name="errorInfo">An <see cref="T:System.Exception" /> that contains information about the error.</param>
    </member>
    <member name="P:System.Web.TraceContext.TraceMode">
      <summary>
        <para> Gets or sets
      the sorted order in which trace messages
      should be output to a requesting browser.</para>
      </summary>
    </member>
    <member name="P:System.Web.TraceContext.IsEnabled">
      <summary>
        <para> Indicates whether tracing is
      enabled for the current Web request. </para>
      </summary>
    </member>
    <member name="T:System.Web.TraceMode">
      <summary>
        <para>Specifies in what order trace messages are emitted into the HTML output of a page.</para>
      </summary>
    </member>
    <member name="F:System.Web.TraceMode.SortByTime">
      <summary>
        <para> Emit trace messages in the order they were
      processed.</para>
      </summary>
    </member>
    <member name="F:System.Web.TraceMode.SortByCategory">
      <summary>
        <para> Emit trace messages
      alphabetically by category. </para>
      </summary>
    </member>
    <member name="F:System.Web.TraceEnable.Default">
      <summary>
        <para>Specifies the default value, which is equal to Disable</para>
      </summary>
    </member>
    <member name="F:System.Web.TraceEnable.Enable">
      <summary>
        <para>Specifies that tracing is enabled for a Web Forms page or an ASP.NET application.</para>
      </summary>
    </member>
    <member name="F:System.Web.TraceEnable.Disable">
      <summary>
        <para>Specifies that trace functionality is disabled for an application or a page. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.UserControl">
      <summary>
        <para> Represents an .ascx file when called in an .aspx file.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.UserControl.DesignerInitialize">
      <summary>
        <para>Performs any initialization steps on the user control
      that are required by RAD designers.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.UserControl.OnInit(System.EventArgs)">
      <summary>
        <para>Raises the <see langword="Init" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.UserControl.InitializeAsUserControl(System.Web.UI.Page)">
      <summary>
        <para>Initializes the <see langword="UserControl" /> object that has been created declaratively. Since there are some
   differences between pages and user controls, this method makes sure that the
   user control is initialized properly.</para>
      </summary>
      <param name=" page">The <see cref="T:System.Web.UI.Page" /> object that contains the user control.</param>
    </member>
    <member name="M:System.Web.UI.UserControl.LoadViewState(System.Object)">
      <summary>
        <para> Restores the view-state information from a previous user
      control request that was saved by the <see cref="M:System.Web.UI.UserControl.SaveViewState" /> method.</para>
      </summary>
      <param name="savedState">An <see cref="T:System.Object" /> that represents the user control state to be restored.</param>
    </member>
    <member name="M:System.Web.UI.UserControl.SaveViewState">
      <summary>
        <para> Saves any user control view-state changes that have
      occurred since the last page postback.</para>
      </summary>
      <returns>
        <para>Returns the user control's current view state. If there is no view state associated
      with the control, it returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.UserControl.MapPath(System.String)">
      <summary>
        <para>Assigns a virtual file path, either absolute or relative, to a
      physical file path.</para>
      </summary>
      <param name="virtualPath">The virtual file path to map.</param>
      <returns>
        <para>The physical path to the file.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.UserControl.Attributes">
      <summary>
        <para>Gets a collection of all attribute name and value pairs declared in the user
      control tag within the .aspx file.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.Application">
      <summary>
        <para>Gets the <see langword="Application" /> object for the
   current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.Trace">
      <summary>
        <para>Gets the <see cref="T:System.Web.TraceContext" />
object for the current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.Request">
      <summary>
        <para>Gets the <see langword="Request" />
object for the current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.Response">
      <summary>
        <para>Gets the <see langword="Response " />
object for the current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.Server">
      <summary>
        <para> Gets the <see langword="Server" />
object for the current Web request.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.Cache">
      <summary>
        <para>Gets the <see cref="T:System.Web.Caching.Cache" />
object that is associated with the
application that contains the user control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.IsPostBack">
      <summary>
        <para>Gets a value indicating whether the user control is being loaded in response to a
      client postback, or if it is being loaded and accessed for the first time.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.UserControl.Session">
      <summary>
        <para>Gets the <see langword="Session" /> object for the current Web request.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ValidationPropertyAttribute">
      <summary>
        <para> Defines the metadata attribute that ASP.NET server
      controls use to identify a validation property. This class cannot be inherited. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ValidationPropertyAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> class.</para>
      </summary>
      <param name="name"> The name of the validation property. </param>
    </member>
    <member name="P:System.Web.UI.ValidationPropertyAttribute.Name">
      <summary>
        <para> Gets the name of the ASP.NET
 server control's validation property.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.ValidatorCollection">
      <summary>
        <para> Exposes
      an array of <see cref="T:System.Web.UI.IValidator" /> references. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ValidatorCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.ValidatorCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.ValidatorCollection.Add(System.Web.UI.IValidator)">
      <summary>
        <para>Adds the specified validation server control to the
   <see cref="T:System.Web.UI.ValidatorCollection" /> .</para>
      </summary>
      <param name="validator">The validation server control to add.</param>
    </member>
    <member name="M:System.Web.UI.ValidatorCollection.Contains(System.Web.UI.IValidator)">
      <summary>
        <para>Determines whether the specified validation server control is
      contained within the page's <see cref="T:System.Web.UI.ValidatorCollection" /> .</para>
      </summary>
      <param name="validator">The validation server control to check for.</param>
      <returns>
        <para>
          <see langword="true" /> if the validation server control
   is in the collection; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ValidatorCollection.Remove(System.Web.UI.IValidator)">
      <summary>
        <para>Removes the specified validation server control from the
 page's <see cref="T:System.Web.UI.ValidatorCollection" /> .</para>
      </summary>
      <param name="validator">The validation server control to removed from the collection.</param>
    </member>
    <member name="M:System.Web.UI.ValidatorCollection.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Web.UI.ValidatorCollection" /> .</para>
      </summary>
      <returns>
        <para>The <see langword="IEnumerator" /> for the collection.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.ValidatorCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies a validation server control to the specified
      array beginning at the location specified by the <paramref name="index" /> parameter.</para>
      </summary>
      <param name="array">The collection to which the validation server control is added.</param>
      <param name=" index">The index where the validation server control is copied.</param>
    </member>
    <member name="P:System.Web.UI.ValidatorCollection.Count">
      <summary>
        <para> Gets the number of
      references in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ValidatorCollection.Item(System.Int32)">
      <summary>
        <para> Gets the validation server control at the specified
      index location in the <see cref="T:System.Web.UI.ValidatorCollection" />
      .</para>
      </summary>
      <param name="index">The index of the validator to return.</param>
    </member>
    <member name="P:System.Web.UI.ValidatorCollection.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize the
   <see cref="T:System.Web.UI.ValidatorCollection" />
   .</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ValidatorCollection.IsReadOnly">
      <summary>
        <para>Gets a value that indicates whether the <see cref="T:System.Web.UI.ValidatorCollection" /> is
   read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.ValidatorCollection.IsSynchronized">
      <summary>
        <para>Gets a value that indicates whether the <see cref="T:System.Web.UI.ValidatorCollection" />
is synchronized.</para>
      </summary>
    </member>
    <member name="M:System.Web.Compilation.BaseCompiler.GetCompiledType">
      <summary>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlAnchor">
      <summary>
        <para>Allows programmatic access to the HTML
 <see langword="&lt;a&gt;" />
 tag on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlAnchor.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlAnchor.OnServerClick(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick" /> event. This allows you
 to provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains event data.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlAnchor.HRef">
      <summary>
        <para> Gets or sets the URL target of the link specified in the
   <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" />
   server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlAnchor.Name">
      <summary>
        <para>Gets or sets the bookmark name defined in the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" />
 server
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlAnchor.Target">
      <summary>
        <para> 
       Gets
       or sets the target window or
       frame to load Web page content into.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlAnchor.Title">
      <summary>
        <para> Gets or sets the ToolTip text displayed when the mouse pointer
 is placed over the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" />
 control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlAnchor.ServerClick">
      <summary>
        <para> Occurs when the <see cref="T:System.Web.UI.HtmlControls.HtmlAnchor" /> control is
 clicked.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlButton">
      <summary>
        <para> 
 Allows programmatic access to the HTML
 <see langword="&lt;button&gt;" />
 tag
 on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlButton.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlButton.OnServerClick(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlButton.ServerClick" /> event. This allows you
 to provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlButton.CausesValidation">
      <summary>
        <para>Gets or sets a value indicating whether validation is
      performed when the <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlButton.ServerClick">
      <summary>
        <para>Occurs when the user clicks an <see cref="T:System.Web.UI.HtmlControls.HtmlButton" /> control on the client Web
 page.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlGenericControl">
      <summary>
        <para> Defines the methods,
      properties, and events for all HTML server control tags not represented by a
      specific .NET Framework class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlGenericControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlGenericControl" /> class 
    with default
    values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlGenericControl.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlGenericControl" /> class with the specified
   tag.</para>
      </summary>
      <param name="tag">The name of the element for which the instance of this class is created.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlGenericControl.TagName">
      <summary>
        <para>Gets or sets the tag name of an element that contains a 
    <see langword="runat= &quot;server&quot; " /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlImage">
      <summary>
        <para>Provides programmatic access for the HTML
   <see langword="&lt;img&gt;" /> element
      on the
      server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlImage.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlImage" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlImage.Alt">
      <summary>
        <para> Gets or sets the alternative caption the
      browser displays if an image is unavailable or currently downloading and not yet finished.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlImage.Align">
      <summary>
        <para> Gets or sets the alignment of the image relative to other Web
      page elements.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlImage.Border">
      <summary>
        <para>Gets or sets the width of a frame for an image.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlImage.Height">
      <summary>
        <para>Gets or sets the height of the image. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlImage.Src">
      <summary>
        <para> Gets or sets the source of the image file
 to display.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlImage.Width">
      <summary>
        <para> Gets or sets the width of the image.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputButton">
      <summary>
        <para>Allows programmatic access to the HTML <see langword="&lt;input type= button&gt;" />, <see langword="&lt;input type= submit&gt;" />, and 
 <see langword=" &lt;input type= reset&gt;" /> 
 elements on
 the server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputControl">
      <summary>
        <para> Serves as the abstract base class that defines the
      methods, properties, and events common to all HTML input controls, such as the
   <see langword="&lt;input type=text&gt;" />, <see langword="&lt;input type=submit&gt;" />, and <see langword=" &lt;input type= file&gt;" />
   elements.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputControl.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputControl" /> class.</para>
      </summary>
      <param name="type">The type of input control.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputControl.Name">
      <summary>
        <para> Gets or sets the unique identifier name for the <see cref="T:System.Web.UI.HtmlControls.HtmlInputControl" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputControl.Value">
      <summary>
        <para>Gets or sets the value associated with the <see cref="T:System.Web.UI.HtmlControls.HtmlInputControl" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputControl.Type">
      <summary>
        <para> Gets the type of an <see cref="T:System.Web.UI.HtmlControls.HtmlInputControl" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputButton.#ctor">
      <summary>
        <para>Initializes a new instance of an <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton" /> class using 
    default values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputButton.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of an <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton" /> class using the specified
   button type.</para>
      </summary>
      <param name="type">The input button type.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputButton.OnServerClick(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlInputButton.ServerClick" />
event. This allows you to handle the event directly.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputButton.CausesValidation">
      <summary>
        <para>Gets or sets a value indicating whether validation is
      performed when the <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton" /> control is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlInputButton.ServerClick">
      <summary>
        <para>Occurs when an <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton" /> control is clicked on the Web page.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputCheckBox">
      <summary>
        <para> Allows programmatic access to the HTML <see langword="&lt;input type= checkbox&gt;" />
element on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputCheckBox.#ctor">
      <summary>
        <para>Initializes a new instance of an <see cref="T:System.Web.UI.HtmlControls.HtmlInputCheckBox" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputCheckBox.OnServerChange(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlInputCheckBox.ServerChange" />
event. This method allows you to handle the event directly.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains event information.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputCheckBox.Checked">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.HtmlControls.HtmlInputCheckBox" />
is checked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlInputCheckBox.ServerChange">
      <summary>
        <para>Occurs when the Web page is submitted to the server and the <see cref="T:System.Web.UI.HtmlControls.HtmlInputCheckBox" /> control
 changes state
 from the previous post. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputFile">
      <summary>
        <para>Allows programmatic access to the HTML <see langword="&lt;input type= file&gt;" />
element on the
server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputFile.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputFile" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputFile.Accept">
      <summary>
        <para> Gets or sets
      a comma-separated list of MIME encodings
      used to constrain the file types the user can select.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputFile.MaxLength">
      <summary>
        <para> Gets or sets
      the maximum length of the file path for the file to upload
      from the client computer.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputFile.PostedFile">
      <summary>
        <para>Gets access to the uploaded file specified by a client.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputFile.Size">
      <summary>
        <para>Gets or sets the width of the text
       box in which the file path is entered.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputHidden">
      <summary>
        <para> Allows programmatic access to the HTML <see langword="&lt;input type=hidden&gt; " /> element on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputHidden.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputHidden" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputHidden.OnServerChange(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlInputHidden.ServerChange" /> event. This method
 allows you to handle the event directly.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains event data.</param>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlInputHidden.ServerChange">
      <summary>
        <para>Occurs when the <see cref="P:System.Web.UI.HtmlControls.HtmlInputControl.Value" /> property is changed on the server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputImage">
      <summary>
        <para>Allows programmatic access to the HTML <see langword="&lt;input type= image&gt;" />
element on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputImage.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputImage.OnServerClick(System.Web.UI.ImageClickEventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlInputImage.ServerClick" />
event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.ImageClickEventArgs" qualify="true" /> that contains event data. </param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputImage.Align">
      <summary>
        <para> Gets or sets the alignment of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage" /> control in relation to other elements on the Web page.
   </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputImage.Alt">
      <summary>
        <para> Gets or sets
      the alternative text that the browser displays if the image is unavailable or has
      not been downloaded.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputImage.Border">
      <summary>
        <para> Gets or sets the border width for the
   <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage" />
   control.
   </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputImage.Src">
      <summary>
        <para> Gets or sets the location of the image file.
 </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputImage.CausesValidation">
      <summary>
        <para>Gets or sets a value indicating whether validation is
      performed when the <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage" /> control is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlInputImage.ServerClick">
      <summary>
        <para> Occurs on the server when the user clicks an
   <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage" />
   control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputRadioButton">
      <summary>
        <para>Allows programmatic access to the HTML <see langword="&lt;input type= radio&gt;" />
element on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputRadioButton.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputRadioButton" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputRadioButton.OnServerChange(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlInputRadioButton.ServerChange" /> event. This
   allows you to create a custom event handler when the event is raised.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputRadioButton.Checked">
      <summary>
        <para> Gets or sets a value indicating whether the <see cref="T:System.Web.UI.HtmlControls.HtmlInputRadioButton" />
control is selected.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputRadioButton.Name">
      <summary>
        <para> Gets or sets the name of the group that the
      instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputRadioButton" /> class is associated with. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputRadioButton.Value">
      <summary>
        <para>Gets or sets the value associated with the <see cref="T:System.Web.UI.HtmlControls.HtmlInputRadioButton" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlInputRadioButton.ServerChange">
      <summary>
        <para>Occurs when the value of the <see cref="P:System.Web.UI.HtmlControls.HtmlInputRadioButton.Checked" /> property of the
<see cref="T:System.Web.UI.HtmlControls.HtmlInputRadioButton" /> control changes between 
   posts to the server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlInputText">
      <summary>
        <para>Allows programmatic access to the HTML <see langword="&lt;input type= text&gt;" /> and <see langword="&lt;input type= password&gt;" />
elements on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputText.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputText" /> class using default values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputText.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlInputText" /> class using the specified input 
   control type.</para>
      </summary>
      <param name="type">The type of input control.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlInputText.OnServerChange(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlInputText.ServerChange" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains event data.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputText.MaxLength">
      <summary>
        <para> Gets or sets the maximum number of characters that
      can be entered in the text box.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputText.Size">
      <summary>
        <para> Gets or sets the width of the text box.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlInputText.Value">
      <summary>
        <para> Gets
      or sets the contents of the text box.
      </para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlInputText.ServerChange">
      <summary>
        <para>Occurs when the <see cref="P:System.Web.UI.HtmlControls.HtmlInputText.Value" /> property is changed on the
 server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlSelect">
      <summary>
        <para>Allows programmatic access to the HTML
 <see langword="&lt;select&gt;" />
 
 element on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlSelect.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlSelect.OnServerChange(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlSelect.ServerChange" /> event of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control. This allows you to provide
 a custom handler for the
 event.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data. </param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.DataMember">
      <summary>
        <para>Gets or sets the set of data to bind to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control from a
<see cref="P:System.Web.UI.HtmlControls.HtmlSelect.DataSource" /> with multiple sets of 
 data.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.DataSource">
      <summary>
        <para> Gets or sets the source of information to bind
 to the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.DataTextField">
      <summary>
        <para> Gets or sets the field from the <see cref="P:System.Web.UI.HtmlControls.HtmlSelect.DataSource" /> to bind to the <see cref="P:System.Web.UI.WebControls.ListItem.Text" qualify="true" /> 
property of each item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.DataValueField">
      <summary>
        <para>Gets or sets the field from the <see cref="P:System.Web.UI.HtmlControls.HtmlSelect.DataSource" /> to bind to the <see cref="P:System.Web.UI.WebControls.ListItem.Value" qualify="true" /> 
property of each item in the
<see cref="T:System.Web.UI.HtmlControls.HtmlSelect" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.InnerHtml">
      <summary>
        <para>Gets or sets the content between the opening and closing tags of the control without automatically converting
      special characters to their equivalent HTML entities. This property is
      not supported for this control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.InnerText">
      <summary>
        <para>Gets or sets the content between the opening and closing tags of the control with automatic conversion
      of special characters to their equivalent HTML entities. This
      property is not supported for this control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.Items">
      <summary>
        <para>Gets a collection that contains the items listed in an <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.Multiple">
      <summary>
        <para>Gets or sets a value indicating whether multiple items can
 be selected concurrently in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.Name">
      <summary>
        <para>Gets or sets the unique identifier name associated with the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex">
      <summary>
        <para> Gets or sets the ordinal index of the selected
 item in an <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.Size">
      <summary>
        <para>Gets or sets the height (in rows) of the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlSelect.Value">
      <summary>
        <para>Gets the value of the selected item in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control
 or sets the <see cref="P:System.Web.UI.HtmlControls.HtmlSelect.SelectedIndex" /> property of the control to the index of the first item in the
 list with the specified
 value.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlSelect.ServerChange">
      <summary>
        <para>Occurs when the selected items in the <see cref="T:System.Web.UI.HtmlControls.HtmlSelect" /> control
 change between posts to the
 server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlTable">
      <summary>
        <para>Allows programmatic access on the server to the HTML
 <see langword="&lt;table&gt;" />
 
 element.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTable.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.Align">
      <summary>
        <para> Gets or sets the alignment of the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control in relation to other
 elements on the Web
 page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.BgColor">
      <summary>
        <para>Gets or sets the background color of the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.Border">
      <summary>
        <para>Gets or sets the width of the border (in pixels) of the
 <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.BorderColor">
      <summary>
        <para>Gets or sets the border color of the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.CellPadding">
      <summary>
        <para>Gets or sets the amount of space between the contents of
 a cell and the cell's border (in pixels) in the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.CellSpacing">
      <summary>
        <para>Gets or sets the amount of space between adjacent
 cells (in pixels) in the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.InnerHtml">
      <summary>
        <para>Gets or sets the content between the opening and closing tags of the control, without automatically converting
      special characters to their equivalent HTML entities. This property is
      not supported for this control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.InnerText">
      <summary>
        <para>Gets or sets the content between the opening and closing tags of the control, with automatic conversion
      of special characters to their equivalent HTML entities. This
      property is not supported for this control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.Height">
      <summary>
        <para> Gets or sets the height of the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.Width">
      <summary>
        <para> Gets or sets the width of the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTable.Rows">
      <summary>
        <para>Gets an <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" /> that contains all the rows in the
<see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> 
control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTable.HtmlTableRowControlCollection.Add(System.Web.UI.Control)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTable.HtmlTableRowControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.Control" /> object to the collection. The new control is added
    to the array at the specified index location.</para>
      </summary>
      <param name=" index">The location in the array to add the child control.</param>
      <param name="child">The <see cref="T:System.Web.UI.Control" /> object to add to the collection.</param>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlTableCell">
      <summary>
        <para> Represents
      the <see langword="&lt;td&gt;" /> and <see langword="&lt;th&gt;" /> HTML
      elements in an <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCell.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> class using default values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCell.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> class, using the specified
 tag name.</para>
      </summary>
      <param name="tagName">The element name of the tag.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.Align">
      <summary>
        <para>Gets or sets the horizontal alignment of the content in the cell represented by an instance of
      the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.BgColor">
      <summary>
        <para> Gets or sets the background color of the
      cell represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" />
      class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.BorderColor">
      <summary>
        <para>Gets or sets the border color of the cell
      represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" />
      class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.ColSpan">
      <summary>
        <para>Gets or sets the number of columns occupied by a cell represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.Height">
      <summary>
        <para>Gets or sets the height (in pixels) of the cell represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" />
class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.NoWrap">
      <summary>
        <para>Gets or sets a value indicating whether the text in a cell represented by an instance of the
   <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> class automatically continues
      on the next line when it reaches the end
      of the cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.RowSpan">
      <summary>
        <para>Gets or sets the number of rows occupied by a cell
      represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" />
      class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.VAlign">
      <summary>
        <para>Gets or sets the vertical alignment for the content of a cell represented by an instance of the
   <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCell.Width">
      <summary>
        <para>Gets or sets the width (in pixels) of the cell
      represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" />
      class.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlTableCellCollection">
      <summary>
        <para> A collection of <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> objects that represent the
 cells in a single row of an <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control. This class cannot
 be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCellCollection.Add(System.Web.UI.HtmlControls.HtmlTableCell)">
      <summary>
        <para>Appends the specified <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> to the end of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
      <param name="cell">The <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCellCollection.Insert(System.Int32,System.Web.UI.HtmlControls.HtmlTableCell)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> at the specified index
 location of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
      <param name="index">The location in the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" /> at which to add the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" />.</param>
      <param name=" cell">The <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> to add to the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCellCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> objects from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCellCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> objects in the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> objects in the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCellCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the items from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" /> to the specified <see cref="T:System.Array" qualify="true" />, beginning with the specified
 index in the <see cref="T:System.Array" qualify="true" />.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> that receives the copied items from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</param>
      <param name=" index">The first index in the specified <see cref="T:System.Array" qualify="true" /> to receive the items.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCellCollection.Remove(System.Web.UI.HtmlControls.HtmlTableCell)">
      <summary>
        <para>Removes the specified <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
      <param name="cell">The <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> to remove from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableCellCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> at the specified index from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> to remove from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCellCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> objects in the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCellCollection.Item(System.Int32)">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> at the specified index from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
      <param name="index">An ordinal index value that specifies the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> to return.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCellCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access
 to the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCellCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableCellCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to
 the <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection" /> is synchronized
 (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlTableRow">
      <summary>
        <para>Represents the <see langword="&lt;tr&gt;" /> HTML element
 in an <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRow.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.Align">
      <summary>
        <para> Gets or sets the horizontal alignment of the content
 in the cells of a row in an <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.Cells">
      <summary>
        <para> Gets a collection of <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" /> objects that represent the cells contained in a row of
 the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.BgColor">
      <summary>
        <para>Gets or sets the background color of the row represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" />
class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.BorderColor">
      <summary>
        <para>Gets or sets the border color of the row
 represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.Height">
      <summary>
        <para>Gets or sets the height (in pixels) of the row
 represented by an instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.InnerHtml">
      <summary>
        <para>Gets or sets the content between the opening and closing tags of the control without automatically converting
      special characters to their equivalent HTML entities. This property is
      not supported for this control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.InnerText">
      <summary>
        <para>Gets or sets the content between the opening and closing tags of the control with automatic conversion
      of special characters to their equivalent HTML entities. This
      property is not supported for this control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRow.VAlign">
      <summary>
        <para> Gets or sets the vertical alignment
 of the content in the cells of a row in an <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRow.HtmlTableCellControlCollection.Add(System.Web.UI.Control)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRow.HtmlTableCellControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.Control" /> object to the collection. The new control is added
    to the array at the specified index location.</para>
      </summary>
      <param name=" index">The location in the array to add the child control.</param>
      <param name="child">The <see cref="T:System.Web.UI.Control" /> object to add to the collection.</param>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlTableRowCollection">
      <summary>
        <para>A collection of <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> objects that
   represent the rows of an <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> control. This class
   cannot
   be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRowCollection.Add(System.Web.UI.HtmlControls.HtmlTableRow)">
      <summary>
        <para>Appends the specified <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> to the end of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
      <param name="row">The <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRowCollection.Insert(System.Int32,System.Web.UI.HtmlControls.HtmlTableRow)">
      <summary>
        <para>Adds an <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> to the specified
   location in the collection.</para>
      </summary>
      <param name="index">
        <para>The location in the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" /> at which to add the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" />.</para>
      </param>
      <param name=" row">The <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> to add to the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRowCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> objects from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the items from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" /> to the specified <see cref="T:System.Array" qualify="true" />, starting at the specified
 index in the array.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> that receives the copied items from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</param>
      <param name=" index">The first index in the specified array to receive the items.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRowCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> objects in the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> objects in the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRowCollection.Remove(System.Web.UI.HtmlControls.HtmlTableRow)">
      <summary>
        <para>Removes the specified <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
      <param name="row">The <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> to remove from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTableRowCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> at the specified index from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> to remove from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRowCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> objects in the
<see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRowCollection.Item(System.Int32)">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> at the specified index from the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
      <param name="index">An ordinal index value that specifies the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow" /> to return.</param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRowCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access
 to the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRowCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTableRowCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to
      the <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection" /> is synchronized
      (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.HtmlControls.HtmlTextArea">
      <summary>
        <para> Allows
 programmatic access to the <see langword="&lt;textarea&gt;" /> HTML
 
 element on the server.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTextArea.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.HtmlControls.HtmlTextArea" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.HtmlControls.HtmlTextArea.OnServerChange(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.HtmlControls.HtmlTextArea.ServerChange" /> event of the <see cref="T:System.Web.UI.HtmlControls.HtmlTextArea" /> control. This allows you to provide
   a custom handler for the
   event.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data. </param>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTextArea.Cols">
      <summary>
        <para> Gets or sets the width (in characters) of the
 <see cref="T:System.Web.UI.HtmlControls.HtmlTextArea" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTextArea.Name">
      <summary>
        <para> Gets or sets the unique identifier name for the <see cref="T:System.Web.UI.HtmlControls.HtmlTextArea" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTextArea.Rows">
      <summary>
        <para> Gets or sets the height (in characters) of the
 <see cref="T:System.Web.UI.HtmlControls.HtmlTextArea" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.HtmlControls.HtmlTextArea.Value">
      <summary>
        <para>Gets or sets the text entered in the
 <see cref="T:System.Web.UI.HtmlControls.HtmlTextArea" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.HtmlControls.HtmlTextArea.ServerChange">
      <summary>
        <para>Occurs when the content of the <see cref="T:System.Web.UI.HtmlControls.HtmlTextArea" /> control changes between posts to
   the server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.AdCreatedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.AdRotator.AdCreated" /> event of the <see cref="T:System.Web.UI.WebControls.AdRotator" /> control. This class cannot be
 inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.AdCreatedEventArgs.#ctor(System.Collections.IDictionary)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.AdCreatedEventArgs" />
class.</para>
      </summary>
      <param name="adProperties">A <see cref="T:System.Collections.IDictionary" qualify="true" /> containing the advertisement properties from the XML file.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.AdCreatedEventArgs.AdProperties">
      <summary>
        <para>Gets a <see cref="T:System.Collections.IDictionary" qualify="true" /> object that contains all the
 advertisement properties for the currently displayed advertisement.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.AdCreatedEventArgs.AlternateText">
      <summary>
        <para> Gets or sets the
 alternate text displayed in the <see cref="T:System.Web.UI.WebControls.AdRotator" />
 control when the advertisement
 image is unavailable. Browsers that support the ToolTips feature display this text as a ToolTip for the advertisement.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.AdCreatedEventArgs.ImageUrl">
      <summary>
        <para> Gets or sets the URL of an image to display in the <see cref="T:System.Web.UI.WebControls.AdRotator" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.AdCreatedEventArgs.NavigateUrl">
      <summary>
        <para> Gets or sets the Web page to display when the
 <see cref="T:System.Web.UI.WebControls.AdRotator" />
 control is clicked.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.AdCreatedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.AdRotator.AdCreated" /> event of an <see cref="T:System.Web.UI.WebControls.AdRotator" />
control.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.Web.UI.WebControls.AdCreatedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.AdRotator">
      <summary>
        <para> Displays an advertisement banner on a Web page.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.WebControl">
      <summary>
        <para> Serves as the base class that defines the methods,
      properties and events common to all controls in the <see cref="N:System.Web.UI.WebControls" />
      namespace.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebControl" /> class that represents a
<see langword="Span" /> HTML 
   tag.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.#ctor(System.Web.UI.HtmlTextWriterTag)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebControl" /> class using the specified HTML tag.</para>
      </summary>
      <param name="tag">One of the <see cref="T:System.Web.UI.HtmlTextWriterTag" qualify="true" /> values.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebControl" /> class using the specified HTML tag.</para>
      </summary>
      <param name="tag">An HTML tag.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para> Adds HTML attributes and styles that need to be rendered
      to the specified <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" />. This method is used primarily by control
      developers.</para>
      </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)">
      <summary>
        <para> Copies any nonblank elements of the specified style to the Web control, overwriting any existing style elements of the
      control. This method is primarily used by control developers.</para>
      </summary>
      <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style to be copied.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)">
      <summary>
        <para>Copies the properties
      not encapsulated by the <see cref="P:System.Web.UI.WebControls.WebControl.Style" /> object from the
      specified Web server control to the Web server control that this method is
      called from. This
      method is used primarily by control developers.</para>
      </summary>
      <param name="controlSrc">A <see cref="T:System.Web.UI.WebControls.WebControl" /> that represents the source control with properties to be copied to the Web server control that this method is called from.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.CreateControlStyle">
      <summary>
        <para> Creates the style object that is used internally by the 
   <see cref="T:System.Web.UI.WebControls.WebControl" /> 
   class to implement all style related properties. This method is used primarily
   by control developers.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Style" /> that is used
   to implement all style-related properties of the control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)">
      <summary>
        <para> Copies any nonblank elements of the specified style to the Web control, but will not overwrite any existing style elements
      of the control. This method is used primarily by control developers.</para>
      </summary>
      <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style to be copied.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para> Renders the HTML opening tag of the control into the
      specified writer. This method is used primarily by control developers.</para>
      </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Renders the HTML closing tag of the control into the
      specified writer. This method is used primarily by control developers.</para>
      </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Renders the contents of the control into the specified writer. This method is used primarily by control developers.</para>
      </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.AccessKey">
      <summary>
        <para>Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web
      server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.Attributes">
      <summary>
        <para> Gets the collection of arbitrary attributes (for rendering only) that
      do not correspond to properties on the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.BackColor">
      <summary>
        <para>Gets or sets the background color of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.BorderColor">
      <summary>
        <para>Gets or sets the border color of the Web control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.BorderWidth">
      <summary>
        <para>Gets or sets the border width of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.BorderStyle">
      <summary>
        <para>Gets or sets the border style of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.ControlStyle">
      <summary>
        <para>Gets the style of the Web server control. This property is
      used primarily by control developers.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.ControlStyleCreated">
      <summary>
        <para>Gets a value indicating whether a <see cref="T:System.Web.UI.WebControls.Style" /> 
object has been created for the <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle" /> property. This property is
primarily used by control developers. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.CssClass">
      <summary>
        <para>Gets or sets the Cascading Style Sheet (CSS) class rendered by the Web server control on the client.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.Style">
      <summary>
        <para> Gets a collection of text attributes that will be rendered as a style attribute
      on the outer tag of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.Enabled">
      <summary>
        <para>Gets or sets a value indicating whether the Web server control is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.Font">
      <summary>
        <para>Gets the font properties associated with the Web sServer control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.ForeColor">
      <summary>
        <para>Gets or sets the foreground color (typically the color of the text) of the Web
      server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.Height">
      <summary>
        <para>Gets or sets the height of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.TabIndex">
      <summary>
        <para> Gets or
      sets the tab index of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.TagKey">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag" qualify="true" /> value
   that corresponds to this Web server control. This property is used primarily
   by control developers.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.TagName">
      <summary>
        <para> Gets the name of the control tag. This property is used primarily by control developers.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.ToolTip">
      <summary>
        <para> Gets or sets the text displayed when the mouse pointer hovers
      over the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.WebControl.Width">
      <summary>
        <para>Gets or sets the width of the Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.AdRotator.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.AdRotator" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.AdRotator.OnAdCreated(System.Web.UI.WebControls.AdCreatedEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.AdRotator.AdCreated" /> event for the <see cref="T:System.Web.UI.WebControls.AdRotator" /> control.</para>
      </summary>
      <param name="e">An <see cref="T:System.Web.UI.WebControls.AdCreatedEventArgs" /> that contains event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.AdRotator.AdvertisementFile">
      <summary>
        <para>Gets or sets the path to an XML file that contains advertisement information.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.AdRotator.KeywordFilter">
      <summary>
        <para> Gets or sets a category keyword to filter for specific types of advertisements in the XML advertisement file.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.AdRotator.Target">
      <summary>
        <para> Gets or sets the name of the browser window or frame that
 displays the contents of the Web page linked to when the <see cref="T:System.Web.UI.WebControls.AdRotator" />
 control is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.AdRotator.AdCreated">
      <summary>
        <para>Occurs once per round trip to the server after the creation of the control,
      but before the page is rendered. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.AdRotator.AdRec.Initialize(System.Collections.IDictionary)">
      <summary>
   Initialize the stuct based on a dictionary containing the advertisement properties
 </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.BaseCompareValidator">
      <summary>
        <para> Serves as the abstract base
 class for validation controls that perform typed comparisons.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.BaseValidator">
      <summary>
        <para> Serves as the abstract base
      class for validation controls.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Label">
      <summary>
        <para> Represents a label control, which displays text on a Web
      page.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Label.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Label" />
class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Label.Text">
      <summary>
        <para>Gets or sets the text content of the <see cref="T:System.Web.UI.WebControls.Label" />
control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.BaseValidator" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)">
      <summary>
        <para> Helper function that verifies whether the
 specified control is on the
 page and contains validation properties.</para>
      </summary>
      <param name="name">The control to verify.</param>
      <param name=" propertyName">Provides additional text to describe the source of the exception, if an exception is thrown from using this method. </param>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid">
      <summary>
        <para>Helper function that determines whether the control specified by the <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> property is a
 valid control.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the
 control specified by the <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> property is a valid control; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid">
      <summary>
        <para> When overridden in a derived class, this method contains the code to determine
      whether the value in the input
      control is valid.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the value
   in the input control is valid; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)">
      <summary>
        <para> Gets the client ID of the specified control.</para>
      </summary>
      <param name="name">The name of the control to get the client ID.</param>
      <returns>
        <para>The client ID of the specified control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)">
      <summary>
        <para> Gets the value associated with the specified input control.</para>
      </summary>
      <param name="name">The name of the input control to get the value from.</param>
      <returns>
        <para>The value associated with the specified input control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)">
      <summary>
        <para>Helper function to get the validation
      property of a control (if it exists).</para>
      </summary>
      <param name="component">An <see cref="T:System.Object" qualify="true" /> that represents the control to get the validation property of.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" qualify="true" /> that contains the
   validation property of the control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel">
      <summary>
        <para> Helper function that determines whether the validator control can be rendered
      for an uplevel browser.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the validator control can be rendered for an uplevel
   browser; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript">
      <summary>
        <para> Registers code on the page for client-side validation.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration">
      <summary>
        <para>Registers an ECMAScript array declaration using the array name, <see langword="Page_Validators" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseValidator.Validate">
      <summary>
        <para>Performs validation on the associated input control and updates the <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.ForeColor">
      <summary>
        <para> Gets or sets the color of
      the message displayed when validation fails.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate">
      <summary>
        <para>Gets or sets the input control to validate.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage">
      <summary>
        <para> Gets or sets the text for the error message.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript">
      <summary>
        <para>Gets or sets a value indicating whether client-side validation is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.Enabled">
      <summary>
        <para> Gets or sets a value that indicates whether the validation control is
      enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.IsValid">
      <summary>
        <para>Gets or sets a value that indicates whether the associated input control passes
      validation.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid">
      <summary>
        <para> Gets a value that indicates whether the control
      specified by the <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> property is a valid control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel">
      <summary>
        <para> Gets a value that indicates whether the client's browser
      supports uplevel rendering.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseValidator.Display">
      <summary>
        <para>Gets or sets the display behavior of the error message in a
 validation control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)">
      <summary>
        <para>Determines whether the specified string can be converted to the specified data type.</para>
      </summary>
      <param name="text"> The string to test. </param>
      <param name=" type">One of the <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> enumeration values.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified data string can
 be converted to the specified data type; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)">
      <summary>
        <para>Generates the four-digit year representation of the specified two-digit year.</para>
      </summary>
      <param name="shortYear">A two-digit year.</param>
      <returns>
        <para>The four-digit year representation of the specified two-digit year.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseCompareValidator.Type">
      <summary>
        <para> Gets or sets the data type that the values being compared
 are converted to before the comparison is made.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear">
      <summary>
        <para>Gets the maximum year that can be represented by a two-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.BaseDataList">
      <summary>
        <para>Serves as the abstract base class for data listing controls, such as the <see cref="T:System.Web.UI.WebControls.DataList" /> and <see cref="T:System.Web.UI.WebControls.DataGrid" />. This class provides the methods and properties common to all data
   listing controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseDataList.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.BaseDataList" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseDataList.DataBind">
      <summary>
        <para> Binds the control and all its child controls to the
      data source specified by the <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSource" />
      property.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseDataList.IsBindableType(System.Type)">
      <summary>
        <para>Determines whether the specified data type is bindable to a list control that derives from the
   <see cref="T:System.Web.UI.WebControls.BaseDataList" /> class.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" qualify="true" /> object that contains the data type to test.</param>
      <returns>
        <para>
          <see langword="true " />if the
   specified data type is bindable to a list control that derives from the <see cref="T:System.Web.UI.WebControls.BaseDataList" /> class; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BaseDataList.OnSelectedIndexChanged(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.BaseDataList.SelectedIndexChanged" /> event of a <see cref="T:System.Web.UI.WebControls.BaseDataList" />. This
   allows you to create a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.CellPadding">
      <summary>
        <para>Gets or sets the amount of space between the contents of a cell and the
      cell's border.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.CellSpacing">
      <summary>
        <para>Gets or sets the amount of space between cells.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.Controls">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.ControlCollection" qualify="true" /> that contains
   a collection of child controls in a data
   listing control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.DataKeys">
      <summary>
        <para> Gets a <see cref="T:System.Web.UI.WebControls.DataKeyCollection" /> that stores the key values of each record (displayed
   as a row) in a data listing control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.DataKeyField">
      <summary>
        <para> Gets or sets the key field in the data source specified by the <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSource" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.DataMember">
      <summary>
        <para> Gets or sets the specific data member in a multimember
      data source to bind to a data listing
      control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.DataSource">
      <summary>
        <para> Gets or sets the source containing a list of values used to populate
      the items within the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.GridLines">
      <summary>
        <para>Gets or sets a value that specifies whether the border between the cells of a data listing control is displayed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BaseDataList.HorizontalAlign">
      <summary>
        <para> Gets or sets the horizontal alignment of a data listing control within
      its container.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.BaseDataList.SelectedIndexChanged">
      <summary>
        <para>Occurs when a different item is selected in a data listing control between posts to the server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.BorderStyle">
      <summary>
        <para> Specifies the border style of a control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.NotSet">
      <summary>
        <para> No set border style.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.None">
      <summary>
        <para> No border.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Dotted">
      <summary>
        <para> A dotted line border.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Dashed">
      <summary>
        <para> A dashed line border.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Solid">
      <summary>
        <para> A solid line border.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Double">
      <summary>
        <para> A double solid line border.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Groove">
      <summary>
        <para> A grooved border for a sunken border appearance.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Ridge">
      <summary>
        <para> A ridged border for a raised border appearance.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Inset">
      <summary>
        <para> An inset border for a sunken control appearance.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BorderStyle.Outset">
      <summary>
        <para> An outset border for a raised control appearance.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.BoundColumn">
      <summary>
        <para>A column type for the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control that is bound to a field in a data
   source.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridColumn">
      <summary>
        <para>Serves as the base class for the different column types of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumn.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumn.Initialize">
      <summary>
        <para>Provides the base implementation to reset a column derived from the <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> class to its initial
   state.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
      <summary>
        <para>Provides the base implementation to reset the specified
      cell from a column derived from the <see cref="T:System.Web.UI.WebControls.DataGridColumn" />
      class its
      initial values.</para>
      </summary>
      <param name="cell">A <see cref="T:System.Web.UI.WebControls.TableCell" /> that represents the cell to reset.</param>
      <param name=" columnIndex">The column number where the cell is located.</param>
      <param name=" itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> values.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumn.LoadViewState(System.Object)">
      <summary>
        <para>Loads the state of the <see cref="T:System.Web.UI.WebControls.DataGridColumn" />.</para>
      </summary>
      <param name="savedState">An <see cref="T:System.Object" qualify="true" /> that contains the saved state of the <see cref="T:System.Web.UI.WebControls.DataGridColumn" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumn.TrackViewState">
      <summary>
        <para>Causes tracking of view-state changes to the server 
      control so they can be stored in the server control's <see cref="T:System.Web.UI.StateBag" qualify="true" />
      object.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumn.OnColumnChanged">
      <summary>
        <para> Calls the <see cref="!:System.Web.UI.Design.WebControls.DataGridDesigner.OnColumnsChanged" qualify="true" /> method.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumn.SaveViewState">
      <summary>
        <para>Saves the current state of the <see cref="T:System.Web.UI.WebControls.DataGridColumn" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Object" qualify="true" /> that contains the saved state of the <see cref="T:System.Web.UI.WebControls.DataGridColumn" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.DesignMode">
      <summary>
        <para>Gets a value that indicates whether the column is in design mode.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.FooterStyle">
      <summary>
        <para>Gets the style properties for the footer section of the column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.FooterText">
      <summary>
        <para> Gets or sets the text displayed in the footer section of 
      the column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.HeaderImageUrl">
      <summary>
        <para>Gets or sets the location of an image to display 
      in the header section of the column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.HeaderStyle">
      <summary>
        <para>Gets the style properties for the header section of the 
      column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.HeaderText">
      <summary>
        <para>Gets or sets the text displayed in the header section of 
      the column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.ItemStyle">
      <summary>
        <para>Gets the style properties for the item cells of the 
      column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.Owner">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control that the column is a member of.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.SortExpression">
      <summary>
        <para> Gets or sets the name of the field or expression to pass to
      the <see cref="M:System.Web.UI.WebControls.DataGrid.OnSortCommand(System.Web.UI.WebControls.DataGridSortCommandEventArgs)" /> method when a column is selected
      for
      sorting.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.ViewState">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.StateBag" qualify="true" /> that allows a column derived from the <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> class to store its properties.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumn.Visible">
      <summary>
        <para>Gets or sets a value that indicates whether the column
      is visible in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.BoundColumn.thisExpr">
      <summary>
        <para> Represents the string "!". This field is read-only. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BoundColumn.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.BoundColumn" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BoundColumn.FormatDataValue(System.Object)">
      <summary>
        <para>Converts the specified value to the format indicated by
      the <see cref="P:System.Web.UI.WebControls.BoundColumn.DataFormatString" /> property.</para>
      </summary>
      <param name="dataValue">The value to format.</param>
      <returns>
        <para>The specified value converted to the format indicated by
      the <see cref="P:System.Web.UI.WebControls.BoundColumn.DataFormatString" /> property.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.BoundColumn.Initialize">
      <summary>
        <para> Resets the <see cref="T:System.Web.UI.WebControls.BoundColumn" /> to its initial state.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.BoundColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
      <summary>
        <para> Resets the specified cell in the <see cref="T:System.Web.UI.WebControls.BoundColumn" />
to its initial state.</para>
      </summary>
      <param name="cell">A <see cref="T:System.Web.UI.WebControls.TableCell" /> object that represents the cell to reset.</param>
      <param name=" columnIndex">The column number where the cell is located.</param>
      <param name=" itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> values.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.BoundColumn.DataField">
      <summary>
        <para> Gets or sets the field name from the data source to
      bind to the <see cref="T:System.Web.UI.WebControls.BoundColumn" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BoundColumn.DataFormatString">
      <summary>
        <para>Gets or sets the string that specifies the display format for items in the
      column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.BoundColumn.ReadOnly">
      <summary>
        <para>Gets or sets a value that indicates whether the items
      in the <see cref="T:System.Web.UI.WebControls.BoundColumn" />
      can be edited.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Button">
      <summary>
        <para>Displays a push button control on the Web page.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Button.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Button" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.Button.Click" /> event of the <see cref="T:System.Web.UI.WebControls.Button" /> control.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.Button.Command" /> event of the <see cref="T:System.Web.UI.WebControls.Button" />
control.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.Button.CommandName">
      <summary>
        <para>Gets or sets the command name associated with the <see cref="T:System.Web.UI.WebControls.Button" /> control that
   is passed to the <see cref="E:System.Web.UI.WebControls.Button.Command" />
   event.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Button.CommandArgument">
      <summary>
        <para> Gets or sets an optional parameter passed to the <see cref="E:System.Web.UI.WebControls.Button.Command" />
event along with the associated <see cref="P:System.Web.UI.WebControls.Button.CommandName" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Button.CausesValidation">
      <summary>
        <para>Gets or sets a value indicating whether validation is
 performed when the <see cref="T:System.Web.UI.WebControls.Button" /> control is clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Button.Text">
      <summary>
        <para>Gets or sets the text caption displayed in the <see cref="T:System.Web.UI.WebControls.Button" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Button.Click">
      <summary>
        <para>Occurs when the <see cref="T:System.Web.UI.WebControls.Button" /> control is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Button.Command">
      <summary>
        <para>Occurs when the <see cref="T:System.Web.UI.WebControls.Button" /> control is clicked.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ButtonColumn">
      <summary>
        <para>A column type for the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control that contains a user-defined command
 button, such as <see langword="Add" /> or <see langword="Remove" />, that
 corresponds with each row in the
 column.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ButtonColumn.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ButtonColumn" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue(System.Object)">
      <summary>
        <para>Converts the specified value to the format indicated by the <see cref="P:System.Web.UI.WebControls.ButtonColumn.DataTextFormatString" /> property.</para>
      </summary>
      <param name="dataTextValue">The value to format.</param>
      <returns>
        <para>The specified value converted to the format indicated by 
      the <see cref="P:System.Web.UI.WebControls.ButtonColumn.DataTextFormatString" /> property.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.ButtonColumn.Initialize">
      <summary>
        <para>Resets the <see cref="T:System.Web.UI.WebControls.ButtonColumn" /> to its initial state.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
      <summary>
        <para> Resets a cell in the <see cref="T:System.Web.UI.WebControls.ButtonColumn" /> to its initial state.</para>
      </summary>
      <param name="cell">A <see cref="T:System.Web.UI.WebControls.TableCell" /> that represents the cell to reset.</param>
      <param name=" columnIndex">The column number where the cell is located.</param>
      <param name=" itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> values.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.ButtonColumn.ButtonType">
      <summary>
        <para>Gets or sets the type of button to display in the
   <see cref="T:System.Web.UI.WebControls.ButtonColumn" />
   column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ButtonColumn.CommandName">
      <summary>
        <para>Gets or sets a string that represents the command to
      perform when a button in the <see cref="T:System.Web.UI.WebControls.ButtonColumn" qualify="true" />
      
      is clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ButtonColumn.DataTextField">
      <summary>
        <para>Gets or sets the field name from a data source to bind
      to the <see cref="T:System.Web.UI.WebControls.ButtonColumn" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ButtonColumn.DataTextFormatString">
      <summary>
        <para> Gets or sets the string that specifies
      the display format for the caption in each command button.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ButtonColumn.Text">
      <summary>
        <para>Gets or sets the caption displayed in the command
      buttons of the <see cref="T:System.Web.UI.WebControls.ButtonColumn" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ButtonColumnType">
      <summary>
        <para>Specifies the button type for the <see cref="T:System.Web.UI.WebControls.ButtonColumn" />
object.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ButtonColumnType.LinkButton">
      <summary>
        <para>A column
      of hyperlink style buttons.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ButtonColumnType.PushButton">
      <summary>
        <para> A column of push buttons.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Calendar">
      <summary>
        <para> Displays a single month calendar that allows the user to
      select dates and move to the next or previous month.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Calendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Calendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Calendar.OnDayRender(System.Web.UI.WebControls.TableCell,System.Web.UI.WebControls.CalendarDay)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.Calendar.DayRender" /> event of the <see cref="T:System.Web.UI.WebControls.Calendar" /> control
   and allows you to provide a custom handler for the <see cref="E:System.Web.UI.WebControls.Calendar.DayRender" /> event.</para>
      </summary>
      <param name="cell">A <see cref="T:System.Web.UI.WebControls.TableCell" /> that contains information about the cell to render.</param>
      <param name=" day">A <see cref="T:System.Web.UI.WebControls.CalendarDay" /> that contains information about the day to render.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Calendar.OnSelectionChanged">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.Calendar.SelectionChanged" />event of the <see cref="T:System.Web.UI.WebControls.Calendar" /> control
   and allows you to provide a
   custom handler for the <see cref="E:System.Web.UI.WebControls.Calendar.SelectionChanged" /> event.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Calendar.OnVisibleMonthChanged(System.DateTime,System.DateTime)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.Calendar.VisibleMonthChanged" />event of the <see cref="T:System.Web.UI.WebControls.Calendar" /> control
   and allows you to provide a
   custom handler for the <see cref="E:System.Web.UI.WebControls.Calendar.VisibleMonthChanged" />
   event.</para>
      </summary>
      <param name="newDate">A <see cref="T:System.DateTime" qualify="true" /> object that represents the month currently displayed in the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</param>
      <param name=" previousDate">A <see cref="T:System.DateTime" qualify="true" /> object that represents the previous month displayed by the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.CellPadding">
      <summary>
        <para>Gets or sets the amount of space between the contents of a cell and the cell's border.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.CellSpacing">
      <summary>
        <para> Gets or sets the amount
 of space between cells.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.DayHeaderStyle">
      <summary>
        <para> Gets the style properties for the section that displays the day of the week.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.DayNameFormat">
      <summary>
        <para>Gets or sets the
      name format of days of the week.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.DayStyle">
      <summary>
        <para> Gets the style properties for the days in the displayed month.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.FirstDayOfWeek">
      <summary>
        <para> Gets or sets the day of the week to display in the
 first day column of the <see cref="T:System.Web.UI.WebControls.Calendar" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.NextMonthText">
      <summary>
        <para>Gets or sets the text displayed for the next month
 navigation control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.NextPrevFormat">
      <summary>
        <para>Gets or sets the format of the next and previous
      month navigation elements in the title section of the <see cref="T:System.Web.UI.WebControls.Calendar" />
      control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.NextPrevStyle">
      <summary>
        <para> Gets the style properties for the next and previous month navigation
      elements.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.OtherMonthDayStyle">
      <summary>
        <para>Gets the style properties for the days on the <see cref="T:System.Web.UI.WebControls.Calendar" /> control
   that are not in the displayed month.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.PrevMonthText">
      <summary>
        <para>Gets or sets the text displayed for the previous month navigation
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.SelectedDate">
      <summary>
        <para> Gets or sets the selected
 date.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.SelectedDates">
      <summary>
        <para>Gets a collection of <see cref="T:System.DateTime" qualify="true" /> objects that represent the selected dates on the <see cref="T:System.Web.UI.WebControls.Calendar" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.SelectedDayStyle">
      <summary>
        <para> Gets the style properties for the selected dates.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.SelectionMode">
      <summary>
        <para> Gets or sets the date selection mode on the
   <see cref="T:System.Web.UI.WebControls.Calendar" /> control that specifies
      whether the user can select a single day, a week, or an entire month.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.SelectMonthText">
      <summary>
        <para> Gets or sets the text displayed for the month
 selection element in the selector column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.SelectorStyle">
      <summary>
        <para>Gets the style properties for the week and month
      selector column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.SelectWeekText">
      <summary>
        <para> Gets or sets the text displayed for the week
 selection element in the selector column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.ShowDayHeader">
      <summary>
        <para> Gets or sets a value
      indicating whether the heading for the days of the week is displayed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.ShowGridLines">
      <summary>
        <para>Gets or sets a value indicating whether the days on the
   <see cref="T:System.Web.UI.WebControls.Calendar" />
   control are separated with grid lines.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.ShowNextPrevMonth">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.Calendar" /> control
   displays the next and previous month navigation
   elements in the title section.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.ShowTitle">
      <summary>
        <para> Gets or
      sets a value indicating whether the title section is displayed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.TitleFormat">
      <summary>
        <para> Gets or sets the title format for the title
      section.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.TitleStyle">
      <summary>
        <para>Gets the style properties of the title heading for the <see cref="T:System.Web.UI.WebControls.Calendar" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.TodayDayStyle">
      <summary>
        <para>Gets the style properties for today's date on the
   <see cref="T:System.Web.UI.WebControls.Calendar" />
   control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.TodaysDate">
      <summary>
        <para> Gets or sets the value for today's date.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.VisibleDate">
      <summary>
        <para>Gets or sets the date that specifies the month to
 display on the <see cref="T:System.Web.UI.WebControls.Calendar" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Calendar.WeekendDayStyle">
      <summary>
        <para>Gets the style properties for the weekend dates on the
   <see cref="T:System.Web.UI.WebControls.Calendar" />
   control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Calendar.DayRender">
      <summary>
        <para>Occurs when each day is created in the control hierarchy for the <see cref="T:System.Web.UI.WebControls.Calendar" />
control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Calendar.SelectionChanged">
      <summary>
        <para>Occurs when the user selects a day, a week, or an entire month by clicking the date selector controls. </para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Calendar.VisibleMonthChanged">
      <summary>
        <para>Occurs when the user clicks on the next or previous
      month navigation controls on the title heading.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.CalendarDay">
      <summary>
        <para> Represents a date in the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.CalendarDay.#ctor(System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.CalendarDay" /> class.</para>
      </summary>
      <param name="date">A <see cref="T:System.DateTime" qualify="true" /> object that contains the date represented by an instance of this class.</param>
      <param name=" isWeekend">
        <see langword="true" /> to indicate that the date represented by an instance of this class is either a Saturday or a Sunday; otherwise, <see langword="false" />.</param>
      <param name=" isToday">
        <see langword="true" /> to indicate that the date represented by an instance of this class is the current date; otherwise, <see langword="false" />.</param>
      <param name=" isSelected">
        <see langword="true" /> to indicate that the date represented by an instance of this class is selected on the <see cref="T:System.Web.UI.WebControls.Calendar" /> control; otherwise, <see langword="false" />.</param>
      <param name=" isOtherMonth">
        <see langword="true" /> to indicate that the date represented by an instance of this class is in a month other than the displayed month on the <see cref="T:System.Web.UI.WebControls.Calendar" /> control; otherwise, <see langword="false" />.</param>
      <param name=" dayNumberText">The day number for the date represented by this class.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.CalendarDay.Date">
      <summary>
        <para> Gets the date represented by an instance of this class. This
      property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CalendarDay.DayNumberText">
      <summary>
        <para> Gets the string equivalent of the day number for the
      date represented by an instance of the <see cref="T:System.Web.UI.WebControls.CalendarDay" /> class. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CalendarDay.IsOtherMonth">
      <summary>
        <para>Gets a value that indicates whether the date represented
      by an instance of this class is in a month other than the month
      displayed in the <see cref="T:System.Web.UI.WebControls.Calendar" />
      control. This
      property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CalendarDay.IsSelectable">
      <summary>
        <para>Gets or sets a value that indicates whether the date
      represented by an instance of this class can be selected in the <see cref="T:System.Web.UI.WebControls.Calendar" />
      control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CalendarDay.IsSelected">
      <summary>
        <para> Gets a value that indicates whether the date represented by
      an instance of this class is selected in the <see cref="T:System.Web.UI.WebControls.Calendar" /> control. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CalendarDay.IsToday">
      <summary>
        <para>Gets a value that indicates whether the date represented by 
 an instance of this class is the same date specified by the <see cref="P:System.Web.UI.WebControls.Calendar.TodaysDate" /> property of the <see cref="T:System.Web.UI.WebControls.Calendar" /> control. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CalendarDay.IsWeekend">
      <summary>
        <para> Gets a value that indicates whether the date represented by an instance
      of this class is a either Saturday or Sunday. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.CalendarSelectionMode">
      <summary>
        <para> Specifies the date selection mode of the <see cref="T:System.Web.UI.WebControls.Calendar" />
control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.CalendarSelectionMode.None">
      <summary>
        <para> No dates can be selected on the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.CalendarSelectionMode.Day">
      <summary>
        <para> A single date can be
      selected on the <see cref="T:System.Web.UI.WebControls.Calendar" />
      control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.CalendarSelectionMode.DayWeek">
      <summary>
        <para> A single date or
      entire week can be selected on the <see cref="T:System.Web.UI.WebControls.Calendar" />
      control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.CalendarSelectionMode.DayWeekMonth">
      <summary>
        <para> 
      A single date, week, or entire month can be selected on the <see cref="T:System.Web.UI.WebControls.Calendar" />
      control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.CheckBox">
      <summary>
        <para> Displays a check box that allows the user to
 select a <see langword="true" /> or <see langword="false" />
 condition.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.CheckBox.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.CheckBox" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.CheckBox.OnCheckedChanged(System.EventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Web.UI.WebControls.CheckBox.CheckedChanged" /> event of the <see cref="T:System.Web.UI.WebControls.CheckBox" /> control. This
   allows you to handle the event
   directly.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBox.AutoPostBack">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.CheckBox" /> state
   automatically posts back to the server
   when
   clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBox.Checked">
      <summary>
        <para> Gets or sets a value indicating whether the
 <see cref="T:System.Web.UI.WebControls.CheckBox" /> control
 is checked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBox.Text">
      <summary>
        <para>Gets or sets the text label associated with the <see cref="T:System.Web.UI.WebControls.CheckBox" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBox.TextAlign">
      <summary>
        <para> Gets or sets
      the alignment of the text label associated with the <see cref="T:System.Web.UI.WebControls.CheckBox" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.CheckBox.CheckedChanged">
      <summary>
        <para>Occurs when the value of the <see cref="P:System.Web.UI.WebControls.CheckBox.Checked" /> property changes between
   posts
   to the server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.CheckBoxList">
      <summary>
        <para>Creates a multi selection check box group that can be
      dynamically created by binding the control to a data source.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ListControl">
      <summary>
        <para> Serves
      as the abstract base class that defines the properties,
      methods, and events common for all list-type controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ListControl" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListControl.OnSelectedIndexChanged(System.EventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Web.UI.WebControls.ListControl.SelectedIndexChanged" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" qualify="true" /> that contains the event data. </param>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.AutoPostBack">
      <summary>
        <para> Gets or
 sets a value indicating whether a postback to the server automatically occurs
 when the user changes the list selection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.DataMember">
      <summary>
        <para>Gets or sets the specific table in the <see cref="P:System.Web.UI.WebControls.ListControl.DataSource" /> to bind to the 
    control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.DataSource">
      <summary>
        <para> 
       Gets or sets the data source
       that populates the items of the list control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.DataTextField">
      <summary>
        <para> Gets or sets the field of the
      data source that provides the text content of the list items.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.DataTextFormatString">
      <summary>
        <para> Gets or sets the formatting string used to control how data bound to the 
       list control is displayed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.DataValueField">
      <summary>
        <para> Gets or sets the field of the data source that provides the value of each 
       list item.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.Items">
      <summary>
        <para> 
       Gets the collection of items
       in the
       list control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.SelectedIndex">
      <summary>
        <para> Gets or sets the lowest ordinal index of the selected items in the 
       list.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListControl.SelectedItem">
      <summary>
        <para>Gets the selected item with the lowest index in the list control. </para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.ListControl.SelectedIndexChanged">
      <summary>
        <para>Occurs when the selection on the list changes and is posted back to the
       server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.IRepeatInfoUser">
      <summary>
        <para> Defines the properties and methods that must be implemented by any list control that
      repeats a list of items.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)">
      <summary>
        <para>Retrieves the style of the specified item type at the
      specified index in the list control.</para>
      </summary>
      <param name="itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> enumeration values.</param>
      <param name=" repeatIndex">An ordinal index that specifies the location of the item in the list control.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Style" />
that represents the style of the specified item type at
the specified index in the
list control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)">
      <summary>
        <para>Renders an item in the list with the specified information.</para>
      </summary>
      <param name=" itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> enumeration values.</param>
      <param name=" repeatIndex">An ordinal index that specifies the location of the item in the list control.</param>
      <param name=" repeatInfo">A <see cref="T:System.Web.UI.WebControls.RepeatInfo" /> that represents the information used to render the item in the list.</param>
      <param name=" writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.IRepeatInfoUser.HasHeader">
      <summary>
        <para>Gets a value indicating whether the list control contains a
      heading section.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.IRepeatInfoUser.HasFooter">
      <summary>
        <para>Gets a value indicating whether the list control contains
      a footer section.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators">
      <summary>
        <para>Gets a value indicating whether the list control contains a separator between
      items in
      the list.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount">
      <summary>
        <para>Gets the number of items in the list control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.CheckBoxList.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.CheckBoxList" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBoxList.CellPadding">
      <summary>
        <para> Gets or sets the distance (in pixels) between the border
      and contents of the cell.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBoxList.CellSpacing">
      <summary>
        <para> Gets or sets the
      distance (in pixels) between cells.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBoxList.RepeatColumns">
      <summary>
        <para>Gets or sets the number of columns to display in the
   <see cref="T:System.Web.UI.WebControls.CheckBoxList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBoxList.RepeatDirection">
      <summary>
        <para> Gets or sets a value that indicates whether the control displays
      vertically or horizontally.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBoxList.RepeatLayout">
      <summary>
        <para> Gets or sets the layout of the check
      boxes.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CheckBoxList.TextAlign">
      <summary>
        <para> Gets or
      sets the text alignment for the check boxes within the group.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridColumnCollection">
      <summary>
        <para>A collection of <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column objects that represent
 the columns in a <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.
 This class cannot be
 inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.#ctor(System.Web.UI.WebControls.DataGrid,System.Collections.ArrayList)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> class.</para>
      </summary>
      <param name="owner">The <see cref="T:System.Web.UI.WebControls.DataGrid" /> control that corresponds with this collection.</param>
      <param name=" columns">A <see cref="T:System.Collections.ArrayList" qualify="true" /> object that stores the collection of columns.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.Add(System.Web.UI.WebControls.DataGridColumn)">
      <summary>
        <para>Appends the specified <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object to the end of the
<see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</para>
      </summary>
      <param name="column">The <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object to append to the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.AddAt(System.Int32,System.Web.UI.WebControls.DataGridColumn)">
      <summary>
        <para>Inserts a <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> 
at the specified index.</para>
      </summary>
      <param name="index">The index location in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> to insert the <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object.</param>
      <param name=" column">The <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object to insert into the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.Clear">
      <summary>
        <para> Removes all <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column objects from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the items from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> to the specified <see cref="T:System.Array" qualify="true" />
object, starting at
the specified index in the <see cref="T:System.Array" qualify="true" /> object.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> object that receives the copied items from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</param>
      <param name=" index">The first position in the specified <see cref="T:System.Array" qualify="true" /> object to receive the copied contents.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IEnumerator" qualify="true" /> interface that contains all
<see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived 
   column objects in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" qualify="true" /> interface that contains all <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived
   column objects in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.IndexOf(System.Web.UI.WebControls.DataGridColumn)">
      <summary>
        <para>Returns the index of the specified <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</para>
      </summary>
      <param name="column">The <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object to search for in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</param>
      <returns>
        <para>The index position of the specified <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />. The default value is <see langword="-1" />, which indicates that the specified
<see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived object is not found.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes a <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> at the specified
   index.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> to remove.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridColumnCollection.Remove(System.Web.UI.WebControls.DataGridColumn)">
      <summary>
        <para>Removes the specified <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</para>
      </summary>
      <param name="column">The <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object to remove from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumnCollection.Count">
      <summary>
        <para>Gets the number of columns in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumnCollection.IsReadOnly">
      <summary>
        <para>Gets a value that indicates whether the columns in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
can be modified.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumnCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumnCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access
      to the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridColumnCollection.Item(System.Int32)">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived column object from the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> collection at the specified
   index.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Web.UI.WebControls.DataGridColumn" /> derived object in the <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" /> collection to retrieve.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.CommandEventArgs">
      <summary>
        <para>Provides data for the <see langword="Command" /> event.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.CommandEventArgs.#ctor(System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> class with another <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> object.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.CommandEventArgs.#ctor(System.String,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> class with the specified command name
   and argument.</para>
      </summary>
      <param name="commandName">The name of the command.</param>
      <param name=" argument">A <see cref="T:System.Object" qualify="true" /> that contains the arguments for the command.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.CommandEventArgs.CommandName">
      <summary>
        <para> Gets the name of the command.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument">
      <summary>
        <para> Gets the argument for the command.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.CommandEventHandler">
      <summary>
        <para>Represents the method that will handle
      the <see langword="Command" /> event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.CompareValidator">
      <summary>
        <para> Compares the value entered by the user into an input control with
      the value entered into another input control or a constant value.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CompareValidator.ControlToCompare">
      <summary>
        <para> Gets or sets the input control to compare with the input control being validated.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CompareValidator.Operator">
      <summary>
        <para>Gets or sets the comparison operation to perform.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.CompareValidator.ValueToCompare">
      <summary>
        <para>Gets or sets a constant value to compare with the value entered by the user into the input control being validated.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.CustomValidator">
      <summary>
        <para> Performs user-defined validation on an input control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> event for the <see cref="T:System.Web.UI.WebControls.CustomValidator" />
control.</para>
      </summary>
      <param name="value">The value to validate.</param>
      <returns>
        <para>
          <see langword="true" /> if the value 
   specified by the <paramref name="value" /> parameter passes validation; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction">
      <summary>
        <para> Gets or sets the name of the custom client-side script function used
      for validation.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.CustomValidator.ServerValidate">
      <summary>
        <para>Occurs when validation is performed on the 
 server.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGrid">
      <summary>
        <para> A data bound list control that displays the items from
      data source in a table. The <see cref="T:System.Web.UI.WebControls.DataGrid" />
      control allows you to select, sort, and
      edit these items.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.SortCommandName">
      <summary>
        <para> Represents the <see langword="Sort" />
command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.SelectCommandName">
      <summary>
        <para> Represents the <see langword="Select " />command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.EditCommandName">
      <summary>
        <para> Represents the <see langword="Edit" />
command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.DeleteCommandName">
      <summary>
        <para> Represents the <see langword="Delete" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.UpdateCommandName">
      <summary>
        <para> Represents the <see langword="Update" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.CancelCommandName">
      <summary>
        <para> Represents the <see langword="Cancel" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.PageCommandName">
      <summary>
        <para> Represents the <see langword="Page " />command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.NextPageCommandArgument">
      <summary>
        <para> Represents the <see langword="Next" /> command argument. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataGrid.PrevPageCommandArgument">
      <summary>
        <para> Represents the <see langword="Prev" /> command argument. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnCancelCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.CancelCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnDeleteCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.DeleteCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnEditCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.EditCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnItemCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCommand" /> event. This allows you to
 provide a custom handler for the event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnItemCreated(System.Web.UI.WebControls.DataGridItemEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCreated" /> event. This allows you to
   provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridItemEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnItemDataBound(System.Web.UI.WebControls.DataGridItemEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.ItemDataBound" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridItemEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnPageIndexChanged(System.Web.UI.WebControls.DataGridPageChangedEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.PageIndexChanged" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridPageChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnSortCommand(System.Web.UI.WebControls.DataGridSortCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.SortCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridSortCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGrid.OnUpdateCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataGrid.UpdateCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.AllowCustomPaging">
      <summary>
        <para>Gets or sets a value that indicates whether custom paging is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.AllowPaging">
      <summary>
        <para>Gets or sets a value that indicates whether paging is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.AllowSorting">
      <summary>
        <para>Gets or sets a value that indicates whether sorting is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.AlternatingItemStyle">
      <summary>
        <para>Gets the style properties for alternating items in the
 <see cref="T:System.Web.UI.WebControls.DataGrid" />
 control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.AutoGenerateColumns">
      <summary>
        <para>Gets or sets a value that indicates whether <see cref="T:System.Web.UI.WebControls.BoundColumn" />
objects are automatically created and displayed in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control for each field in the data
source.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.BackImageUrl">
      <summary>
        <para>Gets or sets the URL of an image to display in the
      background of the <see cref="T:System.Web.UI.WebControls.DataGrid" />
      control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.CurrentPageIndex">
      <summary>
        <para> Gets or sets the index of the currently displayed page. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.Columns">
      <summary>
        <para>Gets a collection of objects that represent the columns of
      the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.EditItemIndex">
      <summary>
        <para> Gets or sets the index of an item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control to edit.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.EditItemStyle">
      <summary>
        <para> Gets the style properties of the item selected for editing in the
 <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.FooterStyle">
      <summary>
        <para> Gets the style properties of the footer section in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.HeaderStyle">
      <summary>
        <para> Gets the style properties of the heading section in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.Items">
      <summary>
        <para>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataGridItem" /> objects that
   represent the individual items in the <see cref="T:System.Web.UI.WebControls.DataGrid" />
   
   control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.ItemStyle">
      <summary>
        <para> Gets the style properties of the items in the
 <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.PageCount">
      <summary>
        <para> Gets the total number of pages required to display
      the items in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.PagerStyle">
      <summary>
        <para> Gets the style properties of the paging section of the
   <see cref="T:System.Web.UI.WebControls.DataGrid" />
   control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.PageSize">
      <summary>
        <para>Gets or sets the number of items to display on a single
      page of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.SelectedIndex">
      <summary>
        <para>Gets or sets the index of the selected item in the
   <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.SelectedItem">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.DataGridItem" /> object that
   represents the selected item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.SelectedItemStyle">
      <summary>
        <para> Gets the style properties of the currently selected
 item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.ShowFooter">
      <summary>
        <para> Gets or sets a value that indicates whether the footer is displayed in the
   <see cref="T:System.Web.UI.WebControls.DataGrid" />
   control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.ShowHeader">
      <summary>
        <para> Gets or sets a value that indicates whether the header is displayed in the
 <see cref="T:System.Web.UI.WebControls.DataGrid" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGrid.VirtualItemCount">
      <summary>
        <para>Gets or sets the virtual number of items in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control
   when custom paging is used.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.CancelCommand">
      <summary>
        <para> Occurs when the <see langword="Cancel" /> button is
   clicked for an item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.DeleteCommand">
      <summary>
        <para>Occurs when the <see langword="Delete" /> button is
   clicked for an item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.EditCommand">
      <summary>
        <para>Occurs when the <see langword="Edit" /> button is clicked
   for an item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.ItemCommand">
      <summary>
        <para>Occurs when any button is clicked in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.ItemCreated">
      <summary>
        <para>Occurs on the server when an item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control is created.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.ItemDataBound">
      <summary>
        <para> Occurs after an item is data bound to
 the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.PageIndexChanged">
      <summary>
        <para>Occurs when one of the page selection elements is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.SortCommand">
      <summary>
        <para>Occurs when a column is sorted.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataGrid.UpdateCommand">
      <summary>
        <para>Occurs when the <see langword="Update" /> button is
   clicked for an item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridCommandEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.DataGrid.CancelCommand" />, <see cref="E:System.Web.UI.WebControls.DataGrid.DeleteCommand" />, <see cref="E:System.Web.UI.WebControls.DataGrid.EditCommand" />, <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCommand" />, and <see cref="E:System.Web.UI.WebControls.DataGrid.UpdateCommand" /> events of the <see cref="T:System.Web.UI.WebControls.DataGrid" />
control. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridCommandEventArgs.#ctor(System.Web.UI.WebControls.DataGridItem,System.Object,System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" />
class.</para>
      </summary>
      <param name="item">A <see cref="T:System.Web.UI.WebControls.DataGridItem" /> that represents the selected item in the <see cref="T:System.Web.UI.WebControls.DataGrid" />.</param>
      <param name=" commandSource">The source of the command.</param>
      <param name=" originalArgs">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridCommandEventArgs.CommandSource">
      <summary>
        <para> Gets the source of the command.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridCommandEventArgs.Item">
      <summary>
        <para> Gets the item containing the command source in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridCommandEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.DataGrid.CancelCommand" />, <see cref="E:System.Web.UI.WebControls.DataGrid.DeleteCommand" />, <see cref="E:System.Web.UI.WebControls.DataGrid.EditCommand" />, <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCommand" />, and <see cref="E:System.Web.UI.WebControls.DataGrid.UpdateCommand" /> events of a <see cref="T:System.Web.UI.WebControls.DataGrid" />.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridItem">
      <summary>
        <para> Represents an item (row) in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TableRow">
      <summary>
        <para> Represents a row in a <see cref="T:System.Web.UI.WebControls.Table" /> 
control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRow.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TableRow" /> class.
   </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRow.Cells">
      <summary>
        <para> Gets a collection of <see cref="T:System.Web.UI.WebControls.TableCell" /> 
objects that represent the cells of a row in a
<see cref="T:System.Web.UI.WebControls.Table" /> 
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRow.HorizontalAlign">
      <summary>
        <para> Gets or sets the horizontal alignment of the contents in the row.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRow.VerticalAlign">
      <summary>
        <para>Gets or sets the vertical alignment of the contents in the row.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRow.CellControlCollection.Add(System.Web.UI.Control)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRow.CellControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.Control" /> object to the collection. The new control is added
    to the array at the specified index location.</para>
      </summary>
      <param name=" index">The location in the array to add the child control.</param>
      <param name="child">The <see langword="Control" /> object to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridItem.#ctor(System.Int32,System.Int32,System.Web.UI.WebControls.ListItemType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGridItem" /> class.</para>
      </summary>
      <param name="itemIndex">The index of the item in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control from the <see cref="P:System.Web.UI.WebControls.DataGrid.Items" /> collection.</param>
      <param name="dataSetIndex">The index number of the item, from the bound data source, that appears in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</param>
      <param name="itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> values.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItem.DataItem">
      <summary>
        <para>Gets or sets the data item represented by the <see cref="T:System.Web.UI.WebControls.DataGridItem" /> object in the <see cref="T:System.Web.UI.WebControls.DataGrid" />
control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItem.DataSetIndex">
      <summary>
        <para> Gets the index number the
   <see cref="T:System.Web.UI.WebControls.DataGridItem" /> object from the bound data
      source.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItem.ItemIndex">
      <summary>
        <para> Gets the index of the
   <see cref="T:System.Web.UI.WebControls.DataGridItem" /> object from the <see cref="P:System.Web.UI.WebControls.DataGrid.Items" />
   collection of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItem.ItemType">
      <summary>
        <para> Gets the type of the item represented by the <see cref="T:System.Web.UI.WebControls.DataGridItem" /> object in the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridItemCollection">
      <summary>
        <para> Represents a collection of <see cref="T:System.Web.UI.WebControls.DataGridItem" /> objects in a <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridItemCollection.#ctor(System.Collections.ArrayList)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" /> class.</para>
      </summary>
      <param name="items">A <see cref="T:System.Collections.ArrayList" qualify="true" /> object that contains the items with which to initialize the collection. </param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies all the items from this <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" /> to the specified <see cref="T:System.Array" qualify="true" /> object,
   starting at the specified index in the <see cref="T:System.Array" qualify="true" /> object.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> object that receives the copied items from the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />.</param>
      <param name=" index">The first position in the specified <see cref="T:System.Array" qualify="true" /> object to receive the copied contents.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridItemCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all
<see cref="T:System.Web.UI.WebControls.DataGridItem" /> objects in the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all <see cref="T:System.Web.UI.WebControls.DataGridItem" /> objects in the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItemCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.WebControls.DataGridItem" /> objects in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItemCollection.IsReadOnly">
      <summary>
        <para>Gets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.DataGridItem" /> objects in the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
can be modified. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItemCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItemCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access to
      the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItemCollection.Item(System.Int32)">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.WebControls.DataGridItem" /> object at the specified index in the
   collection.</para>
      </summary>
      <param name="index">The zero-based index of the <see cref="T:System.Web.UI.WebControls.DataGridItem" /> object to retrieve from the collection.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridItemEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCreated" /> and <see cref="E:System.Web.UI.WebControls.DataGrid.ItemDataBound" /> events of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.
   This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridItemEventArgs.#ctor(System.Web.UI.WebControls.DataGridItem)">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Web.UI.WebControls.DataGridItemEventArgs" /> class.</para>
      </summary>
      <param name="item">A <see cref="T:System.Web.UI.WebControls.DataGridItem" /> that represents an item in the <see cref="T:System.Web.UI.WebControls.DataGrid" />.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridItemEventArgs.Item">
      <summary>
        <para> Gets the referenced item in the <see cref="T:System.Web.UI.WebControls.DataGrid" />
control when the event is raised.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridItemEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCreated" /> and <see cref="E:System.Web.UI.WebControls.DataGrid.ItemDataBound" /> events of a <see cref="T:System.Web.UI.WebControls.DataGrid" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.DataGridItemEventArgs" /> than contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.LinkButton">
      <summary>
        <para> Displays a hyperlink style button control on a Web page.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.LinkButton.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinkButton" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.LinkButton.Click" /> event of the <see cref="T:System.Web.UI.WebControls.LinkButton" /> control.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> event of
   the <see cref="T:System.Web.UI.WebControls.LinkButton" /> control.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.LinkButton.CommandName">
      <summary>
        <para>Gets or sets the command name associated with the
   <see cref="T:System.Web.UI.WebControls.LinkButton" /> control.
      This value is passed to the <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> event handler along with the
   <see cref="P:System.Web.UI.WebControls.LinkButton.CommandArgument" />
   property.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.LinkButton.CommandArgument">
      <summary>
        <para> Gets or sets an optional argument passed to the
   <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> event handler along with the
      associated <see cref="P:System.Web.UI.WebControls.LinkButton.CommandName" />
      property.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.LinkButton.CausesValidation">
      <summary>
        <para>Gets or sets a value indicating whether validation is
 performed when the <see cref="T:System.Web.UI.WebControls.LinkButton" />
 control is clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.LinkButton.Text">
      <summary>
        <para>Gets or sets the text caption displayed on the <see cref="T:System.Web.UI.WebControls.LinkButton" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.LinkButton.Click">
      <summary>
        <para>Occurs when the <see cref="T:System.Web.UI.WebControls.LinkButton" /> control is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.LinkButton.Command">
      <summary>
        <para>Occurs when the <see cref="T:System.Web.UI.WebControls.Button" />
control is clicked.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridPageChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.DataGrid.PageIndexChanged" /> event of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.
   This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridPageChangedEventArgs.#ctor(System.Object,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGridPageChangedEventArgs" /> class.</para>
      </summary>
      <param name="commandSource">The source of the command.</param>
      <param name=" newPageIndex">The index of the page selected by the user from the page selection element of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPageChangedEventArgs.CommandSource">
      <summary>
        <para> Gets the source of the command.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPageChangedEventArgs.NewPageIndex">
      <summary>
        <para>Gets the index of the page selected by the user in the page
      selection element of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridPageChangedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.DataGrid.PageIndexChanged" />
event of the <see cref="T:System.Web.UI.WebControls.DataGrid" />
control.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.DataGridPageChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridPagerStyle">
      <summary>
        <para>Specifies the style for the pager of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TableItemStyle">
      <summary>
        <para> Represents the style properties
      for an element of a control that renders as a <see cref="T:System.Web.UI.WebControls.TableRow" /> or <see cref="T:System.Web.UI.WebControls.TableCell" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Style">
      <summary>
        <para> Represents the style of a
      Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Style.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Style" /> class using default values.
   </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Style.#ctor(System.Web.UI.StateBag)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Style" /> class with the
   specified state bag information.
   </para>
      </summary>
      <param name="bag">A <see cref="T:System.Web.UI.StateBag" qualify="true" /> that represents the state bag in which to store style information. </param>
    </member>
    <member name="M:System.Web.UI.WebControls.Style.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
      <summary>
        <para> Adds HTML attributes and styles that need to be rendered
      to the specified <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" />. This method is primarily used by control
      developers.</para>
      </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Style.AddAttributesToRender(System.Web.UI.HtmlTextWriter,System.Web.UI.WebControls.WebControl)">
      <summary>
        <para> Adds HTML attributes and styles that need to be rendered
      to the specified <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> and Web
      server control. This method is primarily used by control
      developers.</para>
      </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream to render HTML content on the client.</param>
      <param name=" owner">A <see cref="T:System.Web.UI.WebControls.WebControl" /> or <see cref="T:System.Web.UI.WebControls.WebControl" /> derived object that represents the Web server control associated with the <see cref="T:System.Web.UI.WebControls.Style" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Style.CopyFrom(System.Web.UI.WebControls.Style)">
      <summary>
        <para>Duplicates the style properties of the specified
   <see cref="T:System.Web.UI.WebControls.Style" /> into the instance of the <see cref="T:System.Web.UI.WebControls.Style" /> class that this
      method is called from.</para>
      </summary>
      <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style to copy.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Style.MergeWith(System.Web.UI.WebControls.Style)">
      <summary>
        <para> Combines the style properties of the specified
   <see cref="T:System.Web.UI.WebControls.Style" /> with the instance of the <see cref="T:System.Web.UI.WebControls.Style" /> class that this
      method is called from.</para>
      </summary>
      <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style to combine.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Style.Reset">
      <summary>
        <para> Removes any defined style elements from the state bag.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.BackColor">
      <summary>
        <para>Gets or sets the background color of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.BorderColor">
      <summary>
        <para>Gets or sets the border color of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.BorderWidth">
      <summary>
        <para>Gets or sets the border width of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.BorderStyle">
      <summary>
        <para>Gets or sets the border style of the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.CssClass">
      <summary>
        <para>Gets or sets the CSS class rendered by the Web server control on the client.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.Font">
      <summary>
        <para>Gets the font properties associated with the Web server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.ForeColor">
      <summary>
        <para>Gets or sets the foreground color (typically the color of the text) of the Web
      server control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.Height">
      <summary>
        <para> Gets or sets the height of the Web server control.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.Width">
      <summary>
        <para> Gets or sets the width of the Web server control.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Style.IsTrackingViewState">
      <summary>
        <para> Returns a value indicating whether
      any style elements have been defined in the state bag.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableItemStyle.#ctor">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> class using default values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableItemStyle.#ctor(System.Web.UI.StateBag)">
      <summary>
        <para> Creates a new instance of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> class with the
   specified state bag.
   </para>
      </summary>
      <param name="bag">A <see cref="T:System.Web.UI.StateBag" qualify="true" /> that represents the state bag in which to store style information. </param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableItemStyle.CopyFrom(System.Web.UI.WebControls.Style)">
      <summary>
        <para>Duplicates the style properties of the specified
   <see cref="T:System.Web.UI.WebControls.Style" /> into the instance of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> class that this
      method is called from.</para>
      </summary>
      <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style to copy.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableItemStyle.MergeWith(System.Web.UI.WebControls.Style)">
      <summary>
        <para> Combines the style properties of the specified
   <see cref="T:System.Web.UI.WebControls.Style" /> into the instance of the <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> class that this
      method is called from.</para>
      </summary>
      <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style to combine.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableItemStyle.Reset">
      <summary>
        <para> Removes any defined style elements from the state bag.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableItemStyle.HorizontalAlign">
      <summary>
        <para>Gets or sets the horizontal alignment of the contents in a cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableItemStyle.VerticalAlign">
      <summary>
        <para>Gets or sets the vertical alignment of the contents in a cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableItemStyle.Wrap">
      <summary>
        <para>Gets or sets a value indicating whether the contents of a cell wrap in the cell.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridPagerStyle.CopyFrom(System.Web.UI.WebControls.Style)">
      <summary>
        <para> Copies the style of the specified <see cref="T:System.Web.UI.WebControls.Style" /> object into this instance of the
<see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" /> class.</para>
      </summary>
      <param name="s">The <see cref="T:System.Web.UI.WebControls.Style" /> object to copy from.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridPagerStyle.MergeWith(System.Web.UI.WebControls.Style)">
      <summary>
        <para>Merges the style of the specified <see cref="T:System.Web.UI.WebControls.Style" /> object with this instance of the <see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" /> class.</para>
      </summary>
      <param name="s">The <see cref="T:System.Web.UI.WebControls.Style" /> object to merge with.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridPagerStyle.Reset">
      <summary>
        <para>Restores the <see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" /> object to its default values.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPagerStyle.Mode">
      <summary>
        <para> Gets or sets a value that specifies 
      whether the pager element displays buttons that link to the next
      and previous page, or numeric buttons that link directly to a page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPagerStyle.NextPageText">
      <summary>
        <para> Gets or sets the text displayed for the next page
      button.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPagerStyle.PageButtonCount">
      <summary>
        <para>Gets or sets the number of numeric buttons to display concurrently in the pager element
      of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPagerStyle.Position">
      <summary>
        <para> Gets or sets the position of the pager element in the <see cref="T:System.Web.UI.WebControls.DataGrid" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPagerStyle.PrevPageText">
      <summary>
        <para> Gets or sets the text displayed for the previous
      page button.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridPagerStyle.Visible">
      <summary>
        <para> Gets or sets a value indicating whether the pager
      is displayed in the <see cref="T:System.Web.UI.WebControls.DataGrid" />
      control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridSortCommandEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.DataGrid.SortCommand" /> event of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.
 This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataGridSortCommandEventArgs.#ctor(System.Object,System.Web.UI.WebControls.DataGridCommandEventArgs)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataGridSortCommandEventArgs" /> class.</para>
      </summary>
      <param name="commandSource">The source of the command.</param>
      <param name=" dce">A <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" /> that contains the event data. </param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridSortCommandEventArgs.CommandSource">
      <summary>
        <para> Gets the source of the command. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataGridSortCommandEventArgs.SortExpression">
      <summary>
        <para> Gets the expression used to sort the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataGridSortCommandEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.DataGrid.SortCommand" />
event of the <see cref="T:System.Web.UI.WebControls.DataGrid" />
control.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataGridSortCommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.Table">
      <summary>
        <para>Constructs a table and defines its properties.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Table.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Table" /> class.
    </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Table.BackImageUrl">
      <summary>
        <para>Indicates the URL of the background image to display 
       behind the table. The image will be tiled if it is smaller than the table.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Table.CellSpacing">
      <summary>
        <para>Gets or
       sets
       the distance (in pixels) between table cells.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Table.CellPadding">
      <summary>
        <para>Gets or sets
       the distance (in pixels) between the border and
       the contents of the table cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Table.GridLines">
      <summary>
        <para>Gets or sets a value that specifies the grid line style to display in the <see cref="T:System.Web.UI.WebControls.Table" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Table.HorizontalAlign">
      <summary>
        <para>Gets or sets the horizontal alignment of the table within the page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Table.Rows">
      <summary>
        <para> Gets the collection of rows within
       the table.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Table.RowControlCollection.Add(System.Web.UI.Control)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Table.RowControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.Control" /> object to the collection. The new control is added
    to the array at the specified index location.</para>
      </summary>
      <param name=" index">The location in the array to add the child control.</param>
      <param name="child">The <see langword="Control" /> object to add to the collection.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DataKeyCollection">
      <summary>
        <para>Represents a collection that contains the key field of each record in a data source. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataKeyCollection.#ctor(System.Collections.ArrayList)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" /> class.</para>
      </summary>
      <param name="keys">A <see cref="T:System.Collections.ArrayList" qualify="true" /> that contains key fields from the data source.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataKeyCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies all the items from the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" /> to the specified <see cref="T:System.Array" qualify="true" /> object,
   starting at the specified index in the <see cref="T:System.Array" qualify="true" /> object.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> object that receives the copied items from the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />.</param>
      <param name=" index">The first position in the specified <see cref="T:System.Array" qualify="true" /> object to receive the copied contents.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataKeyCollection.GetEnumerator">
      <summary>
        <para>Creates a <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all 
   key fields in the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all 
   key fields in the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.DataKeyCollection.Count">
      <summary>
        <para> Gets the number of items in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataKeyCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether items in the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" /> 
can be modified.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataKeyCollection.IsSynchronized">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataKeyCollection.SyncRoot">
      <summary>
        <para>Gets the object used to synchronize access to the <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataKeyCollection.Item(System.Int32)">
      <summary>
        <para> Gets the key field at the specified index in the collection.</para>
      </summary>
      <param name="index"> The zero-based index of the key field to retrieve from the collection.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DataList">
      <summary>
        <para>A data bound list control that displays items using templates.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataList.SelectCommandName">
      <summary>
        <para>Represents the <see langword="Select" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataList.EditCommandName">
      <summary>
        <para>Represents the <see langword="Edit" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataList.UpdateCommandName">
      <summary>
        <para>Represents the <see langword="Update" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataList.CancelCommandName">
      <summary>
        <para> Represents the <see langword="Cancel" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DataList.DeleteCommandName">
      <summary>
        <para>Represents the <see langword="Delete" /> command name. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataList" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataList.CancelCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataList.EditCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataList.ItemCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataList.ItemCreated" /> event. This allows you to
   provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataList.ItemDataBound" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" /> event. This allows you to
 provide a custom handler for the event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> that contains event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.AlternatingItemStyle">
      <summary>
        <para>Gets the style properties for alternating items in the <see cref="T:System.Web.UI.WebControls.DataList" />
control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.AlternatingItemTemplate">
      <summary>
        <para> Gets or sets the template for alternating items in the <see cref="T:System.Web.UI.WebControls.DataList" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.EditItemIndex">
      <summary>
        <para>Gets or sets the index number of the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control to edit.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.EditItemStyle">
      <summary>
        <para> Gets the style properties for the item selected for
 editing in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.EditItemTemplate">
      <summary>
        <para> Gets or sets the template for the item selected for editing in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.ExtractTemplateRows">
      <summary>
        <para>Gets or sets a
      value that indicates whether the rows of a <see cref="T:System.Web.UI.WebControls.Table" /> control,
      defined in each template of a <see cref="T:System.Web.UI.WebControls.DataList" />
      control, are extracted and displayed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.FooterStyle">
      <summary>
        <para>Gets the style properties for the footer section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.FooterTemplate">
      <summary>
        <para> Gets or sets the template for the footer section of the <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.GridLines">
      <summary>
        <para>Gets or sets the grid line style for the <see cref="T:System.Web.UI.WebControls.DataList" /> control 
 when the <see cref="P:System.Web.UI.WebControls.DataList.RepeatLayout" />
 property is set to <see langword="RepeatLayout.Table" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.HeaderStyle">
      <summary>
        <para>Gets the style properties for the heading section of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.HeaderTemplate">
      <summary>
        <para> Gets or sets the template for the heading section of the <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.Items">
      <summary>
        <para>Gets a collection of <see cref="T:System.Web.UI.WebControls.DataListItem" /> objects representing the individual
   items within the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.ItemStyle">
      <summary>
        <para>Gets the style properties for the items in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.ItemTemplate">
      <summary>
        <para> Gets or sets the template for the items in the <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.RepeatColumns">
      <summary>
        <para>Gets or sets the number of columns to display in the
 <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.RepeatDirection">
      <summary>
        <para>Gets or sets whether the <see cref="T:System.Web.UI.WebControls.DataList" /> control displays vertically or horizontally.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.RepeatLayout">
      <summary>
        <para> Gets or sets whether the control is displayed in a table
 or flow layout.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.SelectedIndex">
      <summary>
        <para> Gets or sets the index of the selected item in the
   <see cref="T:System.Web.UI.WebControls.DataList" />
   control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.SelectedItem">
      <summary>
        <para>Gets the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.SelectedItemStyle">
      <summary>
        <para> Gets the style properties for the selected item
 in the <see cref="T:System.Web.UI.WebControls.DataList" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.SelectedItemTemplate">
      <summary>
        <para> Gets or sets the template for the selected item in the <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.SeparatorStyle">
      <summary>
        <para>Gets the style properties of the separator between each item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.SeparatorTemplate">
      <summary>
        <para> Gets or sets the template for the separator between the items of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.ShowFooter">
      <summary>
        <para>Gets or sets a value indicating whether the footer section is
 displayed in the <see cref="T:System.Web.UI.WebControls.DataList" />
 control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataList.ShowHeader">
      <summary>
        <para> Gets or sets a value indicating whether the header section is displayed in the <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataList.CancelCommand">
      <summary>
        <para>Occurs when the <see langword="Cancel" /> button is clicked
   for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataList.DeleteCommand">
      <summary>
        <para>Occurs when the <see langword="Delete" /> button is clicked
   for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataList.EditCommand">
      <summary>
        <para>Occurs when the <see langword="Edit" /> button is clicked
   for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataList.ItemCommand">
      <summary>
        <para>Occurs when any button is clicked in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataList.ItemCreated">
      <summary>
        <para>Occurs on the server when an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control is created.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataList.ItemDataBound">
      <summary>
        <para>Occurs when an item is data bound to the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.DataList.UpdateCommand">
      <summary>
        <para>Occurs when the <see langword="Update" /> button is clicked
   for an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataListCommandEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.DataList.CancelCommand" />, <see cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" />, <see cref="E:System.Web.UI.WebControls.DataList.EditCommand" />, <see cref="E:System.Web.UI.WebControls.DataList.ItemCommand" />, and <see cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" /> events of the <see cref="T:System.Web.UI.WebControls.DataList" /> control.
   This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataListCommandEventArgs.#ctor(System.Web.UI.WebControls.DataListItem,System.Object,System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> class.</para>
      </summary>
      <param name="item">The selected item from the <see cref="T:System.Web.UI.WebControls.DataList" />.</param>
      <param name=" commandSource">The source of the command.</param>
      <param name=" originalArgs">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the original event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListCommandEventArgs.Item">
      <summary>
        <para> Gets the item containing the command source in the <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListCommandEventArgs.CommandSource">
      <summary>
        <para>Gets the source of the command.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataListCommandEventHandler">
      <summary>
        <para>Represents the method that will handle the
   <see cref="E:System.Web.UI.WebControls.DataList.CancelCommand" />, <see cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" />, <see cref="E:System.Web.UI.WebControls.DataList.EditCommand" />, <see cref="E:System.Web.UI.WebControls.DataList.ItemCommand" />, and <see cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" /> events of a <see cref="T:System.Web.UI.WebControls.DataList" />
   control.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DataListItem">
      <summary>
        <para>Represents an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataListItem.#ctor(System.Int32,System.Web.UI.WebControls.ListItemType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataListItem" /> class.</para>
      </summary>
      <param name="itemIndex">The index of the item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control from the <see cref="P:System.Web.UI.WebControls.DataList.Items" /> collection. </param>
      <param name="itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> values.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataListItem.RenderItem(System.Web.UI.HtmlTextWriter,System.Boolean,System.Boolean)">
      <summary>
        <para>Displays the <see cref="T:System.Web.UI.WebControls.DataListItem" /> object on the client.</para>
      </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> object that contains the output stream for rendering on the client.</param>
      <param name=" extractRows">
        <see langword="true" /> to extract rows; otherwise <see langword="false" />.</param>
      <param name=" tableLayout">
        <see langword="true" /> to display as a table; otherwise <see langword="false" />. </param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItem.DataItem">
      <summary>
        <para>Gets or sets a data item associated with the <see cref="T:System.Web.UI.WebControls.DataListItem" /> object in the <see cref="T:System.Web.UI.WebControls.DataList" /> control. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItem.ItemIndex">
      <summary>
        <para>Gets the index of the <see cref="T:System.Web.UI.WebControls.DataListItem" /> object from from the <see cref="P:System.Web.UI.WebControls.DataList.Items" /> collection of the
   control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItem.ItemType">
      <summary>
        <para>Gets the type of the item represented by the <see cref="T:System.Web.UI.WebControls.DataListItem" /> object in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataListItemCollection">
      <summary>
        <para>Represents the collection of <see cref="T:System.Web.UI.WebControls.DataListItem" /> objects in the
<see cref="T:System.Web.UI.WebControls.DataList" /> control. This class cannot be 
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataListItemCollection.#ctor(System.Collections.ArrayList)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> class.</para>
      </summary>
      <param name="items">A <see cref="T:System.Collections.ArrayList" qualify="true" /> object that contains the items with which to initialize the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataListItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies all the items from this <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> collection to the specified <see cref="T:System.Array" qualify="true" /> object,
   starting at the specified index in the <see cref="T:System.Array" qualify="true" /> object.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> object that receives the copied items from the <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> collection.</param>
      <param name=" index">The first position in the specified <see cref="T:System.Array" qualify="true" /> object to receive the copied contents.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.DataListItemCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> interface that contains all
<see cref="T:System.Web.UI.WebControls.DataListItem" /> objects in the <see cref="T:System.Web.UI.WebControls.DataListItemCollection" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" qualify="true" /> interface that contains all <see cref="T:System.Web.UI.WebControls.DataListItem" /> objects in the <see cref="T:System.Web.UI.WebControls.DataListItemCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItemCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.WebControls.DataListItem" /> objects in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItemCollection.IsReadOnly">
      <summary>
        <para>Gets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.DataListItem" /> objects in the <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> can be modified.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItemCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItemCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access
      to the <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> collection. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItemCollection.Item(System.Int32)">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.DataListItem" /> object at the specified index in the
   collection.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Web.UI.WebControls.DataListItem" /> in the collection to retrieve.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DataListItemEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.DataList.ItemCreated" /> and <see cref="E:System.Web.UI.WebControls.DataList.ItemDataBound" /> events of a <see cref="T:System.Web.UI.WebControls.DataList" /> control. 
   This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DataListItemEventArgs.#ctor(System.Web.UI.WebControls.DataListItem)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> class.</para>
      </summary>
      <param name="item">A <see cref="T:System.Web.UI.WebControls.DataListItem" /> object that represents an item in the <see cref="T:System.Web.UI.WebControls.DataList" /> control.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DataListItemEventArgs.Item">
      <summary>
        <para> Gets the referenced item in the <see cref="T:System.Web.UI.WebControls.DataList" />
control when the event is raised.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DataListItemEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.DataList.ItemCreated" /> and <see cref="E:System.Web.UI.WebControls.DataList.ItemDataBound" /> 
events of the <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DayRenderEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.Calendar.DayRender" /> event of the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.
   This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DayRenderEventArgs.#ctor(System.Web.UI.WebControls.TableCell,System.Web.UI.WebControls.CalendarDay)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DayRenderEventArgs" /> class.</para>
      </summary>
      <param name="cell">A <see cref="T:System.Web.UI.WebControls.TableCell" /> object that represents a cell in the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</param>
      <param name=" day">A <see cref="T:System.Web.UI.WebControls.CalendarDay" /> object that represents the day to render in the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.DayRenderEventArgs.Cell">
      <summary>
        <para> Gets the <see cref="T:System.Web.UI.WebControls.TableCell" /> object that represents
   the cell being rendered in the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DayRenderEventArgs.Day">
      <summary>
        <para> Gets the <see cref="T:System.Web.UI.WebControls.CalendarDay" /> that represents the day
   being rendered in the <see cref="T:System.Web.UI.WebControls.Calendar" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DayRenderEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.Calendar.DayRender" />
event of the
<see cref="T:System.Web.UI.WebControls.Calendar" /> 
control.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.DayRenderEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.DayNameFormat">
      <summary>
        <para> Specifies the display format for the days of the week on a <see cref="T:System.Web.UI.WebControls.Calendar" />
control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DayNameFormat.Full">
      <summary>
        <para>The days of the week displayed in full format. For example, Tuesday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DayNameFormat.Short">
      <summary>
        <para>The days of the week displayed in abbreviated format. For example, Tues.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DayNameFormat.FirstLetter">
      <summary>
        <para>The days of the week displayed with just the first letter. For example, T.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.DayNameFormat.FirstTwoLetters">
      <summary>
        <para>The days of the week displayed with just the first two letters. For example, Tu.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.DropDownList">
      <summary>
        <para> Represents a control that allows the user to select a single item from a
      drop-down list.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.DropDownList.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.DropDownList" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DropDownList.BorderColor">
      <summary>
        <para>Gets or sets the border color of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DropDownList.BorderStyle">
      <summary>
        <para>Gets or sets the border style of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DropDownList.BorderWidth">
      <summary>
        <para> Gets or sets the border width for the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DropDownList.SelectedIndex">
      <summary>
        <para> Gets or sets the index of the selected item
      in the <see cref="T:System.Web.UI.WebControls.DropDownList" />
      control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.DropDownList.ToolTip">
      <summary>
        <para>Gets or sets the ToolTip text displayed when the mouse pointer
      rests over the control. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.EditCommandColumn">
      <summary>
        <para>A special column type for
 the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control that contains the
 <see langword="Edit" /> command buttons
 for editing data items in each
 row.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.EditCommandColumn.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.EditCommandColumn" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.EditCommandColumn.ButtonType">
      <summary>
        <para>Gets or sets the button type for the column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.EditCommandColumn.CancelText">
      <summary>
        <para>Gets or sets the text to display for the
   <see langword="Cancel" /> command button in the <see cref="T:System.Web.UI.WebControls.EditCommandColumn" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.EditCommandColumn.EditText">
      <summary>
        <para>Gets or sets the text to display for the
   <see langword="Edit" /> command button in the
   <see cref="T:System.Web.UI.WebControls.EditCommandColumn" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.EditCommandColumn.UpdateText">
      <summary>
        <para>Gets or sets the text to display for the
   <see langword="Update" /> command
      button in the <see cref="T:System.Web.UI.WebControls.EditCommandColumn" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.FirstDayOfWeek">
      <summary>
        <para> Specifies the day to display as the first day of the week on the <see cref="T:System.Web.UI.WebControls.Calendar" />
control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Sunday">
      <summary>
        <para>The first day of the week is Sunday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Monday">
      <summary>
        <para>The first day of the week is Monday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Tuesday">
      <summary>
        <para>The first day of the week is Tuesday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Wednesday">
      <summary>
        <para>The first day of the week is Wednesday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Thursday">
      <summary>
        <para>The first day of the week is Thursday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Friday">
      <summary>
        <para>The first day of the week is Friday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Saturday">
      <summary>
        <para>The first day of the week is Saturday.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FirstDayOfWeek.Default">
      <summary>
        <para> The first day of the week is specified by the system settings.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.FontNamesConverter">
      <summary>
        <para>Converts a string containing a list of font names to an array of strings containing the individual
      names. It also performs the reverse function.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.FontNamesConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Determines whether this converter can convert an object of the specified data type to an array of strings containing individual font names. </para>
      </summary>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> that provides information about the context of a type converter. You can optionally pass in <see langword="null" /> for this parameter.</param>
      <param name=" sourceType">A <see cref="T:System.Type" qualify="true" /> that represents the data type to convert from.</param>
      <returns>
        <para>
          <see langword="true" /> if the type can be converted; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para> Converts a string that represents a list of font
      names into an array of strings containing individual font names. </para>
      </summary>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> that provides information about the context of a type converter. This parameter is not used in this method. It is reserved for future versions of this method. You can optionally pass in <see langword="null" /> for this parameter.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> object that represents information about a culture such as language, calendar system, and so on. This parameter is not used in this method. It is reserved for future versions of this method. You can optionally pass in <see langword="null" /> for this parameter. </param>
      <param name=" value">A <see cref="T:System.Object" qualify="true" /> that represents the source string to convert from.</param>
      <returns>
        <para>A <see cref="T:System.Object" qualify="true" /> that represents the array of strings containing
   the individual font names. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontNamesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para> Creates a string that represents a list of
      font names from an array of strings containing individual font names.</para>
      </summary>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> object that provides information about the context of a type converter. This parameter is not used in this method. It is reserved for future versions of this method. You can optionally pass in <see langword="null" /> for this parameter.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> object that represents information about a culture such as language, calendar system, and so on. This parameter is not used in this method. It is reserved for future versions of this method. You can optionally pass in <see langword="null" /> for this parameter. </param>
      <param name=" value">A <see cref="T:System.Object" qualify="true" /> that represents the source array of strings to convert from.</param>
      <param name=" destinationType">A <see cref="T:System.Type" qualify="true" /> object that represents the data type to convert to. This parameter must be set to the <see langword="string" /> data type.</param>
      <returns>
        <para>A <see cref="T:System.Object" qualify="true" /> that represents a
   string containing a list
   of font names.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.WebControls.FontInfo">
      <summary>
        <para>Encapsulates the font properties of text. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.FontInfo.CopyFrom(System.Web.UI.WebControls.FontInfo)">
      <summary>
        <para>Duplicates the font properties of the specified <see cref="T:System.Web.UI.WebControls.FontInfo" />
into the instance of the <see cref="T:System.Web.UI.WebControls.FontInfo" /> class
that this method is called from. </para>
      </summary>
      <param name="f">A <see cref="T:System.Web.UI.WebControls.FontInfo" /> that contains the font properties to duplicate.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.FontInfo.MergeWith(System.Web.UI.WebControls.FontInfo)">
      <summary>
        <para>Combines the font properties of the specified <see cref="T:System.Web.UI.WebControls.FontInfo" />
with the instance of the <see cref="T:System.Web.UI.WebControls.FontInfo" /> class
that this method is called
from. </para>
      </summary>
      <param name="f">A <see cref="T:System.Web.UI.WebControls.FontInfo" /> that contains the font properties to combine.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.FontInfo.ToString">
      <summary>
        <para> Returns a string that contains the font name and size
 for an instance of the <see cref="T:System.Web.UI.WebControls.FontInfo" />
 class.</para>
      </summary>
      <returns>
        <para>A string that contains the font name and size for an instance of the <see cref="T:System.Web.UI.WebControls.FontInfo" /> class.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Bold">
      <summary>
        <para>Gets or sets a value that indicates whether the font is bold.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Italic">
      <summary>
        <para>Gets or sets a value that indicates whether the font is italic.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Name">
      <summary>
        <para>Gets or sets the primary font name.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Names">
      <summary>
        <para>Gets or sets an ordered array of font names. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Overline">
      <summary>
        <para>Gets or sets a value that indicates whether the font is overlined.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Size">
      <summary>
        <para>Gets or sets the font size.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Strikeout">
      <summary>
        <para>Gets or sets a value that indicates whether the font is strikethrough.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontInfo.Underline">
      <summary>
        <para>Gets or sets a value that indicates whether the font is underlined.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.FontSize">
      <summary>
        <para> Specifies the font
      sizes defined by HTML 4.0.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.NotSet">
      <summary>
        <para>
       The font size is not set.
    </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.AsUnit">
      <summary>
        <para>The font size is specified by a point value.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.Smaller">
      <summary>
        <para> The font size is one size smaller than the parent element.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.Larger">
      <summary>
        <para> The font size is one size larger than the parent element.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.XXSmall">
      <summary>
        <para> The font size is two sizes smaller than the base font size.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.XSmall">
      <summary>
        <para> The font size is one size smaller than the base font size.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.Small">
      <summary>
        <para> The base font size determined by the browser.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.Medium">
      <summary>
        <para> The font size is one size larger than the default font size.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.Large">
      <summary>
        <para> The font size is two sizes larger than the base font size.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.XLarge">
      <summary>
        <para> The font size is three sizes larger than the base font size.
      </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontSize.XXLarge">
      <summary>
        <para> The font size is four sizes larger than the base font size.
      </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.FontUnit">
      <summary>
        <para>Represents the size of a font.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.Empty">
      <summary>
        <para>Represents an empty <see cref="T:System.Web.UI.WebControls.FontUnit" /> object. </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.Smaller">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to
<see langword="FontSize.Smaller" />. </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.Larger">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.Larger" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.XXSmall">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.XXSmall" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.XSmall">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.XSmall" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.Small">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.Small" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.Medium">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.Medium" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.Large">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.Large" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.XLarge">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.XLarge" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.FontUnit.XXLarge">
      <summary>
        <para>Represents a <see cref="T:System.Web.UI.WebControls.FontUnit" /> object with the <see cref="P:System.Web.UI.WebControls.FontUnit.Type" /> property set to <see langword="FontSize.XXLarge" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.#ctor(System.Web.UI.WebControls.FontSize)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> class with the
   specified <see cref="T:System.Web.UI.WebControls.FontSize" />.</para>
      </summary>
      <param name="type">One of the <see cref="T:System.Web.UI.WebControls.FontSize" /> values.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.#ctor(System.Web.UI.WebControls.Unit)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> class with the specified <see cref="T:System.Web.UI.WebControls.Unit" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.Web.UI.WebControls.Unit" /> that specifies the font size.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> class with the specified font size.</para>
      </summary>
      <param name="value">The size of the font.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> class with the specified font size.</para>
      </summary>
      <param name="value">A string representation of one of the <see cref="T:System.Web.UI.WebControls.FontSize" /> values.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> class with the specified font size and
<see cref="T:System.Globalization.CultureInfo" qualify="true" /> object.</para>
      </summary>
      <param name="value">A string representation of one of the <see cref="T:System.Web.UI.WebControls.FontSize" /> values.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> object that represents the culture to create the <see cref="T:System.Web.UI.WebControls.FontUnit" /> object for.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer that represents the hash code.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified <see cref="T:System.Object" qualify="true" /> is equivalent to the instance of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> class that this method is called
   from.</para>
      </summary>
      <param name="obj">A <see cref="T:System.Object" qualify="true" /> that contains the object to compare to this instance. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified
<see cref="T:System.Object" qualify="true" /> is equivalent to the instance of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> class 
   that this method is called
   from; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.op_Equality(System.Web.UI.WebControls.FontUnit,System.Web.UI.WebControls.FontUnit)">
      <summary>
        <para>Compares two <see cref="T:System.Web.UI.WebControls.FontUnit" /> objects for equality.</para>
      </summary>
      <param name="left">A <see cref="T:System.Web.UI.WebControls.FontUnit" /> on the left of the operator that contains font properties.</param>
      <param name=" right">A <see cref="T:System.Web.UI.WebControls.FontUnit" /> on the right of the operator that contains font properties.</param>
      <returns>
        <para>
          <see langword="true" /> if both <see cref="T:System.Web.UI.WebControls.FontUnit" /> objects are equal; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.op_Inequality(System.Web.UI.WebControls.FontUnit,System.Web.UI.WebControls.FontUnit)">
      <summary>
        <para>Compares two <see cref="T:System.Web.UI.WebControls.FontUnit" /> objects
   for inequality.</para>
      </summary>
      <param name="left">A <see cref="T:System.Web.UI.WebControls.FontUnit" /> that contains font properties on the left of the operator.</param>
      <param name=" right">A <see cref="T:System.Web.UI.WebControls.FontUnit" /> that contains font properties on the right of the operator.</param>
      <returns>
        <para>
          <see langword="true" /> if both <see cref="T:System.Web.UI.WebControls.FontUnit" /> objects are not
   equal; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.Parse(System.String)">
      <summary>
        <para> Converts the specified string to
      its <see cref="T:System.Web.UI.WebControls.FontUnit" /> equivalent.</para>
      </summary>
      <param name="s">A string representation of one of the <see cref="T:System.Web.UI.WebControls.FontSize" /> values.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.FontUnit" /> 
that represents the font size specified
by the <paramref name="s" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.Parse(System.String,System.Globalization.CultureInfo)">
      <summary>
        <para>Converts the specified string to its <see cref="T:System.Web.UI.WebControls.FontUnit" /> equivalent in the specified culture.</para>
      </summary>
      <param name="s">A string representation of one of the <see cref="T:System.Web.UI.WebControls.FontSize" /> values.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> that represents the culture of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> object.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.FontUnit" /> that represents the font size 
   specified by the <paramref name="s" />
   parameter in the culture specified by the <paramref name="culture" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.Point(System.Int32)">
      <summary>
        <para>Creates a <see cref="T:System.Web.UI.WebControls.FontUnit" /> of type <see cref="T:System.Drawing.Point" qualify="true" /> from an integer value.</para>
      </summary>
      <param name="n">An integer representing the <see cref="T:System.Drawing.Point" qualify="true" /> value to convert to a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.FontUnit" />
that represents the font size specified by the <paramref name="n" />
parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.ToString">
      <summary>
        <para>Converts the <see cref="T:System.Web.UI.WebControls.FontUnit" /> object to the
   default string representation.</para>
      </summary>
      <returns>
        <para>The string representation of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.ToString(System.Globalization.CultureInfo)">
      <summary>
        <para>Converts the <see cref="T:System.Web.UI.WebControls.FontUnit" /> object to a string
   representation, using the specified <see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> that contains the culture to represent the <see cref="T:System.Web.UI.WebControls.FontUnit" />.</param>
      <returns>
        <para>The string representation of the <see cref="T:System.Web.UI.WebControls.FontUnit" /> object in the specified culture.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnit.op_Implicit(System.Int32)~System.Web.UI.WebControls.FontUnit">
      <summary>
        <para>Implicitly creates a <see cref="T:System.Web.UI.WebControls.FontUnit" /> of type <see cref="T:System.Drawing.Point" qualify="true" /> from an integer value.</para>
      </summary>
      <param name="n">An integer representing the <see cref="T:System.Drawing.Point" qualify="true" /> value to convert into a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.FontUnit" /> of type <see cref="T:System.Drawing.Point" qualify="true" /> that represents the
   font size specified the <paramref name="n" /> parameter.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.FontUnit.IsEmpty">
      <summary>
        <para>Gets a value that indicates whether the font size has been set.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontUnit.Type">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.FontSize" /> enumeration value that represents the font size.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.FontUnit.Unit">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.Unit" /> that represents
   the font size. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.FontUnitConverter">
      <summary>
        <para>Converts a <see cref="T:System.Web.UI.WebControls.FontUnit" /> to an object with another data type.
   It also converts an object with another data type to a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnitConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para> Determines whether a data type can be converted to a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</para>
      </summary>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> implemented object that provides information about the context of a type converter.</param>
      <param name=" sourceType">A <see cref="T:System.Type" qualify="true" /> that represents the data type to check.</param>
      <returns>
        <para>
          <see langword="true" /> if the data
   type specified by the <paramref name="sourceType" />
   parameter can be converted to a <see cref="T:System.Web.UI.WebControls.FontUnit" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnitConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para> Converts an object to a <see cref="T:System.Web.UI.WebControls.FontUnit" /> in a specific culture.</para>
      </summary>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> implemented object that provides information about the context of a type converter.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> that specifies the culture to represent the <see cref="T:System.Web.UI.WebControls.FontUnit" />, when it is expressed in points.</param>
      <param name=" value">The object to convert to a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</param>
      <returns>
        <para>A <see cref="T:System.Object" qualify="true" />
that represents the converted value.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnitConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para> Converts a <see cref="T:System.Web.UI.WebControls.FontUnit" /> to an object with a different data
   type. </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> implemented object that provides information about the context of a type converter.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> that specifies the culture to represent the <see cref="T:System.Web.UI.WebControls.FontUnit" />, when it is expressed in points. </param>
      <param name=" value">A <see cref="T:System.Object" qualify="true" /> that represents the <see cref="T:System.Web.UI.WebControls.FontUnit" /> to convert.</param>
      <param name=" destinationType">A <see cref="T:System.Type" qualify="true" /> that represents the data type to convert to.</param>
      <returns>
        <para>A <see cref="T:System.Object" qualify="true" />
that represents the converted value.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnitConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Returns a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" qualify="true" />
containing the standard values
for a <see cref="T:System.Web.UI.WebControls.FontUnit" />, using the specified format
context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> that provides information about the context of a type converter.</param>
      <returns>
        <para> A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" qualify="true" />
containing
the standard values for a <see cref="T:System.Web.UI.WebControls.FontUnit" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnitConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Returns whether the
   <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" qualify="true" /> returned by the <see cref="M:System.Web.UI.WebControls.FontUnitConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> method is an exclusive list
      of values, using the specified format
      context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> that provides information about the context of a type converter.</param>
      <returns>
        <para>
          <see langword="false" /> for all cases.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.FontUnitConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Returns whether the instance of the <see cref="T:System.Web.UI.WebControls.FontUnitConverter" /> class that this method is called from
   supports a standard set of values that can be picked from a list, using the specified format
   context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" qualify="true" /> that provides information about the context of a type converter.</param>
      <returns>
        <para>
          <see langword="true" /> for all cases.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.WebControls.GridLines">
      <summary>
        <para> Specifies the grid line styles for controls displaying items in a table structure.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.GridLines.None">
      <summary>
        <para> No grid lines rendered.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.GridLines.Horizontal">
      <summary>
        <para> Only horizontal grid lines rendered.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.GridLines.Vertical">
      <summary>
        <para> Only vertical grid lines rendered.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.GridLines.Both">
      <summary>
        <para> Both horizontal and vertical grid lines rendered.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.HorizontalAlign">
      <summary>
        <para> Specifies the horizonal alignment of items within a container.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.HorizontalAlign.NotSet">
      <summary>
        <para> The horizontal alignment is not set.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.HorizontalAlign.Left">
      <summary>
        <para> The contents of a container are left justified.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.HorizontalAlign.Center">
      <summary>
        <para> The contents of a container are centered.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.HorizontalAlign.Right">
      <summary>
        <para> The contents of a container are right justified.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.HorizontalAlign.Justify">
      <summary>
        <para> The contents 
      of a container are uniformly spread out and aligned with both the left and right margins.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.HyperLinkControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.HyperLink" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.HyperLinkControlBuilder.AllowWhitespaceLiterals">
      <summary>
        <para> Gets a value that indicates whether white spaces are allowed in literals
      for this control.</para>
      </summary>
      <returns>
        <para>Overloaded to always returns <see langword="false" /> to indicate that white spaces are not
   allowed.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.WebControls.HyperLink">
      <summary>
        <para> A control that displays a link to another Web page.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.HyperLink.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.HyperLink" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLink.ImageUrl">
      <summary>
        <para> Gets or sets the path to an image to
      display for the <see cref="T:System.Web.UI.WebControls.HyperLink" />
      control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLink.NavigateUrl">
      <summary>
        <para>Gets or sets the URL to link to when the <see cref="T:System.Web.UI.WebControls.HyperLink" /> control is clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLink.Target">
      <summary>
        <para>Gets or sets the target window or frame to display
      the Web page content linked to when the <see cref="T:System.Web.UI.WebControls.HyperLink" /> control is
      clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLink.Text">
      <summary>
        <para> Gets or sets the text caption for the <see cref="T:System.Web.UI.WebControls.HyperLink" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.HyperLinkColumn">
      <summary>
        <para>A column type for the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control that
   contains a hyperlink for each
   item in the column.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.HyperLinkColumn.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.HyperLinkColumn" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.HyperLinkColumn.FormatDataNavigateUrlValue(System.Object)">
      <summary>
        <para>Formats a data-bound URL using the format specified by the <see cref="P:System.Web.UI.WebControls.HyperLinkColumn.DataNavigateUrlFormatString" /> property.</para>
      </summary>
      <param name="dataUrlValue">The data-bound URL to format.</param>
      <returns>
        <para>The data-bound URL in the format specified by the 
   <see cref="P:System.Web.UI.WebControls.HyperLinkColumn.DataNavigateUrlFormatString" /> property.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.HyperLinkColumn.FormatDataTextValue(System.Object)">
      <summary>
        <para>Formats a data-bound text caption using the format specified by the <see cref="P:System.Web.UI.WebControls.HyperLinkColumn.DataTextFormatString" /> property.</para>
      </summary>
      <param name="dataTextValue">The data-bound URL to format.</param>
      <returns>
        <para>The data-bound text caption in the format specified by the
   <see cref="P:System.Web.UI.WebControls.HyperLinkColumn.DataTextFormatString" /> property.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLinkColumn.DataNavigateUrlField">
      <summary>
        <para> Gets or sets the field from a data source to bind
      to the URL of the hyperlinks in the <see cref="T:System.Web.UI.WebControls.HyperLinkColumn" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLinkColumn.DataNavigateUrlFormatString">
      <summary>
        <para> Gets or
      sets the display format for the URL of the hyperlinks in the <see cref="T:System.Web.UI.WebControls.HyperLinkColumn" />
      when the URL is data-bound to a field in a data
      source.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLinkColumn.DataTextField">
      <summary>
        <para> Gets or sets the field from a data source to bind to
      the text caption of the hyperlinks in the <see cref="T:System.Web.UI.WebControls.HyperLinkColumn" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLinkColumn.DataTextFormatString">
      <summary>
        <para> Gets or sets the display format
      for the text caption of the hyperlinks in the <see cref="T:System.Web.UI.WebControls.HyperLinkColumn" />
      column.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLinkColumn.NavigateUrl">
      <summary>
        <para>Gets or sets the URL to link to when a hyperlink in
      the column<see langword=" " /> is clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLinkColumn.Target">
      <summary>
        <para>Gets or sets the target window or frame to display the Web page content linked
      to when the hyperlink in the column is clicked.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.HyperLinkColumn.Text">
      <summary>
        <para>Gets or sets the text caption to display for the hyperlinks in the column.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Image">
      <summary>
        <para> Displays an image on a Web page.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Image.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Image" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Image.AlternateText">
      <summary>
        <para>Gets or sets the alternate text displayed in the <see cref="T:System.Web.UI.WebControls.Image" />
control when the image is unavailable. Browsers that support the ToolTips feature display this text as a ToolTip.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Image.Font">
      <summary>
        <para> Gets the font properties for the text associated with the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Image.Enabled">
      <summary>
        <para>Gets or sets a value indicating whether the control is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Image.ImageAlign">
      <summary>
        <para>Gets or sets the alignment of the <see cref="T:System.Web.UI.WebControls.Image" /> control in relation to other elements on the Web page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Image.ImageUrl">
      <summary>
        <para>Gets or sets the location of an image to display in
      the <see cref="T:System.Web.UI.WebControls.Image" />
      control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ImageAlign">
      <summary>
        <para>Specifies the alignment of an
      image in relation to the text of a Web page.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.NotSet">
      <summary>
        <para>
       The alignment is not set.
    </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.Left">
      <summary>
        <para>The image is aligned on the left edge of the Web page with
      text wrapping on the right.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.Right">
      <summary>
        <para>The image is aligned on the right edge of the Web page
      with text wrapping on the left.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.Baseline">
      <summary>
        <para>The lower edge of the image is aligned with the lower edge of the first line
      of text.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.Top">
      <summary>
        <para> The upper edge of the image is aligned with the upper edge of the highest element on the same line.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.Middle">
      <summary>
        <para>The middle of the image is aligned with the lower edge of
      the first line of text.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.Bottom">
      <summary>
        <para>The lower edge of the image is aligned with the lower edge of the first line of text.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.AbsBottom">
      <summary>
        <para>The lower edge of the image is aligned with the lower
      edge of the largest element on the same line.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.AbsMiddle">
      <summary>
        <para> The middle of the image is aligned with the middle of the largest element on the 
       same line.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ImageAlign.TextTop">
      <summary>
        <para>The upper edge of the image is aligned with the upper edge of the highest text on the same
      line.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ImageButton">
      <summary>
        <para> A control that displays an image and responds
      to mouse clicks on the image.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ImageButton.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ImageButton" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ImageButton.OnClick(System.Web.UI.ImageClickEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.ImageButton.Click" /> event
   and allows you to handle the <see cref="E:System.Web.UI.WebControls.ImageButton.Click" /> event directly.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.ImageClickEventArgs" qualify="true" /> that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ImageButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Web.UI.WebControls.ImageButton.Command" /> event
   and allows you to handle the <see cref="E:System.Web.UI.WebControls.ImageButton.Command" /> event directly.</para>
      </summary>
      <param name="e">A <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.ImageButton.CommandName">
      <summary>
        <para>Gets or sets the command name associated with the <see cref="T:System.Web.UI.WebControls.ImageButton" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ImageButton.CommandArgument">
      <summary>
        <para>Gets or sets an optional argument that provides
      additional information about the
   <see cref="P:System.Web.UI.WebControls.ImageButton.CommandName" />
   property.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ImageButton.CausesValidation">
      <summary>
        <para>Gets or sets a value indicating whether validation is
 performed when the <see cref="T:System.Web.UI.WebControls.ImageButton" />
 control is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.ImageButton.Click">
      <summary>
        <para>Occurs when the <see cref="T:System.Web.UI.WebControls.ImageButton" /> is clicked.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.ImageButton.Command">
      <summary>
        <para>Occurs when the <see cref="T:System.Web.UI.WebControls.ImageButton" /> is clicked.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.LabelControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.Label" />
control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.LinkButtonControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.LinkButton" />
control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ListBox">
      <summary>
        <para> Represents a list box control that allows single or multiple item
      selection.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListBox.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ListBox" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListBox.BorderColor">
      <summary>
        <para>Gets or sets the border color of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListBox.BorderStyle">
      <summary>
        <para>Gets or sets the border style of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListBox.BorderWidth">
      <summary>
        <para>Gets or sets the border width for the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListBox.Rows">
      <summary>
        <para> Gets or sets the number of rows displayed in the
   <see cref="T:System.Web.UI.WebControls.ListBox" />
   control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListBox.SelectionMode">
      <summary>
        <para>Gets or sets the selection mode of the <see cref="T:System.Web.UI.WebControls.ListBox" />
control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListBox.ToolTip">
      <summary>
        <para>Gets or sets the ToolTip text displayed when the mouse
      pointer rests over the control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ListItemControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.ListItem" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemControlBuilder.AllowWhitespaceLiterals">
      <summary>
        <para>Determines whether white spaces in the text 
      associated with the <see cref="T:System.Web.UI.WebControls.ListItem" /> are
      represented by <see cref="T:System.Web.UI.LiteralControl" qualify="true" />
      objects.</para>
      </summary>
      <returns>
        <para>
          <see langword="false" /> for all cases.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemControlBuilder.HtmlDecodeLiterals">
      <summary>
        <para>Determines whether HTML entities in the text associated with the <see cref="T:System.Web.UI.WebControls.ListItem" /> are converted to their
   equivalent characters when the text is parsed.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> for all cases.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.WebControls.ListItem">
      <summary>
        <para> Represents a data item in a data-bound
      list control. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItem.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ListItem" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItem.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ListItem" /> class with the specified text data.</para>
      </summary>
      <param name="text">The text to display in the list control for the item represented by the <see cref="T:System.Web.UI.WebControls.ListItem" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItem.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ListItem" /> class with the
   specified text and value data.</para>
      </summary>
      <param name=" text">The text to display in the list control for the item represented by the <see cref="T:System.Web.UI.WebControls.ListItem" />.</param>
      <param name="value">The value associated with the <see cref="T:System.Web.UI.WebControls.ListItem" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItem.FromString(System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Web.UI.WebControls.ListItem" /> from the specified text.</para>
      </summary>
      <param name="s">The text to display in the list control for the item represented by the <see cref="T:System.Web.UI.WebControls.ListItem" />.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.ListItem" /> that represents the 
   text specified by the <paramref name="s" /> parameter.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItem.Attributes">
      <summary>
        <para> Gets
      a collection of attribute name and value pairs for the <see cref="T:System.Web.UI.WebControls.ListItem" /> that are not directly supported by the class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItem.Selected">
      <summary>
        <para>Gets or sets a value indicating whether the
      item is selected.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItem.Text">
      <summary>
        <para> Gets or sets the text displayed in a list control for the
      item represented by the <see cref="T:System.Web.UI.WebControls.ListItem" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItem.Value">
      <summary>
        <para>Gets or sets the value associated with the <see cref="T:System.Web.UI.WebControls.ListItem" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ListItemCollection">
      <summary>
        <para>A collection of <see cref="T:System.Web.UI.WebControls.ListItem" /> objects in a list control. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.Web.UI.WebControls.ListItemCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Add(System.String)">
      <summary>
        <para>Appends a <see cref="T:System.Web.UI.WebControls.ListItem" /> to the end of the collection that represents the specified string.</para>
      </summary>
      <param name="item">A <see cref="T:System.String" qualify="true" /> that represents the item to add to the end of the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Add(System.Web.UI.WebControls.ListItem)">
      <summary>
        <para>Appends the specified <see cref="T:System.Web.UI.WebControls.ListItem" /> to the end of the collection.</para>
      </summary>
      <param name="item">The <see cref="T:System.Web.UI.WebControls.ListItem" /> to append to the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.AddRange(System.Web.UI.WebControls.ListItem[])">
      <summary>
        <para>Adds the items in an array of
   <see cref="T:System.Web.UI.WebControls.ListItem" /> objects to the collection.</para>
      </summary>
      <param name="items">An array of <see cref="T:System.Web.UI.WebControls.ListItem" /> objects that contain the items to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.Web.UI.WebControls.ListItem" /> objects from the collection.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Contains(System.Web.UI.WebControls.ListItem)">
      <summary>
        <para> Determines whether the
      collection contains the specified item.</para>
      </summary>
      <param name="item">A <see cref="T:System.Web.UI.WebControls.ListItem" /> to search for in the collection. </param>
      <returns>
        <para>
          <see langword="true" /> if the
   collection contains the specified item; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the items from the <see cref="T:System.Web.UI.WebControls.ListItemCollection" /> to the specified <see cref="T:System.Array" qualify="true" />, starting with the specified
   index.</para>
      </summary>
      <param name=" array">A zero-based <see cref="T:System.Array" qualify="true" /> that receives the copied items from the <see cref="T:System.Web.UI.WebControls.ListItemCollection" />.</param>
      <param name=" index">The first index in the specified <see cref="T:System.Array" qualify="true" /> to receive the items.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.FindByText(System.String)">
      <summary>
        <para>Searches the collection for a <see cref="T:System.Web.UI.WebControls.ListItem" /> with a <see cref="P:System.Web.UI.WebControls.ListItem.Text" /> property that contains the specified text.</para>
      </summary>
      <param name="text">The text to search for.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.ListItem" />
that contains the text specified by the <paramref name="text" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.FindByValue(System.String)">
      <summary>
        <para>Searches the collection for a <see cref="T:System.Web.UI.WebControls.ListItem" /> with a <see cref="P:System.Web.UI.WebControls.ListItem.Value" /> property that contains the specified value.</para>
      </summary>
      <param name="value">The value to search for.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.ListItem" />
that contains the value specified by the <paramref name="value" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains
   all <see cref="T:System.Web.UI.WebControls.ListItem" /> objects in the <see cref="T:System.Web.UI.WebControls.ListItemCollection" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains
   all <see cref="T:System.Web.UI.WebControls.ListItem" /> objects in the <see cref="T:System.Web.UI.WebControls.ListItemCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.IndexOf(System.Web.UI.WebControls.ListItem)">
      <summary>
        <para> Determines the index value that represents the
      position of the specified <see cref="T:System.Web.UI.WebControls.ListItem" /> in the collection.</para>
      </summary>
      <param name="item">A <see cref="T:System.Web.UI.WebControls.ListItem" /> to search for in the collection.</param>
      <returns>
        <para> The index position of the specified <see cref="T:System.Web.UI.WebControls.ListItem" /> in the
   collection. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Insert(System.Int32,System.String)">
      <summary>
        <para>Inserts a <see cref="T:System.Web.UI.WebControls.ListItem" /> which represents the specified string in the collection at the specified index
   location.</para>
      </summary>
      <param name=" index">The location in the collection to insert the <see cref="T:System.Web.UI.WebControls.ListItem" />.</param>
      <param name=" item">A <see cref="T:System.String" qualify="true" /> that represents the item to insert in the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Insert(System.Int32,System.Web.UI.WebControls.ListItem)">
      <summary>
        <para>Inserts the specified <see cref="T:System.Web.UI.WebControls.ListItem" /> in the collection at the specified
   index location.</para>
      </summary>
      <param name=" index">The location in the collection to insert the <see cref="T:System.Web.UI.WebControls.ListItem" />.</param>
      <param name=" item">The <see cref="T:System.Web.UI.WebControls.ListItem" /> to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the <see cref="T:System.Web.UI.WebControls.ListItem" /> at the specified index from
   the collection.</para>
      </summary>
      <param name="index"> The index of the <see cref="T:System.Web.UI.WebControls.ListItem" /> to remove.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Remove(System.String)">
      <summary>
        <para>Removes a <see cref="T:System.Web.UI.WebControls.ListItem" /> from the collection that represents the specified string.</para>
      </summary>
      <param name="item">A <see cref="T:System.String" qualify="true" /> that represents the item to remove from the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.ListItemCollection.Remove(System.Web.UI.WebControls.ListItem)">
      <summary>
        <para>Removes the specified <see cref="T:System.Web.UI.WebControls.ListItem" /> from the collection.</para>
      </summary>
      <param name="item">The <see cref="T:System.Web.UI.WebControls.ListItem" /> to remove from the collection.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItemCollection.Item(System.Int32)">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.ListItem" /> at the specified index in
   the collection.</para>
      </summary>
      <param name="index">The zero-based index of the <see cref="T:System.Web.UI.WebControls.ListItem" /> to retrieve from the collection.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItemCollection.Capacity">
      <summary>
        <para>Gets the or sets the maximum number of items that the
   <see cref="T:System.Web.UI.WebControls.ListItemCollection" /> can store.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItemCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.WebControls.ListItem" /> objects in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItemCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ListItemCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItemCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.ListItemCollection" /> is synchronized
   (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ListItemCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access
      to the <see cref="T:System.Web.UI.WebControls.ListItemCollection" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ListItemType">
      <summary>
        <para>Specifies the type of an item in a list control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.Header">
      <summary>
        <para> A header for the
      list control. It is not data-bound.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.Footer">
      <summary>
        <para> A footer for the
      list control. It is not data-bound.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.Item">
      <summary>
        <para>An item in the list control. It is data-bound.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.AlternatingItem">
      <summary>
        <para> An item
      in
      alternating (zero-based even-indexed) cells. It is data-bound.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.SelectedItem">
      <summary>
        <para> A selected item in
      the list control. It is data-bound.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.EditItem">
      <summary>
        <para> An item in a list
      control currently in edit mode. It is data-bound.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.Separator">
      <summary>
        <para> A separator between items in a list control. It is not data-bound.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListItemType.Pager">
      <summary>
        <para> A pager that displays the controls to navigate to different pages associated
      with the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control. It is not
      data-bound.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ListSelectionMode">
      <summary>
        <para>Specifies the selection mode of the <see cref="T:System.Web.UI.WebControls.ListBox" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListSelectionMode.Single">
      <summary>
        <para> Single item selection mode.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ListSelectionMode.Multiple">
      <summary>
        <para> Multiple item selection mode.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.LiteralControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.Literal" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.LiteralControlBuilder.AppendSubBuilder(System.Web.UI.ControlBuilder)">
      <summary>
        <para>Adds the builders of all child
      controls associated with the <see cref="T:System.Web.UI.WebControls.Literal" /> control to the specified <see cref="T:System.Web.UI.ControlBuilder" qualify="true" />
      object.</para>
      </summary>
      <param name="subBuilder">The <see cref="T:System.Web.UI.ControlBuilder" qualify="true" /> object to add the child control builders to. </param>
    </member>
    <member name="M:System.Web.UI.WebControls.LiteralControlBuilder.AllowWhitespaceLiterals">
      <summary>
        <para>Determines whether white spaces in the text associated 
      with the <see cref="T:System.Web.UI.WebControls.Literal" /> control
      are represented by <see cref="T:System.Web.UI.LiteralControl" qualify="true" /> objects.</para>
      </summary>
      <returns>
        <para>
          <see langword="false" /> for all cases.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.WebControls.Literal">
      <summary>
        <para>Reserves a location on the Web page to display static text.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Literal.Text">
      <summary>
        <para>Gets or sets the caption displayed in the <see cref="T:System.Web.UI.WebControls.Literal" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.MonthChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.Calendar.VisibleMonthChanged" />
event of a <see cref="T:System.Web.UI.WebControls.Calendar" />. This
class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.MonthChangedEventArgs.#ctor(System.DateTime,System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.MonthChangedEventArgs" /> class.</para>
      </summary>
      <param name="newDate">
        <para> The date that determines the month currently displayed by the <see cref="T:System.Web.UI.WebControls.Calendar" />.</para>
      </param>
      <param name="previousDate">
        <para>The date that determines the month previously displayed by the <see cref="T:System.Web.UI.WebControls.Calendar" />.</para>
      </param>
    </member>
    <member name="P:System.Web.UI.WebControls.MonthChangedEventArgs.NewDate">
      <summary>
        <para> Gets the date that determines the currently
      displayed month in the <see cref="T:System.Web.UI.WebControls.Calendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.MonthChangedEventArgs.PreviousDate">
      <summary>
        <para> Gets the date that determined the previously displayed
      month in the <see cref="T:System.Web.UI.WebControls.Calendar" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.MonthChangedEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="E:System.Web.UI.WebControls.Calendar.VisibleMonthChanged" /> event of a <see cref="T:System.Web.UI.WebControls.Calendar" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.MonthChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.NextPrevFormat">
      <summary>
        <para> Represents the display format for the
       previous and next month navigation controls within the <see cref="T:System.Web.UI.WebControls.Calendar" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.NextPrevFormat.CustomText">
      <summary>
        <para> Custom text format for the month navigation controls 
       on the <see cref="T:System.Web.UI.WebControls.Calendar" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.NextPrevFormat.ShortMonth">
      <summary>
        <para>Abbreviated 
    month name 
    format for the month navigation controls on the <see cref="T:System.Web.UI.WebControls.Calendar" />. For example,
    "Jan".</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.NextPrevFormat.FullMonth">
      <summary>
        <para>Full month name format for the month navigation controls 
    on the <see cref="T:System.Web.UI.WebControls.Calendar" />. For
    example, "January".</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.PagedDataSource">
      <summary>
        <para>Encapsulates the properties of the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control
   that allow
   it to perform paging. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.PagedDataSource.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.PagedDataSource" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.PagedDataSource.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies all the items from the data source to the
      specified <see cref="T:System.Array" qualify="true" />, starting at the specified index in the <see cref="T:System.Array" qualify="true" />.</para>
      </summary>
      <param name=" array">A zero-based <see cref="T:System.Array" qualify="true" /> that receives the copied items from the data source.</param>
      <param name=" index">The first position in the specified <see cref="T:System.Array" qualify="true" /> to receive the copied contents.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.PagedDataSource.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains all items in the data source.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" qualify="true" /> implemented object that contains
   all items in the data source.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.PagedDataSource.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
        <para>Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection" qualify="true" />
that represents the properties on each item used to bind data.</para>
      </summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" qualify="true" /> objects, which contains the list name returned. This can be a <see langword="null" /> reference.</param>
      <returns>
        <para> The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" qualify="true" /> that
   represents the properties on each item used to bind data.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.PagedDataSource.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
        <para>Returns the name of the list. This method does not apply to this class.</para>
      </summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" qualify="true" /> objects, that contains the list name returned. This can be a <see langword="null" /> reference.</param>
      <returns>
        <para>
          <see cref="F:System.String.Empty" qualify="true" /> for all cases.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.AllowCustomPaging">
      <summary>
        <para> Gets or sets a
      value indicating whether custom paging is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.AllowPaging">
      <summary>
        <para> Gets or sets a value indicating whether paging is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.Count">
      <summary>
        <para> Gets
      the number of items to
      be used from the data source.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.CurrentPageIndex">
      <summary>
        <para> Gets or sets the index of the current page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.DataSource">
      <summary>
        <para> Gets or sets the data source.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.DataSourceCount">
      <summary>
        <para> Gets the number of items in the data source.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.FirstIndexInPage">
      <summary>
        <para>Gets the first index in the page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.IsCustomPagingEnabled">
      <summary>
        <para>Gets a value indicating whether custom
      paging is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.IsFirstPage">
      <summary>
        <para>Gets a value indicating whether the current page
      is the first page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.IsLastPage">
      <summary>
        <para>Gets a value indicating whether the current page is the last page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.IsPagingEnabled">
      <summary>
        <para>Gets a value indicating whether paging is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the data source is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the data source is
      synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.PageCount">
      <summary>
        <para>Gets the total number of pages necessary to display all
      items in the data source.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.PageSize">
      <summary>
        <para>Gets or sets the number of items to display on a single page.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.SyncRoot">
      <summary>
        <para> Gets the object that can be
      used to synchronize access to the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.PagedDataSource.VirtualCount">
      <summary>
        <para>Gets or sets the virtual number of items in the data
      source when custom paging is used.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.PagerMode">
      <summary>
        <para> Represents the mode of the pager for accessing various
      pages within the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.PagerMode.NextPrev">
      <summary>
        <para>A pager with <see langword="Previous" /> and 
 <see langword="Next" /> buttons to
    access the next and previous pages.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.PagerMode.NumericPages">
      <summary>
        <para> A pager with numbered buttons to access pages directly.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.PagerPosition">
      <summary>
        <para> Specifies the position of the pager
       for accessing various pages within the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.PagerPosition.Bottom">
      <summary>
        <para>A pager positioned at the bottom of the <see cref="T:System.Web.UI.WebControls.DataGrid" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.PagerPosition.Top">
      <summary>
        <para>A pager positioned at the top of the <see cref="T:System.Web.UI.WebControls.DataGrid" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.PagerPosition.TopAndBottom">
      <summary>
        <para> Pagers positioned at both the top and the bottom of the <see cref="T:System.Web.UI.WebControls.DataGrid" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Panel">
      <summary>
        <para> Represents
       a control that acts as a container for other controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Panel.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Panel" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Panel.BackImageUrl">
      <summary>
        <para> Gets or sets the URL of the background image for the panel
       control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Panel.HorizontalAlign">
      <summary>
        <para> Gets or sets the horizontal alignment of the contents within the panel.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Panel.Wrap">
      <summary>
        <para> 
       Gets or sets a value
       indicating whether the content wraps within the panel.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.PlaceHolderControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.PlaceHolder" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.PlaceHolder">
      <summary>
        <para>A container to store dynamically added server controls on the Web page.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RadioButton">
      <summary>
        <para> Represents a radio button
      control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RadioButton.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.RadioButton" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RadioButton.GroupName">
      <summary>
        <para> Gets
 or sets the name of the group that the radio button belongs to.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RadioButtonList">
      <summary>
        <para>Represents a list control that encapsulates a group of
      radio button controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RadioButtonList.#ctor">
      <summary>
        <para>Initializes a new instance of a <see cref="T:System.Web.UI.WebControls.RadioButtonList" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RadioButtonList.CellPadding">
      <summary>
        <para>Gets or sets the distance (in pixels) between the border
      and the
      contents of the table cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RadioButtonList.CellSpacing">
      <summary>
        <para>Gets or sets the distance (in
      pixels) between adjacent table cells.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RadioButtonList.RepeatColumns">
      <summary>
        <para>Gets or sets the number of columns to display
      in the <see cref="T:System.Web.UI.WebControls.RadioButtonList" />
      control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RadioButtonList.RepeatDirection">
      <summary>
        <para> Gets or sets the direction that the radio
      buttons within the group are displayed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RadioButtonList.RepeatLayout">
      <summary>
        <para>Gets or sets the layout of radio buttons within the
      group.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RadioButtonList.TextAlign">
      <summary>
        <para> Gets
      or sets the text alignment for the radio buttons within the group.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RangeValidator">
      <summary>
        <para> Checks whether the value of an
      input control is within a specified range of values.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RangeValidator.MaximumValue">
      <summary>
        <para> Gets or sets the maximum value of the validation range.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RangeValidator.MinimumValue">
      <summary>
        <para> Gets or sets the minimum value of the validation range.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RegularExpressionValidator">
      <summary>
        <para>Validates whether the value of an associated input control matches the pattern
      specified by a regular expression.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RegularExpressionValidator.ValidationExpression">
      <summary>
        <para> Gets or sets the regular expression that determines the pattern used to validate a field.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeatDirection">
      <summary>
        <para> Specifies the direction in which items of a list control are displayed.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.RepeatDirection.Horizontal">
      <summary>
        <para> Items of a list are displayed horizontally in rows from left to right, then top to bottom, until all items are rendered.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.RepeatDirection.Vertical">
      <summary>
        <para>Items of a list are displayed vertically in columns from top to bottom, 
       and then left to right, until all items are rendered.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Repeater">
      <summary>
        <para> A data-bound list control that allows custom layout by repeating
      a specified template for each item
      displayed in the
      list.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Repeater.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Repeater" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Repeater.OnItemCommand(System.Web.UI.WebControls.RepeaterCommandEventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Web.UI.WebControls.Repeater.ItemCommand" /> event.</para>
      </summary>
      <param name="e">The <see cref="T:System.Web.UI.WebControls.RepeaterCommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Repeater.OnItemCreated(System.Web.UI.WebControls.RepeaterItemEventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Web.UI.WebControls.Repeater.ItemCreated" /> event.</para>
      </summary>
      <param name="e">The <see cref="T:System.Web.UI.WebControls.RepeaterItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Repeater.OnItemDataBound(System.Web.UI.WebControls.RepeaterItemEventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Web.UI.WebControls.Repeater.ItemDataBound" />
 event.</para>
      </summary>
      <param name="e">The <see cref="T:System.Web.UI.WebControls.RepeaterItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.AlternatingItemTemplate">
      <summary>
        <para> Gets or sets the <see cref="T:System.Web.UI.ITemplate" qualify="true" /> that defines how alternating (zero-based odd-indexed) items
   are rendered. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.Controls">
      <summary>
        <para> Gets a <see cref="T:System.Web.UI.ControlCollection" qualify="true" /> that contains the 
   child controls of the <see cref="T:System.Web.UI.WebControls.Repeater" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.DataMember">
      <summary>
        <para>Gets or sets the specific table in the <see cref="P:System.Web.UI.WebControls.Repeater.DataSource" /> to bind to the 
    control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.DataSource">
      <summary>
        <para> Gets or sets the data source that provides data for
       populating the list.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.FooterTemplate">
      <summary>
        <para>Gets or sets the <see cref="T:System.Web.UI.ITemplate" qualify="true" /> that defines how the control footer is
   rendered. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.HeaderTemplate">
      <summary>
        <para> Gets or sets the <see cref="T:System.Web.UI.ITemplate" qualify="true" /> that defines how the control header is rendered. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.Items">
      <summary>
        <para> Gets a collection of <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> objects in the <see cref="T:System.Web.UI.WebControls.Repeater" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.ItemTemplate">
      <summary>
        <para> Gets or sets the <see cref="T:System.Web.UI.ITemplate" qualify="true" /> that defines how items are rendered. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Repeater.SeparatorTemplate">
      <summary>
        <para> Gets or sets the <see cref="T:System.Web.UI.ITemplate" qualify="true" /> that defines how
    separators between items are rendered.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Repeater.ItemCommand">
      <summary>
        <para>Occurs when a button is clicked in the <see cref="T:System.Web.UI.WebControls.Repeater" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Repeater.ItemCreated">
      <summary>
        <para> Occurs when an item is created in the <see cref="T:System.Web.UI.WebControls.Repeater" /> control.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.Repeater.ItemDataBound">
      <summary>
        <para>Occurs after an item in the <see cref="T:System.Web.UI.WebControls.Repeater" /> is data-bound but before it is
   rendered on the page.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeaterCommandEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.Repeater.ItemCommand" /> event of a <see cref="T:System.Web.UI.WebControls.Repeater" />. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeaterCommandEventArgs.#ctor(System.Web.UI.WebControls.RepeaterItem,System.Object,System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.RepeaterCommandEventArgs" /> 
 class.</para>
      </summary>
      <param name="item">A <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> that represents an item in the <see cref="T:System.Web.UI.WebControls.Repeater" />. The <see cref="P:System.Web.UI.WebControls.RepeaterCommandEventArgs.Item" /> property is set to this value.</param>
      <param name="commandSource">The command source. The <see cref="P:System.Web.UI.WebControls.RepeaterCommandEventArgs.CommandSource" /> property is set to this value.</param>
      <param name="originalArgs">The original event arguments.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterCommandEventArgs.Item">
      <summary>
        <para> Gets the <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> associated with the event. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterCommandEventArgs.CommandSource">
      <summary>
        <para> Gets the source of the command. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeaterCommandEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.Repeater.ItemCommand" /> event of a <see cref="T:System.Web.UI.WebControls.Repeater" />.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.RepeaterCommandEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeaterItem">
      <summary>
        <para>Represents an item in the <see cref="T:System.Web.UI.WebControls.Repeater" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeaterItem.#ctor(System.Int32,System.Web.UI.WebControls.ListItemType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> 
class.</para>
      </summary>
      <param name="itemIndex">The index of the item in the <see cref="T:System.Web.UI.WebControls.Repeater" /> control from the <see cref="P:System.Web.UI.WebControls.Repeater.Items" /> collection of the control. </param>
      <param name=" itemType">One of the <see cref="T:System.Web.UI.WebControls.ListItemType" /> values.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItem.DataItem">
      <summary>
        <para>Gets or sets a data item associated with the <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> object in the <see cref="T:System.Web.UI.WebControls.Repeater" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItem.ItemIndex">
      <summary>
        <para>Gets the index of the item in the <see cref="T:System.Web.UI.WebControls.Repeater" /> control from the <see cref="P:System.Web.UI.WebControls.Repeater.Items" /> collection of the
   control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItem.ItemType">
      <summary>
        <para>Gets the type of the item in the <see cref="T:System.Web.UI.WebControls.Repeater" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeaterItemCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> objects in the
<see cref="T:System.Web.UI.WebControls.Repeater" /> control. This class cannot be 
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeaterItemCollection.#ctor(System.Collections.ArrayList)">
      <summary>
        <para>Initializes a new instance of
      the <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" /> class.</para>
      </summary>
      <param name="items">A <see cref="T:System.Collections.ArrayList" qualify="true" /> object that contains the items with which to initialize the collection. </param>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeaterItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies all the items from this <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" /> to the specified <see cref="T:System.Array" qualify="true" /> object,
   starting at the specified index in the <see cref="T:System.Array" qualify="true" />
   object.</para>
      </summary>
      <param name=" array">A zero-based <see cref="T:System.Array" qualify="true" /> object that receives the copied items from the <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" />.</param>
      <param name=" index">The first position in the specified <see cref="T:System.Array" qualify="true" /> object to receive the copied contents.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeaterItemCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> interface that contains all
<see cref="T:System.Web.UI.WebControls.RepeaterItem" /> objects in the <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" qualify="true" /> interface that contains all <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> objects in the <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItemCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> objects in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItemCollection.IsReadOnly">
      <summary>
        <para>Gets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> objects in the <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" /> can be modified.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItemCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItemCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access
      to the <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection" />
      collection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItemCollection.Item(System.Int32)">
      <summary>
        <para>Gets the <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> object at the specified index in
   the collection.</para>
      </summary>
      <param name="index">The zero-based index of the <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> object to retrieve in the collection.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeaterItemEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.Repeater.ItemCreated" /> and <see cref="E:System.Web.UI.WebControls.Repeater.ItemDataBound" /> events of a <see cref="T:System.Web.UI.WebControls.Repeater" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeaterItemEventArgs.#ctor(System.Web.UI.WebControls.RepeaterItem)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.RepeaterItemEventArgs" /> class.</para>
      </summary>
      <param name="item">The <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> associated with the event. The <see cref="P:System.Web.UI.WebControls.RepeaterItemEventArgs.Item" /> property is set to this value.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeaterItemEventArgs.Item">
      <summary>
        <para> Gets the <see cref="T:System.Web.UI.WebControls.RepeaterItem" /> associated with the event.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeaterItemEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.Repeater.ItemCreated" /> and <see cref="E:System.Web.UI.WebControls.Repeater.ItemDataBound" /> events of a <see cref="T:System.Web.UI.WebControls.Repeater" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Web.UI.WebControls.RepeaterItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeatInfo">
      <summary>
        <para>Encapsulates the information used to render a list control that repeats 
      a list of items.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeatInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.RepeatInfo" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.RepeatInfo.RenderRepeater(System.Web.UI.HtmlTextWriter,System.Web.UI.WebControls.IRepeatInfoUser,System.Web.UI.WebControls.Style,System.Web.UI.WebControls.WebControl)">
      <summary>
        <para>Renders a list control that repeats a list of
      items, using the specified
      information.</para>
      </summary>
      <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" qualify="true" /> that represents the output stream used to render HTML content on the client.</param>
      <param name=" user">An <see cref="T:System.Web.UI.WebControls.IRepeatInfoUser" /> implemented object that represents the control to render.</param>
      <param name=" controlStyle">A <see cref="T:System.Web.UI.WebControls.Style" /> that represents the style in which to display the items.</param>
      <param name=" baseControl">The control from which to copy base attributes.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeatInfo.OuterTableImplied">
      <summary>
        <para>Gets or sets a value indicating whether items should be rendered as if they are contained
      in a table.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeatInfo.RepeatColumns">
      <summary>
        <para> Gets or sets the number of columns to render.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeatInfo.RepeatDirection">
      <summary>
        <para>Gets or sets a value that specifies whether 
      the items are displayed vertically or horizontally.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RepeatInfo.RepeatLayout">
      <summary>
        <para> Gets or sets a 
      value specifying whether items are displayed in a table.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RepeatLayout">
      <summary>
        <para> Specifies the layout of items in a list control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.RepeatLayout.Table">
      <summary>
        <para> Items are displayed in a table.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.RepeatLayout.Flow">
      <summary>
        <para> Items are displayed without a table structure.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.RequiredFieldValidator">
      <summary>
        <para> Makes the associated input control a required field.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.RequiredFieldValidator.InitialValue">
      <summary>
        <para> 
       Gets or sets the initial value of the associated input control. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.SelectedDatesCollection">
      <summary>
        <para>Encapsulates a collection of <see cref="T:System.DateTime" qualify="true" />
objects that represent the selected dates in a <see cref="T:System.Web.UI.WebControls.Calendar" /> control. This class cannot be
inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.#ctor(System.Collections.ArrayList)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" /> class 
    with the specified date list.</para>
      </summary>
      <param name="dateList">A <see cref="T:System.Collections.ArrayList" qualify="true" /> that represents a collection of dates.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.Add(System.DateTime)">
      <summary>
        <para>Appends the specified <see cref="T:System.DateTime" qualify="true" /> to the end of the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </summary>
      <param name="date">The <see cref="T:System.DateTime" qualify="true" /> to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.DateTime" qualify="true" /> objects from the collection.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.Contains(System.DateTime)">
      <summary>
        <para>Returns a value indicating whether the 
    <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" /> contains the specified 
    <see cref="T:System.DateTime" qualify="true" /> object.</para>
      </summary>
      <param name="date">The <see cref="T:System.DateTime" qualify="true" /> object to search for in the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" /> contains 
    the specified <see cref="T:System.DateTime" qualify="true" />;
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> that contains all <see cref="T:System.DateTime" qualify="true" /> objects within the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Collections.IEnumerator" qualify="true" /> that contains all <see cref="T:System.DateTime" qualify="true" /> objects 
    within the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the items from the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" /> to the specified <see cref="T:System.Array" qualify="true" />, starting with the specified
   index.</para>
      </summary>
      <param name=" array">A zero-based <see cref="T:System.Array" qualify="true" /> that receives the copied items from the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</param>
      <param name=" index">The first index in the specified <see cref="T:System.Array" qualify="true" /> to receive the items.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.Remove(System.DateTime)">
      <summary>
        <para>Removes the specified <see cref="T:System.DateTime" qualify="true" /> object from the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </summary>
      <param name=" date">The <see cref="T:System.DateTime" qualify="true" /> object to remove from the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.SelectedDatesCollection.SelectRange(System.DateTime,System.DateTime)">
      <summary>
        <para>Adds the specified range of dates to the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </summary>
      <param name="fromDate">A <see cref="T:System.DateTime" qualify="true" /> object that specifies the initial date to add to the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</param>
      <param name=" toDate">A <see cref="T:System.DateTime" qualify="true" /> object that specifies the end date to add to the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.SelectedDatesCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.DateTime" qualify="true" /> objects in the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.SelectedDatesCollection.Item(System.Int32)">
      <summary>
        <para>Gets a <see cref="T:System.DateTime" qualify="true" /> at the specified index in the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </summary>
      <param name=" index">An ordinal index value that specifies which <see cref="T:System.DateTime" qualify="true" /> to return.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.SelectedDatesCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access 
       to the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.SelectedDatesCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.SelectedDatesCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection" /> is synchronized 
    (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ServerValidateEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> event of the <see cref="T:System.Web.UI.WebControls.CustomValidator" /> control. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ServerValidateEventArgs.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" /> class.</para>
      </summary>
      <param name="value">The value to validate.</param>
      <param name=" isValid">
        <see langword="true" /> to indicate that the value passes validation; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value">
      <summary>
        <para>Gets the value to validate in the custom event 
 handler for the <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid">
      <summary>
        <para> Gets or sets whether the value
 specified by the <see cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" /> property passes validation.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ServerValidateEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> event of a
<see cref="T:System.Web.UI.WebControls.CustomValidator" /> control.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" args">A <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.UI.WebControls.TableCellControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.TableCell" /> control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TableCell">
      <summary>
        <para>Represents a cell in a <see cref="T:System.Web.UI.WebControls.Table" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCell.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TableCell" /> class.
   </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCell.ColumnSpan">
      <summary>
        <para>Gets or sets the number of columns in the <see cref="T:System.Web.UI.WebControls.Table" />
control that the cell spans.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCell.HorizontalAlign">
      <summary>
        <para>Gets or sets
      the horizontal alignment of the contents in the cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCell.RowSpan">
      <summary>
        <para>Gets or sets the number of rows in the <see cref="T:System.Web.UI.WebControls.Table" />
control that the cell spans.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCell.Text">
      <summary>
        <para> Gets or sets the text contents of the cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCell.VerticalAlign">
      <summary>
        <para>Gets or sets the vertical alignment of the contents in the cell.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCell.Wrap">
      <summary>
        <para> Gets or sets a value that indicates whether the
      content of the cell wrap in the cell.
      </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TableCellCollection">
      <summary>
        <para>Encapsulates a collection of <see cref="T:System.Web.UI.WebControls.TableHeaderCell" /> and <see cref="T:System.Web.UI.WebControls.TableCell" /> objects that make up a row in a 
 <see cref="T:System.Web.UI.WebControls.Table" /> control. This class cannot be 
    inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.Add(System.Web.UI.WebControls.TableCell)">
      <summary>
        <para>Appends the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> to the end of the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </summary>
      <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to add to the collection.</param>
      <returns>
        <para>The index number of the <see cref="T:System.Web.UI.WebControls.TableCell" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableCell)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> to the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at the specified
 index location.</para>
      </summary>
      <param name="index">The location in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at which to add the <see cref="T:System.Web.UI.WebControls.TableCell" />.</param>
      <param name=" cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to add to the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.AddRange(System.Web.UI.WebControls.TableCell[])">
      <summary>
        <para>Appends the <see cref="T:System.Web.UI.WebControls.TableCell" /> objects from the specifed array to
   the end of the collection.</para>
      </summary>
      <param name="cells">The array containing the <see cref="T:System.Web.UI.WebControls.TableCell" /> objects to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.Web.UI.WebControls.TableCell" /> objects from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.GetCellIndex(System.Web.UI.WebControls.TableCell)">
      <summary>
        <para> Returns a value that represents the index of the
       specified <see cref="T:System.Web.UI.WebControls.TableCell" /> from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </summary>
      <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to get the index of in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
      <returns>
        <para> The index of the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> within the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />. The 
    default is -1, which indicates that a match has not been
    found.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Collections.IEnumerator" qualify="true" /> that contains all <see cref="T:System.Web.UI.WebControls.TableCell" /> objects in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Collections.IEnumerator" qualify="true" /> that contains all <see cref="T:System.Web.UI.WebControls.TableCell" /> objects within the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the items from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> to the specified <see cref="T:System.Array" qualify="true" />, starting with the specified
   index in the <see cref="T:System.Array" qualify="true" />.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> that receives the copied items from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
      <param name=" index">The first index in the specified <see cref="T:System.Array" qualify="true" /> to receive the items.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.Remove(System.Web.UI.WebControls.TableCell)">
      <summary>
        <para>Removes the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </summary>
      <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to remove from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableCellCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes a <see cref="T:System.Web.UI.WebControls.TableCell" /> from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at
    the specified index.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Web.UI.WebControls.TableCell" /> to remove from the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCellCollection.Count">
      <summary>
        <para>Gets the number of <see cref="T:System.Web.UI.WebControls.TableCell" /> objects in the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCellCollection.Item(System.Int32)">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.TableCell" /> from the
 <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> at the
 specified index.</para>
      </summary>
      <param name="index">An ordinal index value that specifies the <see cref="T:System.Web.UI.WebControls.TableCell" /> to return.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCellCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access 
       to the <see cref="T:System.Web.UI.WebControls.TableCellCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCellCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableCellCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to 
       the <see cref="T:System.Web.UI.WebControls.TableCellCollection" /> is synchronized
       (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TableHeaderCell">
      <summary>
        <para> Represents a heading cell within a <see cref="T:System.Web.UI.WebControls.Table" /> 
control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableHeaderCell.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TableHeaderCell" /> class.
   </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TableRowCollection">
      <summary>
        <para>Encapsulates a collection of <see cref="T:System.Web.UI.WebControls.TableRow" /> objects that represent a single row in a <see cref="T:System.Web.UI.WebControls.Table" /> control. This class cannot be 
    inherited.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.Add(System.Web.UI.WebControls.TableRow)">
      <summary>
        <para>Appends the specified <see cref="T:System.Web.UI.WebControls.TableRow" /> to the end of the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</para>
      </summary>
      <param name="row">The <see cref="T:System.Web.UI.WebControls.TableRow" /> to add to the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</param>
      <returns>
        <para>The index of the <see cref="T:System.Web.UI.WebControls.TableRow" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableRow)">
      <summary>
        <para>Adds the specified <see cref="T:System.Web.UI.WebControls.TableRow" /> to the <see cref="T:System.Web.UI.WebControls.TableRowCollection" /> at the specified
   index location.</para>
      </summary>
      <param name="index">The location in the <see cref="T:System.Web.UI.WebControls.TableRowCollection" /> at which to add the <see cref="T:System.Web.UI.WebControls.TableRow" />.</param>
      <param name=" row">The <see cref="T:System.Web.UI.WebControls.TableRow" /> to add to the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.AddRange(System.Web.UI.WebControls.TableRow[])">
      <summary>
        <para>Appends the <see cref="T:System.Web.UI.WebControls.TableRow" /> objects from the specifed array to
   the end of the collection.</para>
      </summary>
      <param name="rows">The array containing the <see cref="T:System.Web.UI.WebControls.TableRow" /> objects to add to the collection.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.Clear">
      <summary>
        <para>Removes all <see cref="T:System.Web.UI.WebControls.TableRow" /> controls from the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.GetRowIndex(System.Web.UI.WebControls.TableRow)">
      <summary>
        <para> Returns a value that represents the index of the specified
    <see cref="T:System.Web.UI.WebControls.TableRow" /> from 
       the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />. </para>
      </summary>
      <param name="row">The <see cref="T:System.Web.UI.WebControls.TableRow" /> to search for in the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</param>
      <returns>
        <para>The ordinal index position of the specified <see cref="T:System.Web.UI.WebControls.TableRow" /> within 
    the collection. The default is -1, which indicates that the specified <see cref="T:System.Web.UI.WebControls.TableRow" /> has
    not been found.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IEnumerator" qualify="true" /> that contains all <see cref="T:System.Web.UI.WebControls.TableRow" /> objects within the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</para>
      </summary>
      <returns>
        <para> A 
    <see cref="T:System.Collections.IEnumerator" qualify="true" /> that contains all <see cref="T:System.Web.UI.WebControls.TableRow" /> objects within the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the items from the <see cref="T:System.Web.UI.WebControls.TableRowCollection" /> to the specified <see cref="T:System.Array" qualify="true" />, starting with
   the specified index in the <see cref="T:System.Array" qualify="true" />.</para>
      </summary>
      <param name="array">A zero-based <see cref="T:System.Array" qualify="true" /> that receives the copied items from the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</param>
      <param name=" index">The first position in the specified <see cref="T:System.Array" qualify="true" /> to receive copied contents.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.Remove(System.Web.UI.WebControls.TableRow)">
      <summary>
        <para>Removes the specified <see cref="T:System.Web.UI.WebControls.TableRow" /> from the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</para>
      </summary>
      <param name="row">The <see cref="T:System.Web.UI.WebControls.TableRow" /> to remove from the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.TableRowCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes a <see cref="T:System.Web.UI.WebControls.TableRow" /> from the <see cref="T:System.Web.UI.WebControls.TableRowCollection" /> at the
    specified index.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Web.UI.WebControls.TableRow" /> to remove from the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRowCollection.Count">
      <summary>
        <para>Gets
       the number of <see cref="T:System.Web.UI.WebControls.TableRow" /> objects in the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRowCollection.Item(System.Int32)">
      <summary>
        <para>Gets a <see cref="T:System.Web.UI.WebControls.TableRow" /> from the 
 <see cref="T:System.Web.UI.WebControls.TableRowCollection" /> at the 
    specified index.</para>
      </summary>
      <param name="index">An ordinal index value that specifies which <see cref="T:System.Web.UI.WebControls.TableRow" /> to return.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRowCollection.SyncRoot">
      <summary>
        <para>Gets the object that can be used to synchronize access to 
       the <see cref="T:System.Web.UI.WebControls.TableRowCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRowCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.TableRowCollection" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableRowCollection.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Web.UI.WebControls.TableRowCollection" /> is synchronized
    (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TableStyle">
      <summary>
        <para>Represents the style for a table control. This class is primarily used by control developers.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableStyle.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TableStyle" /> class using default values.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TableStyle.#ctor(System.Web.UI.StateBag)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TableStyle" /> class with the
   specified state bag information.
   </para>
      </summary>
      <param name="bag">A <see cref="T:System.Web.UI.StateBag" qualify="true" /> that represents the state bag in which to store style information.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.TableStyle.BackImageUrl">
      <summary>
        <para> Gets or sets the URL
      of an image to display in the background of a table control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableStyle.CellPadding">
      <summary>
        <para>Gets or sets the amount of space between the contents of the
      cell and the cell's border.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableStyle.CellSpacing">
      <summary>
        <para>Gets or sets the distance between table cells.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableStyle.GridLines">
      <summary>
        <para> Gets or sets a value that specifies whether
      the border between the cells of the table control is displayed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TableStyle.HorizontalAlign">
      <summary>
        <para>Gets or sets the horizontal alignment of the table within its container.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TargetConverter">
      <summary>
        <para> Converts a value representing the location (target) to 
      display the content resulting from a Web navigation to a string. It also
      converts a string to a target value.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TemplateColumn">
      <summary>
        <para>Represents a column type for the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control that allows you
   to customize the layout of controls in the column.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TemplateColumn.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TemplateColumn" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TemplateColumn.EditItemTemplate">
      <summary>
        <para>Gets or sets the template for displaying the item
      selected for editing in a <see cref="T:System.Web.UI.WebControls.TemplateColumn" />. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TemplateColumn.FooterTemplate">
      <summary>
        <para> Gets or sets the
      template for displaying the footer section of the <see cref="T:System.Web.UI.WebControls.TemplateColumn" />. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TemplateColumn.HeaderTemplate">
      <summary>
        <para> Gets or sets
      the template for displaying the heading section of the <see cref="T:System.Web.UI.WebControls.TemplateColumn" />. </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TemplateColumn.ItemTemplate">
      <summary>
        <para> Gets or sets the template
      for displaying a data item in a <see cref="T:System.Web.UI.WebControls.TemplateColumn" />. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TextAlign">
      <summary>
        <para> Specifies whether the text associated with a check box or radio button
      control appears to the left or to the right of the control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.TextAlign.Left">
      <summary>
        <para> Text associated with a check box or radio button control appears to the left of the control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.TextAlign.Right">
      <summary>
        <para> Text associated with a check box or radio button control appears to
      the right of the control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TextBoxControlBuilder">
      <summary>
        <para>Interacts with the parser to build a <see cref="T:System.Web.UI.WebControls.TextBox" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TextBoxControlBuilder.HtmlDecodeLiterals">
      <summary>
        <para>Checks whether the literal string of the <see cref="T:System.Web.UI.WebControls.TextBox" /> control must be HTML decoded.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> for all cases.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.WebControls.TextBox">
      <summary>
        <para>Constructs a text box and defines its properties.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TextBox.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.TextBox" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.TextBox.OnTextChanged(System.EventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Web.UI.WebControls.TextBox.TextChanged" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.EventArgs" qualify="true" /> that contains event information.</param>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.AutoPostBack">
      <summary>
        <para>Gets or sets a value indicating whether an automatic
      postback to the server will occur whenever the user changes the
      content of the text box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.Columns">
      <summary>
        <para>Gets or sets the display
       width of the text box in characters.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.MaxLength">
      <summary>
        <para>Gets or sets the maximum number of characters allowed in the text box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.TextMode">
      <summary>
        <para> Gets or sets the behavior mode of the text box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.ReadOnly">
      <summary>
        <para>Gets or sets a value indicating whether the contents of 
      the <see cref="T:System.Web.UI.WebControls.TextBox" /> control can be changed.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.Rows">
      <summary>
        <para> Gets or sets the display height of a multiline text box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.Text">
      <summary>
        <para> Gets
       or sets the text content of the text box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.TextBox.Wrap">
      <summary>
        <para>Gets or sets a value indicating whether the
      text content wraps within the text box.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.WebControls.TextBox.TextChanged">
      <summary>
        <para>Occurs when the content of the text box is
      changed upon server postback.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TextBoxMode">
      <summary>
        <para> Specifies the behavior mode of
       the text box.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.TextBoxMode.SingleLine">
      <summary>
        <para> 
       Single-line entry mode.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.TextBoxMode.MultiLine">
      <summary>
        <para> Multi 
       line entry mode.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.TextBoxMode.Password">
      <summary>
        <para> 
       Password entry mode.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.TitleFormat">
      <summary>
        <para> Specifies the title format
 for the displayed month in the <see cref="T:System.Web.UI.WebControls.Calendar" />
 control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.TitleFormat.Month">
      <summary>
        <para> Title displayed with only the
       month but not the year. For example, "January".</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.TitleFormat.MonthYear">
      <summary>
        <para> Title displayed with both the
       month and the year. For example, "January 2000".</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Unit">
      <summary>
        <para> Represents a length
      measurement.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.Unit.Empty">
      <summary>
        <para>Represents an empty <see cref="T:System.Web.UI.WebControls.Unit" />. This field is
   read-only.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Unit" /> structure with the specified 32-bit signed integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" /> in pixels.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.#ctor(System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Unit" /> structure with the specified double precision floating point number.</para>
      </summary>
      <param name="value">A double precision floating point number that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" /> in pixels.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.#ctor(System.Double,System.Web.UI.WebControls.UnitType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Unit" /> structure with the specified double
   precision floating point number and <see cref="T:System.Web.UI.WebControls.UnitType" />.</para>
      </summary>
      <param name="value">A double precision floating point number that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" />.</param>
      <param name=" type">One of the <see cref="T:System.Web.UI.WebControls.UnitType" /> enumeration values.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Unit" /> structure with the specified text.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" qualify="true" /> that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" /> in pixels.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Unit" /> structure with the specified text and
<see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" qualify="true" /> that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" /> in pixels.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> that represents the culture.</param>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.Equals(System.Object)">
      <summary>
        <para>Compares this <see cref="T:System.Web.UI.WebControls.Unit" /> with the specified object.</para>
      </summary>
      <param name="obj">The specified object for comparison.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.Unit" /> that this
   method is called from is equal to the specified object; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.op_Equality(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
      <summary>
        <para>Compares two <see cref="T:System.Web.UI.WebControls.Unit" /> objects to determine whether they are equal.</para>
      </summary>
      <param name="left">The <see cref="T:System.Web.UI.WebControls.Unit" /> on the left side of the operator.</param>
      <param name=" right">The <see cref="T:System.Web.UI.WebControls.Unit" /> on the right side of the operator.</param>
      <returns>
        <para>
          <see langword="true" /> if both <see cref="T:System.Web.UI.WebControls.Unit" /> objects are equal;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.op_Inequality(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
      <summary>
        <para>Compares two <see cref="T:System.Web.UI.WebControls.Unit" /> objects to determine whether
   they are not equal.</para>
      </summary>
      <param name=" left">The <see cref="T:System.Web.UI.WebControls.Unit" /> on the left side of the operator.</param>
      <param name=" right">The <see cref="T:System.Web.UI.WebControls.Unit" /> on the right side of the operator.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.Unit" /> objects are not equal;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.Parse(System.String)">
      <summary>
        <para>Converts the specified string to a <see cref="T:System.Web.UI.WebControls.Unit" />.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Unit" /> 
that
represents the specified string.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.Parse(System.String,System.Globalization.CultureInfo)">
      <summary>
        <para>Converts the specified string and <see cref="T:System.Globalization.CultureInfo" qualify="true" /> to a <see cref="T:System.Web.UI.WebControls.Unit" />.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> that represents the culture.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Unit" /> 
that
represents the specified string.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.Percentage(System.Double)">
      <summary>
        <para>Creates a <see cref="T:System.Web.UI.WebControls.Unit" /> of type <see langword="Percentage" /> from the specified double precision floating point number.</para>
      </summary>
      <param name="n">A double precision floating point number that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" />.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Unit" /> 
of type <see langword="Percentage" />
that represents the length specified by the double precision floating point number.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.Pixel(System.Int32)">
      <summary>
        <para>Creates a <see cref="T:System.Web.UI.WebControls.Unit" /> of type <see langword="Pixel" /> from the specified 32-bit signed integer.</para>
      </summary>
      <param name="n">A 32-bit signed integer that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" />.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Unit" />
of type <see langword="Pixel" /> that represents the length
specified by the <paramref name="n" />
parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.Point(System.Int32)">
      <summary>
        <para>Creates a <see cref="T:System.Web.UI.WebControls.Unit" /> of type <see langword="Point" /> from the specified 32-bit signed integer.</para>
      </summary>
      <param name="n">A 32-bit signed integer that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" />.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Unit" />
of type <see langword="Point" />
that represents the length specified by the 32-bit signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.ToString(System.Globalization.CultureInfo)">
      <summary>
        <para>Converts a <see cref="T:System.Web.UI.WebControls.Unit" /> to a string equivalent in the
   specified culture.</para>
      </summary>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> that represents the culture.</param>
      <returns>
        <para>A <see cref="T:System.String" qualify="true" /> 
represents this <see cref="T:System.Web.UI.WebControls.Unit" /> in the culture specified by the
<paramref name="culture" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.WebControls.Unit.op_Implicit(System.Int32)~System.Web.UI.WebControls.Unit">
      <summary>
        <para>Implicitly creates a <see cref="T:System.Web.UI.WebControls.Unit" /> of type <see langword="Pixel" /> from the specified 32-bit unsigned integer.</para>
      </summary>
      <param name="n">A 32-bit signed integer that represents the length of the <see cref="T:System.Web.UI.WebControls.Unit" />.</param>
      <returns>
        <para>A <see cref="T:System.Web.UI.WebControls.Unit" /> of type
<see langword="Pixel" /> that represents the 32-bit unsigned integer 
   specified by the <paramref name="n" /> parameter.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.WebControls.Unit.IsEmpty">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Web.UI.WebControls.Unit" /> is empty.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Unit.Type">
      <summary>
        <para> Gets the unit type of the <see cref="T:System.Web.UI.WebControls.Unit" />.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Unit.Value">
      <summary>
        <para>Gets the length of the <see cref="T:System.Web.UI.WebControls.Unit" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.UnitConverter">
      <summary>
        <para> Converts a <see cref="T:System.Web.UI.WebControls.Unit" /> to an object of another data 
   type. It also converts an object of another data type to a <see cref="T:System.Web.UI.WebControls.Unit" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.UnitType">
      <summary>
        <para> Specifies the unit of measurement.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Pixel">
      <summary>
        <para> Measurement is in pixels.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Point">
      <summary>
        <para> Measurement is in points. A point represents 
      1/72 of an inch.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Pica">
      <summary>
        <para> Measurement is in picas. 
      A pica represents 12 points.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Inch">
      <summary>
        <para> Measurement is in inches.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Mm">
      <summary>
        <para> Measurement is in millimeters.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Cm">
      <summary>
        <para> Measurement is in centimeters.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Percentage">
      <summary>
        <para> Measurement is a percentage relative to the parent element.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Em">
      <summary>
        <para> Measurement is relative to
      the
      height of
      the parent element's font. </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.UnitType.Ex">
      <summary>
        <para> Measurement is relative to the height of the lowercase
      letter x of the parent
      element's font. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ValidatedControlConverter">
      <summary>
        <para> Converts a control on the Web Forms page
      that can be validated with a validation control to a
      string.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ValidatedControlConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ValidatedControlConverter" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ValidationCompareOperator">
      <summary>
        <para> Specifies the validation comparison operators used by 
       the <see cref="T:System.Web.UI.WebControls.CompareValidator" />
       control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationCompareOperator.Equal">
      <summary>
        <para> A comparison for equality.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationCompareOperator.NotEqual">
      <summary>
        <para> A comparison for inequality.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationCompareOperator.GreaterThan">
      <summary>
        <para>A comparison for greater than.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationCompareOperator.GreaterThanEqual">
      <summary>
        <para>A comparison for greater than or equal to.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationCompareOperator.LessThan">
      <summary>
        <para> A comparison for less than.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationCompareOperator.LessThanEqual">
      <summary>
        <para>A comparison for less than or equal to.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationCompareOperator.DataTypeCheck">
      <summary>
        <para> A
      comparison for data type only.</para>
        <note type="note">
      Unlike the other operators,
   <see langword="DataTypeCheck" />
   
   is a unary operation. Only the data type of the
   input control being validated is checked. If the <see cref="P:System.Web.UI.WebControls.CompareValidator.ControlToCompare" /> or <see cref="P:System.Web.UI.WebControls.CompareValidator.ValueToCompare" /> properties are set
   when this operation is used, those
   values are not checked.
   
</note>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ValidationDataType">
      <summary>
        <para> Specifies the validation data types used by the
   <see cref="T:System.Web.UI.WebControls.CompareValidator" /> and <see cref="T:System.Web.UI.WebControls.RangeValidator" />
   controls.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationDataType.String">
      <summary>
        <para> A string data type. The value is treated as a <see cref="T:System.String" qualify="true" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationDataType.Integer">
      <summary>
        <para>A 32-bit signed integer data type. The 
      value is treated as a <see cref="T:System.Int32" qualify="true" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationDataType.Double">
      <summary>
        <para> A double precision floating point number data type. The 
      value is treated as a <see cref="T:System.Double" qualify="true" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationDataType.Date">
      <summary>
        <para> A date data type. Only numeric dates are allowed. The 
      time portion cannot be specified.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationDataType.Currency">
      <summary>
        <para> A monetary data type. The value is treated as a <see cref="T:System.Decimal" qualify="true" />. However, currency and 
   grouping symbols are still allowed.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ValidationSummary">
      <summary>
        <para> Displays
      a summary of all validation errors inline on a Web page,
      in a message box, or both.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.WebControls.ValidationSummary.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ValidationSummary.DisplayMode">
      <summary>
        <para>Gets or sets the display mode of the validation summary.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ValidationSummary.EnableClientScript">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> control updates itself using client-side
   script.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ValidationSummary.ForeColor">
      <summary>
        <para> 
       Gets or sets the fore color of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ValidationSummary.HeaderText">
      <summary>
        <para> Gets or sets the header text displayed at the top
       of the summary.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ValidationSummary.ShowMessageBox">
      <summary>
        <para> Gets or sets a value indicating 
       whether the validation summary is displayed in a message box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.ValidationSummary.ShowSummary">
      <summary>
        <para> Gets or sets a value indicating whether
       the validation summary is displayed inline.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ValidationSummaryDisplayMode">
      <summary>
        <para> Specifies the validation summary display mode 
       used by the <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationSummaryDisplayMode.List">
      <summary>
        <para> 
       Validation
       summary displayed in a list.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationSummaryDisplayMode.BulletList">
      <summary>
        <para> 
       Validation
       summary displayed in a bulleted list.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidationSummaryDisplayMode.SingleParagraph">
      <summary>
        <para>Validation summary displayed in a single paragraph.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.ValidatorDisplay">
      <summary>
        <para>Specifies the display behavior of error messages in validation controls.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidatorDisplay.None">
      <summary>
        <para> Validator content never displayed
       inline.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidatorDisplay.Static">
      <summary>
        <para> 
       Validator content physically part of the page layout.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.ValidatorDisplay.Dynamic">
      <summary>
        <para> 
       Validator
       content
       dynamically added to the page when validation
       fails.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.VerticalAlign">
      <summary>
        <para>Specifies the vertical alignment of an object or text in a control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.VerticalAlign.NotSet">
      <summary>
        <para> Vertical alignment is not set.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.VerticalAlign.Top">
      <summary>
        <para> Text or object is aligned with the top of the
       enclosing control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.VerticalAlign.Middle">
      <summary>
        <para> 
       Text or object is aligned with the center of the enclosing control.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.WebControls.VerticalAlign.Bottom">
      <summary>
        <para> Text or object is aligned with the bottom of the enclosing
       control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.WebColorConverter">
      <summary>
        <para>Converts a predefine color name or an RGB color value to and from a <see cref="T:System.Drawing.Color" qualify="true" />.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.WebControls.Xml">
      <summary>
        <para> Displays an XML document without formatting or
      using Extensible Stylesheet Language Transformations (XSLT).</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Xml.DocumentContent">
      <summary>
        <para> Sets a string that contains the XML document to
      display in the <see cref="T:System.Web.UI.WebControls.Xml" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Xml.DocumentSource">
      <summary>
        <para>Gets or sets the path to an XML document to display in the <see cref="T:System.Web.UI.WebControls.Xml" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Xml.TransformSource">
      <summary>
        <para> Gets or sets the path to an Extensible Stylesheet Language Transformation (XSLT) style sheet that
      formats the XML
      document before it is written to the output stream.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Xml.Document">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.XmlDocument" qualify="true" /> to display in the <see cref="T:System.Web.UI.WebControls.Xml" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Xml.Transform">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Xsl.XslTransform" qualify="true" /> object that formats the XML document before it is written to
   the output stream.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.WebControls.Xml.TransformArgumentList">
      <summary>
        <para> Gets or sets a <see cref="T:System.Xml.Xsl.XsltArgumentList" qualify="true" /> that contains a list of
   optional arguments passed
   to the style sheet and used during the Extensible Stylesheet Language Transformation (XSLT).</para>
      </summary>
    </member>
    <member name="P:System.Web.Util.Counter.Value">
    </member>
    <member name="P:System.Web.Util.Counter.Frequency">
    </member>
    <member name="T:System.Web.Mail.SmtpMail">
      <summary>
        <para>Provides properties and methods for sending messages using the Collaboration Data Objects for Windows
      2000 (CDOSYS) message component.</para>
      </summary>
    </member>
    <member name="M:System.Web.Mail.SmtpMail.Send(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Sends an e-mail message using the specified destination
      parameters.</para>
      </summary>
      <param name="from">The address of the e-mail sender.</param>
      <param name=" to">The address of the e-mail recipient.</param>
      <param name=" subject">The subject line of the e-mail message.</param>
      <param name=" messageText">The body of the e-mail message.</param>
    </member>
    <member name="M:System.Web.Mail.SmtpMail.Send(System.Web.Mail.MailMessage)">
      <summary>
        <para>Sends an e-mail message using arguments supplied in the 
      properties of the <see cref="T:System.Web.Mail.MailMessage" />
      class.</para>
      </summary>
      <param name="message">The <see cref="T:System.Web.Mail.MailMessage" /> to send.</param>
    </member>
    <member name="P:System.Web.Mail.SmtpMail.SmtpServer">
      <summary>
        <para>Gets or
      sets the name of the SMTP mail server to use to send all e-mail
      messages.
      </para>
      </summary>
    </member>
    <member name="T:System.Web.Mail.MailFormat">
      <summary>
        <para>Provides enumerated values for e-mail format.</para>
      </summary>
    </member>
    <member name="F:System.Web.Mail.MailFormat.Text">
      <summary>
        <para>Specifies that the e-mail format is plain text.</para>
      </summary>
    </member>
    <member name="F:System.Web.Mail.MailFormat.Html">
      <summary>
        <para>Specifies that the e-mail format is HTML.</para>
      </summary>
    </member>
    <member name="T:System.Web.Mail.MailPriority">
      <summary>
        <para> Specifies the priority level for the e-mail message.</para>
      </summary>
    </member>
    <member name="F:System.Web.Mail.MailPriority.Normal">
      <summary>
        <para>Specifies that the e-mail message has normal priority.</para>
      </summary>
    </member>
    <member name="F:System.Web.Mail.MailPriority.Low">
      <summary>
        <para>Specifies that the e-mail message has low priority.</para>
      </summary>
    </member>
    <member name="F:System.Web.Mail.MailPriority.High">
      <summary>
        <para>Specifies that the e-mail message has high priority.</para>
      </summary>
    </member>
    <member name="T:System.Web.Mail.MailEncoding">
      <summary>
        <para>Provides enumered values for e-mail encoding.</para>
      </summary>
    </member>
    <member name="F:System.Web.Mail.MailEncoding.UUEncode">
      <summary>
        <para>Specifies that the e-mail message uses UUEncode encoding.</para>
      </summary>
    </member>
    <member name="F:System.Web.Mail.MailEncoding.Base64">
      <summary>
        <para>Specifies that the e-mail message uses Base64 encoding.</para>
      </summary>
    </member>
    <member name="T:System.Web.Mail.MailAttachment">
      <summary>
        <para> Provides properties and methods
      for constructing an e-mail attachment.</para>
      </summary>
    </member>
    <member name="M:System.Web.Mail.MailAttachment.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Mail.MailAttachment" />
class with
the specified file name for the attachment. Sets the <see cref="T:System.Text.Encoding" />
property to UUEncode by default.</para>
      </summary>
      <param name="filename">The name of the attachment file.</param>
    </member>
    <member name="M:System.Web.Mail.MailAttachment.#ctor(System.String,System.Web.Mail.MailEncoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.Mail.MailAttachment" /> class with the specified file name and encoding
   type for the attachment.</para>
      </summary>
      <param name="filename">The name of the attachment file.</param>
      <param name=" encoding">The type of <see cref="T:System.Web.Mail.MailEncoding" /> for the attachment.</param>
    </member>
    <member name="P:System.Web.Mail.MailAttachment.Filename">
      <summary>
        <para> Gets the name of the attachment file.</para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailAttachment.Encoding">
      <summary>
        <para> Gets the type of encoding for the e-mail attachment.</para>
      </summary>
    </member>
    <member name="T:System.Web.Mail.MailMessage">
      <summary>
        <para> Provides properties and methods for constructing an e-mail message.</para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.From">
      <summary>
        <para>Gets or sets the e-mail address of the sender.</para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.To">
      <summary>
        <para>Gets or sets the e-mail
      address of the recipient.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.Cc">
      <summary>
        <para>Gets or sets a semicolon-delimited list
      of e-mail addresses that receive a carbon copy (CC) of the e-mail
      message.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.Bcc">
      <summary>
        <para> Gets or sets
      a semicolon-delimited list of email addresses that receive a
      blind carbon copy (BCC) of the e-mail message.</para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.Subject">
      <summary>
        <para>Gets or sets the
      subject line of the e-mail message.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.Priority">
      <summary>
        <para>Gets or sets the
      priority of the e-mail message.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.UrlContentBase">
      <summary>
        <para> Gets or sets the 
   <see langword="Content-Base" /> HTTP header, the
      URL
      base of
      all relative URLs used within the HTML-encoded body of the e-mail
      message.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.UrlContentLocation">
      <summary>
        <para> Gets or sets the <see langword="Content-Location" /> HTTP header for the e-mail message.</para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.Body">
      <summary>
        <para>Gets or sets the body of the e-mail message.</para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.BodyFormat">
      <summary>
        <para>Gets or sets the content type of the
      body of the e-mail message.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.BodyEncoding">
      <summary>
        <para>Gets or sets the encoding type of the
      body of the e-mail message.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.Headers">
      <summary>
        <para>Specifies the custom
      headers that are transmitted with the e-mail message.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.Mail.MailMessage.Attachments">
      <summary>
        <para>Specifies the list of the attachments that are transmitted
      with the message.</para>
      </summary>
    </member>
    <member name="F:System.Web.Util.SymbolEqualComparer.Default">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Web.Util.SymbolHashCodeProvider.Default">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\x86\managed\urt\v1.0.3705\mscorlib.xml ===
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Object">
      <summary>
        <para>Supports all classes in the .NET Framework class hierarchy and provides
      low-level services to derived classes. This is the ultimate superclass
      of all classes in the .NET Framework; it is the root of the type hierarchy.</para>
      </summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Object" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Object.ToString">
      <summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the
   current <see cref="T:System.Object" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary>
      <param name="objA">The first <see cref="T:System.Object" /> to compare.</param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="objA" /> is the same instance as
   <paramref name="objB" /> or if both are null references or if <c>objA.Equals(objB)</c> returns
   <see langword="true" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary>
      <param name="objA">The first <see cref="T:System.Object" /> to compare.</param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>
        <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary>
      <returns>
        <para> The <see cref="T:System.Type" /> instance that represents the exact runtime type of the current instance.</para>
      </returns>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
      </summary>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the current <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="T:System.ICloneable">
      <summary>
        <para> Supports cloning, which creates a new instance of a class
      with the same value as
      an existing instance.
      </para>
      </summary>
    </member>
    <member name="M:System.ICloneable.Clone">
      <summary>
        <para> Creates a new object that is a copy of the current instance.
      </para>
      </summary>
      <returns>
        <para> A new object that is a copy of this instance.
      </para>
      </returns>
    </member>
    <member name="T:System.Array">
      <summary>
        <para>Provides methods for creating, manipulating, searching,
      and sorting arrays, thereby serving as the base class for all
      arrays in the common language runtime.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IList">
      <summary>
        <para>Represents a collection of objects that can be individually accessed by index.</para>
      </summary>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>
        <para>Defines size, enumerators and synchronization methods for all collections.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>
        <para> Exposes the enumerator, which supports a simple iteration over a collection.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>
        <para> 
       Returns an enumerator that can iterate through a collection.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" />
 that can be used to iterate through the collection.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>When implemented by a class, copies the elements of
       the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>
        <para>When implemented by a class, gets the number of
       elements contained in the <see cref="T:System.Collections.ICollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>
        <para>When implemented by a class, gets an object that
 can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>
        <para>When implemented by a class, gets a value
 indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized
 (thread-safe).</para>
      </summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>
        <para>When implemented by a class, adds an item to the <see cref="T:System.Collections.IList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <para>The position into which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>
        <para>When implemented by a class, determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Object" />
    is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>
        <para>When implemented by a class, removes all items from the <see cref="T:System.Collections.IList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>
        <para>When implemented by a class, determines the index of a
       specific item in the <see cref="T:System.Collections.IList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <para>The index of <paramref name="value" /> if found in the list; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>
        <para>When implemented by a class, inserts an item to
       the <see cref="T:System.Collections.IList" /> at the
       specified position.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>
        <para>When implemented by a class, removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>
        <para>When implemented by a class, removes the <see cref="T:System.Collections.IList" />
 item at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>
        <para>When implemented by a class, gets or sets the element at the specified 
       index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>
        <para>Creates a one-dimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and length, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length">The size of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
      <summary>
        <para>Creates a two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" />
and dimension lengths, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length
   for each dimension, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Creates a three-dimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length3">The size of the third dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length
   for each dimension, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>
        <para>Creates a multidimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new multidimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>
        <para>Creates a multidimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and dimension lengths, with the specified lower bounds.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="lowerBounds">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with
   the specified length and lower bound for each dimension.</para>
      </returns>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>
        <para> Copies a range of elements from
      an <see cref="T:System.Array" /> starting at the first element and pastes them into
      another <see cref="T:System.Array" /> starting at the first element.</para>
      </summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">The number of elements to copy.</param>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
        <para> Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index
 and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</para>
      </summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">The index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">The index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">The number of elements to copy.</param>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Sets a range of elements in the <see cref="T:System.Array" /> to zero, to <see langword="false" />, or to <see langword="null" />, depending on the element type.</para>
      </summary>
      <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
      <param name="index">The starting index of the range of elements to clear.</param>
      <param name="length">The number of elements to clear.</param>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>
        <para>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="indices">A one-dimensional array of indexes that specifies the position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>
        <para>Gets the value at the specified position in the
      one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="index">The position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32)">
      <summary>
        <para>Gets the value at the specified position in the
      two-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Gets the value at the specified position in the
      three-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index3">The third-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>
        <para>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">The position of the <see cref="T:System.Array" /> element to set.</param>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Sets a value to the element at the specified position
      in the two-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets a value to the element at the specified position
      in the three-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index3">The third-dimension index of the <see cref="T:System.Array" /> element to set.</param>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>
        <para>Sets a value to the element at the specified position
      in the multidimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of indexes that specifies the position of the element to set.</param>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>
        <para>Gets the number of elements in the specified dimension
      of the <see cref="T:System.Array" />.
      </para>
      </summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined. </param>
      <returns>
        <para>The number of elements in the specified dimension.
      </para>
      </returns>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>
        <para>Gets the upper bound of the specified dimension in the
    <see cref="T:System.Array" />.</para>
      </summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose upper bound needs to be determined.</param>
      <returns>
        <para>The upper bound of the specified dimension in the
    <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>
        <para>Gets the lower bound of the specified dimension in the <see cref="T:System.Array" />.</para>
      </summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose lower bound needs to be determined.</param>
      <returns>
        <para>The lower bound of the specified dimension in the <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Array" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>
        <para>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using
   the <see cref="T:System.IComparable" /> interface implemented by each element of
   the <see cref="T:System.Array" /> and by the specified object.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para> A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>
        <para>Searches a section of a one-dimensional sorted <see cref="T:System.Array" /> for a
   value, using the <see cref="T:System.IComparable" /> interface implemented by each element of
   the <see cref="T:System.Array" /> and by the specified value.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a value, using the
   specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches a section of a one-dimensional sorted <see cref="T:System.Array" /> for a value,
   using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element. </para>
      </param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies all the elements of the current one-dimensional <see cref="T:System.Array" /> to the specified
   one-dimensional <see cref="T:System.Array" /> starting at the specified destination <see cref="T:System.Array" /> index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current <see cref="T:System.Array" />.</param>
      <param name="index">The index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>
        <para>Searches for the specified object and returns the index of the first occurrence
   within the entire one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <returns>
        <para>The index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>
        <para>Searches for the specified object and returns the index of the first occurrence
   within the section of the one-dimensional <see cref="T:System.Array" /> that extends from the specified index to the last element.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search.</param>
      <returns>
        <para>The index of the first occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified object and returns the index of the first occurrence within the section of the one-dimensional <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The index of the first occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that starts
   at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>
        <para> Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <returns>
        <para>The index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>
        <para> Searches for the specified object and returns the index of the last occurrence within the section of the one-dimensional <see cref="T:System.Array" /> that extends from the first element to the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <returns>
        <para>The index of the last occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>
        <para> Searches for the specified object and returns the index of the last occurrence within the section of the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The index of the last occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>
        <para>Reverses the sequence of the elements in the entire
       one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Reverses the sequence of the elements in a section of
       the one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <param name="index">The starting index of the section to reverse.</param>
      <param name="length">The number of elements in the section to reverse.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>
        <para>Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using
   the <see cref="T:System.IComparable" /> interface implemented by each element of the <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>
        <para>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys
   and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using
   the <see cref="T:System.IComparable" /> interface implemented by each key.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">
        <para>The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Sorts the elements in a section of a one-dimensional <see cref="T:System.Array" /> using the
<see cref="T:System.IComparable" /> interface implemented by each element of the <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Sorts a section of a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the
   other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the
<see cref="T:System.IComparable" />
interface implemented by each key.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />. <para>-or-</para><para><see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para></param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>
        <para>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the
   other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">
        <para>The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para>
      </param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in a section of a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element. </para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
        <para>Sorts a section of a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the
   other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">
        <para>The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para>
      </param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element. </para>
      </param>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>
        <para>Initializes every element of the value-type <see cref="T:System.Array" /> by calling the
   default constructor of the value type.</para>
      </summary>
    </member>
    <member name="P:System.Array.Length">
      <summary>
        <para>Gets the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.Rank">
      <summary>
        <para>Gets the rank (number of dimensions) of the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>
        <para> Gets the number of elements contained in the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
      the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Array" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Array.System#Collections#IList#$Item$(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>
        <para> Supports a simple iteration over a collection.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the next element of the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was successfully advanced to the next element;
 <see langword="false" /> if the enumerator has passed the end of the collection.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>
        <para>Sets the enumerator to its initial position, which is before
 the first element in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>
        <para>Gets the current element in the collection.</para>
      </summary>
    </member>
    <member name="T:System.IComparable">
      <summary>
        <para>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method.</para>
      </summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>
        <para> Compares the current instance with another
 object of the same type.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>A 32-bit signed integer that indicates the relative order of the comparands.
 The return value has these meanings:</para>
        <list type="table">
          <listheader>
            <term>Value </term>
            <description>Meaning </description>
          </listheader>
          <item>
            <term> Less than zero </term>
            <description>This
 instance is less than <paramref name="obj" />. </description>
          </item>
          <item>
            <term> Zero </term>
            <description>This
 instance is equal to <paramref name="obj" />. </description>
          </item>
          <item>
            <term> Greater than zero </term>
            <description>This
 instance is greater than <paramref name="obj" />. </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:System.String">
      <summary>
        <para> Represents an immutable series of characters.</para>
      </summary>
    </member>
    <member name="T:System.IConvertible">
      <summary>
        <para>Defines methods that convert the value of the implementing reference or value
      type to a common language runtime type that has an equivalent value.</para>
      </summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" />
for this instance.</para>
      </summary>
      <returns>
        <para>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or 
 value type that implements this interface.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent Boolean
 value using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>A Boolean value equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent Unicode
 character using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>A Unicode character equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 8-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 8-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 16-bit signed
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 16-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 16-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 16-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 32-bit signed
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 32-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 32-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 32-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 64-bit signed
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 64-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 64-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 64-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A single-precision floating-point number equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A double-precision floating-point number equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 
 <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 
 <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> instance 
 equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 
 <see cref="T:System.String" /> using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.String" /> instance 
 equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an
 <see cref="T:System.Object" /> of the
 specified <see cref="T:System.Type" /> that has an equivalent value,
 using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="F:System.String.Empty">
      <summary>
        <para> Represents the empty string. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>
        <para> Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified 
<see cref="T:System.String" /> array, yielding
 a single concatenated string.
 </para>
      </summary>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />s. </param>
      <returns>
        <para> A <see cref="T:System.String" />
consisting of the elements of <paramref name="value" /> interspersed with the
<paramref name="separator" /> 
string.</para>
      </returns>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>
        <para>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified 
<see cref="T:System.String" /> array, yielding a single
 concatenated string. Parameters specify the first array element and number of
 elements to use.</para>
      </summary>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />. </param>
      <param name="startIndex">The first array element in <paramref name="value" /> to use. </param>
      <param name="count">The number of elements of <paramref name="value" /> to use. </param>
      <returns>
        <para> A <see cref="T:System.String" />
consisting of the strings in <paramref name="value" /> joined by <paramref name="separator" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.String.Empty" />
if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or
<paramref name="separator" /> and all the elements of <paramref name="value" /> are 
<see cref="F:System.String.Empty" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>
        <para>Determines whether this instance of <see cref="T:System.String" /> and a specified object, which must be a 
<see cref="T:System.String" />, have the
 same value.</para>
      </summary>
      <param name="obj">An <see cref="T:System.Object" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" />
and its value is
the same as this instance; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>
        <para>Determines whether this instance and a specified 
 <see cref="T:System.String" /> have the same value.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value
 of <paramref name="value" /> is the same as this instance; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>
        <para> Determines whether two specified <see cref="T:System.String" /> objects have the
 same value.</para>
      </summary>
      <param name="a">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <param name="b">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>
        <para> Determines whether two specified <see cref="T:System.String" /> objects have the
 same value.</para>
      </summary>
      <param name="a">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <param name="b">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>
        <para> Determines whether two specified <see cref="T:System.String" /> objects have
   different values.</para>
      </summary>
      <param name="a">A <see langword="String" /> or <see langword="null" />.</param>
      <param name="b">A <see langword="String" /> or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Copies a specified number of characters from a specified
 position in this instance
 to a specified position in an array of Unicode characters.</para>
      </summary>
      <param name="sourceIndex">A character position in this instance.</param>
      <param name="destination">An array of Unicode characters.</param>
      <param name="destinationIndex">An array element in <paramref name="destination" />.</param>
      <param name="count">The number of characters in this instance to copy to <paramref name="destination" />.</param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>
        <para>Copies the characters in this instance to a Unicode character array. </para>
      </summary>
      <returns>
        <para> A Unicode character array whose elements are the 
 individual characters of this instance. If this instance is an empty string, the returned array is empty
 and has a zero length.</para>
      </returns>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>
        <para>Copies the characters in a specified substring in this instance to a Unicode character array. </para>
      </summary>
      <param name="startIndex">The starting position of a substring in this instance. </param>
      <param name="length">The length of the substring in this instance. </param>
      <returns>
        <para>A Unicode character array whose elements are
 the <paramref name="length" /> number of characters in this instance starting from
 character position <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>
        <para>Identifies the substrings in this instance that are 
 delimited by one or more characters specified in an array, then places the
 substrings into a <see cref="T:System.String" /> array.</para>
      </summary>
      <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or <see langword="null" />.</param>
      <returns>
        <para>An array consisting of a single element containing this instance, if
 this instance contains none of the characters in <paramref name="separator" />.</para>
        <para>-or-</para>
        <para>An array of substrings if this instance is delimited by one or more
 of the characters in <paramref name="separator" />. </para>
        <para>-or-</para>
        <para>An array of the substrings in this instance delimited by white space
 characters if those characters occur and <paramref name="separator" /> is
 <see langword="null" />
 or contains no delimiter characters.</para>
        <para>
          <see cref="F:System.String.Empty" /> is returned for any substring where two delimiters are
adjacent, or a delimiter is found at the beginning or end of this
instance.</para>
        <para>Delimiter characters are not included in the substrings.</para>
      </returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>
        <para>Identifies the substrings in this instance that are
      delimited by one or more characters specified in an array, then places the
      substrings into a <see cref="T:System.String" /> array. A parameter specifies the maximum number of array elements to return. </para>
      </summary>
      <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of array elements to return.</param>
      <returns>
        <para>An array consisting of a single element containing this instance, if this instance contains none of the characters in <paramref name="separator" />.</para>
        <para>-or-</para>
        <para>An array of substrings if this instance is delimited by one or more of the characters in <paramref name="separator" />. </para>
        <para>-or-</para>
        <para>An array of the substrings in this instance delimited by white space characters if those characters occur and <paramref name="separator" /> is <see langword="null" /> or contains no delimiter characters.</para>
        <para>
          <see cref="F:System.String.Empty" /> is returned for any substring where two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance.</para>
        <para>Delimiter characters are not included in the substrings.</para>
      </returns>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>
        <para> Retrieves a substring from this instance. The substring starts at a specified character position.</para>
      </summary>
      <param name="startIndex">The starting character position of a substring in this instance.</param>
      <returns>
        <para>A <see cref="T:System.String" />
equivalent to the substring that begins at <paramref name="startIndex" />
in this instance.</para>
        <para> -or-</para>
        <para>
          <see cref="F:System.String.Empty" /> if
<paramref name="startIndex " />is 
equal to the length of this instance.</para>
      </returns>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified
 length.</para>
      </summary>
      <param name="startIndex">The index of the start of the substring.</param>
      <param name="length">The number of characters in the substring.</param>
      <returns>
        <para>A <see cref="T:System.String" /> equivalent
 to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.String.Empty" /> if
<paramref name="startIndex " />is equal to the length of this instance and 
<paramref name="length" /> is zero.</para>
      </returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>
        <para> Removes all occurrences of a set of characters specified in a Unicode character array from the beginning
 and end of this instance.</para>
      </summary>
      <param name="trimChars">An array of Unicode characters to be removed or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> that
 remains after all occurrences of the characters in
<paramref name="trimChars" /> are 
 removed. If <paramref name="trimChars" /> is <see langword="null" />, white space characters
 are removed instead.</para>
      </returns>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>
        <para> Removes all occurrences of a set of characters specified in a Unicode character array from
 the beginning of this instance.</para>
      </summary>
      <param name="trimChars">An array of Unicode characters to be removed or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> that
 remains after all occurrences of characters in
<paramref name="trimChars" /> are 
 removed. If <paramref name="trimChars" /> is <see langword="null" />, white space characters
 are removed instead.</para>
      </returns>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>
        <para> Removes all occurrences of a set of characters specified in a Unicode character array from
 the end of this instance.</para>
      </summary>
      <param name="trimChars">An array of Unicode characters to be removed or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> that
 remains after all occurrences of the characters in
<paramref name="trimChars" /> are 
 removed. If <paramref name="trimChars" /> is <see langword="null" />, white space characters
 are removed instead.</para>
      </returns>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</para>
      </summary>
      <param name="value">A pointer to a null terminated array of Unicode characters.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters,
 a starting character position within that array,
 and a length.</para>
      </summary>
      <param name="value">A pointer to an array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</para>
      </summary>
      <param name="value">A pointer to a null terminated array of 8-bit signed integers.</param>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers,
 a starting character position within that array,
 and a length.</para>
      </summary>
      <param name="value">A pointer to an array of 8-bit signed integers.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the 
 value indicated by a specified pointer to an array of 8-bit signed integers, a
 starting character position within that array, a length, and an <see cref="T:System.Text.Encoding" />
 object.</para>
      </summary>
      <param name="value">A pointer to an array of 8-bit signed integers.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <param name=" enc">An <see cref="T:System.Text.Encoding" /> object that specifies how the array referenced by <paramref name="value" /> is encoded.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters,
 a starting character position within that array,
 and a length.</para>
      </summary>
      <param name="value">An array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" />
class to the value indicated by an array of Unicode characters.</para>
      </summary>
      <param name="value">An array of Unicode characters.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character
 repeated a
 specified number of times.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <param name=" count">The number of times <paramref name="c" /> occurs. </param>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>
        <para>Compares two specified <see cref="T:System.String" /> objects.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> equals <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than
<paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>
        <para> Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their
 case.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.)</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> equals <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
        <para> Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and honoring culture-specific information about their formatting.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.)</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> equals <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Compares substrings of two specified <see cref="T:System.String" />
objects.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring
 in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description> The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in
 <paramref name="strA" /> is greater than the substring in
 <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name=" ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.) </param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
        <para>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their
 case, and honoring culture-specific information about
 their formatting.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The position of the substring within the <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.) </param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para>An integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance with a specified
 <see cref="T:System.Object" />.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that evaluates to a <see langword="String" />.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This
 instance is less than <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This
 instance is equal to <paramref name="value" />.</description>
          </item>
          <item>
            <term>
              <para> Greater than zero</para>
            </term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
 <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>
        <para>Compares this instance with a specified <see cref="T:System.String" /> object.</para>
      </summary>
      <param name="strB">A <see cref="T:System.String" />.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to <paramref name="value" />.</description>
          </item>
          <item>
            <term>
              <para>Greater than zero</para>
            </term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>
        <para>Compares two specified <see cref="T:System.String" />
objects, without considering the local
national language or culture.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <returns>
        <para>An integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term>Permission</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than
 <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> and <paramref name="strB" /> are equal.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than
<paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para> Compares substrings of two specified <see cref="T:System.String" /> objects, without considering the local
 national language or culture. Parameters
 specify
 the length and starting positions of the substrings.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The starting index of the substring in <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The starting index of the substring in <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>
        <para>Determines whether the end of this instance matches the 
 specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the end of
 this instance matches <paramref name="value" />; otherwise, <see langword="false " />
 .</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>
        <para>Reports the index of the first occurrence of the
      specified Unicode character in this instance.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <returns>
        <para>A positive 32-bit signed integer, the index, that is
      the character position in this instance where <paramref name="value" /> was found;
      otherwise, -1 if <paramref name="value" /> was not found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the specified Unicode
      character in this instance. The search starts at a specified character position.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <para>A positive 32-bit signed integer, the index, indicating the character position in this instance where <paramref name="value" /> was found; otherwise, -1 if <paramref name="value" /> was not found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the specified character in this instance. The search
      starts at a specified character position and examines a specified
      number of character positions.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para>A positive 32-bit signed integer, the index, that is the character position in this instance where <paramref name="value" /> was found; otherwise, -1 if <paramref name="value" /> was not found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>
        <para>Reports the index of the first occurrence in this
      instance of any character in a specified array of Unicode
      characters.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <returns>
        <para> The positive integer index of the first occurrence in
      this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if
      no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence in this instance of
      any character in a specified array of
      Unicode characters. The search starts at a specified character
      position.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <para>The positive integer index of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence in this instance of any character in a specified
      array of Unicode characters. The search starts
      at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para>The positive integer index of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>
        <para>Reports the index of the first occurrence of the 
 specified <see cref="T:System.String" /> in this instance.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A
 positive
 index position.</term>
            <description>
              <paramref name="value" />
 was found.</description>
          </item>
          <item>
            <term> 
 0</term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" />
was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the 
 specified <see cref="T:System.String" /> in this instance. The
 search starts at a specified character position.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the 
 specified <see cref="T:System.String" /> in this instance. The search starts
 at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>
        <para>Reports the index position of the last occurrence of a specified Unicode
 character within this instance.</para>
      </summary>
      <param name="value">A Unicode character to seek. </param>
      <returns>
        <para> The index position of <paramref name="value" />
if that character
is found, or -1 if it is not.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The starting position of a substring within this instance.</param>
      <returns>
        <para> The index position of <paramref name="value" /> if that character is found, or -1 if it is not.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of the specified Unicode character in a
 substring within this instance. The search starts at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The starting position of a substring within this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para> The index position of <paramref name="value" /> if that character is found, or -1 if it is not.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>
        <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <returns>
        <para>The positive integer index of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>
        <para> Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <returns>
        <para>The positive integer index of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para>The positive integer index of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>
        <para>Reports the index position of the last occurrence of a 
 specified <see cref="T:System.String" /> within this instance.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> to seek.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of a 
 specified <see cref="T:System.String" /> within this
 instance. The search starts at a specified character position.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of a 
 specified <see cref="T:System.String" /> within this instance. The
 search starts at a specified character position and examines a specified number
 of character positions.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>
        <para>Right-aligns the characters in this instance, padding with spaces on the left
 for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <returns>
        <para> A new <see cref="T:System.String" /> that
 is equivalent to this
 instance, but right-aligned and padded on the left with as many spaces as
 needed to create a length of <paramref name="totalWidth" />.</para>
        <para>-or-</para>
If <paramref name="totalWidth " />is less than
the length of this instance, a new <see langword="String" /> that is identical to
this instance.
</returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>
        <para>Right-aligns the characters in this instance, padding on the left with a specified
 Unicode character for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> that
 is
 equivalent to
 this instance, but right-aligned and padded on the left with as many
<paramref name="paddingChar" /> characters as needed to create a length of 
<paramref name="totalWidth" />.</para>
        <para>-or-</para>
If <paramref name="totalWidth " />is
less than the length of this instance, a new <see cref="T:System.String" /> that is identical to
this instance.
</returns>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>
        <para>Left-aligns the characters in this string, padding with spaces on the right,
 for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> that
 is equivalent to this
 instance, but left-aligned and padded on the right with as many spaces as
 needed to create a length of <paramref name="totalWidth" />.</para>
        <para>-or-</para>
        <para>If <paramref name="totalWidth " />is less than 
the length of this instance, a new <see cref="T:System.String" /> that is identical
to this instance.</para>
      </returns>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>
        <para>Left-aligns the characters in this string, padding on the right with a specified
 Unicode character, for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> that
 is equivalent to this
 instance, but left-aligned and padded on the right with as many
<paramref name="paddingChar" /> characters as needed to create a length of 
<paramref name="totalWidth" />.</para>
        <para>-or-</para>
        <para>If <paramref name="totalWidth " />is less than 
the length of this instance, a new <see cref="T:System.String" /> that is identical
to this instance.</para>
      </returns>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>
        <para> Determines whether the beginning of this instance
      matches the specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> matches the
   beginning of this string or is <see cref="F:System.String.Empty" />; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.String.ToLower">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" /> in lowercase.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> in lowercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" /> in lowercase, taking into account specified culture-specific
 information.</para>
      </summary>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.String" /> in
 lowercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" />
in uppercase, using default properties.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" />
in uppercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" /> in uppercase, taking into account
 culture-specific information.</para>
      </summary>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para>A <see cref="T:System.String" />
in uppercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>
        <para>Returns this instance of <see cref="T:System.String" />; no
 actual conversion is performed.</para>
      </summary>
      <returns>
        <para>This <see cref="T:System.String" />.</para>
      </returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>
        <para>Returns this instance of <see cref="T:System.String" />; no
 actual conversion is performed.</para>
      </summary>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>This <see cref="T:System.String" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Clone">
      <summary>
        <para>Returns a reference to this instance of <see cref="T:System.String" />.</para>
      </summary>
      <returns>
        <para>This instance of <see langword="String" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>
        <para> Removes all occurrences of white space characters from the beginning
 and end of this instance.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.String" />
equivalent to this
instance after white space
characters are removed.</para>
      </returns>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>
        <para> Inserts a specified instance of <see cref="T:System.String" /> at a specified
 index position in this instance.
 </para>
      </summary>
      <param name="startIndex">The index position of the insertion. </param>
      <param name="value">The <see cref="T:System.String" /> to insert. </param>
      <returns>
        <para> A new <see cref="T:System.String" /> equivalent to this instance
 but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>
        <para>Replaces all occurrences of a specified Unicode character in this instance
 with another specified Unicode character. </para>
      </summary>
      <param name="oldChar">A Unicode character to be replaced. </param>
      <param name="newChar">A Unicode character to replace all occurrences of <paramref name="oldChar" />. </param>
      <returns>
        <para> A <see cref="T:System.String" /> equivalent to this instance but
 with all instances of <paramref name="oldChar" /> replaced with <paramref name="newChar" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>
        <para>Replaces all occurrences of a specified 
 <see cref="T:System.String" /> in this instance, 
 with another specified <see cref="T:System.String" />. </para>
      </summary>
      <param name="oldValue">A <see cref="T:System.String" /> to be replaced. </param>
      <param name="newValue">A <see cref="T:System.String" /> to replace all occurrences of <paramref name="oldValue" />. </param>
      <returns>
        <para> A <see cref="T:System.String" /> equivalent to this instance but
 with all instances of <paramref name="oldValue" /> replaced with <paramref name="newValue" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>
        <para>Deletes a specified number of characters from this
 instance beginning at a specified position.</para>
      </summary>
      <param name="startIndex">The position in this instance to begin deleting characters.</param>
      <param name="count">The number of characters to delete.</param>
      <returns>
        <para> A new <see cref="T:System.String" /> that
 is equivalent to this instance less <paramref name="count" />
 number of characters.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>
        <para>Replaces the format specification in a specified
   <see cref="T:System.String" /> with the textual
      equivalent of the value of a specified <see cref="T:System.Object" /> instance.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="arg0">An <see cref="T:System.Object" /> to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the first format specification has been replaced by the <see cref="T:System.String" /> equivalent of
<paramref name="arg0" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>
        <para>Replaces the format specification in a specified
   <see cref="T:System.String" /> with the textual
      equivalent of the value of two specified <see cref="T:System.Object" /> instances.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="arg0">The first <see cref="T:System.Object" /> to be formatted.</param>
      <param name="arg1">The second <see cref="T:System.Object" /> to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the first and second format specifications have been replaced by the
<see cref="T:System.String" /> equivalent of the <paramref name="arg0" /> and <paramref name="arg1" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Replaces the format specification in a specified
      <see cref="T:System.String" /> with the textual
      equivalent of the value of three specified <see cref="T:System.Object" /> instances.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="arg0">The first <see cref="T:System.Object" /> to be formatted.</param>
      <param name="arg1">The second <see cref="T:System.Object" /> to be formatted.</param>
      <param name="arg2">The third <see cref="T:System.Object" /> to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the first, second, and third format specifications have been replaced by the
<see cref="T:System.String" /> equivalent of the <paramref name="arg0," /><paramref name="arg1, " />and<paramref name=" arg2" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>
        <para>Replaces the format specification in a specified
      <see cref="T:System.String" /> with the textual
      equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the format specifications have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding
   instances of <see cref="T:System.Object" /> in <paramref name="args" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>
        <para>Replaces the format specification in a specified <see cref="T:System.String" /> with the textual
   equivalent of the value of a corresponding <see cref="T:System.Object" />
   instance in a specified array. A specified parameter supplies culture-specific
   formatting information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the format specifications have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding
   instances of <see cref="T:System.Object" /> in <paramref name="args" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>
        <para>Creates a new instance of <see cref="T:System.String" /> with the same value as
   a specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="str">The <see cref="T:System.String" /> to copy.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> with the same value as
<paramref name="str" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>
        <para>Creates the <see cref="T:System.String" />
representation of a specified object.</para>
      </summary>
      <param name="arg0">An <see cref="T:System.Object" /> or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation
 of the value of <paramref name="arg0" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>
        <para> Concatenates the <see cref="T:System.String" /> representations of two specified objects.</para>
      </summary>
      <param name="arg0">The first <see cref="T:System.Object" />.</param>
      <param name="arg1">The second <see cref="T:System.Object" />.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>
        <para>Concatenates the <see cref="T:System.String" /> representations of three specified objects.</para>
      </summary>
      <param name="arg0">The first <see cref="T:System.Object" />.</param>
      <param name="arg1">The second <see cref="T:System.Object" />.</param>
      <param name="arg2">The third <see cref="T:System.Object" />.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of
<paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object,)">
      <summary>
        <para>Concatenates the <see cref="T:System.String" /> representations of three specified objects
 and a variable-length parameter list.</para>
      </summary>
      <param name="arg0">The first <see cref="T:System.Object" />.</param>
      <param name=" arg1">The second <see cref="T:System.Object" />.</param>
      <param name=" arg2">The third <see cref="T:System.Object" />.</param>
      <param name=" arg3">The fourth <see cref="T:System.Object" />.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, <paramref name="arg2" />,
<paramref name="arg3" />, and zero or 
 more objects specified in a variable-length parameter list.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>
        <para>Concatenates the <see cref="T:System.String" /> representations of the elements in a specified <see cref="T:System.Object" /> array.</para>
      </summary>
      <param name="args">An <see cref="T:System.Object" /> array.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of the
 elements in <paramref name="args" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>
        <para>Concatenates two specified instances of <see cref="T:System.String" />.</para>
      </summary>
      <param name="str0">The first <see cref="T:System.String" />.</param>
      <param name="str1">The second <see cref="T:System.String" />.</param>
      <returns>
        <para>The concatenation of <paramref name="str0" /> and
<paramref name="str1" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>
        <para>Concatenates three specified instances of 
 <see cref="T:System.String" />.</para>
      </summary>
      <param name="str0">The first <see cref="T:System.String" />.</param>
      <param name="str1">The second <see cref="T:System.String" />.</param>
      <param name="str2">The third <see cref="T:System.String" />.</param>
      <returns>
        <para>The concatenation of <paramref name="str0" />, <paramref name="str1" />, and
<paramref name="str2" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Concatenates four specified instances of <see cref="T:System.String" />.</para>
      </summary>
      <param name="str0">The first <see cref="T:System.String" />.</param>
      <param name="str1">The second <see cref="T:System.String" />.</param>
      <param name="str2">The third <see cref="T:System.String" />.</param>
      <param name=" str3">The fourth <see cref="T:System.String" />.</param>
      <returns>
        <para>The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>
        <para>Concatenates the elements of a specified 
 <see cref="T:System.String" /> array.</para>
      </summary>
      <param name="values">An array of <see cref="T:System.String" /> instances.</param>
      <returns>
        <para> The concatenated elements of <paramref name="values" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>
        <para> Retrieves the system's reference to the specified 
 <see cref="T:System.String" />.
 </para>
      </summary>
      <param name="str">A <see cref="T:System.String" />, or <see langword="null" />. </param>
      <returns>
        <para> The <see cref="T:System.String" /> reference to <paramref name="str" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>
        <para> Retrieves a reference to a specified <see cref="T:System.String" />.
 </para>
      </summary>
      <param name="str">A <see cref="T:System.String" />. </param>
      <returns>
        <para> A <see cref="T:System.String" /> reference to <paramref name="str" /> if it is in the common language runtime "intern pool"; otherwise <see langword="null" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.String" qualify="true" />.</para>
      </returns>
    </member>
    <member name="M:System.String.GetEnumerator">
      <summary>
        <para>Retrieves an object that can iterate through the
 individual characters in this instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.CharEnumerator" /> object.</para>
      </returns>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>
        <para> Gets the character at a specified character position in this
 instance.</para>
      </summary>
      <param name="index">A character position in this instance.</param>
    </member>
    <member name="P:System.String.Length">
      <summary>
        <para> Gets the number of characters in this instance.</para>
      </summary>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>
        <para> Represents a mutable
      string
      of characters. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class using the specified capacity.</para>
      </summary>
      <param name="capacity">The suggested starting size of this instance. </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class using the specified string.</para>
      </summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value " />is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" /> ). </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class using the specified string and capacity.</para>
      </summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value " />is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" /> ). </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" /> . </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.Text.StringBuilder" />
   class from the specified substring and capacity.
   </para>
      </summary>
      <param name="value">The string that contains the substring used to initialize the value of the instance. If value is <see langword="null" />, the new StringBuilder will contain the empty string (that is, it contains <see cref="F:System.String.Empty" /> ). </param>
      <param name="startIndex">The position where the substring begins. </param>
      <param name="length">The number of characters in the substring. </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" /> . The maximum number of characters the current string can contain is set by <paramref name="capacity" />. </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.Text.StringBuilder" />
   class that starts with a specified capacity and can grow to a specified
   maximum.
   </para>
      </summary>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" /> . </param>
      <param name="maxCapacity">The maximum number of characters the current string can contain. </param>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>
        <para> Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder" />
is at least the specified value.</para>
      </summary>
      <param name="capacity">The minimum capacity to ensure. </param>
      <returns>
        <para> The current capacity of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>
        <para> Converts this instance to a <see cref="T:System.String" />.
   </para>
      </summary>
      <returns>
        <para> A string whose value
      is the same as this instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>
        <para> Converts a substring of the current
   <see cref="T:System.Text.StringBuilder" /> to a
   <see cref="T:System.String" />.
      </para>
      </summary>
      <param name="startIndex">The starting position of the substring. </param>
      <param name="length">The length of the substring. </param>
      <returns>
        <para> A string whose value is the same as the specified 
      substring of the value of this instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>
        <para> Appends a specified number of copies
      of the string representation of a Unicode character to the
      end of this instance.
      </para>
      </summary>
      <param name="value">The character to append. </param>
      <param name="repeatCount">The number of times to append <paramref name="value" />.</param>
      <returns>
        <para> A reference to this instance after the append operation has
      occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Appends the string representation of a specified subarray of Unicode characters to the end of
      this instance.
      </para>
      </summary>
      <param name="value">The array of characters to append. </param>
      <param name="startIndex">The starting position in <paramref name="value " /> . </param>
      <param name="charCount">The number of characters append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>
        <para>Appends a copy of the specified string to the end of this instance.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>
        <para> Appends a copy of a specified substring
      to the end of this instance.
      </para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to append. </param>
      <param name="startIndex">The starting position in <paramref name="value " />. </param>
      <param name="count">The number of characters to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>
        <para> Inserts one or more copies of a specified string into this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The string to insert. </param>
      <param name="count">The number of times to insert <paramref name="value" />. </param>
      <returns>
        <para> A reference to this instance after insertion has
      occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>
        <para> Removes the specified range of characters from this
      instance.
      </para>
      </summary>
      <param name="startIndex">The position where removal begins. </param>
      <param name="length">The number of characters to remove. </param>
      <returns>
        <para> A reference to this instance after the excise operation
      has occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>
        <para> Appends the string representation of a specified Boolean value to the end of
      this instance.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>
        <para> Appends the string representation of a specified 8-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>
        <para> Appends the string representation of a specified 8-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>
        <para> Appends the string representation of a specified Unicode character to the end of this instance.
      </para>
      </summary>
      <param name="value">The Unicode character to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>
        <para> Appends the string representation of a specified 16-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>
        <para> Appends the string representation of a specified 32-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>
        <para> Appends the string representation of a specified 64-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>
        <para> Appends the string representation of a specified single-precision floating-point number to the
      end of this instance.
      </para>
      </summary>
      <param name="value">The number to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>
        <para> Appends the string representation of a specified double-precision floating-point number to the
      end of this instance.
      </para>
      </summary>
      <param name="value">The number to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>
        <para> Appends the string representation of a specified decimal number to the end of this instance.
      </para>
      </summary>
      <param name="value">The number to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>
        <para> Appends the string representation of a specified 16-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>
        <para> Appends the string representation of a specified 32-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>
        <para> Appends the string representation of a specified 64-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>
        <para> Appends the string representation of a specified object to the end of this instance.
      </para>
      </summary>
      <param name="value">The object to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>
        <para> Appends the string representation of the Unicode characters in a specified array to the end of
      this instance.
      </para>
      </summary>
      <param name="value">A character array to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>
        <para> Inserts a string into this instance at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The string to insert. </param>
      <returns>
        <para> A reference to this instance after the insert operation has occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>
        <para> Inserts the string representation of a Boolean value into
      this instance at the specified character
      position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>
        <para> Inserts the string representation of a specified 8-bit
      signed integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>
        <para> Inserts the string representation of a specified 8-bit
      unsigned integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>
        <para> Inserts the string representation of a specified 16-bit
      signed integer into this instance at
      the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>
        <para> Inserts the string representation of a specified Unicode
      character into this instance at the specified character
      position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>
        <para> Inserts the string representation of a specified array of
      Unicode characters into this instance at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The character array to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Inserts the string representation of a specified subarray
      of Unicode characters into this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">A character array. </param>
      <param name="startIndex">The starting index within <paramref name="value" />. </param>
      <param name="charCount">The number of characters to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>
        <para> Inserts the string representation of a specified 32-bit
      signed integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>
        <para> Inserts the string representation of a 64-bit signed
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para> A reference to this instance after the insert operation has occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>
        <para> Inserts the string representation of a single-precision floating point number into
      this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>
        <para> Inserts the string representation of a double-precision floating-point number into
      this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>
        <para> Inserts the string representation of a decimal number
      into this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>
        <para> Inserts the string representation of a 16-bit unsigned
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>
        <para> Inserts the string representation of a 32-bit unsigned
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>
        <para> Inserts the string representation of a 64-bit unsigned
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>
        <para> Inserts the string representation of an object into this
      instance at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The object to insert or <see langword="null" />. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>
        <para>Appends a formatted string, which contains zero or more format
      specifications, to this instance. Each format specification is replaced by the
      string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="arg0">An object to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format" /> appended. Any format specification in
<paramref name="format" /> is
   replaced by the string representation of the
   corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="args">An array of objects to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="args">An array of objects to format.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> used to change the way in which formatting codes are interpreted by a type.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>
        <para>Replaces all occurrences of a specified substring in this instance with
      another specified string. </para>
      </summary>
      <param name="oldValue">The string to replace. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />. </param>
      <returns>
        <para> A
      reference to this instance with all
      instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>
        <para> Replaces all occurrences of a specified string in a
      substring of this instance with another specified string. </para>
      </summary>
      <param name="oldValue">The string to replace or <see langword="null" />. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" /> or <see langword="null" />. </param>
      <param name="startIndex">The position where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <returns>
        <para> A
      reference to this instance with all
      instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> +
   <paramref name="count" /> - 1.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" sb">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if this instance and <paramref name="sb" />
have the same value; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>
        <para>Replaces all occurrences of a specified character in
      this instance with
      another specified character. </para>
      </summary>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
      <returns>
        <para> A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar." /></para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Replaces all occurrences of a specified character in a
      substring of this instance with another specified character. </para>
      </summary>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
      <param name="startIndex">The position where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <returns>
        <para> A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" />
in the range <paramref name="startIndex" /> + <paramref name="count" /> -1.</para>
      </returns>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>
        <para> Gets or sets the maximum number of characters that can be 
      contained in the memory allocated by the current instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>
        <para> Gets the maximum capacity of this instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>
        <para> Gets or sets the length of this instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>
        <para> Gets or sets the character at the specified character position in this instance.
      </para>
      </summary>
      <param name="index">The position of the character. </param>
    </member>
    <member name="T:System.Exception">
      <summary>
        <para> Represents errors that occur during application execution.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.ISerializable">
      <summary>
        <para>Allows an object to control its own serialization and deserialization.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with the data needed to serialize the target object.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" />
class with a specified error message.</para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" /> class with
   serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>
        <para> When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</para>
      </summary>
      <returns>
        <para>The first exception thrown in a chain of exceptions. If
      the <see cref="P:System.Exception.InnerException" /> property of the
      current exception is a null reference (<see langword="Nothing" /> in Visual
      Basic), this property returns the current exception.</para>
      </returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>
        <para> Creates and returns a string
      representation of the current
      exception.</para>
      </summary>
      <returns>
        <para>A string
      representation of the current exception.</para>
      </returns>
    </member>
    <member name="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with information about the exception.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="P:System.Exception.Message">
      <summary>
        <para> Gets a message that describes the current exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>
        <para> Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.TargetSite">
      <summary>
        <para> Gets the method that throws
      the current exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>
        <para> Gets a string representation of the frames on the call stack at the time the
      current exception was thrown.</para>
      </summary>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>
        <para>Gets or sets a link to the help file associated with this
      exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.Source">
      <summary>
        <para> Gets or sets the name
      of the application or the object that causes the error.</para>
      </summary>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>
        <para>Gets or sets HRESULT, a coded numerical value
      that is assigned to a specific exception.</para>
      </summary>
    </member>
    <member name="T:System.DateTime">
      <summary>
        <para>Represents an instant in time, typically expressed as a date and time of day.</para>
      </summary>
    </member>
    <member name="T:System.ValueType">
      <summary>
        <para>Provides the base class for value types.</para>
      </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>
        <para>Indicates whether this instance and a specified object are equal.</para>
      </summary>
      <param name=" obj">Another object to compare to.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and
 represent the same value; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer that is the hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>
        <para>Returns the fully qualified type name of this instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" />
containing a fully qualified type name.</para>
      </returns>
    </member>
    <member name="T:System.IFormattable">
      <summary>
        <para>Provides functionality to format the value of an object into a string representation.</para>
      </summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Formats the value of the current instance using the specified format.</para>
      </summary>
      <param name="format">
        <para>The <see cref="T:System.String" /> specifying the format to use.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</para>
      </param>
      <param name="formatProvider">
        <para>The <see cref="T:System.IFormatProvider" /> to use to format the value.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</para>
      </returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>
        <para>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is
   read-only.</para>
      </summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</para>
      </summary>
      <param name="ticks">A date and time expressed in 100-nanosecond units.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the
   specified <see cref="T:System.Globalization.Calendar" />
   .</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the
   specified year, month, day, hour, minute, and second.</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12)</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour,
   minute, and second for the specified <see cref="T:System.Globalization.Calendar" />
   .</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the
   specified year, month, day, hour, minute, second, and millisecond.</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour,
   minute, second, and millisecond for the specified <see cref="T:System.Globalization.Calendar" />
   .</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds.</param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>
        <para> Adds the value of the specified <see cref="T:System.TimeSpan" />
to the value of this instance.</para>
      </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> that contains the interval to add.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is
   the sum of the date and time represented by this instance and the time
   interval represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>
        <para>Adds the specified number of days to the value of this instance.</para>
      </summary>
      <param name="value">A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of days represented by
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>
        <para>Adds the specified number of hours to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of hours represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>
        <para>Adds the specified number of milliseconds to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of milliseconds represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>
        <para>Adds the specified number of minutes to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of minutes represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>
        <para>Adds the specified number of months to the value of this instance.</para>
      </summary>
      <param name=" months">A number of months. The <paramref name="months" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the
   sum of the date and time represented by this instance and <paramref name="months" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>
        <para>Adds the specified number of seconds to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of seconds represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>
        <para> Adds the specified number of ticks to the value of this
      instance.</para>
      </summary>
      <param name="value">A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the time represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>
        <para>Adds the specified number of years to the value of this instance.</para>
      </summary>
      <param name=" value">A number of years. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of years represented by
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>
        <para>Compares two instances of <see cref="T:System.DateTime" /> and returns an
   indication of their relative values.</para>
      </summary>
      <param name="t1">The first <see cref="T:System.DateTime" />.</param>
      <param name="t2">The second <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>A signed number indicating the relative values of
   <paramref name="t1" /> and <paramref name="t2" />.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than
            zero</term>
            <description>
              <paramref name="t1" /> is less than <paramref name="t2" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="t1" /> equals <paramref name="t2" />.</description>
          </item>
          <item>
            <term> Greater than
      zero</term>
            <description>
              <paramref name="t1" /> is greater than
<paramref name="t2" />
.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
         <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
         <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>This instance is greater than
         <paramref name="value" />, or <paramref name="value" /> is
         <see langword="null" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>
        <para> Returns the number of days in the specified month
      of the specified year.</para>
      </summary>
      <param name="year">The year.</param>
      <param name="month">The month (a number ranging from 1 to 12).</param>
      <returns>
        <para>The number of days in <paramref name="month" />
for the specified <paramref name="year" />.</para>
        <para>For example, if <paramref name="month" /> equals 2 for
February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a
leap year.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" value">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>
        <para>Returns a value indicating whether two instances of
   <see cref="T:System.DateTime" /> are equal.</para>
      </summary>
      <param name="t1">The first <see cref="T:System.DateTime" />.</param>
      <param name="t2">The second <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the two
<see cref="T:System.DateTime" /> values are
   equal; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> equivalent
   to the specified operating system file timestamp.</para>
      </summary>
      <param name="fileTime">A Windows file time.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> value representing the date
   and time of <paramref name="fileTime" />, adjusted to local time.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" />
equivalent to the specified OLE Automation Date.</para>
      </summary>
      <param name="d">An OLE Automation Date value.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> that represents
   the same date and time as <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed
       integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>
        <para>Returns an indication whether the specified year is a leap year.</para>
      </summary>
      <param name="year">A 4-digit year.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="year &#xD;&#xA; " /> is a leap year;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">A string containinga date and time to convert.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" />
equivalent to the date and time contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format
      information.</para>
      </summary>
      <param name="s">A string containinga date and time to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific format information about <paramref name="s" />.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting
      style.</para>
      </summary>
      <param name="s">A string containinga date and time to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name=" styles">The combination of one or more <see cref="T:System.Globalization.DateTimeStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="provider" /> and <paramref name="styles" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the
      specified format and culture-specific format information. The format of the
      string representation must match the specified format
      exactly.</para>
      </summary>
      <param name="s">A string containing a date and time to convert. </param>
      <param name="format">The expected format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific format information about <paramref name="s" />. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the
      specified format, culture-specific format information, and style. The format of
      the string representation must match the
      specified format exactly.</para>
      </summary>
      <param name="s">A string containing a date and time to convert. </param>
      <param name="format">The expected format of <paramref name="s " />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="style">
        <para>The combination of one or more <see cref="T:System.Globalization.DateTimeStyles" />constants that indicate the permitted format of <paramref name="s" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
        <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
   specified array of formats, culture-specific format information, and style. The
   format of the string representation must match at
   least one of the specified formats exactly.</para>
      </summary>
      <param name="s">A string containing one or more dates and times to convert. </param>
      <param name="formats">An array of expected formats of <paramref name="s " />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific format information about <paramref name="s" />. </param>
      <param name="style">
        <para>The combination of one or more <see cref="T:System.Globalization.DateTimeStyles" />constants that indicate the permitted format of <paramref name="s" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>
        <para> Subtracts the specified date
      and time from this instance.</para>
      </summary>
      <param name="value">A instance of <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> interval equal to
   the date and time represented by this instance minus the date and time
   represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>
        <para>Subtracts the specified duration from this instance.</para>
      </summary>
      <param name="value">An instance of <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equal to the date
   and time represented by this instance minus the time interval represented
   by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>
        <para> Converts the
      value of this instance to the equivalent OLE Automation date.</para>
      </summary>
      <returns>
        <para>A double-precision floating-point number that
      contains an OLE Automation date equivalent to
      the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>
        <para> Converts the value of this instance
      to the format of the local system file time.
      </para>
      </summary>
      <returns>
        <para> The value of this <see cref="T:System.DateTime" />
in the format
of the local system file time.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>
        <para> Converts the current coordinated universal time (UTC) to local time.
      </para>
      </summary>
      <returns>
        <para>The <see cref="T:System.DateTime" />
equivalent to the current UTC time,
adjusted to the local time zone and daylight saving time.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MaxValue" /> if the
current UTC time is too large to be represented as a <see cref="T:System.DateTime" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MinValue" /> if the
current UTC time is too small to be represented as a <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      long date string representation.</para>
      </summary>
      <returns>
        <para>A string
      containing
      the name of
      the day of the week, the name of the month, the numeric day of the
      month, and the year equivalent to the date value of this
      instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      long time string representation.</para>
      </summary>
      <returns>
        <para>A string containing the name of the day of the week, the
      name of the month, the numeric day of the hours, minutes, and seconds
      equivalent to the time value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 short date string representation.</para>
      </summary>
      <returns>
        <para>A string 
 containing the numeric month, the numeric day of the
 month, and the year equivalent to the date value of this
 instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>
        <para>Converts the value of this instance to its equivalent 
 short time string representation.</para>
      </summary>
      <returns>
        <para>A string containing the name of the day of the week, the
 name of the month, the numeric day of the hours, minutes, and seconds
 equivalent to the time value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent string.</para>
      </summary>
      <returns>
        <para>A string
      representation of value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string representation using
      the specified format.</para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>A string
      representation of value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string representation using the specified
      culture-specific format information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>A string
      representation of value of this instance as specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string representation using the specified format and
      culture-specific format information.</para>
      </summary>
      <param name="format">A format string.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>A string
      representation of value of this instance as specified by <paramref name="format" /> and
   <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>
        <para> Converts the current local time to coordinated universal time (UTC).
      </para>
      </summary>
      <returns>
        <para>The UTC <see cref="T:System.DateTime" /> equivalent to the current local
   time.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MaxValue" /> if the
current local time is too large to be represented as a <see cref="T:System.DateTime" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MinValue" /> if the
current local time is too small to be represented as a <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>
        <para> Adds a specified time interval to a specified date and
      time, yielding a new date and time.
      </para>
      </summary>
      <param name="d">A <see cref="T:System.DateTime" />. </param>
      <param name="t">A <see cref="T:System.TimeSpan" />. </param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> that
   is the sum of the values of
<paramref name="d" /> and <paramref name="t" />.
   </para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>
        <para> Subtracts a specified time interval from a specified
      date and time, yielding a new date and time.
      </para>
      </summary>
      <param name="d">A <see cref="T:System.DateTime" />. </param>
      <param name="t">A <see cref="T:System.TimeSpan" />. </param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is the value of
<paramref name="d" /> minus the value of <paramref name="t" />
.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>
        <para> Subtracts a specified date and time from another
      specified date and
      time, yielding a time interval.</para>
      </summary>
      <param name="d1">A <see cref="T:System.DateTime" /> (the minuend). </param>
      <param name="d2">A <see cref="T:System.DateTime" /> (the subtrahend). </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" />
that is the time interval between <paramref name="d1" /> and <paramref name="d2" />; that is,
<paramref name="d1" /> minus <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether two specified instances of <see cref="T:System.DateTime" />
are equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.DateTime" />. </param>
      <param name="d2">A <see cref="T:System.DateTime" />. </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="d1" /> and <paramref name="d2" /> represent
   the same date and time; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether two specified instances of <see cref="T:System.DateTime" />
are not equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.DateTime" />. </param>
      <param name="d2">A <see cref="T:System.DateTime" />. </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="d1" /> and <paramref name="d2" /> do not represent
   the same date and time; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is less than another specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.DateTime" />.</param>
      <param name="t2">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is less than <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is less than or equal to another specified
<see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.DateTime" />.</param>
      <param name="t2">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is greater than another specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">
        <para>A <see cref="T:System.DateTime" />. </para>
      </param>
      <param name="t2">
        <para>A <see cref="T:System.DateTime" />.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is greater than or equal to another specified
<see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">
        <para>A <see cref="T:System.DateTime" />. </para>
      </param>
      <param name="t2">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the standard <see cref="T:System.DateTime" />
      format specifiers.</para>
      </summary>
      <returns>
        <para> A string array where each element is the representation of the
      value of this instance formatted with one of the standard <see cref="T:System.DateTime" />
      formatting specifiers.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the standard <see cref="T:System.DateTime" /> format specifiers and the specified culture-specific formatting information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para> A string array where each element is the representation of the
      value of this instance formatted with one of the standard <see cref="T:System.DateTime" />
      formatting specifiers.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the specified standard <see cref="T:System.DateTime" />
      format specifier.</para>
      </summary>
      <param name="format">A Unicode character containing a format specifier.</param>
      <returns>
        <para> A string array
      where each element is the representation of the value of this instance formatted
      with the <paramref name="format" />
      standard <see cref="T:System.DateTime" />
      formatting specifier.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the specified standard <see cref="T:System.DateTime" />
      
      format specifier and culture-specific formatting information.</para>
      </summary>
      <param name=" format">A Unicode character containing a format specifier.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para> A string array where each element is the representation of the
      value of this instance formatted with one of the standard <see cref="T:System.DateTime" />
      formatting specifiers.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.DateTime" qualify="true" />.</para>
      </returns>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>
        <para>Gets the date component of this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>
        <para>Gets the day of the month represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>
        <para>Gets the day of the week represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>
        <para>Gets the day of the year represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>
        <para> Gets the hour component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>
        <para>Gets the milliseconds component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>
        <para>Gets the minute component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>
        <para>Gets the month component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>
        <para>Gets a <see cref="T:System.DateTime" />
that is the current local date and time on this computer.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>
        <para>Gets a <see cref="T:System.DateTime" />
that is the
current local date and time
on this computer
expressed as the coordinated
universal time (UTC).</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>
        <para>Gets the seconds component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>
        <para>Gets the number of ticks that represent the date and time of this
      instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>
        <para>Gets
       the time of day for this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>
        <para>Gets
      the current date.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>
        <para>Gets the year component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="T:System.SystemException">
      <summary>
        <para>Defines the base class for predefined exceptions in
      the <see cref="N:System" /> namespace.</para>
      </summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.SystemException" /> class.
</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message.</para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SystemException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SystemException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>
        <para>The exception that is thrown
      when there is not enough memory to continue the execution of a program.</para>
      </summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.OutOfMemoryException" /> class.
</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.OutOfMemoryException" /> class with
      a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>
        <para> The exception that is thrown when the execution stack overflows by having too many pending method calls. This class cannot
      be inherited.</para>
      </summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class, setting 
   the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied
   message that describes the error, such as "The requested operation caused a
   stack overflow." This message takes into account the current system culture.</para>
      </summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.StackOverflowException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>
        <para>The exception that is thrown when there is an internal error in the execution engine of the
      common language runtime. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ExecutionEngineException" /> 
   class.</para>
      </summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ExecutionEngineException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ExecutionEngineException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Delegate">
      <summary>
        <para>Represents a delegate, which is a data structure that refers to a
      static method or to a class instance and an instance method of that class.</para>
      </summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>
        <para>Initializes a delegate that invokes the specified instance method on the specified class instance.</para>
      </summary>
      <param name="target">The class instance on which the delegate invokes <paramref name="method" />.</param>
      <param name="method">The name of the instance method that the delegate represents.</param>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a delegate that invokes the specified static method from the specified class.</para>
      </summary>
      <param name="target">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate represents.</param>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>
        <para>Dynamically invokes (late-bound) the method represented by the current delegate.</para>
      </summary>
      <param name="args">
        <para>An array of objects that are the arguments to pass to the method represented by the current delegate.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the method represented by the current delegate does not require arguments.</para>
      </param>
      <returns>
        <para>The object returned by the method represented by the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.DynamicInvokeImpl(System.Object[])">
      <summary>
        <para>Dynamically invokes (late-bound) the method represented by the current delegate.</para>
      </summary>
      <param name=" args">
        <para>An array of objects that are the arguments to pass to the method represented by the current delegate.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the method represented by the current delegate does not require arguments.</para>
      </param>
      <returns>
        <para>The object returned by the method represented by the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object and the current singlecast (noncombinable) delegate share the same target, method, and invocation list.</para>
      </summary>
      <param name="obj">The object to compare with the current singlecast (noncombinable) delegate.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same target, method, and invocation list;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>
        <para>Returns a hash code for the delegate.</para>
      </summary>
      <returns>
        <para>A hash code for the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>
        <para>Concatenates the invocation lists of two multicast (combinable) delegates.</para>
      </summary>
      <param name="a">The multicast (combinable) delegate whose invocation list comes first.</param>
      <param name="b">The multicast (combinable) delegate whose invocation list comes last.</param>
      <returns>
        <para>A new multicast (combinable) delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</para>
        <para>-or-</para>
        <para>
          <paramref name="a" />, if <paramref name="b" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="b" />, if <paramref name="a" /> is <see langword="null" />.</para>
        <para> -or-</para>
        <para>
          <see langword="null" />, if both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>
        <para>Concatenates the invocation lists of an array of multicast (combinable) delegates.</para>
      </summary>
      <param name="delegates">The array of multicast (combinable) delegates to combine.</param>
      <returns>
        <para>A new multicast (combinable) delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>
        <para>Returns the invocation list of the delegate.</para>
      </summary>
      <returns>
        <para>An array of singlecast (noncombinable) delegates representing the invocation list of the current delegate.
 If the current delegate is singlecast (noncombinable), the array contains only one element, which is a reference to the current delegate.
 If the current delegate is multicast (combinable), the array contains one or more elements.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetMethodImpl">
      <summary>
        <para> Gets the static method represented by the current delegate.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>
        <para>Removes the invocation list of a delegate from the invocation list of another delegate.</para>
      </summary>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />.</param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</param>
      <returns>
        <para>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the invocation list of <paramref name="value" />,
 if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" />, if <paramref name="value" /> is <see langword="null" />, or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, or if <paramref name="source" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>
        <para>Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</para>
      </summary>
      <param name="d">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</param>
      <returns>
        <para>A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />.</para>
        <para>-or-</para>
        <para>The current multicast (combinable) delegate, if <paramref name="d" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>
        <para>Removes the invocation list of a delegate from the invocation list of another delegate.</para>
      </summary>
      <param name="d">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</param>
      <returns>
        <para>A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />,
   if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</para>
        <para>-or-</para>
        <para>The current delegate, if <paramref name="value" /> is <see langword="null" />, or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Clone">
      <summary>
        <para>Creates a shallow copy of the delegate.</para>
      </summary>
      <returns>
        <para>A shallow copy of the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>
        <para>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <returns>
        <para>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>
        <para>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <returns>
        <para>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>
        <para>Creates a delegate of the specified type that represents the specified static method of the specified class.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">
        <para> The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</para>
      </param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <returns>
        <para>A delegate of the specified type that represents the specified static method of the specified class.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>
        <para>Creates a delegate of the specified type to represent the specified static method.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static method for which the delegate is to be created.</param>
      <returns>
        <para>A delegate of the specified type to represent the specified static method.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>
        <para>Determines whether the specified delegates are equal.</para>
      </summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>
        <para>Determines whether the specified delegates are not equal.</para>
      </summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the delegate.</para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing information required to serialize the delegate.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source and destination of the serialized stream associated with the delegate.</param>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>
        <para> Gets the static method represented by the delegate.</para>
      </summary>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>
        <para>Gets the class instance on which the current delegate invokes the instance method.</para>
      </summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>
        <para> Represents a multicast delegate;
      that is, a delegate that can have more than one element in
      its invocation list.
      </para>
      </summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</para>
      </summary>
      <param name="target">The object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the method for which a delegate is created.</param>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</para>
      </summary>
      <param name="target">The type of object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the static method for which a delegate is created.</param>
    </member>
    <member name="M:System.MulticastDelegate.DynamicInvokeImpl(System.Object[])">
      <summary>
        <para>Processes the full invocation list.</para>
      </summary>
      <param name="args"> The arguments to pass to the encapsulated method.</param>
      <returns>
        <para>An array of type <see cref="T:System.Object" /> that contains the return value of the
   encapsulated method.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data
   needed to serialize this instance.</para>
      </summary>
      <param name=" info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name=" context"> (Reserved) The location where serialized data is stored and retrieved. </param>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>
        <para>Determines whether this multicast delegate and the specified
      object are equal.</para>
      </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> and this instance
   have the same invocation lists; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>
        <para>Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a
   new delegate. </para>
      </summary>
      <param name="follow">The delegate to combine with this delegate.</param>
      <returns>
        <para>A <see cref="T:System.Delegate" /> that is the new 
   root of the <see cref="T:System.MulticastDelegate" />
   invocation list.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>
        <para>Removes an element from the invocation list of this 
   <see cref="T:System.MulticastDelegate" /> 
   that is equal to the specified delegate. </para>
      </summary>
      <param name="value">The delegate to search for in the invocation list.</param>
      <returns>
        <para>If <paramref name="value" /> is found in the invocation list for
   this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" />
   in its invocation list; otherwise, this instance
   with its original invocation list. </para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>
        <para>Returns the invocation list of this multicast delegate, in
      invocation order.</para>
      </summary>
      <returns>
        <para> An array of delegates whose invocation lists
      collectively match the invocation list of this instance.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>
        <para> Determines whether two <see cref="T:System.MulticastDelegate" /> 
objects are equal.
</para>
      </summary>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" />
and <paramref name="d2" /> have the same
invocation lists; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>
        <para> Determines whether two <see cref="T:System.MulticastDelegate" />
objects are not equal.</para>
      </summary>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="T:System.Enum">
      <summary>
        <para>Provides
      the base class for enumerations.</para>
      </summary>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>
        <para>Converts the string representation of the name or numeric
 value of one or more enumerated constants to an equivalent enumerated
 object.</para>
      </summary>
      <param name="enumType">The <see cref="T:System.Type" />of the enumeration. </param>
      <param name=" value">A string containingthe name or value to convert.</param>
      <returns>
        <para> An object of type <paramref name="enumType" /> whose value is
 represented by <paramref name="value" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>
        <para>Converts the string representation of the name or numeric value
 of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.</para>
      </summary>
      <param name="enumType">The <see cref="T:System.Type" />of the enumeration. </param>
      <param name="value">A string containing the name or value to convert.</param>
      <param name=" ignoreCase">If <see langword="true" />, ignore case; otherwise, regard case.</param>
      <returns>
        <para>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an <see cref="T:System.Enum" /> with the same underlying type and value as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>
        <para> Returns the underlying type of the specified enumeration.
      </para>
      </summary>
      <param name="enumType">An enumeration type. </param>
      <returns>
        <para> The underlying <see cref="T:System.Type" /> of <paramref name="enumType" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>
        <para> Retrieves an array of the values of the constants in
      a specified enumeration.
      </para>
      </summary>
      <param name="enumType">An enumeration type. </param>
      <returns>
        <para> An <see cref="T:System.Array" /> of the
   values of
   the constants in <paramref name="enumType" />. The elements of the array
   are sorted by the values of the enumeration constants.
   </para>
      </returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>
        <para> Retrieves the name of the constant in
 the specified enumeration that has the
 specified value.
 </para>
      </summary>
      <param name="enumType">An enumeration. </param>
      <param name="value">The value of a particular enumerated constant in terms of its underlying type. </param>
      <returns>
        <para> A string containing the name of the
 enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />, or
 <see langword="null" /> 
 if no such constant is found.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>
        <para>Retrieves an array of the names of the constants in a specified enumeration. </para>
      </summary>
      <param name="enumType">An enumeration. </param>
      <returns>
        <para>A string 
 array of the names of the constants in <paramref name="enumType" />. The elements of the array
 are sorted by the values of the enumerated constants. </para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>
        <para> Returns an instance of the specified enumeration set to the specified value.
 </para>
      </summary>
      <param name="enumType">An enumeration. </param>
      <param name=" value">The value. </param>
      <returns>
        <para> An enumeration object whose value is
 <paramref name="value" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>
        <para> Returns an indication whether a constant with a specified value
      exists in a specified enumeration.
      </para>
      </summary>
      <param name="enumType">An enumeration type. </param>
      <param name=" value">The value or name of a constant in <paramref name="enumType" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if a constant in
<paramref name="enumType" /> has a value equal to 
<paramref name="value" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="target">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this
      instance and <paramref name="target" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less
            than
            zero</term>
            <description>The value of this instance is less than the
            value of <paramref name="target" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The value of this instance is equal to the value of
         <paramref name="target" />.</description>
          </item>
          <item>
            <term> Greater
            than zero</term>
            <description>
              <para>The value of this instance is greater than the value of
            <paramref name="target" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="target" /> is 
         <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>
        <para> Converts the specified value of a specified enumerated 
 type to its equivalent string
 representation according to the specified format. </para>
      </summary>
      <param name="enumType">The enumeration type of the value to convert. </param>
      <param name=" value">The value to convert. </param>
      <param name=" format">The output format to use. </param>
      <returns>
        <para> A string representation of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 string representation using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 string representation using the specified format
 and format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies format information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 string
 representation. </para>
      </summary>
      <returns>
        <para>The string 
 representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to 
 its equivalent string representation using the specified
 format information. </para>
      </summary>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies format information about this instance.</param>
      <returns>
        <para>The string 
 representation of the name of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.SByte)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 8-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int16)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 16-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para> An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int32)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 32-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Byte)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 8-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt16)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 16-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt32)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 32-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int64)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 64-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt64)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 64-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>
        <para>Returns the underlying <see cref="T:System.TypeCode" /> for this instance.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.TypeCode" qualify="true" /> for this instance.</para>
      </returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>
        <para>The exception that is thrown when an attempt to access a class
      member fails.</para>
      </summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" />

class.</para>
      </summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with serialized
   data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Activator">
      <summary>
        <para>Contains methods to create types of objects locally or remotely, or obtain
      references to existing remote objects.</para>
      </summary>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of the specified type using the constructor that best matches the specified parameter. </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String)">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the default constructor.</para>
      </summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched. </param>
      <param name=" typeName">The name of the preferred type. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the default constructor.</para>
      </summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched. </param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
      <summary>
        <para>Creates an instance of the specified type using the constructor that best matches the specified parameter. </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" nonPublic">
        <see langword="true" /> if a matching, parameterless constructor can be public or not public; otherwise, only a public constructor can match.</param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String)">
      <summary>
        <para> Creates an instance of the type whose
      name is specified, using the named assembly file and default constructor.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name=" typeName">The name of the preferred type. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
        <para> -or-
      </para>
        <para>
          <see langword="null" />, if the requested type could not be created.
   </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>
        <para> Creates an instance of the type whose
      name is specified, using the named assembly file and default constructor.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named
      assembly and the constructor that best matches the specified parameters.</para>
      </summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched. </param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" ignoreCase">A Boolean that specifies whether the search for <paramref name="typeName" /> is case-sensitive. If <paramref name="ignoreCase" /> is <see langword="true" />, the search is not case-sensitive. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <param name=" securityInfo">Information used to make security policy decisions and grant code permissions. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named
      assembly file and the constructor that best matches the specified parameters.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" ignoreCase">A Boolean that specifies whether the search for <paramref name="typeName" /> is case-sensitive. If <paramref name="ignoreCase" /> is <see langword="true" />, the search is not case-sensitive. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <param name=" securityInfo">Information used to make security policy decisions and grant code permissions. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateComInstanceFrom(System.String,System.String)">
      <summary>
        <para> Creates an instance of the COM object whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</para>
      </summary>
      <param name="assemblyName">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought. </param>
      <param name="typeName">The name of the preferred type. </param>
      <returns>
        <para>A handle that must be unwrapped to access the newly created instance. </para>
      </returns>
    </member>
    <member name="M:System.Activator.GetObject(System.Type,System.String)">
      <summary>
        <para> Creates a
      proxy for the well-known object indicated by the
      specified type and URL.</para>
      </summary>
      <param name="type">The type of the well-known object to which you want to connect. </param>
      <param name="url">The URL of the well-known object. </param>
      <returns>
        <para> A proxy that points to an endpoint served by the
      requested well-known object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.GetObject(System.Type,System.String,System.Object)">
      <summary>
        <para> Creates a proxy for
      the well-known object indicated by the specified type,
      URL, and channel data.</para>
      </summary>
      <param name="type">The type of the well-known object to which you want to connect. </param>
      <param name="url">The URL of the well-known object. </param>
      <param name="state">Channel-specific data or <see langword="null" />. </param>
      <returns>
        <para>A proxy that points to an endpoint served by the requested well-known object. </para>
      </returns>
    </member>
    <member name="T:System.ApplicationException">
      <summary>
        <para>The exception that is thrown when a
      non-fatal application error occurs.</para>
      </summary>
    </member>
    <member name="M:System.ApplicationException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ApplicationException" /> class
      with a specified error message.</para>
      </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ApplicationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ApplicationException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>
        <para>Provides data for the <see cref="F:System.AppDomain.TypeResolve" />,
<see cref="F:System.AppDomain.ResourceResolve" />, and <see cref="F:System.AppDomain.AssemblyResolve" /> events.</para>
      </summary>
    </member>
    <member name="T:System.EventArgs">
      <summary>
        <para>
          <see cref="T:System.EventArgs" /> is the base class
   for classes containing event data.</para>
      </summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>
        <para> Represents an event with no event data.
      </para>
      </summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.EventArgs" /> class.
</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class.</para>
      </summary>
      <param name="name">The name of an item to resolve.</param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>
        <para> Gets the name of the item to resolve.</para>
      </summary>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>
        <para>Provides data for the <see cref="F:System.AppDomain.AssemblyLoad" /> event.</para>
      </summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AssemblyLoadEventArgs" />
class using the specified <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="loadedAssembly">An instance that represents the currently loaded assembly.</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>
        <para>Gets an <see cref="T:System.Reflection.Assembly" /> that represents the currently loaded assembly.</para>
      </summary>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>
        <para> Represents the method that handles the
   <see cref="F:System.AppDomain.TypeResolve" />,
   <see cref="F:System.AppDomain.ResourceResolve" />, and <see cref="F:System.AppDomain.AssemblyResolve" /> events of an <see cref="T:System.AppDomain" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="args">
        <para>A <see cref="T:System.ResolveEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="F:System.AppDomain.AssemblyLoad" />
event of an <see cref="T:System.AppDomain" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="args">
        <para>An <see cref="T:System.AssemblyLoadEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.AppDomain">
      <summary>
        <para> Represents an application domain, which is an isolated environment
      where applications execute. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.MarshalByRefObject">
      <summary>
        <para> Enables access to objects across application
      domain boundaries
      in applications that
      support remoting.</para>
      </summary>
    </member>
    <member name="M:System.MarshalByRefObject.GetLifetimeService">
      <summary>
        <para>Retrieves the current lifetime service object that controls the
      lifetime policy for this instance.</para>
      </summary>
      <returns>
        <para> An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.
   </para>
      </returns>
    </member>
    <member name="M:System.MarshalByRefObject.InitializeLifetimeService">
      <summary>
        <para> Obtains a lifetime service object to control the lifetime policy for this instance.</para>
      </summary>
      <returns>
        <para>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the
   lifetime policy for this instance. This is the current lifetime service object for
   this instance if one exists; otherwise, a new lifetime service object initialized to the value
   of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" qualify="true" /> property. </para>
      </returns>
    </member>
    <member name="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
      <summary>
        <para>Creates an object that contains all the relevant
      information required to generate a proxy used to communicate with a remote object.</para>
      </summary>
      <param name="requestedType">The <see cref="T:System.Type" /> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> will reference.</param>
      <returns>
        <para>Information required to generate a proxy.</para>
      </returns>
    </member>
    <member name="T:System._AppDomain">
      <summary>
        <para> Represents an application domain,
      which is an isolated environment where applications execute.</para>
      </summary>
    </member>
    <member name="M:System._AppDomain.ToString">
      <summary>
        <para> Obtains the <see cref="T:System.String" /> representation of this instance.
   </para>
      </summary>
      <returns>
        <para>
      The friendly name of the application domain.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" other">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="other" /> is an instance of <see cref="T:System.AppDomain" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetType">
      <summary>
        <para>Gets the type of the current instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Type" />
object.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.InitializeLifetimeService">
      <summary>
        <para>Gives the <see cref="T:System.AppDomain" /> an infinite lifetime by preventing a lease from being created.</para>
      </summary>
      <returns>
        <para> Always <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetLifetimeService">
      <summary>
        <para>Returns a lifetime service object that controls the lifetime policy for an 
      instance that implements this interface. </para>
      </summary>
      <returns>
        <para>An object to control the lifetime service. This is an object of type 
   <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> for the default lifetime 
      service.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>
        <para> Defines a dynamic assembly with the specified name and access
      mode.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The access mode for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and storage
      directory.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, evidence,
      and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, evidence, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
      <summary>
        <para> Defines a dynamic assembly using the specified name,
      access mode, storage directory, evidence, permission requests, and synchronization option.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly. </param>
      <param name="access">The mode in which the dynamic assembly will be accessed. </param>
      <param name="dir">The name of the directory where the dynamic assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory. </param>
      <param name="evidence">The evidence supplied for the dynamic assembly. </param>
      <param name="requiredPermissions">The required permissions request. </param>
      <param name="optionalPermissions">The optional permissions request. </param>
      <param name="refusedPermissions">The refused permissions request. </param>
      <param name="isSynchronized">
        <para>
          <see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</para>
      </param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstance(System.String,System.String)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified assembly.
      </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <returns>
        <para> An object that is a
      wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.
      The return value
      needs to be
      unwrapped to access the real object.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name="typeName">The fully-qualified name of the requested type.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in
      the specified assembly. A parameter specifies an array of activation attributes. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name=" typeName">The fully-qualified name of the requested type.</param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified
      assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization
      to create the type.</para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to be loaded.</param>
      <returns>
   The loaded assembly.
</returns>
    </member>
    <member name="M:System._AppDomain.Load(System.String)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a COFF based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a COFF based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a COFF based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <param name="securityEvidence">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
      <summary>
        <para> Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to be loaded. </param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para> Execute the <see cref="T:System.Reflection.Assembly" />
given its file name and supplied evidence.</para>
      </summary>
      <param name="assemblyFile">The name of the file from which the assembly is to be loaded. </param>
      <param name="assemblySecurity">Evidence for loading the assembly. </param>
      <returns>
        <para> The value returned by the entry point of
      the assembly.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.ExecuteAssembly(System.String)">
      <summary>
        <para>Execute the <see cref="T:System.Reflection.Assembly" /> given its file name. The method specified in
   the .NET Framework header is called.</para>
      </summary>
      <param name="assemblyFile">The file name of the the assembly to be executed.</param>
      <returns>
        <para> The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
      <summary>
        <para>Execute the <see cref="T:System.Reflection.Assembly" /> given its file name and
   supplied <see cref="T:System.Security.Policy.Evidence" />. Optionally, the <see cref="T:System.Reflection.Assembly" />
   can be loaded into the domain-neutral code area for use by multiple AppDomains.</para>
      </summary>
      <param name="assemblyFile">The name of the file from which the assembly is to be loaded.</param>
      <param name="assemblySecurity">The supplied evidence for the assembly.</param>
      <param name="args">The arguments to the entry point of the assembly.</param>
      <returns>
        <para>The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetAssemblies">
      <summary>
        <para> Gets the assemblies that have been loaded into this application
      domain.
      </para>
      </summary>
      <returns>
        <para> An array of assemblies in this application domain.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.AppendPrivatePath(System.String)">
      <summary>
        <para>       Appends the specified name of the directory to the private path.
      </para>
      </summary>
      <param name="path">
   The name of the directory to be appended to the private path.
   </param>
    </member>
    <member name="M:System._AppDomain.ClearPrivatePath">
      <summary>
        <para>Resets the path that specifies the location of private assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System._AppDomain.SetShadowCopyPath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location of
      assemblies to be shadow copied.</para>
      </summary>
      <param name="s">A list of directory names, where each name is separated by a semicolon.</param>
    </member>
    <member name="M:System._AppDomain.ClearShadowCopyPath">
      <summary>
        <para>Resets the list of directories containing shadow copied 
      assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System._AppDomain.SetCachePath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location where assemblies are shadow copied.</para>
      </summary>
      <param name="s">The fully-qualified path to the shadow copy location.</param>
    </member>
    <member name="M:System._AppDomain.SetData(System.String,System.Object)">
      <summary>
        <para>Assigns the specified value to the specified application
      domain property.</para>
      </summary>
      <param name="name">The name of an application domain property.</param>
      <param name="data">The value to set the <paramref name="name" /> property.</param>
    </member>
    <member name="M:System._AppDomain.GetData(System.String)">
      <summary>
        <para>Gets the value stored in the current application domain for the
      specified data name.</para>
      </summary>
      <param name="name"> The name of an application domain property.</param>
      <returns>
        <para> The value of the <paramref name="name" /> property.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Establishes the
      security policy level for this application domain.
      </para>
      </summary>
      <param name="domainPolicy">The security policy level. </param>
    </member>
    <member name="M:System._AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>
        <para> Set the default principal object to be attached to threads if
      they attempt to bind to a principal while executing in this application domain.
      </para>
      </summary>
      <param name="principal">The principal object to be attached to threads. </param>
    </member>
    <member name="M:System._AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>
        <para>Specifies how principal and identity objects should be attached to a thread 
      if the thread attempts to bind to a principal while executing in this
      application domain.</para>
      </summary>
      <param name="policy">The type of the principal object to be attached to threads. </param>
    </member>
    <member name="M:System._AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
      <summary>
        <para> Executes the code in another application domain that is identified
      by the specified delegate.</para>
      </summary>
      <param name="theDelegate">A delegate that specifies a method to call.</param>
    </member>
    <member name="P:System._AppDomain.Evidence">
      <summary>
        <para> Gets the <see cref="T:System.Security.Policy.Evidence" /> associated with this application domain
   that is used as
   input to security policy.
   </para>
      </summary>
    </member>
    <member name="E:System._AppDomain.DomainUnload">
      <summary>
        <para> Occurs when an <see cref="T:System.AppDomain" /> is about to be unloaded.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.AssemblyLoad">
      <summary>
        <para> Occurs when an assembly is loaded.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.ProcessExit">
      <summary>
        <para> Occurs when a process is about to exit.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.TypeResolve">
      <summary>
        <para> Occurs when the resolution of a type fails.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.ResourceResolve">
      <summary>
        <para> Occurs when the resolution of a resource fails.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.AssemblyResolve">
      <summary>
        <para> Occurs when the resolution of an assembly fails.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.UnhandledException">
      <summary>
        <para> Occurs when an exception
      is not caught by an event handler.</para>
      </summary>
    </member>
    <member name="P:System._AppDomain.FriendlyName">
      <summary>
        <para> Gets the friendly name of this application domain.</para>
      </summary>
    </member>
    <member name="P:System._AppDomain.BaseDirectory">
      <summary>
        <para> Gets the base directory that the
      assembly resolver used to probe for assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System._AppDomain.RelativeSearchPath">
      <summary>
        <para> Gets the path relative to the base directory where the
      assembly resolver should probe for private assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System._AppDomain.ShadowCopyFiles">
      <summary>
        <para> Gets an indication whether all assemblies
      loaded in the application
      domain are shadow copied.
      </para>
      </summary>
    </member>
    <member name="P:System._AppDomain.DynamicDirectory">
      <summary>
        <para>
      Gets the directory that the assembly resolver used to probe for dynamically-created assemblies.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.IEvidenceFactory">
      <summary>
        <para>Gets an object's <see cref="T:System.Security.Policy.Evidence" />.</para>
      </summary>
      <summary>
        <para>Gets an object's <see cref="T:System.Security.Policy.Evidence" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.IEvidenceFactory.Evidence">
      <summary>
        <para>Gets <see cref="T:System.Security.Policy.Evidence" /> that verifies the current object's identity.</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.GetType">
      <summary>
        <para>Gets the type of the current instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>
        <para> Defines a dynamic assembly with the specified name and access
      mode.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The access mode for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and storage
      directory.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, evidence,
      and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, evidence, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
      <summary>
        <para> Defines a dynamic assembly using the specified name,
      access mode, storage directory, evidence, permission requests, and synchronization option.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly. </param>
      <param name="access">The mode in which the dynamic assembly will be accessed. </param>
      <param name="dir">The name of the directory where the dynamic assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory. </param>
      <param name="evidence">The evidence supplied for the dynamic assembly. </param>
      <param name="requiredPermissions">The required permissions request. </param>
      <param name="optionalPermissions">The optional permissions request. </param>
      <param name="refusedPermissions">The refused permissions request. </param>
      <param name="isSynchronized">
        <para>
          <see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</para>
      </param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified assembly.
      </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <returns>
        <para>An object that is a wrapper for the new instance specified by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name="typeName">The fully-qualified name of the requested type.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
      <summary>
        <para> Creates a new instance of a specified COM type. Parameters specify
      the name of a file that contains an assembly containing the type and
      the name of the type.
      </para>
      </summary>
      <param name="assemblyName">The name of a file containing an assembly that defines the requested type. </param>
      <param name=" typeName">The name of the requested type. </param>
      <returns>
        <para>An object that is a wrapper for the new instance specified
      by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in
      the specified assembly. A parameter specifies an array of activation attributes. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance specified by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name=" typeName">The fully-qualified name of the requested type.</param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified
      assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization
      to create the type.</para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance specified by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to load.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <param name="securityEvidence">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
      <summary>
        <para> Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to load. </param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para> Executes the assembly contained in the specified file, using the specified evidence.</para>
      </summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute. </param>
      <param name="assemblySecurity">Evidence for loading the assembly. </param>
      <returns>
        <para> The value returned by the entry point of
      the assembly.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>
        <para>Executes the assembly contained in the specified file.</para>
      </summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
      <returns>
        <para> The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
      <summary>
        <para>Executes the assembly contained in the specified file,
      using the specified evidence and arguments.</para>
      </summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
      <param name="assemblySecurity">The supplied evidence for the assembly.</param>
      <param name="args">The arguments to the entry point of the assembly.</param>
      <returns>
        <para>The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>
        <para> Obtains the <see cref="T:System.String" /> representation of this instance.
   </para>
      </summary>
      <returns>
        <para> 
      The friendly name of the application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>
        <para> Gets the assemblies that have been loaded into this application
      domain.
      </para>
      </summary>
      <returns>
        <para> An array of assemblies in this application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>
        <para>Indicates whether this application domain is unloading,
      and the objects it contains are being finalized
      by the common language runtime.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if this
   application domain is unloading and the common language
   runtime has started invoking finalizers; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>
        <para>
       Appends the specified name of the directory to the private path.
    </para>
      </summary>
      <param name="path">
    The name of the directory to be appended to the private path.
 </param>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>
        <para>Resets the path that specifies the location of private 
      assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>
        <para>Resets the list of directories containing shadow copied 
      assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location where assemblies are shadow copied.</para>
      </summary>
      <param name="path">The fully-qualified path to the shadow copy location.</param>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>
        <para>Assigns the specified value to the specified application
      domain property.</para>
      </summary>
      <param name="name">The name of an application domain property.</param>
      <param name="data">The value to set the <paramref name="name" /> property.</param>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>
        <para>Gets the value stored in the current application domain for the
      specified data name.</para>
      </summary>
      <param name="name">The name of an application domain property.</param>
      <returns>
        <para> The value of the <paramref name="name" /> property.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>
        <para> Gets the current thread identifier.
      </para>
      </summary>
      <returns>
        <para> A 32-bit signed integer that is the identifier of the current thread.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>
        <para> Unloads the specified application domain.
      </para>
      </summary>
      <param name="domain"> An application domain to unload. </param>
    </member>
    <member name="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Establishes the
      security policy level for this application domain.
      </para>
      </summary>
      <param name="domainPolicy">The security policy level. </param>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>
        <para> Sets the default principal object to be attached to threads if
      they attempt to bind to a principal while executing in this application domain.
      </para>
      </summary>
      <param name="principal">The principal object to attach to threads. </param>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>
        <para>Specifies how principal and identity objects should be attached to a thread
      if the thread attempts to bind to a principal while executing in this
      application domain.</para>
      </summary>
      <param name="policy"> The type of the principal object to attach to threads. </param>
    </member>
    <member name="M:System.AppDomain.InitializeLifetimeService">
      <summary>
        <para>Gives the <see cref="T:System.AppDomain" /> an infinite lifetime by preventing a lease from being created.</para>
      </summary>
      <returns>
        <para> Always <see langword="null" />.
 </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
      <summary>
        <para> Executes the code in another application domain that is identified
      by the specified delegate.</para>
      </summary>
      <param name="callBackDelegate">A delegate that specifies a method to call.</param>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para> Creates
      a
      new application domain with the given name using the supplied evidence.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />. </param>
      <param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
      <returns>
        <para> The newly created application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
      <summary>
        <para> Creates
      a new application domain with the given name, using
      evidence, application base path, relative search
      path, and a parameter that specifies whether a shadow copy of an
      assembly is to be loaded into the application domain.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />. </param>
      <param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
      <param name="appBasePath">The base directory that the assembly resolver uses to probe for assemblies. For more information, see the description of <see cref="P:System.AppDomain.BaseDirectory" />. </param>
      <param name="appRelativeSearchPath">The path relative to the base directory where the assembly resolver should probe for private assemblies. For more information, see the description of <see cref="P:System.AppDomain.RelativeSearchPath" />. </param>
      <param name="shadowCopyFiles">If <see langword="true" />, a shadow copy of an assembly is loaded into this application domain. </param>
      <returns>
        <para> The newly created application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>
        <para> Creates a new application domain with the specified name.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. </param>
      <returns>
        <para> The newly created application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
      <summary>
        <para> Creates a new application domain using
      the specified name, evidence, and application domain setup information.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />. </param>
      <param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
      <param name=" info">An object that contains application domain initialization information.</param>
      <returns>
        <para> The newly created application domain. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location of
      assemblies to be shadow copied.</para>
      </summary>
      <param name="path">A list of directory names, where each name is separated by a semicolon.</param>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>
        <para>Turns on shadow copying.</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location where dynamically generated
      files are stored and accessed.</para>
      </summary>
      <param name="path">The fully-qualified path to where dynamic assemblies are stored.</param>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>
        <para> Creates a new instance of the specified type. Parameters
      specify the assembly where the type is defined, and the name of the type.
      </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <returns>
        <para> An instance of the object specified by 
   <paramref name="typeName" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <param name="activationAttributes">An array containing one or more attributes that can participate in activation.</param>
      <returns>
        <para>An instance of the object specified by <paramref name="typeName" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para> Creates a new instance of the specified type. Parameters specify the name of the type, and how it is found and created. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <param name="ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name="args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args " />must be an empty array or null. </param>
      <param name="culture">A culture-specific object used to govern the coercion of types. If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used. </param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An instance of the object specified by <paramref name="typeName" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
      </summary>
      <param name="assemblyName">The name of a file that contains an assembly that defines the requested type.</param>
      <param name="typeName">The fully-qualified name of the requested type.</param>
      <returns>
        <para> The requested object.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> if
<paramref name="typeName" />
is not found.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name=" assemblyName">The name of a file that contains an assembly that defines the requested type.</param>
      <param name=" typeName">The fully-qualified name of the requested type.</param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>The requested object.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if <paramref name="typeName" /> is not found.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name="assemblyName">The name of a file that contains an assembly that defines the requested type. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used.</param>
      <param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>The requested object.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if <paramref name="typeName" /> is not found.</para>
      </returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>
        <para> Occurs when an <see cref="T:System.AppDomain" /> is about to be unloaded.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>
        <para> Occurs when an assembly is loaded.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>
        <para> Occurs on the default application domain when the 
      default application domain's parent process exits.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>
        <para> Occurs when the resolution of a type fails.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>
        <para> Occurs when the resolution of a resource fails.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>
        <para> Occurs when the resolution of an assembly fails.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>
        <para> Occurs when an exception
      is not caught by an event handler.</para>
      </summary>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>
        <para> Gets the current application domain for the
      current <see cref="T:System.Threading.Thread" />.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.Evidence">
      <summary>
        <para> Gets the <see cref="T:System.Security.Policy.Evidence" /> associated with this application domain that
   is used as input
   to the security policy.
   </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>
        <para> Gets the friendly name of this application domain.</para>
      </summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>
        <para> Gets the base directory that the
      assembly resolver used to probe for assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>
        <para> Gets the path relative to the base directory where the
      assembly resolver should probe for private assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>
        <para> Gets an indication whether all assemblies
      loaded in the application
      domain are shadow copied.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>
        <para> Gets the directory that the assembly resolver used to probe for dynamically-created assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>
        <para>Gets the application domain configuration information
      for this instance.</para>
      </summary>
    </member>
    <member name="T:System.CrossAppDomainDelegate">
      <summary>
        <para> Used by <see cref="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)" />
for cross-application domain calls.</para>
      </summary>
    </member>
    <member name="T:System.IAppDomainSetup">
      <summary>
        <para>Represents assembly binding information that can be added
      to an instance of <see cref="T:System.AppDomain" />.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ApplicationBase">
      <summary>
        <para>Gets or sets the name of the directory containing the
      application.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ApplicationName">
      <summary>
        <para>Gets or sets the name of the application.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.CachePath">
      <summary>
        <para> Gets and
      sets the name of an area specific to
      the application where files are shadow copied.
      </para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ConfigurationFile">
      <summary>
        <para> Gets and sets
      
      the name of the
      configuration file for an application domain.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.DynamicBase">
      <summary>
        <para> Gets or sets the directory where dynamically
      generated files are stored and accessed.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.LicenseFile">
      <summary>
        <para>Gets or sets the location of the license file associated with this
      domain.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.PrivateBinPath">
      <summary>
        <para> Gets or sets the list of directories that is combined
      with the <see cref="P:System.AppDomainSetup.ApplicationBase" />
      directory to
      probe for private assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.PrivateBinPathProbe">
      <summary>
        <para> Gets or sets the private binary directory
      path used to locate an application.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ShadowCopyDirectories">
      <summary>
        <para> Gets or sets the names of the
      directories containing assemblies to be shadow copied.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ShadowCopyFiles">
      <summary>
        <para> Gets or sets a
      
      string that indicates whether shadow
      copying is turned on or off.
      </para>
      </summary>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>
        <para> An enumeration used with the <see cref="T:System.LoaderOptimizationAttribute" /> 
class to specify loader optimizations for an executable.
</para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>
        <para> Indicates that no optimizations for sharing internal resources
      are specified. If the default domain or hosting interface specified an optimization, then the loader uses
      that; otherwise, the loader uses <see cref="F:System.LoaderOptimization.SingleDomain" />.</para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>
        <para> Indicates that the application will probably have a single
      domain, and loader must not share
      internal resources across application domains.
      </para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>
        <para> Indicates that the application will probably have many domains
      that use the same code, and the loader must share maximal
      internal resources across application domains.
      </para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>
        <para>    Indicates that the application will probably host unique code in
      multiple domains, and the loader must share resources across
      application domains for globally available (strong-named) assemblies only.
      </para>
      </summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>
        <para>Used to set the default loader optimization policy for the
      main method of an executable application.</para>
      </summary>
    </member>
    <member name="T:System.Attribute">
      <summary>
        <para>Base class for custom attributes.</para>
      </summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Attribute" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified member
      of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para> An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="type" />
applied to <paramref name="element." /></para>
        <para> -or-</para>
        <para> An
   empty array if no
   such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="type" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>
        <para> Retrieves an array of the custom attributes applied to a specified member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a specified member of
      a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type
<paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a specified member of a
      class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type
<paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>
        <para> Determines whether any custom attributes of a specified type are applied to
      a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a
      specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>
        <para> Determines whether any custom attributes of a specified type
      are applied to a specified module.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
        <para> Determines whether any custom attributes of a specified type
      are applied to a specified module.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a
      specified assembly.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a
      specified assembly.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified member
      of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type
<paramref name="attributeType" /> is applied to <paramref name="element" />.
   </para>
        <para>-or-
   </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified module or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified module or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified assembly or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>
        <para> When overridden in a 
      derived class, returns a value indicating whether this instance equals a specified object.
      </para>
      </summary>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance of <see langword="Attribute" />. </param>
      <returns>
        <para>
          <see langword="true" /> if this 
   instance equals <paramref name="obj" />; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefaultAttribute">
      <summary>
        <para> When overridden in a derived class, returns an indication
      whether the value of this instance is
      the
      default value for the derived class.
      </para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if this
   instance is the default
   attribute for the class; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.Attribute.TypeId">
      <summary>
        <para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.</para>
      </summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.LoaderOptimizationAttribute" /> class to the specified value.</para>
      </summary>
      <param name="value">A value equivalent to a <see cref="T:System.LoaderOptimization" qualify="true" /> constant.</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.LoaderOptimizationAttribute" /> class to the specified value.</para>
      </summary>
      <param name="value"> A <see cref="T:System.LoaderOptimization" qualify="true" /> constant.</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>
        <para>Gets the current <see cref="T:System.LoaderOptimization" /> value 
   for this instance.</para>
      </summary>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>
        <para>The exception that is thrown when an attempt is made to
      access an unloaded application domain.</para>
      </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.AppDomainUnloadedException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.AppDomainUnloadedException" /> class
      with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a <see langword="" />null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ArgumentException">
      <summary>
        <para> The exception that is thrown when one
      of the arguments provided to a method is not valid.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" />
class with a
specified error message, the parameter name, and a reference to the inner
exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and
   the name of the parameter that causes this
   exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class
   with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the parameter name and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>
        <para> Gets the error message and the parameter name, or only the error
      message if no parameter name is set.</para>
      </summary>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>
        <para> Gets the name of the parameter that causes
      this exception.</para>
      </summary>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>
        <para>The exception that is thrown when a null reference 
      (<see langword="Nothing" /> in Visual Basic) is passed to
      a method that does not accept it as a valid argument.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArgumentNullException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArgumentNullException" /> class with the name of the parameter that causes this exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.ArgumentNullException" /> class
   with a specified error message and the name of the parameter that causes this
   exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>
        <para>The exception that
      is thrown when the value of an argument is outside
      the allowable range of values as defined by the invoked method.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this
   exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and
   the name of the parameter that causes this exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArgumentOutOfRangeException" /> class
      with a specified error message, the
      parameter name, and the value of the argument.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="actualValue">The value of the argument that causes this exception.</param>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the invalid argument value and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>
        <para>Gets the error message and the string representation of 
       the invalid argument value, or only the error message if the argument value is null.</para>
      </summary>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>
        <para> Gets the argument value that causes this exception.</para>
      </summary>
    </member>
    <member name="T:System.ArgIterator">
      <summary>
        <para>Represents a variable-length argument list; that is, the parameters of a 
       function that takes a variable number of arguments.</para>
      </summary>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgIterator" /> class using
   the specified argument list.</para>
      </summary>
      <param name="arglist">An argument list consisting of both required and optional items.</param>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgIterator" /> class using
   the specified argument list and a pointer to an item in the list.</para>
      </summary>
      <param name="arglist">An argument list consisting of both required and optional items. </param>
      <param name="ptr">A pointer to the item in <paramref name="arglist" /> to be accessed first.</param>
    </member>
    <member name="M:System.ArgIterator.GetNextArg">
      <summary>
        <para>Returns the next argument in a variable-length argument list.</para>
      </summary>
      <returns>
        <para>The next argument as a <see cref="T:System.TypedReference" /> object.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)">
      <summary>
        <para>Returns the next argument in a variable-length argument list that has a
      specified type.</para>
      </summary>
      <param name="rth">A runtime type handle that identifies the type of the argument to retrieve.</param>
      <returns>
        <para>The next argument as a <see cref="T:System.TypedReference" /> object.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.End">
      <summary>
        <para>Moves the iterator to the end of the variable-length argument list; that is, 
       it invalidates the iterator.</para>
      </summary>
    </member>
    <member name="M:System.ArgIterator.GetRemainingCount">
      <summary>
        <para>Returns the number of arguments remaining in the argument list.</para>
      </summary>
      <returns>
        <para>The number of remaining arguments.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.GetNextArgType">
      <summary>
        <para>Returns the type of the next argument.</para>
      </summary>
      <returns>
        <para>The type of the next argument.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.GetHashCode">
      <summary>
        <para>Returns the hash code of this object.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.Equals(System.Object)">
      <summary>
        <para>This method is not supported, and always throws <see cref="T:System.NotSupportedException" />.</para>
      </summary>
      <param name="o">An object to be compared to this instance.</param>
      <returns>
        <para>This comparison is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>
        <para> The exception that
      is thrown for errors in an arithmetic, casting, or conversion operation.</para>
      </summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArithmeticException" /> 
   
   class.</para>
      </summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArithmeticException" /> class with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArithmeticException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>
        <para>The exception that is thrown when an attempt is made to
      store an element of the wrong type within an array.</para>
      </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArrayTypeMismatchException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArrayTypeMismatchException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>
        <para>References the callback method to be called when the asynchronous operation is completed.</para>
      </summary>
      <param name="ar">The result of the asynchronous operation.</param>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>
        <para> Specifies the application elements on which it is valid to apply
      an attribute.</para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>
        <para>       Attribute can be applied to an assembly.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>
        <para> Attribute can be applied to a module.
      </para>
        <note type="note">
          <paramref name="Module" />
   
   refers to a
   portable executable file (.dll or .exe) and not a
   Visual Basic standard module.
   
</note>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>
        <para>       Attribute can be applied to a class.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>
        <para> Attribute can be applied to a structure; that is, a value type.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>
        <para>       Attribute can be applied to an enumeration.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>
        <para>       Attribute can be applied to a constructor.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>
        <para>       Attribute can be applied to a method.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>
        <para>       Attribute can be applied to a property.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>
        <para>       Attribute can be applied to a field.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>
        <para>       Attribute can be applied to an event.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>
        <para>       Attribute can be applied to an interface.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>
        <para>       Attribute can be applied to a parameter.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>
        <para>       Attribute can be applied to a delegate.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>
        <para>Attribute can be applied to a return value.</para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>
        <para> Attribute can be applied to any application element.
      </para>
      </summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>
        <para> Specifies the usage of
      another attribute class. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified
   list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" />
   value.</para>
      </summary>
      <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid.</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>
        <para>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</para>
      </summary>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>
        <para> Gets or sets a Boolean value indicating whether more than one instances of the indicated attribute can be specified
      for a single program element.</para>
      </summary>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>
        <para> Gets or sets a Boolean value indicating whether the
      indicated attribute is inherited by derived classes or overridden members.</para>
      </summary>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>
        <para> The exception that is thrown when the file image of a
      DLL or an executable program is invalid.</para>
      </summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class.
</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> 
class with a specified error message and file name.</para>
      </summary>
      <param name="message">A message that describes the error.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" />
class with a specified error message and a reference to the inner exception
that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name=" fileName"> The full name of the file with the invalid image.</param>
      <param name=" inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>
        <para>Returns the fully qualified name of this exception and
      possibly the error message, the name of the inner exception, and the stack trace.</para>
      </summary>
      <returns>
        <para>A string containing the fully qualified name of this
      exception and possibly the error message, the name of the inner exception, and
      the stack trace.</para>
      </returns>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.BadImageFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with
   the file name, assembly cache log, and additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>
        <para>Gets the error message and the name of the file that
      caused this exception.</para>
      </summary>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>
        <para>Gets the name of the file that causes this exception.</para>
      </summary>
    </member>
    <member name="P:System.BadImageFormatException.FusionLog">
      <summary>
        <para> Gets the log file that describes why an assembly load failed.</para>
      </summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>
        <para>Converts base data types to an array of bytes, and an array of bytes to base 
       data types.</para>
      </summary>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>
        <para>Indicates the byte order ("endianess") in which data is stored in this 
       computer architecture.</para>
      </summary>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>
        <para>Returns the specified Boolean value as an array of bytes.</para>
      </summary>
      <param name=" value">A Boolean value.</param>
      <returns>
        <para>An array of bytes with length 1.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>
        <para>Returns the specified Unicode character value as an array of bytes.</para>
      </summary>
      <param name=" value">A character to convert.</param>
      <returns>
        <para>An array of bytes with length 2.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>
        <para>Returns the specified 16-bit signed integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 2.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>
        <para>Returns the specified 32-bit signed integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 4.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>
        <para>Returns the specified 64-bit signed integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 8.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>
        <para>Returns the specified 16-bit unsigned integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 2.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>
        <para>Returns the specified 32-bit unsigned integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 4.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>
        <para>Returns the specified 64-bit unsigned integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 8.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>
        <para>Returns the specified single-precision floating point value as an array of 
       bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 4.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>
        <para>Returns the specified double-precision floating point value as an array of 
       bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 8.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a Unicode character converted from two bytes at a specified position 
       in a byte array.</para>
      </summary>
      <param name=" value">An array.</param>
      <param name=" startIndex">The starting position within <paramref name="value" /> .</param>
      <returns>
        <para>A character formed by two bytes beginning at <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 16-bit signed integer converted from two bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 16-bit signed integer formed by two bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 32-bit signed integer converted from four bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 32-bit signed integer formed by four bytes beginning at 
    <paramref name="startIndex." /></para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 64-bit signed integer converted from eight bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 64-bit signed integer formed by eight bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 16-bit unsigned integer converted from two bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">The array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" /> 
 .</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 32-bit unsigned integer converted from four bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 32-bit unsigned integer formed by four bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 64-bit unsigned integer converted from eight bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 64-bit unsigned integer formed by the eight bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a single-precision floating point number converted from four bytes at 
       a specified position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A single-precision floating point number formed by four bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a double-precision floating point number converted from eight bytes 
       at a specified position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A double precision floating point number formed by eight bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see langword="String" /> converted from a specified number of bytes 
    at a specified position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <param name=" length">The number of bytes to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> of 
    hexadecimal pairs separated by hyphens, where each pair represents the
    corresponding element in <paramref name="value" />; for example, "7F-2C-4A".</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>
        <para>Returns a <see langword="String" /> converted from the elements of a byte 
    array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <returns>
        <para>A <see cref="T:System.String" /> of 
    hexadecimal pairs separated by hyphens, where each pair represents the
    corresponding element in <paramref name="value;" /> for example, "7F-2C-4A".</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a <see langword="String" /> converted from the elements of a byte array 
    starting at a specified array position.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A <see cref="T:System.String" /> of 
    hexadecimal pairs separated by hyphens, where each pair represents the
    corresponding element in <paramref name="value" />; for example, "7F-2C-4A".</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a Boolean value converted from one byte at a specified position in a 
       byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>
          <see langword="true " />if the byte at <paramref name="startIndex" /> in <paramref name="value" /> is 
    nonzero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>
        <para>Converts the specified double-precision floating point 
      number to a 64-bit signed integer.</para>
      </summary>
      <param name="value">The number to convert.</param>
      <returns>
        <para>A 64-bit signed integer whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>
        <para>Converts the specified 64-bit signed integer to a 
      double-precision floating point number.</para>
      </summary>
      <param name="value">The number to convert.</param>
      <returns>
        <para>A double-precision floating point number whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="T:System.Boolean">
      <summary>
        <para> Represents a Boolean value.</para>
      </summary>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>
        <para>Represents the Boolean value <see langword="true" /> as a string. This 
 field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>
        <para>Represents the Boolean value <see langword="false" /> as a string. This 
 field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Boolean" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent 
 string
 representation. </para>
      </summary>
      <returns>
        <para>
          <see cref="F:System.Boolean.TrueString" /> if the
 value of this instance is <see langword="true" />, or
<see cref="F:System.Boolean.FalseString" /> if the value of this instance is 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to its equivalent 
 string representation.</para>
      </summary>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> object.</param>
      <returns>
        <para>
          <see cref="F:System.Boolean.TrueString" /> if the
 value of this instance is <see langword="true" />, or
<see cref="F:System.Boolean.FalseString" /> if the value of this instance is 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare to this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the
 same value as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" obj">An object to compare to this instance, or <see langword="null" />.</param>
      <returns>
        <para>A signed integer that indicates the relative order of this instance and
 <paramref name="obj" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less
 than
 zero</term>
            <description>This instance is <see langword="false" /> and
 <paramref name="obj" /> is <see langword="true" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance and <paramref name="obj" /> are equal
 (either both are <see langword="true" /> or both are <see langword="false" />
 ).</description>
          </item>
          <item>
            <term> Greater
 than zero</term>
            <description>
              <para>This instance is <see langword="true" /> and <paramref name="obj" /> is
 <see langword="false" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="obj" /> is
<see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>
        <para>Converts the specified string representation of a logical value to
 its <see cref="T:System.Boolean" />
 equivalent.</para>
      </summary>
      <param name=" value">A string containing the value to convert.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />;
 otherwise,
<see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Boolean" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Boolean" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Buffer">
      <summary>
        <para>Manipulates unmanaged memory represented as arrays of bytes.</para>
      </summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
        <para> Copies a specified number of bytes from a source array starting at a 
       particular offset to a destination array starting at a particular offset.</para>
      </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into <paramref name="src" />.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into <paramref name="dst" />.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>
        <para>Retrieves the byte at a specified location in a specified array.</para>
      </summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <returns>
        <para>Returns
       the <paramref name="index" /> byte in the array.</para>
      </returns>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>
        <para>Assigns a specified value to a byte at a particular location in a specified array.</para>
      </summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <param name="value">A value to assign.</param>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>
        <para>Returns
       the number of bytes in the specified array.</para>
      </summary>
      <param name="array">An array.</param>
      <returns>
        <para>The
       number of bytes in the array.</para>
      </returns>
    </member>
    <member name="T:System.Byte">
      <summary>
        <para>Represents an 8-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>
        <para> Represents the largest possible value of a <see cref="T:System.Byte" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>
        <para> Represents the smallest possible value of a <see cref="T:System.Byte" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed integer that indicates the relative order of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Byte" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Byte" /> .</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to
 its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <returns>
        <para>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" /> . </param>
      <param name=" style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicate the permitted format of <paramref name="s" />. If <paramref name="style" /> is <see langword="null" />, the string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style. </param>
      <returns>
        <para>The <see cref="T:System.Byte" />
value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified
 culture-specific format to its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. The string is interpretedusing the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the current system culture is used.</param>
      <returns>
        <para> The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and
 culture-specific format to its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert. The string is interpreted using the style specified by <paramref name="style" /> .</param>
      <param name=" style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicate the permitted format of <paramref name="s" />. If <paramref name="style" /> is <see langword="null" />, the string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the current system culture is used.</param>
      <returns>
        <para>The <see cref="T:System.Byte" />
value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
 equivalent string.</para>
      </summary>
      <returns>
        <para> The value of
 this instance.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string using the specified format. </para>
      </summary>
      <param name=" format">A string thatspecifies the return format. See <see cref="M:System.Byte.ToString(System.String,System.IFormatProvider)" /> for a list of valid values.</param>
      <returns>
        <para> The value of this instance, formatted as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para> The value of this instance, formatted as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string using the specified format and
 culture-specific format information. </para>
      </summary>
      <param name=" format">A string thatspecifies the return format.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The value of this instance, formatted as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Byte" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Byte" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>
        <para>The exception that is thrown when an attempt to unload
      an application domain fails.</para>
      </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class from serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Char">
      <summary>
        <para> Represents a Unicode character.
      </para>
      </summary>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>
        <para>Represents the largest possible value of a <see cref="T:System.Char" />. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>
        <para> Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Char.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string
      representation. </para>
      </summary>
      <returns>
        <para>The string representation of
      the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to its equivalent
      string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>
        <para> Converts the specified Unicode character to its
      equivalent string
      representation. </para>
      </summary>
      <param name=" c">A Unicode character.</param>
      <returns>
        <para>The string
      representation of the value of <paramref name="c" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>
        <para>Converts the value of the specified string to its
      equivalent Unicode character.</para>
      </summary>
      <param name=" s">A string containinga single character or <see langword="null" />.</param>
      <returns>
        <para> A Unicode character equivalent to the sole character in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      decimal digit.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as an
      alphabetic letter.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is an alphabetic letter;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as white space.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is white space;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as an uppercase letter.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is an uppercase letter;
 otherwise, <see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a lowercase letter.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a lowercase letter;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a punctuation mark.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a punctuation mark;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as an alphabetic letter or a decimal digit.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is an alphabetic letter or a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>
        <para>Converts the value of a specified Unicode character to its uppercase
 equivalent using specified culture-specific formatting information.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> object that supplies culture-specific formatting information, or <see langword="null" />. </param>
      <returns>
        <para> The uppercase equivalent of <paramref name="c" />, formatted according to <paramref name="culture" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already uppercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>
        <para>Converts the value of a Unicode character to its uppercase equivalent. </para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para> The uppercase equivalent of <paramref name="c" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already uppercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>
        <para>Converts the value of a specified Unicode character to its lowercase
      equivalent using specified culture-specific formatting information.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> object that supplies culture-specific formatting information, or <see langword="null" />. </param>
      <returns>
        <para> The lowercase equivalent of <paramref name="c" />, formatted according to <paramref name="culture" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already lowercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>
        <para>Converts the value of a Unicode character to its lowercase equivalent. </para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para> The lowercase equivalent of <paramref name="c" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already lowercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Char" qualify="true" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized
      as a control character.</para>
      </summary>
      <param name="c">A Unicode character.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a control character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a control character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a decimal digit.</para>
      </summary>
      <param name=" s">A <see cref="T:System.String" />.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as an alphabetic character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is an alphabetic character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as an alphabetic character or a decimal digit.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is an alphabetic character or a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a lowercase letter.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a lowercase letter;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      decimal digit or hexadecimal number.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a decimal digit or hexadecimal number;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a decimal digit or hexadecimal number.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a decimal digit or hexadecimal number;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a punctuation mark.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a punctuation mark;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      separator character.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a separator character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a separator character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a separator character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      surrogate character.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a surrogate character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a surrogate character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a surrogate character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      symbol character.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a symbol character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a symbol character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a symbol character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified 
 position in a specified string is categorized as an uppercase letter.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
 character at position <paramref name="index" /> in <paramref name="s " />is an uppercase letter;
 otherwise, <see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as white space.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is white space;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>
        <para> Categorizes a specified Unicode character into a group
      identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</para>
      </summary>
      <param name="c">A Unicode character.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.UnicodeCategory" /> value
   that identifies the group that contains <paramref name="c" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>
        <para>Categorizes the character at the specified position in a
      specified string
      into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</para>
      </summary>
      <param name=" s">A <see cref="T:System.String" />.</param>
      <param name="index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the
   group that contains the character at position <paramref name="index" />
   in
<paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>
        <para> Converts the specified numeric Unicode character to a double-precision floating
      point number.</para>
      </summary>
      <param name="c">A Unicode character.</param>
      <returns>
        <para>The numeric value of <paramref name="c" /> if that character represents a number;
   otherwise, -1.0.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>
        <para>Converts the numeric Unicode character at the specified
      position in a specified string to a
      double-precision floating point number.</para>
      </summary>
      <param name=" s">A <see cref="T:System.String" />.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>The numeric value of the character at position <paramref name="index" /> in <paramref name="s" />
if that character represents a number; otherwise, -1.</para>
      </returns>
    </member>
    <member name="T:System.CharEnumerator">
      <summary>
        <para> Supports iterating over a <see cref="T:System.String" /> and reading its individual
   characters.</para>
      </summary>
    </member>
    <member name="M:System.CharEnumerator.Clone">
      <summary>
        <para>Creates a copy of this instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Object" /> that is a copy of this instance.</para>
      </returns>
    </member>
    <member name="M:System.CharEnumerator.MoveNext">
      <summary>
        <para> Increments the index to the next
      character of the enumerated string.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CharEnumerator.Reset">
      <summary>
        <para> Initializes the index to a position logically before the
 first character of the enumerated string.</para>
      </summary>
    </member>
    <member name="P:System.CharEnumerator.Current">
      <summary>
        <para> Gets the character in the enumerated string currently
      indexed by this instance.</para>
      </summary>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>
        <para> Indicates whether a program element is compliant with the Common Language Specification (CLS).
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.CLSCompliantAttribute" /> class with a Boolean value 
    indicating whether the indicated program element is CLS-compliant.</para>
      </summary>
      <param name="isCompliant">
        <see langword="true" /> if CLS-compliant; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>
        <para>Gets the Boolean value indicating whether the indicated program element is CLS-compliant.</para>
      </summary>
    </member>
    <member name="T:System.TypeUnloadedException">
      <summary>
        <para> The exception that is thrown when
      there is an attempt to access an unloaded class.</para>
      </summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Console">
      <summary>
        <para> Represents the standard input, output, and error streams for console
      applications. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Console.OpenStandardError">
      <summary>
        <para>Acquires the standard error stream.</para>
      </summary>
      <returns>
        <para> The standard error stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardError(System.Int32)">
      <summary>
        <para>Acquires the standard error stream, set to a specified buffer size.</para>
      </summary>
      <param name=" bufferSize">The internal stream buffer size.</param>
      <returns>
        <para>The standard error stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardInput">
      <summary>
        <para>Acquires the standard input stream.</para>
      </summary>
      <returns>
        <para> The standard input stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardInput(System.Int32)">
      <summary>
        <para>Acquires the standard input stream, set to a specified buffer size.</para>
      </summary>
      <param name=" bufferSize">The internal stream buffer size.</param>
      <returns>
        <para>The standard input stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardOutput">
      <summary>
        <para>Acquires the standard output stream.</para>
      </summary>
      <returns>
        <para> The standard output stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardOutput(System.Int32)">
      <summary>
        <para>Acquires the standard output stream, set to a specified buffer size.</para>
      </summary>
      <param name=" bufferSize">The internal stream buffer size.</param>
      <returns>
        <para>The standard output stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
      <summary>
        <para> Sets the <see cref="P:System.Console.In" /> property 
   to the specified <see cref="T:System.IO.TextReader" /> .</para>
      </summary>
      <param name="newIn">A <see cref="T:System.IO.TextReader" /> stream that is the new standard input. </param>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
      <summary>
        <para> Sets the <see cref="P:System.Console.Out" /> property 
   to the specified <see cref="T:System.IO.TextWriter" />
   
   .</para>
      </summary>
      <param name="newOut">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard output.</param>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
      <summary>
        <para> Sets the <see cref="P:System.Console.Error" /> property to the specified <see cref="T:System.IO.TextWriter" />.</para>
      </summary>
      <param name="newError">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard error output. </param>
    </member>
    <member name="M:System.Console.Read">
      <summary>
        <para> Reads the next character from the standard input
      stream.</para>
      </summary>
      <returns>
        <para>The next character
      from the input stream, or negative one (-1) if no more characters are
      available.</para>
      </returns>
    </member>
    <member name="M:System.Console.ReadLine">
      <summary>
        <para> Reads
      the next line of characters from the standard input stream.
      </para>
      </summary>
      <returns>
        <para> The next line from the input stream, or
   <see langword="null" />
   if no more characters are available.
   </para>
      </returns>
    </member>
    <member name="M:System.Console.WriteLine">
      <summary>
        <para> Writes the current line terminator to the standard output stream.
 </para>
      </summary>
    </member>
    <member name="M:System.Console.WriteLine(System.Boolean)">
      <summary>
        <para> Writes the text representation of the specified Boolean value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
      <summary>
        <para> Writes the specified Unicode character, followed by the
 current line terminator, value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
      <summary>
        <para> Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream. </para>
      </summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream. </para>
      </summary>
      <param name="buffer">An array of Unicode characters. </param>
      <param name="index">The starting position in <paramref name="buffer" />. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Decimal)">
      <summary>
        <para> Writes the text representation of the
 specified <see cref="T:System.Decimal" /> value, followed by the
 current line terminator,
 to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Double)">
      <summary>
        <para>Writes the text representation of the specified double-precision floating-point value, followed by
      the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Single)">
      <summary>
        <para>Writes the text representation of the specified single-precision floating-point value, followed by
      the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
      <summary>
        <para>Writes the text representation of the specified 32-bit signed integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.UInt32)">
      <summary>
        <para>Writes the text representation of the specified 32-bit unsigned integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int64)">
      <summary>
        <para>Writes the text representation of the specified 64-bit signed integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.UInt64)">
      <summary>
        <para>Writes the text representation of the specified 64-bit unsigned integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
      <summary>
        <para> Writes the text representation of the specified object, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
      <summary>
        <para> Writes the specified string value, followed by the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
      <summary>
        <para>Writes the specified object, followed by the current line terminator, to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">Object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects, followed by the current line terminator, to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects, followed by the current line terminator, to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object,)">
      <summary>
        <para>Writes the specified objects and variable length parameter list, followed by the current line terminator, to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
      <param name=" arg3">The fourth object to write using <paramref name="format" />.</param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
      <summary>
        <para>Writes the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
      <summary>
        <para>Writes the specified object to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">Object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string.</param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object,)">
      <summary>
        <para>Writes the specified objects and variable length parameter list to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
      <param name=" arg3">The fourth object to write using <paramref name="format" />.</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
      <summary>
        <para>Writes the specified array of objects to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.Boolean)">
      <summary>
        <para> Writes the text representation of
 the specified Boolean value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Char)">
      <summary>
        <para> Writes the
 specified Unicode character value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
      <summary>
        <para> Writes the specified array of Unicode characters to the standard output stream. </para>
      </summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes the specified subarray of Unicode characters to the standard output stream. </para>
      </summary>
      <param name="buffer">An array of Unicode characters. </param>
      <param name="index">The starting position in <paramref name="buffer" />. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Double)">
      <summary>
        <para>Writes the text representation of the specified
      double-precision floating-point value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Decimal)">
      <summary>
        <para> Writes the text representation of the
 specified <see cref="T:System.Decimal" /> value
 to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Single)">
      <summary>
        <para>Writes the text representation of the specified
      single-precision floating-point value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
      <summary>
        <para>Writes the text representation of the specified
 32-bit signed integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.UInt32)">
      <summary>
        <para>Writes the text representation of the specified
 32-bit unsigned integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Int64)">
      <summary>
        <para>Writes the text representation of the specified
 64-bit signed integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.UInt64)">
      <summary>
        <para>Writes the text representation of the specified
 64-bit unsigned integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Object)">
      <summary>
        <para> Writes the text representation
      of the specified object to the standard output stream.</para>
      </summary>
      <param name="value">The value to write, or <see langword="null" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String)">
      <summary>
        <para> Writes the specified string value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="P:System.Console.Error">
      <summary>
        <para>Gets the standard error output stream.</para>
      </summary>
    </member>
    <member name="P:System.Console.In">
      <summary>
   Gets the standard input stream.
</summary>
    </member>
    <member name="P:System.Console.Out">
      <summary>
        <para>Gets the standard output stream.</para>
      </summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>
        <para>The exception that is thrown when an attempt to
      marshal an object across a context boundary fails.</para>
      </summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>
        <para>Initializes a new instance of the 
    <see cref="T:System.ContextMarshalException" /> 
    class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the 
    <see cref="T:System.ContextMarshalException" /> 
    class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ContextMarshalException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ContextMarshalException" />
class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Convert">
      <summary>
        <para>Converts a base data type to another base data type.</para>
      </summary>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>
        <para>A constant representing a database column absent of 
      data; that is, database null.</para>
      </summary>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for the specified object.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <returns>
        <para>The <see cref="T:System.TypeCode" qualify="true" /> for <paramref name="value" />, or <see cref="F:System.TypeCode.Empty" qualify="true" /> if <paramref name="value" />
is <see langword="null" />
.</para>
      </returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>
        <para>Returns an indication whether the specified object is of 
      type <see cref="F:System.TypeCode.DBNull" />.</para>
      </summary>
      <param name="value">An object.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is of type <see cref="F:System.TypeCode.DBNull" qualify="true" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>
        <para> Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.TypeCode" /> and whose
   value is equivalent to the specified object.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" typeCode">A <see cref="T:System.TypeCode" /></param>
      <returns>
        <para>An object whose underlying <see cref="T:System.TypeCode" /> is <paramref name="typeCode" /> and
   whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>
        <para>Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.TypeCode" /> and whose value is equivalent to the specified
   object. A parameter supplies culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" typeCode">A <see cref="T:System.TypeCode" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>An object whose underlying <see cref="T:System.TypeCode" /> is
<paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.
   </para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if <paramref name="value" /> is
<see langword="null" /> and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" qualify="true" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>
        <para>Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.Type" /> and whose value is equivalent to the specified object.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" conversionType">A <see cref="T:System.Type" />.</param>
      <returns>
        <para>An object whose <see cref="T:System.Type" /> is <paramref name="conversionType" />
and whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>
        <para>Returns an <see cref="T:System.Object" /> with the specified
<see cref="T:System.Type" /> and whose value is equivalent to the specified
   object. A parameter supplies culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" conversionType">A <see cref="T:System.Type" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> An object whose <see cref="T:System.Type" /> is
<paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.
   </para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if <paramref name="value" /> and <paramref name="conversionType" />
are <see langword="nulls" />. </para>
        <para>-or-</para>
        <para>
          <paramref name="value" />, if the <see cref="T:System.Type" /> of
<paramref name="value" /> and <paramref name="conversionType" /> are equal. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>
        <para>Converts the value of a specified <see cref="T:System.Object" /> to an equivalent Boolean
   value. </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="false" /> if <paramref name="value" /> equals <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <see langword="true" /> or <see langword="false" /> ; the result of invoking the <see langword="IConvertible.ToBoolean " /> method for the
underlying type of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an equivalent
      Boolean value using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>
          <see langword="false" /> if <paramref name="value" /> equals <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <see langword="true" /> or <see langword="false" />; the result of invoking the <see langword="ToBoolean" /> method for the underlying type of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>
        <para> Returns the specified Boolean value; no actual conversion is performed.</para>
      </summary>
      <param name="value">A Boolean.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>
        <para> Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean
      value.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a logical
   value to its Boolean equivalent.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or
<see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a logical value to
   its Boolean equivalent
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</param>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or
<see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>
        <para>Converts the value of the specified
      <see cref="T:System.Object" /> to a Unicode character.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <returns>
        <para>The Unicode character equivalent to the
      value of <paramref name="value" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Char.MinValue" qualify="true" /> if <paramref name="value" /> equals <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to its equivalent Unicode
      character using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Char.MinValue" qualify="true" /> if <paramref name="value" /> equals <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.Boolean" /> value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>
        <para>Returns the specified Unicode character value; no actual conversion is performed.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>
        <para> Converts the first character of a
      <see cref="T:System.String" />
   to a Unicode character.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> of length 1 or <see langword="null" />. </param>
      <returns>
        <para> The Unicode character equivalent to the first and only character in <paramref name="value." /></para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the first character of a
      <see cref="T:System.String" /> to a Unicode character using specified
      culture-specific formatting information.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> of length 1 or <see langword="null" />. </param>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> The Unicode character equivalent to the first and only character in <paramref name="value." /></para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A single-precision floating-point number.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A double-precision floating-point number.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an 8-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed
   integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>
        <para>Returns the specified 8-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">An 8-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 8-bit signed integer equivalent to 
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 8-bit signed integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 8-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   8-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an 8-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an 8-bit unsigned
      integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> An 8-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 8-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>
        <para>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 8-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " />is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " />is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified
      <see cref="T:System.Decimal" /> number to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " />is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit unsigned integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 16-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed
   integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 16-bit signed integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 16-bit signed integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>
        <para>Returns the specified 16-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 16-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 16-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   16-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 16-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>
        <para>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 16-bit unsigned integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   16-bit unsigned integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit unsigned integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit unsigned integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 32-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 32-bit signed integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
      <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>
        <para>Returns the specified 32-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 32-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   32-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 32-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 32-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 32-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 32-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>
        <para>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 32-bit unsigned integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   32-bit unsigned integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 32-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   32-bit unsigned integer using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 64-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 64-bit signed integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>
        <para> Converts the value of the specified 32-bit signed integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-signed integer. </param>
      <returns>
        <para> The 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>
        <para>Returns the specified 64-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 64-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   64-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 64-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   64-bit signed integer using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 64-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 64-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 64-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> The 64-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 64-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>
        <para>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 64-bit unsigned integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   64-bit unsigned integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 64-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   64-bit unsigned integer using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a single-precision floating point number.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an single-precision floating point number
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The single-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating point number.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The single-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating point number. </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>
        <para>Returns the specified single-precision floating point number; no actual conversion is performed.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent single-precision floating point number. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
        <paramref name="value " />is rounded using rounding to nearest. For example, when rounded to
two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.
</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   single-precision floating point number. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />.</para>
        <para>
          <paramref name="value " />is rounded using rounding to nearest. For example, when rounded
to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes
2.36.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent single-precision floating point number.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   single-precision floating point number using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a double-precision floating point number.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an double-precision floating point number
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The double-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating point number.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The double-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating point number. </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>
        <para>Returns the specified double-precision floating point number; no actual
      conversion is performed.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   double-precision floating point number. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent double-precision floating point number.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   double-precision floating point number using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an <see cref="T:System.Decimal" /> number
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number. </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to
      the equivalent <see cref="T:System.Decimal" /> number. </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. The <see cref="T:System.Decimal" />
contains 7 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent <see cref="T:System.Decimal" /> number. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
   The <see cref="T:System.Decimal" />
   contains 15 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent <see cref="T:System.Decimal" /> number.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
<see cref="T:System.Decimal" /> number using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>
        <para>Returns the specified <see cref="T:System.Decimal" /> number; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>
        <para>Returns the specified <see cref="T:System.DateTime" />; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>
        <para> Converts the value of the specified
   <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" />.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" />
using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> equivalent to the value of
<paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a date and time to an
   equivalent <see cref="T:System.DateTime" />.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a date and time to convert. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
<see cref="T:System.DateTime" /> using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Boolean value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A single-precision floating point value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A double-precision floating point value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Object" /> to its
<see cref="T:System.String" /> 
representation. </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> or <see langword="null" />. </param>
      <returns>
        <para>The <see cref="T:System.String" />
representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" qualify="true" /> if value
is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Object" /> to its equivalent <see cref="T:System.String" /> representation using the specified culture-specific formatting information. </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> or <see langword="null" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" qualify="true" /> if <paramref name="value" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>
        <para>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Boolean value. </param>
      <param name="provider">(Reserved) An instance of an <see cref="T:System.IFormatProvider" /> interface implementation.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Unicode character. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Unicode character. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
        <para>
          <paramref name="provider" /> is ignored; it does not participate in this operation.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>
        <para>Returns the specified instance of <see cref="T:System.String" />; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns the specified instance of <see cref="T:System.String" />; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 8-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>
        <para> Converts the value of an 8-bit unsigned integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>
        <para> Converts the value of a 16-bit signed integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>
        <para> Converts the value of a 32-bit signed integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>
        <para> Converts the value of a 64-bit signed integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>
        <para>Converts the value of an array of 8-bit unsigned integers to its equivalent
   <see cref="T:System.String" /> representation consisting of base 64 digits.</para>
      </summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation, in base 64, of the contents of
<paramref name="inArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Converts the value of a subset of an array of 8-bit unsigned integers to its
      equivalent <see cref="T:System.String" />
      representation consisting of base 64 digits. Parameters specify the subset as an
      offset and number of elements in the
      array.</para>
      </summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <param name=" offset">An offset in <paramref name="inArray" />.</param>
      <param name=" length">The number of elements of <paramref name="inArray" /> to convert.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation in
   base 64 of <paramref name="length" /> elements of
<paramref name="inArray" /> starting at position <paramref name="offset" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> representation of
   a value consisting of base 64 digits to an equivalent array of 8-bit unsigned integers.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" />.</param>
      <returns>
        <para>An array of 8-bit unsigned integers equivalent to
   <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> Converts the value of a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array consisting of
      base 64 digits. Parameters specify the subsets as offsets of the input
      and output arrays and the number of elements in the input array.</para>
      </summary>
      <param name="inArray">An input array of 8-bit unsigned integers.</param>
      <param name=" offsetIn">A position within <paramref name="inArray" />.</param>
      <param name=" length">The number of elements of <paramref name="inArray" /> to convert.</param>
      <param name=" outArray">An output array of Unicode characters.</param>
      <param name=" offsetOut">A position within <paramref name="outArray" />.</param>
      <returns>
        <para>A 32-bit signed integer containing the number of bytes
      in <paramref name="outArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Converts the specified subset of an array
      of Unicode characters consisting of base 64 digits to an equivalent array of 8-bit unsigned integers. Parameters specify the offset and number of elements in the input array.</para>
      </summary>
      <param name="inArray">A Unicode character array.</param>
      <param name=" offset">A position within <paramref name="inArray" />.</param>
      <param name=" length">The number of elements in <paramref name="inArray" /> to convert.</param>
      <returns>
        <para>An array of 8-bit unsigned integers equivalent to
   <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.</para>
      </returns>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>
        <para>Defines the base class for all context-bound classes.</para>
      </summary>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>
        <para> Indicates that the value of a static field is unique for a particular context.</para>
      </summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ContextStaticAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.TimeZone">
      <summary>
        <para> Represents a time zone.</para>
      </summary>
    </member>
    <member name="M:System.TimeZone.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TimeZone" /> class.</para>
      </summary>
    </member>
    <member name="M:System.TimeZone.GetUtcOffset(System.DateTime)">
      <summary>
        <para> Returns the coordinated universal time (UTC) offset for the
      specified local time. </para>
      </summary>
      <param name="time">The local date and time.</param>
      <returns>
        <para> The UTC offset from <paramref name="time" />, measured in
   ticks.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.ToUniversalTime(System.DateTime)">
      <summary>
        <para>Returns the coordinated universal time (UTC) that corresponds to a specified local
      time.</para>
      </summary>
      <param name="time">The local date and time.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> instance whose value is the UTC time that corresponds to
<paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.ToLocalTime(System.DateTime)">
      <summary>
        <para>Returns the local time that corresponds to a specified coordinated universal time (UTC).</para>
      </summary>
      <param name="time">A UTC time.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> instance whose value is the local time that corresponds to <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.GetDaylightChanges(System.Int32)">
      <summary>
        <para> Returns the
 daylight saving time period for a particular year.</para>
      </summary>
      <param name="year">The year to which the daylight saving time period applies.</param>
      <returns>
        <para> A <see cref="T:System.Globalization.DaylightTime" />
instance containing the start and end date for daylight saving time in
<paramref name="year" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)">
      <summary>
        <para>Returns a value indicating whether the specified date and time is within a 
 daylight saving time period.</para>
      </summary>
      <param name="time"> A date and time.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="time" /> is in a daylight saving time
 period; <see langword="false" /> otherwise, or if <paramref name="time" /> is
<see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
      <summary>
        <para> Returns a value indicating whether the specified date and time is within the specified daylight saving time period.</para>
      </summary>
      <param name="time">A date and time.</param>
      <param name="daylightTimes">A daylight saving time period.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="time" /> is in <paramref name="daylightTimes" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.TimeZone.CurrentTimeZone">
      <summary>
        <para>Gets the time zone of the current computer system.</para>
      </summary>
    </member>
    <member name="P:System.TimeZone.StandardName">
      <summary>
        <para> Gets the standard time zone name.</para>
      </summary>
    </member>
    <member name="P:System.TimeZone.DaylightName">
      <summary>
        <para> Gets the daylight saving time zone name. </para>
      </summary>
    </member>
    <member name="P:System.CurrentSystemTimeZone.StandardName">
      <summary>
        <para>
       Return the standard time zone name.
    </para>
      </summary>
    </member>
    <member name="P:System.CurrentSystemTimeZone.DaylightName">
      <summary>
        <para>
       Returns the daylight saving time zone name.
    </para>
        <para>
       If daylight saving time is not used in the time zone, a null
       string will be returned.
    </para>
      </summary>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>
        <para> Specifies the day of the
      week.
      </para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>
        <para>Indicates Sunday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>
        <para>Indicates Monday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>
        <para>Indicates Tuesday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>
        <para>Indicates Wednesday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>
        <para>Indicates Thursday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>
        <para>Indicates Friday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>
        <para>Indicates Saturday.</para>
      </summary>
    </member>
    <member name="T:System.DBNull">
      <summary>
        <para> Represents a null value.</para>
      </summary>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>
        <para> Represents the sole instance of the <see cref="T:System.DBNull" /> class.</para>
      </summary>
    </member>
    <member name="M:System.DBNull.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data
       needed to serialize the <see cref="T:System.DBNull" /> object.
    </para>
      </summary>
      <param name="info">
    A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing information required to serialize the <see cref="T:System.DBNull" /> object.
 </param>
      <param name="context">
    A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.DBNull" /> object.
 </param>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>
        <para>Returns an empty string (<see cref="F:System.String.Empty" qualify="true" />).</para>
      </summary>
      <returns>
        <para>An empty string (<see cref="F:System.String.Empty" qualify="true" />).</para>
      </returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>
        <para>Returns an empty string using the specified <see cref="T:System.IFormatProvider" qualify="true" />.</para>
      </summary>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to be used to format the return value. <para>-or-</para><para><see langword="null" /> to obtain the format information from the current locale setting of the operating system.</para></param>
      <returns>
        <para>An empty string (<see cref="F:System.String.Empty" qualify="true" />).</para>
      </returns>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>
    Gets the <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />.
 </summary>
      <returns>
        <para>The <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />, which is <see cref="F:System.TypeCode.DBNull" qualify="true" />.
    </para>
      </returns>
    </member>
    <member name="T:System.Decimal">
      <summary>
        <para>Represents a decimal number.</para>
      </summary>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>
        <para>Represents the number zero (0).</para>
      </summary>
    </member>
    <member name="F:System.Decimal.One">
      <summary>
   Represents the number one (1).
</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>
   Represents the number negative one (-1).
</summary>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>
        <para>Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and
 read-only.</para>
      </summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>
        <para> Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant
 and read-only.</para>
      </summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 32-bit signed integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 32-bit unsigned integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 64-bit signed integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 64-bit unsigned integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
   the value of the specified single-precision floating-point number.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
   the value of the specified double-precision floating-point number.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.ToOACurrency(System.Decimal)">
      <summary>
        <para>Converts the specified <see cref="T:System.Decimal" /> value to the equivalent OLE Automation Currency
 value, which
 is contained in a 64-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>A 64-bit signed integer that contains the OLE Automation equivalent of
 <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.FromOACurrency(System.Int64)">
      <summary>
        <para>Converts the specified 64-bit signed integer, which 
 contains an OLE Automation Currency value, to the equivalent <see cref="T:System.Decimal" /> value.</para>
      </summary>
      <param name="cy">An OLE Automation Currency value.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that contains the equivalent of <paramref name="cy" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.
   </para>
      </summary>
      <param name="bits">An array of 32-bit signed integers containing a representation of a decimal value. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent
   parts.
   </para>
      </summary>
      <param name="lo">The low 32 bits of a 96-bit integer. </param>
      <param name="mid">The middle 32 bits of a 96-bit integer. </param>
      <param name="hi">The high 32 bits of a 96-bit integer. </param>
      <param name="isNegative">The sign of the number; 1 is negative, 0 is positive. </param>
      <param name="scale">A power of 10 ranging from 0 to 28. </param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>
        <para>Adds two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />.</param>
      <param name="d2">A <see cref="T:System.Decimal" />.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> value that is the sum of
<paramref name="d1" /> and <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>
        <para> Compares two specified <see cref="T:System.Decimal" /> values.
 </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>A signed number indicating the relative values of <paramref name="d1" /> and
<paramref name="d2" />.</para>
        <list type="table">
          <listheader>
            <term> Return Value</term>
            <description> Meaning</description>
          </listheader>
          <item>
            <term> Less
 than
 zero</term>
            <description>
              <paramref name="d1" /> is less than <paramref name="d2" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="d1" /> and <paramref name="d2" /> are equal.</description>
          </item>
          <item>
            <term> Greater than
 zero</term>
            <description>
              <paramref name="d1" /> is greater than <paramref name="d2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>
        <para> Compares this instance to a specified <see cref="T:System.Object" />
.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> or <see langword="null" />. </param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>
        <para> Divides two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> that is the result of
   dividing <paramref name="d1" /> by <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance and a
      specified <see cref="T:System.Object" /> represent the same type and value.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns a value indicating whether two specified
      instances of <see cref="T:System.Decimal" /> represent the same value.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are
   equal; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>
        <para> Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> If <paramref name="d" /> has a fractional part,
   the next whole <see cref="T:System.Decimal" /> number toward negative infinity
   that is less than <paramref name="d." /></para>
        <para>-or- </para>
        <para>If <paramref name="d " />doesn't have a fractional part, <paramref name="d" /> is returned
unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" />
representing the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation, using the specified
      format.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing a format specification.</param>
      <returns>
        <para>A <see cref="T:System.String" />
representation of the value of this instance as specified by
<paramref name="format" />
.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation using the specified format and culture-specific format
      information.</para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number to its
<see cref="T:System.Decimal" /> equivalent.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to the
   number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number in a
   specified style to its <see cref="T:System.Decimal" /> equivalent using the specified
   formatting style.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" />
number equivalent to the number contained in <paramref name="s" /> as specified by
<paramref name="style" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number to its
<see cref="T:System.Decimal" /> equivalent
   using the specified culture-specific format information.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" />
number equivalent to the number contained in <paramref name="s" /> as specified by
<paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number to its
<see cref="T:System.Decimal" /> equivalent using the specified 
   style and culture-specific format.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" />
number equivalent to the number contained in <paramref name="s" /> as specified by
<paramref name="style" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>
        <para>Converts the value of a specified instance of <see cref="T:System.Decimal" />
to its equivalent binary
representation.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value. </param>
      <returns>
        <para> A 32-bit signed integer array with four elements that contain
      the binary representation of <paramref name="d" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>
        <para>Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> that is the remainder after dividing <paramref name="d1" /> by
<paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>
        <para> Multiplies two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the multiplicand). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the multiplier). </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> that is the result of
   multiplying <paramref name="d1" /> and <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>
        <para> Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by
   negative one.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> with the value of <paramref name="d" />,
   but the opposite sign.
   </para>
        <para> -or-
   </para>
        <para> Zero, if <paramref name="d" />
is zero.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>
        <para> Rounds a <see cref="T:System.Decimal" /> value
   to a specified number of decimal places.
   </para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to round. </param>
      <param name="decimals">A value from 0 to 28 that specifies the number of decimal places to round to. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to <paramref name="d" /> rounded to
<paramref name="decimals" /> 
number of decimal places.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>
        <para> Subtracts one specified <see cref="T:System.Decimal" /> value from 
   another.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the minuend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the subtrahend). </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> result of subtracting
<paramref name="d2" /> from <paramref name="d1" /> 
.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
   equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>A 16-bit signed integer equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para>A double-precision floating-point number equivalent to <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
   equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value
      of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
 equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
 equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
   equivalent single-precision floating-point number.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A single-precision floating-point number
      equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation using the specified culture-specific format
      information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" />
representation of the value of this instance as specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>
        <para>Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> to truncate.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> result of <paramref name="d " />
rounded toward zero, to the nearest whole number.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>
        <para>Converts an 8-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 8-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>
        <para>Converts an 8-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">An 8-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 8-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>
        <para>Converts a 16-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 16-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 16-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>
        <para>Converts a 16-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 16-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>
        <para>Converts a Unicode character to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" />
that represents the converted
Unicode character.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>
        <para>Converts a 32-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 32-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>
        <para>Converts a 32-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 32-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>
        <para>Converts a 64-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 64-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>
        <para>Converts a 64-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 64-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>
        <para>Converts a single-precision floating-point number to a
      <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A single-precision floating-point number.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
   represents
   the converted single-precision floating
   point number.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>
        <para>Converts a double-precision floating-point number to a
      <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A double-precision floating-point number.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
   represents
   the converted double-precision floating
   point number.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to an 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>An 8-bit unsigned integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to an 8-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>An 8-bit signed integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a Unicode character.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para> A Unicode character that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 16-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 16-bit signed integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 16-bit unsigned integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 32-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 32-bit signed integer that represents the converted
   <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 32-bit unsigned integer that represents the converted
   <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 64-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 64-bit signed integer that represents the converted
      <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 64-bit unsigned integer that represents the converted
      <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a single-precision floating-point number.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para> A single-precision floating-point number that represents
      the converted <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a double-precision floating-point number.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para> A double-precision floating-point number that represents
      the converted <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>
        <para> Returns the value of the <see cref="T:System.Decimal" /> operand (the
 sign of the operand is unchanged).</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The value of the operand, <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>
        <para>Negates the value of the specified <see cref="T:System.Decimal" /> operand.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The result of <paramref name="d " />multiplied by negative one 
   (-1).</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>
        <para>Increments the <see cref="T:System.Decimal" /> operand by 1.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The value of <paramref name="d" /> incremented by 1.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>
        <para>Decrements the <see cref="T:System.Decimal" /> operand by
   one.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The value of <paramref name="d" /> decremented by 1.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>
        <para> Adds two specified <see cref="T:System.Decimal" /> values.
   </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> result
   of adding <paramref name="d1" /> and <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>
        <para> Subtracts two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> The <see cref="T:System.Decimal" />
result of subtracting <paramref name="d2" /> from <paramref name="d1" />
.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>
        <para> Multiplies two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> result of multiplying
<paramref name="d1" /> by <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>
        <para> Divides two specified <see cref="T:System.Decimal" /> values.
   </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> result
   of <paramref name="d1" /> by <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns the remainder resulting from dividing two
      specified <see cref="T:System.Decimal" />
      values.
      </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> remainder resulting from
   dividing <paramref name="d1" /> by <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns a value indicating whether two instances of
 <see cref="T:System.Decimal" />
 are equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns a value indicating whether two instances of
 <see cref="T:System.Decimal" />
 are not equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than
   another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or 
 equal to another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than
   another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than
   or equal to another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant <see cref="F:System.TypeCode.Decimal" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>
        <para> Selects a member from a list of candidates,
      and performs type conversion from actual argument type to formal
      argument type.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>
        <para>Selects a method to
      invoke from the given set of methods, based on the actual arguments.</para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators.</param>
      <param name="match">The set of methods Reflection has determined to be a possible match, typically because they have the correct member name.</param>
      <param name="args">The actual arguments passed in. Both the types and values of the arguments can be changed.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
      <param name="culture">
        <para>An instance of <see cref="T:System.Globalization.CultureInfo" /> used to control the coercion of data types. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </para>
        <note type="note"> For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</note>
        <para>Not Yet Implemented. </para>
      </param>
      <param name="names">The method name or names.</param>
      <param name="state">A binder-provided object that keeps track of argument reordering. The <paramref name="state" /> parameter is a cookie that was passed to <see langword="BindToMethod" /> and represents an opaque object. The binder creates this object, and the binder is the sole consumer of this object. If <paramref name="state" /> is not <see langword="null" /> when <see langword="BindToMethod" /> returns, the runtime calls <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> .</param>
      <returns>
        <para> A <see cref="T:System.Reflection.MethodBase" />
object containing
the matching method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>
        <para> Selects a field from
      the given set of fields, based on the specified criteria.
      </para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators. </param>
      <param name="match">The set of fields Reflection has determined to be a possible match, typically because they have the correct member name. </param>
      <param name="value">The field value used to locate a matching field. </param>
      <param name="culture">
        <para>An instance of <see cref="T:System.Globalization.CultureInfo" /> used to control the coercion of data types. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </para>
        <note type="note"> For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</note>
      </param>
      <returns>
        <para> A <see cref="T:System.Reflection.FieldInfo" />
object containing the
matching field.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Selects a method from
      the given set of methods, based on the argument type.</para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators.</param>
      <param name="match">The set of methods Reflection has determined to be a possible match, typically because they have the correct member name.</param>
      <param name="types">The value used to locate a matching method.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodBase" /> object containing the matching method, if
   found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para> Selects a property
      from the given set of properties, based on the specified criteria.
      </para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators. </param>
      <param name="match">The set of properties Reflection has determined to be a possible match, typically because they have the correct member name. </param>
      <param name="returnType">The return value the matching property must have. </param>
      <param name="indexes">The index types of the property being searched for. Used for index properties such as the indexer for a class. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. </param>
      <returns>
        <para> A <see cref="T:System.Reflection.PropertyInfo" />
object containing
the matching property.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>
        <para> Changes the
      type of the given <see langword="Object " />to the given <see langword="Type" />
      .
      </para>
      </summary>
      <param name="value">The value to change into a new <see langword="Type" /> . </param>
      <param name="type">The new <see langword="Type" /> that <paramref name="value" /> will become. </param>
      <param name="culture">
        <para>An instance of <see cref="T:System.Globalization.CultureInfo" /> used to control the coercion of data types. If <paramref name="culture" /> is <see langword="null" /> , the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</para>
        <note type="note"> For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</note>
      </param>
      <returns>
        <para> An <see langword="Object " />
containing the
given value as the new type.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>
        <para>Upon returning from <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> , restores the
<paramref name="args " />argument to what it was when it came from <see langword="BindToMethod" /> .</para>
      </summary>
      <param name="args">The actual arguments passed in. Both the types and values of the arguments can be changed.</param>
      <param name=" state">A binder-provided object that keeps track of argument reordering.</param>
    </member>
    <member name="T:System.Runtime.Serialization.IObjectReference">
      <summary>
        <para>Indicates that the current interface implementer is a reference to
      another object.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Returns the real object that should be deserialized, rather than
      the object that the serialized stream specifies.</para>
      </summary>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> from which the current object is deserialized.</param>
      <returns>
        <para>Returns the actual object that is put into
      the graph.</para>
      </returns>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>
        <para> The exception that is thrown when there is an attempt to divide an integral or decimal
      value by zero.</para>
      </summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DivideByZeroException" /> 
   class. </para>
      </summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DivideByZeroException" />
class<see langword=" " />
with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DivideByZeroException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DivideByZeroException" />
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Double">
      <summary>
        <para> Represents a double-precision floating point number.</para>
      </summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>
        <para> Represents the smallest possible value of
 a <see cref="T:System.Double" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>
        <para> Represents the largest possible value of a <see cref="T:System.Double" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>
        <para> Represents the smallest positive <see cref="T:System.Double" /> greater than 
 zero. This
 field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>
        <para> Represents negative infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>
        <para> Represents positive infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>
        <para> Represents a value that is not a number
 (<see langword="NaN" />). This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>
        <para> Returns a value indicating whether the specified
 number evaluates to negative or positive infinity</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d " /> evaluates to <see cref="F:System.Double.PositiveInfinity" />
or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to positive infinity.</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to negative infinity.</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>
        <para>Returns a value indicating whether the specified number evaluates to a value that is
 not a number (<see cref="F:System.Double.NaN" />).</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d " />evaluates to <see cref="F:System.Double.NaN" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> A
 negative
 integer</term>
            <description>
              <para>This instance is less than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a
 number.</para>
            </description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <para>This instance is equal to <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance and value are
 both <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" /></para>
            </description>
          </item>
          <item>
            <term> A positive integer</term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
<see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string 
 representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value
 of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containinga number to convert.</param>
      <returns>
        <para>A double-precision floating point number equivalent to the
 numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a specified style to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified culture-specific format to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containinga number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containinga number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containing a numberto convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name=" result">A double-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />. If the return value is <see langword="false" />, <paramref name="result" /> is set to zero.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="s" /> is converted
 successfully; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Double" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.DuplicateWaitObjectException">
      <summary>
        <para>The exception that is thrown when an object appears more
      than once in an array of synchronization objects.</para>
      </summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DuplicateWaitObjectException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DuplicateWaitObjectException" /> class with the name
      of the parameter that causes this exception.</para>
      </summary>
      <param name="parameterName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DuplicateWaitObjectException" /> class with a
      specified error message and the name of
      the parameter that causes this exception.</para>
      </summary>
      <param name="parameterName">The name of the parameter that caused the exception.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DuplicateWaitObjectException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="F:System.Empty.Value">
      <summary>
        <para>
       Represents the sole instance of the <see cref="T:System.Empty" />
       class.
    </para>
      </summary>
    </member>
    <member name="M:System.Empty.ToString">
      <summary>
        <para>
       Returns a String with zero length.
    </para>
      </summary>
      <returns>
        <para>
       An
       empty string ("").
    </para>
      </returns>
    </member>
    <member name="M:System.Empty.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
       Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data
       needed to serialize the <see cref="T:System.Empty" /> object.
    </para>
      </summary>
      <param name="info">
    A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing information required to serialize the <see cref="T:System.Empty" /> object.
 </param>
      <param name="context">
    A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Empty" /> object.
 </param>
      <returns>
        <para>
       None.
    </para>
      </returns>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>
        <para>The exception that is thrown when an attempt to load a class fails
      due to the absence of an entry method.</para>
      </summary>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>
        <para>The exception that is thrown when type-loading failures occur.</para>
      </summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the class name, method name, resource ID, and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>
        <para> Gets the error message for this exception.</para>
      </summary>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>
        <para>Gets the fully qualified name of the type that causes the exception.</para>
      </summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>
        <para> The exception that is thrown when a DLL specified in a DLL import
      cannot be found.</para>
      </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" />
class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" />
    		class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Environment">
      <summary>
        <para> Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>
        <para>Terminates this process and gives the underlying operating system the specified exit code.</para>
      </summary>
      <param name="exitCode">Exit code to be given to the operating system.</param>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>
        <para>Replaces the name of each environment variable embedded
 in the specified string with the string equivalent
 of the value of the variable, then returns the resulting string.</para>
      </summary>
      <param name="name">A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</param>
      <returns>
        <para>A string 
 with each environment variable replaced by its value.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>
        <para>Returns a string 
 array containing the command line arguments for the current
 process.</para>
      </summary>
      <returns>
        <para> An array of string where each element contains a command
 line argument. The first element is the executable file name, and the following zero or more elements
 contain the remaining command line arguments.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>
        <para>Returns the value of
 the specified environment variable.</para>
      </summary>
      <param name="variable">A string containing the name of an environment variable.</param>
      <returns>
        <para>A string containing the value of <paramref name="variable" />, or <see langword="null" /> if <paramref name="variable" /> is not found.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>
        <para> Returns
      all environment variables and their values.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Collections.IDictionary" />, containing all environment variables and
   their values, or <see langword="null" /> if
   the system does not
   support environment variables.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>
        <para>Returns an array of string containing the names of the logical drives on the current
 computer.</para>
      </summary>
      <returns>
        <para> An array of string where each element contains the
 name of a logical drive. For example, if the computer's hard drive is the
 first logical drive, the first element returned is "C:\".</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>
        <para>Gets the path to the system special folder identified by
      the specified enumeration.</para>
      </summary>
      <param name="folder">An enumerated constant that identifies a system special folder.</param>
      <returns>
        <para>The path to the specified system special folder.</para>
      </returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>
        <para> Gets the number of milliseconds elapsed since the system
      started.</para>
      </summary>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>
        <para>Gets or sets the exit code of the process.</para>
      </summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>
        <para> Gets the command line for this process.</para>
      </summary>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>
        <para>Gets and sets the fully qualified path of the current directory;
 that is, the directory from which this process starts.</para>
      </summary>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>
        <para>Gets the fully qualified path of the system directory.</para>
      </summary>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>
        <para>Gets the NetBIOS name of this local computer.</para>
      </summary>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>
        <para> Gets the newline string defined for this environment.</para>
      </summary>
    </member>
    <member name="P:System.Environment.Version">
      <summary>
        <para> Gets a <see cref="T:System.Version" />
object that describes the major, minor, build, and revision numbers of the
common language runtime.</para>
      </summary>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>
        <para> Gets the amount of physical memory mapped to
      the process context.</para>
      </summary>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>
        <para>Gets an <see cref="T:System.OperatingSystem" /> object that contains the current platform identifier and version number.</para>
      </summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>
        <para> Gets current stack trace information.</para>
      </summary>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>
        <para> Indicates whether the common
      language runtime is shutting down.</para>
      </summary>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>
   Gets the user name of the person who started the current thread.
</summary>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>
        <para>Gets a value indicating whether the current process is
      running in user interactive mode.</para>
      </summary>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>
        <para> Gets the network domain name associated with the current user.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>
        <para> The directory that serves as a
      common repository for application-specific data for the current roaming user.</para>
        <para>A roaming user works on more than one computer on a
      network. A roaming user's profile is kept on a server on the network and is
      loaded onto a system when the user logs on.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>
        <para> The directory that serves as a 
      common repository for application-specific data that is used by all users.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>
        <para> The directory that serves as
      a common repository for application-specific data that is used by the current, non-roaming user.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>
        <para> The directory that serves as a
 common repository for Internet cookies.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>
        <para> The directory that serves as a 
      common repository for the user's favorite items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>
        <para> The directory that serves as a 
      common repository for Internet history items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>
        <para> The directory that serves as 
      a common repository for temporary Internet files.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>
        <para> The directory that contains the 
      user's program groups. </para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>
        <para> The directory that contains the 
      user's most recently used documents. </para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>
        <para> The directory that contains the
      Send To menu items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>
        <para> The directory that contains 
      the Start menu items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>
        <para> The directory that corresponds to the user's Startup program group.</para>
        <para> The system starts these programs whenever a user logs on or
      starts Windows NT or later, or starts Windows 98.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>
        <para> The System directory.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>
        <para> The directory that serves as 
      a common repository for document templates.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>
        <para> The directory
      used to physically store file objects on the desktop.</para>
        <para> Do not confuse this directory with the desktop folder itself, which
      is a virtual folder.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>
        <para> The directory that serves as 
      a common repository for documents.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>
        <para> The program files directory.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>
        <para> The directory for components that are shared 
      across applications.</para>
      </summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>
        <para>Represents the method that will handle the event that has no event data.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>
        <para>The exception that is thrown when there is an illegal attempt to access a private or
      protected field inside a class.</para>
      </summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.FieldAccessException" /> class.
</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.FieldAccessException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FieldAccessException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>
        <para> Indicates that an enumeration can be treated as
      a bit field; that is, a set of flags.</para>
      </summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.
   </para>
      </summary>
    </member>
    <member name="T:System.FormatException">
      <summary>
        <para>The exception that is thrown when the format of an argument
      does not meet the parameter specifications of the invoked method.</para>
      </summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.FormatException" /> class.
</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FormatException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FormatException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FormatException" /> class
   with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.GC">
      <summary>
        <para>Controls the system garbage collector, a service that automatically
      reclaims unused memory.</para>
      </summary>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>
        <para>Returns the current generation number of the specified object.</para>
      </summary>
      <param name=" obj">The object for which generation information is retrieved.</param>
      <returns>
        <para>The current generation number of <paramref name="obj" />.</para>
      </returns>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>
        <para>Forces garbage collection from generation zero through a specified
      generation.</para>
      </summary>
      <param name=" generation">The maximum garbage-collected generation.</param>
    </member>
    <member name="M:System.GC.Collect">
      <summary>
        <para>Forces garbage collection of all generations.</para>
      </summary>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>
        <para>References the specified object, making it ineligible for garbage collection
      from the start of the current routine to the point where this method is
      called.</para>
      </summary>
      <param name=" obj">The object to reference.</param>
    </member>
    <member name="M:System.GC.GetGeneration(System.WeakReference)">
      <summary>
        <para>Returns the current generation number of the target of a specified weak
      reference.</para>
      </summary>
      <param name=" wo">The weak reference of a target.</param>
      <returns>
        <para>The current generation number of the target of <paramref name="wo" />.</para>
      </returns>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>
        <para>Suspends the current thread until the thread processing the queue of
      finalizers has emptied that queue.</para>
      </summary>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>
        <para>Requests that the system not call the finalizer method for the specified
      object.</para>
      </summary>
      <param name="obj">The object for which a finalizer must not be called.</param>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>
        <para>Requests that the system call the finalizer method for the
      specified object, for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</para>
      </summary>
      <param name=" obj">The object for which a finalizer must be called.</param>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>
        <para>Retrieves the number of bytes currently thought to be
      allocated. A parameter indicates whether this method can wait a short interval before returning while the system collects garbage
      and finalizes objects.</para>
      </summary>
      <param name="forceFullCollection">A Boolean value that, if <see langword="true" />, indicates this method can wait awhile for garbage collection before returning.</param>
      <returns>
        <para>A number that is the best available approximation of the number of bytes
      currently allocated in managed memory.</para>
      </returns>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>
        <para>Gets the maximum number of generations the system currently supports.</para>
      </summary>
    </member>
    <member name="T:System.Guid">
      <summary>
        <para>Represents a globally unique identifier (GUID).</para>
      </summary>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified array of bytes.</para>
      </summary>
      <param name="b">A 16 element byte array containing values with which to initialize the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified unsigned integers and bytes.</para>
      </summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The next byte of the GUID.</param>
      <param name="e">The next byte of the GUID.</param>
      <param name="f">The next byte of the GUID.</param>
      <param name="g">The next byte of the GUID.</param>
      <param name="h">The next byte of the GUID.</param>
      <param name="i">The next byte of the GUID.</param>
      <param name="j">The next byte of the GUID.</param>
      <param name="k">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Guid" /> class
   using the value represented by the specified string.</para>
      </summary>
      <param name="g">
        <para>A <see langword="String" /> that contains a GUID in the following format: hexadecimal digits are arranged in groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The GUID can optionally be enclosed in matching braces. For example: dddddddd-dddd-dddd-dddd-dddddddddddd or {dddddddd-dddd-dddd-dddd-dddddddddddd}.</para>
        <para>Alternatively, the following format is permitted: {0xdddddddd,0xdddd, 0xdddd,{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd}}, where d is a hexadecimal digit. If this format is used, all brackets and commas indicated are required, and all numbers must be prefixed with "0x" as shown. Fewer hexadecimal digits than shown can be used, but no more. </para>
      </param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the
   specified integers and byte array.</para>
      </summary>
      <param name=" a">The first 4 bytes of the GUID.</param>
      <param name=" b">The next 2 bytes of the GUID.</param>
      <param name=" c">The next 2 bytes of the GUID.</param>
      <param name=" d">The remaining 8 bytes of the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the
   specified integers and bytes.</para>
      </summary>
      <param name=" a">The first 4 bytes of the GUID.</param>
      <param name=" b">The next 2 bytes of the GUID.</param>
      <param name=" c">The next 2 bytes of the GUID.</param>
      <param name=" d">The next byte of the GUID.</param>
      <param name=" e">The next byte of the GUID.</param>
      <param name=" f">The next byte of the GUID.</param>
      <param name=" g">The next byte of the GUID.</param>
      <param name=" h">The next byte of the GUID.</param>
      <param name=" i">The next byte of the GUID.</param>
      <param name=" j">The next byte of the GUID.</param>
      <param name=" k">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>
        <para>Returns a 16-element byte array that contains the value of the GUID.</para>
      </summary>
      <returns>
        <para>A 16-element byte array.</para>
      </returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>
        <para>Returns a <see langword="String" /> representation of the value of this 
    instance in Registry format.</para>
      </summary>
      <returns>
        <para>A <see langword="String" /> formatted in this pattern:</para>
        <para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para>
        <para>where the value of the GUID is represented as a series of lower-case 
    hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by
    hyphens. An example of a return value is
    "382c74c3-721d-4f34-80e5-57657b6cbc27".</para>
      </returns>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>The hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified 
       object.</para>
      </summary>
      <param name="o">The object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="o" /> is a <see langword="Guid" /> that has the 
    same value as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> A negative integer</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> A positive integer</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>
        <para>Returns an indication whether the values of two specified <see langword="Guid" /> objects
   are equal.</para>
      </summary>
      <param name="a">A <see langword="Guid" /> object.</param>
      <param name=" b">A <see langword="Guid" /> object.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="a " />and <paramref name="b " />are
   equal; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>
        <para>Returns an indication whether the values of two specified <see langword="Guid" /> objects are not equal.</para>
      </summary>
      <param name="a">A <see langword="Guid" /> object.</param>
      <param name="b">A <see langword="Guid" /> object.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="a " />and <paramref name="b " />are not equal; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>
        <para>Initializes a new instance of the <see langword="Guid" /> class.</para>
      </summary>
      <returns>
        <para>A new <see langword="Guid" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>
        <para>Returns a <see langword="String" /> representation of the value of this 
 <see langword="Guid" /> instance, according to the provided format specifier.</para>
      </summary>
      <param name=" format">A <see langword="String" /> containing a single format specifier character indicating how the GUID value should be formatted.</param>
      <returns>
        <para>A <see cref="T:System.String" /> 
 representation of the value of this <see langword="Guid" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a <see langword="String" /> representation of the value of this
   instance of the <see langword="Guid" /> class, according to the provided format
   specifier and culture-specific format information.</para>
      </summary>
      <param name=" format">A <see langword="String" /> containing a single format specifier character indicating how the GUID value should be formatted.</param>
      <param name=" provider">(Reserved) An <see langword="IFormatProvider" /> reference that supplies culture-specific formatting services.</param>
      <returns>
        <para>A <see cref="T:System.String" />
representation of the value of this <see langword="Guid" /> instance.</para>
      </returns>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>
        <para> Represents the status
      of an asynchronous operation.
      </para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>
        <para> Gets an indication
 whether the asynchronous operation has completed.
 </para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>
        <para> Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation
 to complete.</para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>
        <para> Gets a user-defined object that qualifies or contains information about
 an asynchronous operation.
 </para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>
        <para> Gets an indication of whether the asynchronous operation completed synchronously.
      </para>
      </summary>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>
        <para> Defines a method that supports custom, user-defined formatting of the value of an object.
 </para>
      </summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of a specified object to an
 equivalent string representation
 using specified format and culture-specific formatting information.
 </para>
      </summary>
      <param name="format">A format string containing formatting specifications. </param>
      <param name="arg"> An object to format. </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies format information about the current instance.</param>
      <returns>
        <para>The string representation of the value of <paramref name="arg" />,
 formatted as specified by
<paramref name="format" /> and <paramref name="formatProvider" />.</para>
      </returns>
    </member>
    <member name="T:System.IDisposable">
      <summary>
        <para>Defines a method to release allocated unmanaged resources.</para>
      </summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>
        <para>Performs application-defined tasks associated with freeing, releasing, or
      resetting unmanaged resources.</para>
      </summary>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>
        <para>Provides a mechanism for retrieving an object to control
      formatting.</para>
      </summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>
        <para>Gets an object that provides formatting services for the specified type.</para>
      </summary>
      <param name="formatType">An object that specifies the type of format object to get.</param>
      <returns>
        <para>A format object of type <paramref name="formatType" />.</para>
        <para>-or-</para>
        <para>A format object for the current culture if no format
   object is available or <paramref name="formatType" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>
        <para>The exception that is thrown when an attempt is made to
      access an element of an array with an index that is outside
      the bounds of the array. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Int16">
      <summary>
        <para>Represents a 16-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>
        <para>Represents the largest possible value of an <see cref="T:System.Int16" />. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.Int16" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int16" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance,
 consisting of a minus sign if the value is negative, and a sequence of digits
 ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name=" format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and
 culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 16-bit
 signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert.</param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its 16-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicates the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified culture-specific format to its 16-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style and culture-specific format to its 16-bit signed integer
 equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int16" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Int16" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Int32">
      <summary>
        <para> Represents a 32-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>
        <para>Represents the largest possible value of an <see cref="T:System.Int32" />. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.Int32" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int32" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 32-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicates the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number
 specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style and culture-specific format to its 32-bit signed integer
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicates the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int32" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Int32" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Int64">
      <summary>
        <para> Represents a 64-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>
        <para> Represents the largest possible value of an <see langword="Int64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>
        <para> Represents the smallest possible value of an <see langword="Int64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance,
 consisting of a minus sign if the value is negative, and a sequence of digits
 ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name=" format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and
 culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 64-bit
 signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its 64-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified culture-specific format to its 64-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style and culture-specific format to its 64-bit signed integer
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Int64" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.IntPtr">
      <summary>
        <para> A platform-specific type that is used to represent
      a pointer or a handle.</para>
      </summary>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>
        <para>A read-only field that represents a pointer or handle that has been initialized to zero.</para>
      </summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.IntPtr" /> using
   the specified 32-bit pointer or handle.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 32-bit signed integer.</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 64-bit signed integer.</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified
   pointer to an unspecified type.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>
        <para>Converts the value of this instance to a 32-bit signed integer.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>
        <para>Converts the value of this instance to a 64-bit signed integer.</para>
      </summary>
      <returns>
        <para> A 64-bit signed integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
      equivalent string representation.</para>
      </summary>
      <returns>
        <para>The string 
      representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>
        <para>Converts the value of a 32-bit signed integer to an
   <see cref="T:System.IntPtr" />.</para>
      </summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>
        <para>Converts the value of a 64-bit signed integer to an
   <see cref="T:System.IntPtr" />.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>
        <para> Converts the specified pointer to an unspecified type to an
   <see cref="T:System.IntPtr" />.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>
        <para>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.</para>
      </summary>
      <param name="value">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.</para>
      </summary>
      <param name="value">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.</para>
      </summary>
      <param name="value">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.</para>
      </summary>
      <param name="value1">An <see cref="T:System.IntPtr" />.</param>
      <param name=" value2">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.</para>
      </summary>
      <param name="value1">An <see cref="T:System.IntPtr" />.</param>
      <param name=" value2">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>
        <para> Converts the value of this instance to a pointer to an 
      unspecified type.</para>
      </summary>
      <returns>
        <para>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an 
   unspecified type. </para>
      </returns>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>
        <para>Gets the size of this instance.</para>
      </summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>
        <para>The exception that is thrown for invalid casting or explicit
      conversion.</para>
      </summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.InvalidCastException" /> class.
</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidCastException" /> class with
      a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidCastException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>
        <para> The exception that is thrown when a method call is invalid for the object's current
      state.</para>
      </summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.InvalidOperationException" /> class.
</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidOperationException" /> class with
      a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidOperationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>
        <para> The exception that is thrown when a program contains invalid Microsoft intermediate
      language (MSIL) or metadata. Generally this indicates a bug in a
      compiler.</para>
      </summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidProgramException" />
   class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidProgramException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidProgramException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>
        <para>Defines a mechanism for retrieving a service object;
      that is, an object that provides custom support to other objects.</para>
      </summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>
        <para>Gets the service object of the specified type.</para>
      </summary>
      <param name="serviceType">
        <para>An object that specifies the type of service object to get.</para>
      </param>
      <returns>
        <para>A service object of type <paramref name="serviceType" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if there is no service object of type <paramref name="serviceType" />.</para>
      </returns>
    </member>
    <member name="T:System.LocalDataStoreSlot">
      <summary>
        <para>Encapsulates a memory slot to store local data. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>
        <para>Releases the memory slot reserved by an object when the object no longer exists.</para>
      </summary>
    </member>
    <member name="T:System.Math">
      <summary>
        <para>Provides constants and static methods for trigonometric, logarithmic,
       and other common mathematical functions.</para>
      </summary>
    </member>
    <member name="F:System.Math.PI">
      <summary>
        <para>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, (pi).</para>
      </summary>
    </member>
    <member name="F:System.Math.E">
      <summary>
        <para> Represents the natural logarithmic base, specified by the 
      constant, <see langword="e" />.</para>
      </summary>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>
        <para> 
       Returns the angle whose cosine is the specified number.</para>
      </summary>
      <param name="d">A number representing a cosine, where -1 (&lt;=) d (&lt;=) 1.</param>
      <returns>
        <para> An angle, q, measured in radians, such that 0 (&lt;=) q 
       (&lt;=
       ) (pi)</para>
        <para> -or-</para>
        <para>
          <see cref="F:System.Double.NaN" />
 if d &lt; -1 or d &gt; 1.</para>
      </returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>
        <para>Returns the angle whose sine is the specified number.</para>
      </summary>
      <param name="d">A number representing a sine, where -1 (&lt;=) d (&lt;=) 1.</param>
      <returns>
        <para>An angle, q, measured in radians, such that -(pi)/2 (&lt;=) q (&lt;=) 
       (pi)/2</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Double.NaN" /> 
 if d &lt; -1 or d &gt; 1.</para>
      </returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>
        <para> Returns the
      angle whose tangent is the specified number.</para>
      </summary>
      <param name="d">A number representing a tangent.</param>
      <returns>
        <para>An angle, q, measured in radians, such that -(pi)/2 (&lt;=) q (&lt;= ) 
      (pi)/2.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Double.NaN" /> if 
<paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -(pi)/2 rounded to double precision (-1.5707963267949) 
   if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or (pi)/2 rounded to double precision
   (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>
        <para> Returns the angle whose tangent is the quotient of two
      specified numbers.</para>
      </summary>
      <param name="y">The y coordinate of a point.</param>
      <param name="x">The x coordinate of a point.</param>
      <returns>
        <para> An angle, q, measured in radians, such that -(pi) &lt; q (&lt;=)
      (pi), and tan(q) = <paramref name="y" />/<paramref name="x" />, where
      (<paramref name="x" />,<paramref name="y" />) is a point in the Cartesian plane. Observe the following:</para>
        <list type="bullet">
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 1, 0 &lt; q &lt; (pi)/2.</term>
          </item>
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 2, (pi)/2 &lt; q (&lt;=) (pi).</term>
          </item>
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 3, -(pi) &lt; q &lt; -(pi)/2.</term>
          </item>
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 4, -(pi)/2 &lt; q &lt; 0.</term>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>
        <para> Returns the cosine of the specified angle.</para>
      </summary>
      <param name="d">An angle, measured in radians.</param>
      <returns>
        <para>The cosine of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>
        <para> Returns the sine of the specified angle.</para>
      </summary>
      <param name="a">An angle, measured in radians.</param>
      <returns>
        <para>The sine of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
   or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>
        <para> Returns the tangent of the specified angle.</para>
      </summary>
      <param name="a">An angle, measured in radians.</param>
      <returns>
        <para>The tangent of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
   or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>
        <para>Returns the hyperbolic cosine of the specified angle.</para>
      </summary>
      <param name="value">An angle, measured in radians.</param>
      <returns>
        <para>The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal
   to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />,
<see cref="F:System.Double.NaN" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>
        <para>Returns the hyperbolic sine of the specified angle.</para>
      </summary>
      <param name=" value">An angle, measured in radians.</param>
      <returns>
        <para>The hyperbolic sine of <paramref name="value" />.
   If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />,
<see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>
        <para>Returns the hyperbolic tangent of the specified angle.</para>
      </summary>
      <param name=" value">An angle, measured in radians.</param>
      <returns>
        <para>The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to
<see cref="F:System.Double.NegativeInfinity" />, this method returns -1. If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns 
<see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>
        <para> Returns the whole number nearest the
      specified value.</para>
      </summary>
      <param name="a">A double-precision floating-point number to be rounded.</param>
      <returns>
        <para> The
      whole number nearest <paramref name="a" />. If <paramref name="a" /> is halfway between two whole numbers, one of which by definition is even and the other odd, then the even number is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>
        <para> Returns the number with the specified precision nearest the
      specified value.</para>
      </summary>
      <param name="value">A double-precision floating-point number to be rounded.</param>
      <param name=" digits">The number of significant fractional digits (precision) in the return value.</param>
      <returns>
        <para> The number nearest <paramref name="value" />
with precision equal to <paramref name="digits" />. If <paramref name="value" /> is halfway between two numbers, one of
which is even and the other odd, then the even number is returned. If the
precision of <paramref name="value" /> is less than <paramref name="digits" />, then <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>
        <para> Returns the whole number nearest the
      specified value.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> number to be rounded.</param>
      <returns>
        <para> The whole number nearest parameter <paramref name="d" />. If <paramref name="d" /> is halfway between two whole numbers, one of which by definition is even and the other odd, then the even number is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>
        <para> Returns the number with the specified precision nearest the
      specified value.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> number to be rounded.</param>
      <param name=" decimals">The number of significant fractional digits (precision) in the return value.</param>
      <returns>
        <para> The number nearest <paramref name="d" />
with precision equal to <paramref name="decimals" />. If <paramref name="d" /> is halfway between two numbers, one of
which is even and the other odd, then the even number is returned. If the
precision of <paramref name="d" /> is less than <paramref name="decimals" />, then <paramref name="d" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>
        <para> Returns the smallest whole number greater than or equal to the specified
      number.</para>
      </summary>
      <param name="a">A number.</param>
      <returns>
        <para> The smallest whole number greater than or
      equal to <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
      or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>
        <para> Returns the largest whole number less than or equal
      to the specified number.</para>
      </summary>
      <param name="d">A number.</param>
      <returns>
        <para> The largest whole number
      less than or equal to <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
      or <see cref="F:System.Double.PositiveInfinity" />, then that value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>
        <para>Returns the square root of a specified number.</para>
      </summary>
      <param name="d">A number.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value of <paramref name="d" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Zero, or positive</term>
            <description>The positive square root of <paramref name="d" />.</description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="d" /> is equal
to <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>
        <para>Returns the natural (base <see langword="e" />
) logarithm of a specified number.</para>
      </summary>
      <param name="d">A number whose logarithm is to be found. </param>
      <returns>
        <list type="table">
          <listheader>
            <term>Sign of <paramref name="d" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Positive</term>
            <description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d," />
   or log<subscript term="e" /><paramref name="d" /></description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />
            </description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, returns <see cref="F:System.Double.NaN" />. If <paramref name="d" /> is equal to
<see cref="F:System.Double.PositiveInfinity" />, returns <see cref="F:System.Double.PositiveInfinity" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>
        <para>Returns the base 10 logarithm of a specified number.</para>
      </summary>
      <param name="d">A number whose logarithm is to be found. </param>
      <returns>
        <list type="table">
          <listheader>
            <term>Sign of <paramref name="d" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Positive</term>
            <description>The base 10 log of <paramref name="d" />; that is, log<subscript term="10" /><paramref name="d" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />
            </description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, thsi method returns
<see cref="F:System.Double.NaN" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.PositiveInfinity" />, this method 
returns <see cref="F:System.Double.PositiveInfinity" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>
        <para>Returns <see langword="e " /> raised to the
   specified power.</para>
      </summary>
      <param name="d">A number specifying a power.</param>
      <returns>
        <para> The number <see langword="e " /> raised to the power <paramref name="d" />. If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />,
   that value is returned. If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>
        <para>Returns a specified number raised to the specified power.</para>
      </summary>
      <param name="x">A number to be raised to a power.</param>
      <param name="y">A number that specifies a power.</param>
      <returns>
        <para> The number <paramref name="x" /> raised to the power <paramref name="y" />. The following table specifies the results if <paramref name="x" /> or <paramref name="y" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
   or <see cref="F:System.Double.PositiveInfinity" />.</para>
        <list type="table">
          <listheader>
            <term>Parameter Values</term>
            <description>Returns</description>
          </listheader>
          <item>
            <term>
              <paramref name="x" /> or <paramref name="y" /> is equal to Double.NaN</term>
            <description>
              <para>
                <see cref="F:System.Double.NaN" />.</para>
            </description>
          </item>
          <item>
            <term>
              <paramref name="x" /> is equal to Double.NegativeInfinity</term>
            <description>
              <see cref="F:System.Double.NegativeInfinity" /> if <paramref name="y" /> is
an odd integer; otherwise, <see cref="F:System.Double.PositiveInfinity" />.</description>
          </item>
          <item>
            <term>
              <paramref name="y" /> is equal to Double.NegativeInfinity</term>
            <description>0.</description>
          </item>
          <item>
            <term>
              <paramref name="x" /> is equal to Double.PositiveInfinity</term>
            <description>0 if <paramref name="y" /> is equal to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see cref="F:System.Double.PositiveInfinity" />
.</description>
          </item>
          <item>
            <term>
              <paramref name="y" /> is equal to Double.PositiveInfinity</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>
        <para>Returns the remainder resulting from the division of a
      specified number by another specified number.</para>
      </summary>
      <param name="x">A dividend.</param>
      <param name="y">A divisor.</param>
      <returns>
        <para> A number equal to <paramref name="x" /> -
   (<paramref name="y" />Q), where Q is the quotient
   of <paramref name="x" />/<paramref name="y" /> rounded to the
   nearest integer (if <paramref name="x" />/<paramref name="y" /> falls
   halfway between two integers, the even
   integer is returned).</para>
        <para> If <paramref name="x" /> - (<paramref name="y" />Q) is zero, the value +0 is returned if
<paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative. </para>
        <para> If <paramref name="y" /> = 
0, <see cref="F:System.Double.NaN" /> (Not-A-Number) is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>
        <para> Returns the absolute value of an 8-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.SByte.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.SByte.MaxValue" />.</param>
      <returns>
        <para>An 8-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.SByte.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>
        <para> Returns the absolute value of a 16-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Int16.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Int16.MaxValue" />.</param>
      <returns>
        <para>A 16-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Int16.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>
        <para> Returns the absolute value of a 32-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Int32.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Int32.MaxValue" />.</param>
      <returns>
        <para>A 32-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Int32.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>
        <para> Returns the absolute value of a 64-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Int64.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Int64.MaxValue" />.</param>
      <returns>
        <para>A 64-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Int64.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>
        <para> Returns the absolute value of a single-precision floating-point
      number.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Single.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Single.MaxValue" />.</param>
      <returns>
        <para>A single-precision floating-point number,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Single.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>
        <para> Returns the absolute value of a double-precision floating-point
      number.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Double.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Double.MaxValue" />.</param>
      <returns>
        <para>A double-precision floating-point number,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Double.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>
        <para> Returns the absolute value of a <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">
        <para>A number in the range <see cref="F:System.Decimal.MinValue" /> (&lt;=) value (&lt;=) <see cref="F:System.Decimal.MaxValue" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.Decimal" />, x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Decimal.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>
        <para>Returns the larger of two 8-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>
        <para> Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>
        <para>Returns the larger of two 8-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>
        <para>Returns the larger of two 16-bit signed integers.</para>
      </summary>
      <param name=" val1">The first of two 16-bit signed integers to compare.</param>
      <param name=" val2">The second of two 16-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>
        <para>Returns the larger of two 16-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>
        <para>Returns the larger of two 32-bit signed integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit signed integers to compare.</param>
      <param name="val2">The second of two 32-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>
        <para>Returns the larger of two 32-bit unsigned integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>
        <para>Returns the larger of two 64-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit signed integers to compare.</param>
      <param name="val2">The second of two 64-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>
        <para>Returns the larger of two 64-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>
        <para>Returns the larger of two single-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Single.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal
   to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned. </para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>
        <para>Returns the larger of two double-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Double.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal to
<see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns the larger of two decimal
      numbers.</para>
      </summary>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>
        <para>Returns the smaller of two 8-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit signed integers to compare.</param>
      <param name="val2">The second of two 8-bit signed integers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>
        <para>Returns the smaller of two 8-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>
        <para>Returns the smaller of two 16-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 16-bit signed integers to compare.</param>
      <param name="val2">The second of two 16-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>
        <para>Returns the smaller of two 16-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>
        <para>Returns the smaller of two 32-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit signed integers to compare.</param>
      <param name="val2">The second of two 32-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>
        <para>Returns the smaller of two 32-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>
        <para>Returns the smaller of two 64-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit signed integers to compare.</param>
      <param name="val2">The second of two 64-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>
        <para>Returns the smaller of two 64-bit unsigned integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>
        <para>Returns the smaller of two single-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Single.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal
   to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned. </para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>
        <para>Returns the smaller of two double-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Double.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal
   to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns the smaller of two decimal
      numbers.</para>
      </summary>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />,  whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>
        <para>Returns the
      logarithm of a specified number in a specified base.</para>
      </summary>
      <param name="a">A number whose logarithm is to be found.</param>
      <param name="newBase">The base of the logarithm.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Sign of <paramref name="a" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Positive</term>
            <description>The logarithm of <paramref name="a" />, in base, <paramref name="newBase" />; that is, log<subscript term="newBase" /><paramref name="a" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />
            </description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="a" /> is equal
to <see cref="F:System.Double.PositiveInfinity" /> and <paramref name="newBase" /> is not equal to <see cref="F:System.Double.PositiveInfinity" />,
<see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.PositiveInfinity" />. If <paramref name="newBase" /> is equal 
to <see cref="F:System.Double.PositiveInfinity" /> and <paramref name="a" /> is not equal to
<see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns 0. If both <paramref name="a" /> and <paramref name="newBase" /> are equal to <see cref="F:System.Double.PositiveInfinity" />, or <paramref name="a" /> or <paramref name="newBase" /> is equal 
to <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.NegativeInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>
        <para> Returns a value indicating the sign of an 8-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value." /></para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>
        <para>Returns a value indicating the sign of a 16-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>
        <para>Returns a value indicating the sign of a 32-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>
        <para>Returns a value indicating the sign of a 64-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>
        <para> Returns a value indicating the sign of a single-precision floating-point number.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than
      zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>
        <para> Returns a value indicating the sign of a double-precision floating-point number.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than
      zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>
        <para>Returns a value indicating the sign of a
      decimal number.</para>
      </summary>
      <param name="value">A signed <see cref="T:System.Decimal" /> number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than
      zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>
        <para>The exception that is thrown when there is an illegal attempt to access a private or protected method
      inside a class.</para>
      </summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.MethodAccessException" /> class, setting the <see cref="P:System.Exception.Message" /> 
   property of the new instance to a system-supplied message that describes the
   error, such as "Attempt to access the method failed." This message takes into
   account the current system culture.</para>
      </summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MethodAccessException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MethodAccessException" />
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>
        <para>The exception that is thrown when there is an attempt to dynamically access a
      field that does not exist.</para>
      </summary>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>
        <para>The exception that is thrown when there is an attempt to dynamically access a class member that
      does not exist.</para>
      </summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>
        <para>Initializes a new instance of the
      
   <see cref="T:System.MissingMemberException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
      
   <see cref="T:System.MissingMemberException" />
   
   class with a specified error message.
   </para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
      
   <see cref="T:System.MissingMemberException" />
   
   class
   with a specified error message and a
   reference to the inner exception that is the root cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">An instance of <see cref="T:System.Exception" /> that is the cause of the current <see langword="Exception" />. If <paramref name="inner" /> is not a null reference (<see langword="Nothing" /> in Visual Basic), then the current <see langword="Exception" /> is raised in a catch block handling <paramref name="inner" />.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            
            Initializes a new instance of the 
            
            <see cref="T:System.MissingMemberException" />
            
            
class with serialized data.
         
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.String)">
      <summary>
        <para>
            
            Initializes a new instance of the 
            
            <see cref="T:System.MissingMemberException" />
            
             class with the specified
   class name and member name.
         
         </para>
      </summary>
      <param name="className">The name of the class in which access to a nonexistent member was attempted.</param>
      <param name=" memberName">The name of the member that cannot be accessed.</param>
    </member>
    <member name="M:System.MissingMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            
             Sets the 
            
            <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            
             object
   with the class name, the member name, the
   signature of the missing member, and additional exception information.
         
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="F:System.MissingMemberException.ClassName">
      <summary>
        <para>
       Holds the class name of the missing member.
    </para>
      </summary>
    </member>
    <member name="F:System.MissingMemberException.MemberName">
      <summary>
        <para>
       Holds the name of the missing member.
    </para>
      </summary>
    </member>
    <member name="F:System.MissingMemberException.Signature">
      <summary>
        <para>Holds the signature of the missing member.</para>
      </summary>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>
        <para>Gets the text string showing the class name, the member name, and the 
      signature of the missing member. </para>
      </summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.MissingFieldException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingFieldException" />
   
   class with a specified error message.
   </para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingFieldException" />
   
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingFieldException" />
            
class with serialized data.
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.String)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingFieldException" />
             class with the specified 
   class name and field name.
         </para>
      </summary>
      <param name="className">The name of the class in which access to a nonexistent field was attempted.</param>
      <param name=" fieldName">The name of the field that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>
        <para>Gets the text string showing the signature of the missing
      field, the class name, and the field name. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>
        <para>The exception that is thrown when there is an attempt to dynamically access a
      method that does not exist.</para>
      </summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.MissingMethodException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingMethodException" />
   
   class with a specified error message.
   </para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingMethodException" />
   
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a<see langword="catch" />block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingMethodException" />
            
class with serialized data.
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.String)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingMethodException" />
             class with the specified 
   class name and method name.
         </para>
      </summary>
      <param name="className">The name of the class in which access to a nonexistent method was attempted.</param>
      <param name=" methodName">The name of the method that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>
        <para>Gets the text string showing the class name, the method
      name, and the signature of the missing method. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>
        <para>The exception that is thrown when there is an attempt to
      combine two instances of a non-combinable delegate type unless one of the
      operands is a null reference (<see langword="Nothing" /> in Visual Basic). This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class.
</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.NonSerializedAttribute">
      <summary>
        <para> Indicates that a field of a serializable class should not be serialized. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.NonSerializedAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NonSerializedAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>
        <para> The exception that is thrown when a floating-point value is positive infinity,
      negative infinity, or Not-a-Number (NaN).</para>
      </summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class.
</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" />
class with the invalid number.</para>
      </summary>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error
   message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" />
class with a specified error message and the invalid number.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message, the invalid
   number, and a reference to the inner exception that is root cause of this
   exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the invalid number and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.NotFiniteNumberException.OffendingNumber">
      <summary>
        <para> Gets the invalid number that is a positive infinity, a negative infinity, or Not-a-Number (NaN).</para>
      </summary>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>
        <para>The exception that is thrown when a
      requested method or operation is not implemented.</para>
      </summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" />
 class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> 
 class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" />
class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>
        <para> The exception that is thrown when an invoked method is
      not supported, or when there is an attempt to read, seek, or write to a stream that does not support
      the invoked functionality.</para>
      </summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" />
   property of the new instance to a system-supplied message that describes the
   error. This message takes into account the current system culture.
</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotSupportedException" />
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>
        <para> The exception that is thrown when there is an attempt
      to dereference a null object reference.</para>
      </summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class, setting the <see cref="P:System.Exception.Message" />
   property of the new instance to a system-supplied message that describes the
   error, such as "The value 'null' was found where an instance of an object was
   required." This message takes into account the current system culture.
</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>
        <para>The exception that is thrown when an operation is
      performed on a disposed object.</para>
      </summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a string
   containing the name of the disposed object.</para>
      </summary>
      <param name="objectName">A string containing the name of the disposed object.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with the specified
   object name and message.</para>
      </summary>
      <param name="objectName"> The name of the disposed object.</param>
      <param name=" message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with serialized 
   data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Retrieves the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name and 
   additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>
        <para>Gets the message that describes the error.</para>
      </summary>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>
        <para>Gets the name of the disposed object.</para>
      </summary>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>
        <para> Marks the program elements that are no longer in use. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with
   default properties.</para>
      </summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a
   specified workaround message.</para>
      </summary>
      <param name="message">The text string that describes alternative workarounds.</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a workaround message and a
   Boolean value indicating whether the obsolete element usage is considered an error.</para>
      </summary>
      <param name="message">The text string that describes alternative workarounds.</param>
      <param name="error">The Boolean value that indicates whether the obsolete element usage is considered an error.</param>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>
        <para>Gets the workaround message, including a description of the alternative program elements.</para>
      </summary>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>
        <para> Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program
      element as an error.</para>
      </summary>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>
        <para>Represents information about an operating system, such as the version and 
       platform identifier.</para>
      </summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>
        <para>Initializes a new instance of the <see langword="OperatingSystem" /> class, 
    using the specified platform identifier value and version object.</para>
      </summary>
      <param name=" platform">A <see cref="T:System.PlatformID" /> enumerated constant that indicates the operating system platform.</param>
      <param name=" version">A <see cref="T:System.Version" /> object that indicates the version of the operating system.</param>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>
        <para>Returns an <see langword="OperatingSystem" /> object that is identical to this 
    instance.</para>
      </summary>
      <returns>
        <para>An <see langword="OperatingSystem" /> object that is a copy of this 
    instance.</para>
      </returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent
   <see langword="String" /> representation. </para>
      </summary>
      <returns>
        <para>The format of the return value is:</para>
        <para>platform majorVersion.minorVersion.build.revision</para>
        <para>For example, if the operating sysem is Windows 2000, the
      return value is:</para>
        <para>"Microsoft Windows NT 5.0.2195.0".</para>
      </returns>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>
        <para>Gets a <see langword="PlatformID" /> value that identifies this operating 
    system platform.</para>
      </summary>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>
        <para>Gets a <see langword="Version" /> object that identifies this operating 
    system.</para>
      </summary>
    </member>
    <member name="T:System.OverflowException">
      <summary>
        <para>The exception that is thrown when an arithmetic, casting, or conversion operation in a checked
      context results in an overflow.</para>
      </summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.OverflowException" /> class.
</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OverflowException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OverflowException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OverflowException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>
        <para> Indicates that the method will allow a variable number of arguments in its invocation. This class cannot be inherited. </para>
      </summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default 
   properties. </para>
      </summary>
    </member>
    <member name="T:System.PlatformID">
      <summary>
        <para> 
       Describes the platforms supported by an assembly.</para>
      </summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>
        <para> The operating system is Win32s. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.</para>
      </summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>
        <para> The operating system is Windows 95 or later.</para>
      </summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>
        <para> The operating system is Windows NT or later.</para>
      </summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>
        <para>The exception that is thrown when a feature does not run
      on a particular platform.</para>
      </summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> 
 class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with
    a specified error message.</para>
      </summary>
      <param name="message">The text message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Random">
      <summary>
        <para> Represents
      a pseudo-random number generator, a device
      that produces a sequence of numbers that meet certain statistical requirements
      for randomness.</para>
      </summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="Random" />
   class, using a time-dependent default seed
   value.</para>
      </summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.Random" /> class, using the specified
      seed value.</para>
      </summary>
      <param name="Seed">A number used to calculate a starting value for the pseudo-random number sequence.</param>
    </member>
    <member name="M:System.Random.Sample">
      <summary>
        <para> Returns a random number
      between 0.0 and 1.0.</para>
      </summary>
      <returns>
        <para> A
      double-precision floating point number greater than or equal to 0.0, and
      less than 1.0.</para>
      </returns>
    </member>
    <member name="M:System.Random.Next">
      <summary>
        <para>Returns a positive random number.</para>
      </summary>
      <returns>
        <para>A number greater than or equal to zero and less than
      <see cref="F:System.Int32.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>
        <para>Returns a random number within a specified range.</para>
      </summary>
      <param name="minValue">The lower bound of the random number returned.</param>
      <param name="maxValue">The upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.</param>
      <returns>
        <para>A number greater than or equal to <paramref name="minValue" /> and
   less than <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />,
<paramref name="minValue" />
is returned.</para>
      </returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>
        <para>Returns a positive random number less than the specified maximum.</para>
      </summary>
      <param name="maxValue">The upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to zero.</param>
      <returns>
        <para>A number greater than or equal to zero, and less than 
    <paramref name="maxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>
        <para>Returns a random number between 0.0 and 1.0.</para>
      </summary>
      <returns>
        <para>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</para>
      </returns>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>
        <para>Fills the elements of a specified array of bytes with random numbers.</para>
      </summary>
      <param name="buffer">An array of bytes to contain random numbers.</param>
    </member>
    <member name="T:System.RankException">
      <summary>
        <para> The exception that is thrown when an array with the
      wrong number of dimensions is passed to a method.</para>
      </summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.RankException" /> class.
</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.RankException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.RankException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.RankException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>
        <para> References a variable-length argument
 list.
 </para>
      </summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>
        <para> Represents a
      field using an internal metadata token.</para>
      </summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with the data necessary to deserialize the field represented by
this instance.</para>
      </summary>
      <param name="info"> The object to populate with serialization information. </param>
      <param name=" context"> (Reserved) The place to store and retrieve serialized data. </param>
    </member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>
        <para> Gets the value of this instance.
      </para>
      </summary>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <para> The <see cref="T:System.RuntimeMethodHandle" /> is a handle to the internal metadata representation of a method.
   </para>
      </summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetFunctionPointer">
      <summary>
        <para>Obtains a pointer to the method represented by this instance.</para>
      </summary>
      <returns>
        <para>A pointer to the method represented by this instance.</para>
      </returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the field represented by this instance.</para>
      </summary>
      <param name="info">The object to populate with serialization information. </param>
      <param name="context">(Reserved) The place to store and retrieve serialized data. </param>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>
        <para> Gets the value of this instance.
      </para>
      </summary>
    </member>
    <member name="T:System.Type">
      <summary>
        <para>Represents type declarations: class types, interface types, array
      types, value types, and enumeration types.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>
        <para>Discovers the attributes of a member and provides access
      to member metadata.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>
        <para>
       Provides custom attributes for reflection objects that
       support
       them.
    </para>
      </summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para> Returns
      an array of custom attributes defined on this member,
      identified by type, or an empty
      array if there are no custom attributes of that type.
      </para>
      </summary>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute. </param>
      <returns>
        <para> An array of
      Objects representing custom attributes, or an empty array.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>
        <para> Returns an array of all of the custom attributes defined
      on this member, excluding
      named attributes, or an empty array if there are no custom
      attributes.
      </para>
      </summary>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute. </param>
      <returns>
        <para> An array of Objects representing custom attributes, or
      an empty array.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para> Indicates whether one or more instance of <paramref name="attributeType" /> is
   defined on this member.
   </para>
      </summary>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute. </param>
      <returns>
        <para>
          <see langword="true " />if the <paramref name="attributeType " />is
   defined on this member; <see langword="false " />
   otherwise.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.MemberInfo" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>
        <para> When overridden in a derived class, returns an array of all of the custom attributes.</para>
      </summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para> An array of all the custom attributes, or an array with
      zero elements if no attributes are
      defined.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, returns an array of custom attributes identified by
   <see cref="T:System.Type" /> 
   .</para>
      </summary>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>An array of custom attributes defined on this reflected member,
      or an array with zero (0) elements if no attributes are
      defined.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, indicates whether
      one or more instance of <paramref name="attributeType" />
      is defined
      on this member.</para>
      </summary>
      <param name="attributeType">The <see langword="Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>
        <para> Gets the type of this member, such as field, method, and so
      on.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>
        <para>Gets the name of this member.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>
        <para>Gets the class that declares this member.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>
        <para>Gets the class object that was used to obtain this
      instance of <see langword="MemberInfo" />
      .</para>
      </summary>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>
        <para>Allows objects to return <see cref="T:System.Reflection.MemberInfo" />
objects that represent an object.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Retrieves a <see langword="MethodInfo" /> object
   corresponding to a specified method, using a <see langword="Type" />
   array to choose from among overloaded
   methods.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" /> , containing properties related to this method.</param>
      <param name="types">An array used to choose among overloaded methods.</param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
      <returns>
        <para>The requested method that matches all the specified parameters.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves a <see cref="T:System.Reflection.MethodInfo" />
object corresponding to a specified
method under specified search constraints.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>A <see langword="MethodInfo" /> 
object containing the method information, with the match being based on the
method name and search constraints specified in <paramref name="bindingAttr" />

.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>
        <para> Retrieves an array of <see cref="T:System.Reflection.MethodInfo" />
objects with all public methods or
all methods of the current class.</para>
      </summary>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <returns>
        <para> An array of <see langword="MethodInfo" /> objects containing all the methods
   defined for this reflection object that meet the search constraints specified in
<paramref name="bindingAttr" />
.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the <see cref="T:System.Reflection.FieldInfo" /> object corresponding to the specified 
   field and <see langword="BindingFlag" />
   
   .</para>
      </summary>
      <param name="name">The name of the field to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>A <see langword="FieldInfo" /> object 
   containing the field information for the named object that meets the search
   constraints specified in <paramref name="bindingAttr" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns an array of <see cref="T:System.Reflection.FieldInfo" />
objects corresponding to all fields of the current
class.</para>
      </summary>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>An array of <see langword="FieldInfo" /> objects containing all the field 
   information for this reflection object that meets the search constraints
   specified in <paramref name="bindingAttr" />
   
   .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves a <see langword="PropertyInfo" />
object corresponding to a
specified property under specified search constraints.</para>
      </summary>
      <param name="name">The name of the property to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>A <see langword="PropertyInfo" /> 
object for the located property that meets the search constraints specified in
<paramref name="bindingAttr" />, or <see langword="null" /> if the property was not
located.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object corresponding to a specified property
   with specified search constraints.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attribute used to control the search.</param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" /> , containing properties related to this method.</param>
      <param name="returnType">The type of the property.</param>
      <param name="types">An array used to choose among overloaded methods with the same name.</param>
      <param name="modifiers">An array used to choose the parameter modifiers.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object for the
   located property, if a property with the specified name was located in this
   reflection object, or <see langword="null" /> if the property was not located.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>
        <para>
       Retrieves an array of <see cref="T:System.Reflection.PropertyInfo" />
       objects corresponding
       to all public properties or to all properties of the current class.
    </para>
      </summary>
      <param name="bindingAttr">
    The binding attribute used to control the search.
 </param>
      <returns>
        <para>
       An array of <see langword="PropertyInfo" />
       objects
       for all the properties defined on the reflection object.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects corresponding to
   all public members or to all members that match a specified name.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>An array of
   <see langword="MemberInfo" /> objects
      matching <paramref name="name." /></para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects corresponding
    either to all public members or to all members of the current class.</para>
      </summary>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>An array of <see langword="MemberInfo" />
 objects containing all the
 member information for this reflection object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
        <para>Invokes a specified member.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name=" invokeAttr">One of the <see langword="BindingFlags" /> invocation attributes. The <paramref name="invokeAttr " />parameter may be a constructor, method, property, or field. A suitable invocation attribute must be specified. Invoke the default member of a class by passing the empty string ("") as the name of the member.</param>
      <param name=" binder">One of the <see cref="T:System.Reflection.BindingFlags" /> bit flags. Implements <see cref="T:System.Reflection.Binder" /> , containing properties related to this method.</param>
      <param name="target">The object on which to invoke the specified member. This parameter is ignored for static members.</param>
      <param name=" args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name=" modifiers">An array of <see langword="ParameterModifier" /> objects. This array has the same length as <paramref name="args," /> representing the invoked member's argument attributes in the metadata. A parameter can have the following attributes: <see langword="pdIn" />, <see langword="pdOut" />, <see langword="pdRetval" />, <see langword="pdOptional" />, and <see langword="pdHasDefault" /> . These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.</param>
      <param name=" culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. For example, <paramref name="culture" /> converts a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures. If this parameter is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</param>
      <param name="namedParameters">A <see langword="String" /> array of parameters.</param>
      <returns>
        <para>The specified member.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>
        <para> Gets the underlying type that represents the <see langword="IReflect" />
object.</para>
      </summary>
    </member>
    <member name="F:System.Type.FilterAttribute">
      <summary>
        <para>Represents the member filter used on attributes. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.FilterName">
      <summary>
        <para>Represents the case-sensitive member filter used on names. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>
        <para>Represents the case-insensitive member filter used on names. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.Missing">
      <summary>
        <para> Represents a missing value in the <see cref="T:System.Type" /> information. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>
        <para> Separates names in the
      namespace of the <see cref="T:System.Type" />. This field is
      read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>
        <para> Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Type.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Type" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> with
   the specified name, specifying whether to perform a case-sensitive search and whether
   to throw an exception if an error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="typeName">The name of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <para>
          <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para>
      </param>
      <param name="ignoreCase">
        <para>
          <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, if <paramref name="typeName" /> has less than 128 characters.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> with the
   specified name, performing a case-sensitive search and specifying whether to throw
   an exception if an error occurs while loading the <see cref="T:System.Type" /> .</para>
      </summary>
      <param name="typeName">The name of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <para>
          <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive
   search.</para>
      </summary>
      <param name="typeName">The name of the <see cref="T:System.Type" /> to get.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program
   identifier (ProgID), returning null if an error is encountered while
   loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The ProgID of the <see cref="T:System.Type" /> to get.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified
   ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is
   associated with it; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program
   identifier (ProgID), specifying whether to throw an exception if an error occurs
   while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The ProgID of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <para>
          <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" /> .</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program identifier (progID) from the
   specified server, returning null if an error is encountered while
   loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The progID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified program identifier
   (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is
   associated with it; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program
   identifier (progID) from the specified server, specifying whether to throw
   an exception if an error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The progID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />. <para>-or-</para><para><see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para></param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified program identifier (progID), if <paramref name="progID" /> is
   a valid entry in the registry and a type is associated with it; otherwise,
<see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier
   (CLSID).</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of
   whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier
   (CLSID), specifying whether to throw an exception if an
   error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />. <para>-or-</para><para><see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para></param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier (CLSID) from the specified server.</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <param name=" server">The server from which to load the type.</param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier
   (CLSID) from the specified server, specifying whether to throw an exception if an
   error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />. <para>-or-</para><para><see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para></param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>
        <para> Gets the underlying type code of the specified <see cref="T:System.Type" />.
   </para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> whose underlying type code to get. </param>
      <returns>
        <para> The <see cref="T:System.TypeCode" /> value of the underlying type.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
        <para> When overridden in a derived class, invokes the specified member, using the specified binding constraints and
      matching the specified argument list, modifiers and culture.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</para>
        <para>-or-</para>
        <para>An empty string ("") to invoke the default member.</para>
      </param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="modifiers">
        <para>An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature. The default binder does not process this parameter.</para>
      </param>
      <param name="culture">
        <para>The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the invoked
   member.</para>
      </returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para>Invokes the specified member, using the specified binding constraints
      and matching the specified argument list and culture.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</para>
        <para>-or-</para>
        <para>An empty string ("") to invoke the default member.</para>
      </param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="culture">
        <para>The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the invoked member.</para>
      </returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>
        <para>Invokes the specified member, using the specified
      binding constraints and matching the specified argument list.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke. <para>-or-</para><para>An empty string ("") to invoke the default member.</para></param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the invoked member.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>
        <para>Gets the handle for the <see cref="T:System.Type" /> of a specified object.</para>
      </summary>
      <param name="o">The <see cref="T:System.Object" /> for which to get the Type handle.</param>
      <returns>
        <para>The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> referenced by the specified type handle.</para>
      </summary>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> object that refers to the <see cref="T:System.Type" />.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> referenced by the specified <see cref="T:System.RuntimeTypeHandle" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>
        <para> Gets the number of dimensions in an <see cref="T:System.Array" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Int32" /> containing the number of dimensions in the current
<see langword="Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for a constructor whose parameters match the specified argument
      types and modifiers, using the specified binding constraints and the specified calling convention.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for a constructor whose parameters match the specified argument types and modifiers,
      using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Type.EmptyTypes" />.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>
        <para>Searches for a public instance constructor whose parameters match the types in the specified array.</para>
      </summary>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> to get a constructor that takes no parameters.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Type.EmptyTypes" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose
   parameters match the types in the parameter type array, if found; otherwise,
<see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>When overridden in a derived class, searches for a constructor whose parameters match the
      specified argument types and modifiers, using the specified binding constraints
      and the specified calling convention.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>
        <para>Returns all the public constructors defined for the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing
   all the public constructors defined for the current <see cref="T:System.Type" />,
   including the type initializer if it is defined.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.ConstructorInfo" />, if no public constructors are defined
for the current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the constructors defined
      for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" /> .</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined
   for the current <see cref="T:System.Type" /> that match the specified binding constraints, including
   the type initializer if it is defined.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.ConstructorInfo" />, if no constructors are
defined for the current <see cref="T:System.Type" />, or if none of the defined constructors match the
binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified method whose parameters match the specified
      argument types and modifiers, using the specified binding constraints and the
      specified calling convention.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object
   representing the method that matches the specified requirements, if found;
   otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified method whose parameters match the specified argument types and modifiers, using the
      specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified public method whose parameters match the specified argument
      types and modifiers.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object
   representing the public method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>
        <para>Searches for the specified public method whose parameters match the specified argument types.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose
   parameters match the specified argument types, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Searches for the specified method, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>
        <para>Searches for the public method with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object
   representing the public method with the
   specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>When overridden in a derived class, searches for the specified method whose parameters match the specified
      argument types and modifiers, using the specified binding constraints and the
      specified calling convention.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />. If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>
        <para>Returns all the public methods of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public
   methods defined for the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods
are defined for the current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class,
      searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined
   for the current <see cref="T:System.Type" />
   that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are
defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the
binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para> Searches for the specified field, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>
        <para>Searches for the field with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the
   specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>
        <para>Returns all the public fields of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields
   defined for the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the
current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class,
      searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current
<see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String)">
      <summary>
        <para> Searches for the interface with the specified name.
      </para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get. </param>
      <returns>
        <para> A <see cref="T:System.Type" /> object
   representing the interface with the specified name, implemented or inherited by
   the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, searches for the specified interface,
      specifying whether to do a case-sensitive search.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get.</param>
      <param name="ignoreCase">
        <para>
          <see langword="true" /> to perform a case-insensitive search for <paramref name="name" />.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to perform a case-sensitive search for <paramref name="name" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by
   the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>
        <para>When overridden in a derived class, gets all the
      interfaces implemented or inherited by the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or
   inherited by the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the
current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>
        <para>Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces
   implemented or inherited by the current <see cref="T:System.Type" />.</para>
      </summary>
      <param name="filter">
        <para>The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <paramref name="filterCriteria" />.</para>
      </param>
      <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array.</param>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces
   implemented or inherited by the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the
current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>
        <para>Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <returns>
        <para>The <see cref="T:System.Reflection.EventInfo" /> object
   representing the specified event which is declared or inherited by the current
<see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" />
object representing the specified event, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Reflection.EventInfo" /> object
   representing the specified event which is declared or inherited by the current
<see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>
        <para>Returns all the public events that are declared or
      inherited by the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public
   events which are declared or inherited by the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.EventInfo" />, if
the current <see cref="T:System.Type" /> does not have public events.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for events
      that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding
      constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events
   which are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current
<see cref="T:System.Type" /> does not have events, or
if none of the events match the binding constraints.
</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified property whose parameters match the specified
      argument types and modifiers, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified public property whose parameters match the specified argument types and modifiers.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Searches for the specified property, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>
        <para>Searches for the specified public property whose parameters match the specified argument types.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property whose parameters match the specified argument types, if found;
   otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type[])">
      <summary>
        <para>Searches for the specified public property whose parameters match the specified argument types.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property whose parameters match the specified argument types, if found;
   otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>
        <para>Searches for the public property with the specified name and return type.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name=" returnType">The return type of the property.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>
        <para> Searches for the public property with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>When overridden in a derived class, searches for the specified property whose
      parameters match the specified argument types and modifiers, using the specified
      binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the properties of the current
      <see cref="T:System.Type" />, using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current
<see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>
        <para>Returns all the public properties of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public
   properties of the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetNestedTypes">
      <summary>
        <para>Returns all the types nested within the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the types nested within
   the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.
</returns>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the types nested within the current <see cref="T:System.Type" />,
   using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the types nested within
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of
the nested types match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String)">
      <summary>
        <para>Searches for the nested type with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get.</param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the nested type with the specified
   name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the nested type that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>
        <para>Searches for the members with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public members to get.</param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with
   the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Searches for the specified members, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with
   the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
        <para> Searches for the specified members of the specified member type, using the
      specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get.</param>
      <param name="type">The <see cref="P:System.Type.MemberType" /> to search for.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with
   the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>
        <para>Returns all the public members of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public
   members of the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />,
   using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current
<see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>
        <para>Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of
   the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</para>
      </returns>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>
        <para>Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</para>
      </summary>
      <param name="memberType">A <see langword="MemberTypes" /> object indicating the type of member to search for.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" /> .</para>
      </param>
      <param name="filter">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise. You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class. The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</param>
      <param name="filterCriteria">
        <para>The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</para>
        <para>The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class. </para>
      </param>
      <returns>
        <para>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type
<paramref name="memberType" /> that match the filter criteria. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>
        <para> Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the
<see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes
   associated with the <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Reflection.TypeAttributes" /> object
   representing the attribute set of the <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> 
 property and determines whether the <see cref="T:System.Type" /> is passed by reference.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the
 <see cref="T:System.Type" /> is a pointer.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the
<see cref="T:System.Type" /> is one of the primitive types.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the
 <see cref="T:System.Type" /> is a COM object.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsContextfulImpl">
      <summary>
        <para> Implements the <see cref="P:System.Type.IsContextful" />
property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.IsMarshalByRefImpl">
      <summary>
        <para> Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether
   the <see cref="T:System.Type" /> is marshalled by reference.
   </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is marshalled by reference; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>
        <para>When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current
   array, pointer or reference type.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a
pointer, or is not passed by reference.</para>
      </returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and
   determines whether the current <see cref="T:System.Type" /> encompasses or
   refers to another type; that is,
   whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by
   reference.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>
        <para>Determines whether the current <see cref="T:System.Type" /> derives from the
   specified <see langword="Type" /> .</para>
      </summary>
      <param name="c">The <see langword="Type" /> to compare with the current <see langword="Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see langword="Type" />
represented by the <paramref name="c" /> parameter and the current <see langword="Type" />
represent classes, and the class represented by the current
<see langword="Type" /> derives from the class represented by <paramref name="c" />; 
otherwise, <see langword="false" />. This method also returns
<see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> 
represent the same class.</para>
      </returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>
        <para> Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.
   </para>
      </summary>
      <param name="o">The object to compare with the current <see langword="Type" />. </param>
      <returns>
        <para>
          <see langword="true" /> if the current
<see langword="Type" /> is in the inheritance hierarchy of the object represented 
   by the <paramref name="o" /> parameter, or if the current Type is an interface that
<paramref name="o" /> supports. <see langword="false" /> 
if neither of these conditions is the case, or if <paramref name="o" /> is
<see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>
        <para> Determines whether an instance of the
      current <see cref="T:System.Type" /> can be assigned from an instance of the specified
   <see langword="Type" /> .
      </para>
      </summary>
      <param name="c">The <see langword="Type" /> to compare with the current <see langword="Type" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if the <paramref name="c" /> parameter and
   the current <see langword="Type" /> represent the same type, or if the current
<see langword="Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the 
   current <see langword="Type" /> is an interface that <paramref name="c" /> supports.
<see langword="false" /> if none of these conditions are the case, or if 
<paramref name="c" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.ToString">
      <summary>
        <para> Returns a <see langword="String" /> representing the name
   of the current <see langword="Type" />.
   </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeArray(System.Object[])">
      <summary>
        <para> Gets the types of the objects in the specified array.
      </para>
      </summary>
      <param name="args">An array of objects whose types to determine. </param>
      <returns>
        <para> An array of <see cref="T:System.Type" /> objects representing the types of the corresponding
   elements in <paramref name="args" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>
        <para>Determines if the underlying system type of the
      current <see cref="T:System.Type" /> is the same as the underlying system type of the
      specified <see cref="T:System.Object" />.</para>
      </summary>
      <param name="o">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />. 
   This method also returns <see langword="false" /> if the object specified by the
<paramref name="o" /> parameter is not a <see langword="Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>
        <para>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the
    underlying system type of the specified <see cref="T:System.Type" />.</para>
      </summary>
      <param name="o">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same 
    as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Int32" /> containing the hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>
        <para> Returns an interface mapping for the
      specified interface type.</para>
      </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the
   interface mapping for <paramref name="interfaceType" />.</para>
      </returns>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>
        <para>Gets a bitmask indicating the member type.</para>
      </summary>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>
        <para>Gets the class that declares this member.</para>
      </summary>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>
        <para>Gets the class object that was used to obtain this
       member.</para>
      </summary>
    </member>
    <member name="P:System.Type.GUID">
      <summary>
        <para> Gets the GUID associated with the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>
        <para>Gets the default binder used by the system.</para>
      </summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>
        <para>Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</para>
      </summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>
        <para>Gets the <see cref="T:System.Reflection.Assembly" /> that the type is declared in. </para>
      </summary>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>
        <para>Gets the handle for the current <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.FullName">
      <summary>
        <para>Gets the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>
        <para>Gets the namespace of the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>
        <para>Gets the fully qualified name of the <see cref="T:System.Type" />,
   including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</para>
      </summary>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>
        <para>Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</para>
      </summary>
    </member>
    <member name="P:System.Type.TypeInitializer">
      <summary>
        <para> Gets the initializer for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>
        <para> Gets the attributes associated with the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>
        <para> Gets a value indicating whether the top-level <see cref="T:System.Type" /> is not declared public.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>
        <para> Gets a value indicating whether the top-level <see cref="T:System.Type" /> is declared public.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>
        <para> Gets a value indicating whether a class is nested and declared public.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its
   own family.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and
   its own assembly.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its
   own family or to its own assembly.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>
        <para> Gets a value indicating whether the class layout
      attribute <see langword="AutoLayout" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsLayoutSequential">
      <summary>
        <para> Gets a value indicating whether the class layout
      attribute <see langword="SequentialLayout" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsExplicitLayout">
      <summary>
        <para> Gets a value indicating whether the class layout
      attribute <see langword="ExplicitLayout" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is a class; that is, not a value type or interface.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>
        <para> Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> has a name that requires special handling.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsImport">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> was imported from another class.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsSerializable">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>
        <para> Gets a value indicating whether the string format
      attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
      <summary>
        <para> Gets a value indicating whether the string format
      attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>
        <para> Gets a value indicating whether the string format
      attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is an array.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is
   passed by reference.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</para>
      </summary>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers
   to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsContextful">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsMarshalByRef">
      <summary>
        <para>Gets a value indicating whether the Type is marshaled by reference.</para>
      </summary>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>
        <para>Indicates the type provided by the common language 
      runtime that represents this type.</para>
      </summary>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>
        <para>Represents a type using an internal metadata token.</para>
      </summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with the data necessary to deserialize the field represented by
this instance.</para>
      </summary>
      <param name="info">The object to be populated with serialization information. </param>
      <param name=" context">(Reserved) The location where serialized data will be stored and retrieved. </param>
    </member>
    <member name="P:System.RuntimeTypeHandle.Value">
      <summary>
        <para> Gets the value of this instance.
      </para>
      </summary>
    </member>
    <member name="T:System.SByte">
      <summary>
        <para>Represents an 8-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>
        <para>Represents the largest possible value of <see cref="T:System.SByte" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.SByte" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" obj">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="obj" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="obj" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="obj" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="obj" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="obj" /> is
 <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance,
 consisting of a negative sign if the value is negative, and a sequence of digits
 ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name=" format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 8-bit
 signed integer equivalent.</para>
      </summary>
      <param name=" s">A string representing a number to convert.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number contained in the <paramref name="s" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its 8-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified culture-specific format to its 8-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its 8-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string representing a number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string 
 representation of the value of this instance as specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.SByte" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.SerializableAttribute">
      <summary>
        <para>Indicates that a class can be serialized. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.SerializableAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SerializableAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.Single">
      <summary>
        <para> Represents a single-precision floating point number.</para>
      </summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.Single" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>
        <para> Represents the smallest positive <see cref="T:System.Single" /> greater than
 zero. This
 field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>
        <para> Represents the largest possible value of <see cref="T:System.Single" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>
        <para> Represents positive infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>
        <para> Represents negative infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>
        <para> Represents not a number
 (<see langword="NaN" />). This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>
        <para> Returns a value indicating whether the specified
 number evaluates to negative or positive infinity.</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to <see cref="F:System.Single.PositiveInfinity" /> 
or <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to positive infinity.</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to <see cref="F:System.Single.PositiveInfinity" />
; otherwise, <see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to negative infinity.</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to <see cref="F:System.Single.NegativeInfinity" />
; otherwise, <see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>
        <para>Returns a value indicating whether the specified number evaluates to
 not a number (<see cref="F:System.Single.NaN" />).</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less
 than
 zero</term>
            <description>
              <para>This instance is less than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is not a number (<see cref="F:System.Single.NaN" /> ) and <paramref name="value" /> is a
 number.</para>
            </description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <para>This instance is equal to <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance and value are both not a number (<see cref="F:System.Single.NaN" />),
<see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" /> 
.</para>
            </description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
<see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string 
 representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value
 of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <returns>
        <para>A single-precision floating point number equivalent to the
 numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a specified style to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified culture-specific format to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Single" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.TimeSpan">
      <summary>
        <para> Represents a time interval.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>
        <para> Represents the number of ticks in 1 millisecond. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>
        <para> Represents the number of ticks in 1 second.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>
        <para> Represents the number of ticks in 1 minute. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>
        <para>Represents the number of ticks in 1 hour. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>
        <para>Represents the number of ticks in 1 day. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>
        <para> Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>
        <para>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>
        <para>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to the
 specified number of ticks.</para>
      </summary>
      <param name="ticks">A time period expressed in 100-nanosecond units.</param>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to a
 specified number of hours, minutes, and seconds.</para>
      </summary>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to a
 specified number of days, hours, minutes, and seconds.</para>
      </summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to a
 specified number of days, hours, minutes, seconds, and milliseconds.</para>
      </summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <param name="milliseconds">Number of milliseconds.</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>
        <para>Adds the specified <see cref="T:System.TimeSpan" /> to this instance.</para>
      </summary>
      <param name="ts">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents the value of this instance plus
 the value of <paramref name="ts" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that
 indicates their relationship.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" /> .</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="t1" /> is less than
 <paramref name="t2" /></description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="t1" /> is equal to <paramref name="t2" /></description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="t1" /> is greater than
<paramref name="t2" /></description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>The value of this instance is less than the
 value of <paramref name="value" />.</description>
          </item>
          <item>
            <term> 0</term>
            <description>The value of this instance is equal to the
 value of <paramref name="value" />.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <para>The value of this instance is greater than the value of
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
 <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 days, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">A number of days, accurate to the nearest millisecond.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> whose value is the absolute value of this
 instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> whose
 value is the value of this instance and
 converted if necessary to a positive number.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name="value">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value " />is a <see cref="T:System.TimeSpan" /> that
 represents the same time as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Returns a value indicating whether two specified instances
 of <see cref="T:System.TimeSpan" /> are equal.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the values of <paramref name="t1 " />and <paramref name="t2 " />are equal;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>
        <para>Returns a hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 hours, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">
        <para>A number of hours accurate to the nearest millisecond.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 milliseconds.</para>
      </summary>
      <param name="value">
        <para>A number of milliseconds.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 minutes, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">
        <para>A number of minutes, accurate to the nearest millisecond.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of this
 instance.</para>
      </summary>
      <returns>
        <para>The same numeric value as this instance, but with the opposite sign.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>
        <para>Constructs a <see cref="T:System.TimeSpan" />from a time indicated by a specified string.</para>
      </summary>
      <param name="s">A string.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that corresponds to <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 seconds, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">
        <para>A number of seconds, accurate to the nearest millisecond.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>
        <para>Subtracts the specified <see cref="T:System.TimeSpan" /> from this
 instance.</para>
      </summary>
      <param name="ts">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> whose value is the result of the value of this
 instance minus the value of <paramref name="ts" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where
 the specification is in units of ticks.</para>
      </summary>
      <param name="value">A number of ticks that represent a time.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> with a value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>
        <para>Returns the string representation of the value of this
 instance.</para>
      </summary>
      <returns>
        <para>A string 
 that
 represents the value of this instance. The format of the return value is of the
 form:</para>
        <para>[-][d.]hh:mm:ss[.ff]</para>
        <para>Items in square brackets ([ and ]) are optional, colons and periods (: and .)
 are literal characters; and the other items are as follows.</para>
        <list type="table">
          <listheader>
            <term>Item</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> "-" </term>
            <description>optional minus sign indicating a negative
 time</description>
          </item>
          <item>
            <term> "d" </term>
            <description>optional days</description>
          </item>
          <item>
            <term> "hh" </term>
            <description>hours, ranging from 0 to 23</description>
          </item>
          <item>
            <term> "mm" </term>
            <description>minutes, ranging from 0 to 59</description>
          </item>
          <item>
            <term> "ss"</term>
            <description>seconds, ranging from 0 to 59</description>
          </item>
          <item>
            <term> "ff"</term>
            <description>optional fractional seconds, from 1 to 7
 decimal digits </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the
 specified instance.</para>
      </summary>
      <param name="t">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" />with the same numeric value as this instance, but the opposite sign.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified
<see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>A <see langword="TimeSpan" /> whose value is the result of the value of <paramref name="t1&#xD;&#xA; " />minus the value of <paramref name="t2" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>
        <para>Returns the specified instance of <see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>Returns <paramref name="t" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Adds two specified <see cref="T:System.TimeSpan" /> instances.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> whose value is the sum of the values of <paramref name="t1" />
and <paramref name="t2" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the values of <paramref name="t1 " />and <paramref name="t2" /> are equal;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the values of <paramref name="t1 " />and <paramref name="t2 " />are not equal;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified
<see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is less than the value of
<paramref name="t2" /> ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another
 specified <see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is less than or equal to the
 value of <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified
<see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is greater than the value of
<paramref name="t2" /> ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than
 or equal to another specified <see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is greater than or equal to
 the value of <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>
        <para>Gets the value of this instance in ticks.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>
        <para>Gets the number of whole days represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>
        <para>Gets the number of whole hours represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>
        <para>Gets the number of whole milliseconds represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>
        <para>Gets the number of whole minutes represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>
        <para>Gets the number of whole seconds represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional days.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional hours.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional milliseconds.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional minutes.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional seconds.</para>
      </summary>
    </member>
    <member name="T:System.TypeCode">
      <summary>
        <para>Specifies the type of an object.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>
        <para> A null reference.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>
        <para> A general type representing any reference or value 
      type not explicitly represented by another <see langword="TypeCode" />.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>
        <para> A database null (column) value.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>
        <para>A simple type representing Boolean values of
      <see langword="true" /> or <see langword="false" />.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>
        <para>An integral type representing unsigned 16-bit integers 
       with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char" />
       type corresponds to the Unicode character set.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>
    An integral type representing signed 8-bit
    integers with values between -128 and 127.
 </summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>
    An integral type representing unsigned
    8-bit integers with values between 0 and 255.
 </summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>
    An integral type representing signed 16-bit
    integers with values between -32768 and 32767.
 </summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>
    An integral type representing unsigned
    16-bit integers with values between 0 and 65535.
 </summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>
    An integral type representing signed 32-bit
    integers with values between -2147483648 and 2147483647.
 </summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>
    An integral type representing unsigned
    32-bit integers with values between 0 and 4294967295.
 </summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>
        <para>An integral type representing signed 64-bit integers 
       with values
       between -9223372036854775808 and 9223372036854775807.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>
    An integral type representing unsigned
    64-bit integers with values between 0 and 18446744073709551615.
 </summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>
        <para>A floating point type representing values ranging from 
       approximately 1.5 x 10<superscript term="-45" /> to 3.4 x 10<superscript term="38" />
       with a precision of 7
       digits.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>
        <para>A floating point type representing values ranging from 
       approximately 5.0 x 10<superscript term="-324" /> to 1.7 x 10<superscript term="308" />
       with a precision of
       15-16 digits.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>
        <para>A simple type representing values ranging from 1.0 x 
       10<superscript term="-28" /> to approximately 7.9 x 10<superscript term="28" />
       with 28-29 significant digits.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>
        <para>A type representing a date and time value.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>
    A sealed class type representing Unicode
    character strings.
 </summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>
        <para>Describes objects that contain both a managed pointer to
      a location and a runtime representation of the type that may be stored at that
      location.</para>
      </summary>
    </member>
    <member name="M:System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])">
      <summary>
        <para> Makes a <see langword="TypedReference" /> for the specified target object using the specifying
   fields.
   </para>
      </summary>
      <param name="target">The target object that defines the type of the <see langword="TypedReference" /> . </param>
      <param name=" flds">The fields to be encapsulated. </param>
      <returns>
        <para>A <see langword="TypedReference" /> for the specified target. </para>
      </returns>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>
        <para>
       Returns the hash code of this object.
    </para>
      </summary>
      <returns>
    The hash code of this object.
 </returns>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>
        <para> Checks if this object is equal to the
      specified object.
      </para>
      </summary>
      <param name="o">The object with which to compare the current object.</param>
      <returns>
        <para>
          <see langword="true " />if this object is equal to the
   specified object; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.ToObject(System.TypedReference)">
      <summary>
        <para>Converts the specified <see langword="TypedReference" /> to
   an <see langword="Object" />
   .</para>
      </summary>
      <param name="value">The <see langword="TypedReference" /> to be converted. </param>
      <returns>
        <para>An Object converted from a TypedReference.</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.GetTargetType(System.TypedReference)">
      <summary>
        <para>Returns the type of the target of the specified 
   <see langword="TypedReference" /> 
   .</para>
      </summary>
      <param name="value">The value whose target's type is to be returned. </param>
      <returns>
        <para>The type of the target of the specified 
   <see langword="TypedReference" /> 
   .</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.TargetTypeToken(System.TypedReference)">
      <summary>
        <para>Returns the internal metadata type handle for the 
      specified <see langword="TypedReference" />
      .</para>
      </summary>
      <param name="value">The <see langword="TypedReference" /> for which the type handle is requested. </param>
      <returns>
        <para>The internal metadata type handle for the specified 
   <see langword="TypedReference" /> 
   .</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.SetTypedReference(System.TypedReference,System.Object)">
      <summary>
        <para> Converts the specified value to a 
   <see langword="TypedReference" /> 
   .
   </para>
      </summary>
      <param name="target">The target of the conversion. </param>
      <param name=" value">The value to be converted. </param>
      <returns>
   This method assigns <paramref name="value " />to <paramref name="target" />. A change type of
<paramref name="value" /> converts it to the type of the <see langword="TypedReference" />. 
   The <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)" qualify="true" /> method does the conversion.
</returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>
        <para>The exception that is thrown as a wrapper around the exception thrown by the class initializer.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the
   inner exception that is the root cause of this exception.</para>
      </summary>
      <param name="fullTypeName">The fully qualified name of the type that fails to initialize.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and 
 additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>
        <para> Gets the fully qualified name of the type that fails to
      initialize.</para>
      </summary>
    </member>
    <member name="T:System.UInt16">
      <summary>
        <para>Represents a 16-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>
        <para> Represents the largest possible value of
   <see langword="UInt16" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>
        <para> Represents the smallest possible value of
   <see langword="UInt16" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format. </para>
      </summary>
      <param name="format">A format specification.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and
      culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 16-bit
      unsigned integer equivalent.</para>
      </summary>
      <param name="s">A string representing the number to convert.</param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style to its 16-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified culture-specific format to its 16-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style and culture-specific format to its 16-bit unsigned integer
      equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" />for value type <see cref="T:System.UInt16" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.UInt16" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.UInt32">
      <summary>
        <para>Represents a 32-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>
        <para> Represents the largest possible value of
   <see langword="UInt32" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>
        <para> Represents the smallest possible value of
 <see langword="UInt32" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt32" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and
      culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 32-bit
      unsigned integer equivalent.</para>
      </summary>
      <param name="s">A string representing the number to convert.</param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number contained in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style to its 32-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified culture-specific format to its 32-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style and culture-specific format to its 32-bit unsigned integer
      equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt32" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.UInt32" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.UInt64">
      <summary>
        <para>Represents a 64-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>
        <para> Represents the largest possible value of <see cref="T:System.UInt64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>
        <para> Represents the smallest possible value of <see cref="T:System.UInt64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt64" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and
      culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 64-bit
      unsigned integer equivalent.</para>
      </summary>
      <param name="s">A string representing the number to convert.</param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number contained in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style to its 64-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified culture-specific format to its 64-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style and culture-specific format to its 64-bit unsigned integer
      equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt64" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.UInt64" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.UIntPtr">
      <summary>
        <para> A platform-specific type that is used to represent
      a pointer or a handle.</para>
      </summary>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>
        <para>A read-only field that represents a pointer or handle that has been initialized to zero.</para>
      </summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UIntPtr" /> structure using
   the specified 32-bit pointer or handle.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 32-bit unsigned integer.</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.UIntPtr" /> using
   the specified 64-bit pointer or handle.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 64-bit unsigned integer.</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified
   pointer to an unspecified type.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UIntPtr" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>
        <para>Converts the value of this instance to a 32-bit unsigned integer.</para>
      </summary>
      <returns>
        <para>A 32-bit unsigned integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>
        <para>Converts the value of this instance to a 64-bit unsigned integer.</para>
      </summary>
      <returns>
        <para> A 64-bit unsigned integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
      equivalent string representation.</para>
      </summary>
      <returns>
        <para>The string 
      representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>
        <para>Converts the value of a 32-bit unsigned integer to an
   <see cref="T:System.UIntPtr" />.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>
        <para>Converts the value of a 64-bit unsigned integer to an
   <see cref="T:System.UIntPtr" />.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>
        <para> Converts the specified pointer to an unspecified type to a
   <see cref="T:System.UIntPtr" />.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>
        <para>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a pointer to an unspecified type.</para>
      </summary>
      <param name="value">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are equal.</para>
      </summary>
      <param name="value1">A <see cref="T:System.UIntPtr" />.</param>
      <param name=" value2">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are not equal.</para>
      </summary>
      <param name="value1">A <see cref="T:System.UIntPtr" />.</param>
      <param name=" value2">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>
        <para> Converts the value of this instance to a pointer to an
      unspecified type.</para>
      </summary>
      <returns>
        <para>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an
   unspecified type. </para>
      </returns>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>
        <para>Gets the size of this instance.</para>
      </summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>
        <para>The exception that is thrown when the operating
      system denies access because of an I/O error or a specific
      type of security error.</para>
      </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.UnauthorizedAccessException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.UnauthorizedAccessException" />
   class with a specified error
   message.
   </para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.UnauthorizedAccessException" />
   
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a<see langword="catch" />block that handles the inner exception.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.UnauthorizedAccessException" />
             class with serialized
 data.
         </para>
      </summary>
      <param name="info">
         The 
         <see cref="T:System.Runtime.Serialization.SerializationInfo" />
          that holds the serialized object data about the exception being thrown.
      </param>
      <param name="context">
         The 
         <see cref="T:System.Runtime.Serialization.StreamingContext" />
          that contains contextual information about the source or destination.
      </param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>
        <para>Provides data for the event that is raised when there is an exception that is not handled by the application
      domain.</para>
      </summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</para>
      </summary>
      <param name="exception">The exception that is not handled.</param>
      <param name="isTerminating">
        <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>
        <para>Gets the unhandled exception object.</para>
      </summary>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>
        <para> Indicates whether the common language runtime is terminating.</para>
      </summary>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>
        <para> Represents the method that will handle the event triggered by an exception that is
      not handled by the application domain.</para>
      </summary>
      <param name="sender">The source of the unhandled exception event.</param>
      <param name="e">An <paramref name="UnhandledExceptionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Version">
      <summary>
        <para>Represents the version number for a common language runtime assembly. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class with the
   specified major, minor, build, and revision numbers.</para>
      </summary>
      <param name=" major">The major version number.</param>
      <param name=" minor">The minor version number.</param>
      <param name=" build">The build number.</param>
      <param name=" revision">The revision number.</param>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class using the
   specified major, minor, and build values.</para>
      </summary>
      <param name=" major">The major version number.</param>
      <param name=" minor">The minor version number.</param>
      <param name=" build">The build number.</param>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class using the
   specified major and minor values.</para>
      </summary>
      <param name=" major">The major version number.</param>
      <param name=" minor">The minor version number.</param>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class using the
   value represented by the specified <see cref="T:System.String" />.</para>
      </summary>
      <param name=" version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
    </member>
    <member name="M:System.Version.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Version.Clone">
      <summary>
        <para>Returns a new <see cref="T:System.Version" /> whose value is the same as this
   instance.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.Object" /> whose values are a copy of this
<see cref="T:System.Version" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" version">An object to compare, or <see langword="null" />.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less
         than
         zero</term>
            <description> This instance is before
      <paramref name="version" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is the same as
      <paramref name="version" />.</description>
          </item>
          <item>
            <term> Greater than
         zero</term>
            <description>
              <para>This instance is subsequent to
         <paramref name="version" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true " />if this instance and <paramref name="obj" /> are both <see cref="T:System.Version" /> objects, and every component of this instance matches
   the corresponding component of <paramref name="obj" />; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>
        <para>Returns a hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      <see cref="T:System.String" />
   representation. </para>
      </summary>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of this instance, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:</para>
        <para>major.minor[.build[.revision]]</para>
        <para>For example, if you create an instance of <see cref="T:System.Version" /> using the constructor <c>Version(1,1)</c> , the returned string is "1.1". If you
create an instance of <see cref="T:System.Version" /> using the constructor <c>Version(1,3,4,2)</c>, the returned string is "1.3.4.2".</para>
      </returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>
        <para>Converts the value of this instance to its equivalent
   <see cref="T:System.String" />
   representation. A specified count indicates the number of components to
   return.</para>
      </summary>
      <param name=" fieldCount">The number of components to return. The <paramref name="fieldCount" /> ranges from 0 to 4.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of this instance, each separated by a period character ('.'). The <paramref name="fieldCount" /> parameter determines how many components are returned. </para>
        <list type="table">
          <listheader>
            <term>fieldCount</term>
            <description>Return Value</description>
          </listheader>
          <item>
            <term> 0</term>
            <description>An empty string ("").</description>
          </item>
          <item>
            <term> 1</term>
            <description>major</description>
          </item>
          <item>
            <term> 2</term>
            <description>major.minor</description>
          </item>
          <item>
            <term> 3</term>
            <description>major.minor.build</description>
          </item>
          <item>
            <term> 4</term>
            <description>major.minor.build.revision</description>
          </item>
        </list>
        <para>For example, if you create an instance of <see langword="Version" /> using the constructor <c>Version(1,3,5)</c>, <c>ToString(2)</c> returns "1.3" and <c>ToString(4)</c> throws an exception.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>
        <para> Determines whether two specified instances of <see cref="T:System.Version" />
are equal.</para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1 " />equals <paramref name="v2" />;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>
        <para>Determines whether two specified instances of
      <see cref="T:System.Version" /> are
      not equal. </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1 " />does not equal
<paramref name="v2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
      <see cref="T:System.Version" /> is less than the
      second specified instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is less than
<paramref name="v2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
   <see cref="T:System.Version" /> is less than or
      equal to the second instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is less than or equal to <paramref name="v2" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
      <see cref="T:System.Version" /> is greater than
      the second specified instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is greater than
<paramref name="v2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
      <see cref="T:System.Version" /> is greater than or
      equal to the second instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is greater than or
   equal to <paramref name="v2" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>
        <para>Gets the value of the major component of the version number for this
      instance.</para>
      </summary>
    </member>
    <member name="P:System.Version.Minor">
      <summary>
        <para>Gets the value of the minor component of the version number for this
      instance.</para>
      </summary>
    </member>
    <member name="P:System.Version.Build">
      <summary>
        <para>Gets the value of the build component of the version number for this 
       instance.</para>
      </summary>
    </member>
    <member name="P:System.Version.Revision">
      <summary>
        <para>Gets the value of the revision component of the version number for this 
       instance.</para>
      </summary>
    </member>
    <member name="T:System.Void">
      <summary>
        <para>Indicates a method that does not return a value; that is, the method has the void
 return type.</para>
      </summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>
        <para>Represents a weak reference, which references an object while still
      allowing it to be garbage collected.</para>
      </summary>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.WeakReference" /> class,
   referencing the specified object.</para>
      </summary>
      <param name=" target">The object to track or <see langword="null" />.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.WeakReference" /> class,
   referencing the specified object and using the specified resurrection
   tracking.</para>
      </summary>
      <param name=" target">An object to track.</param>
      <param name=" trackResurrection">Indicates when to stop tracking the object. If <see langword="true" />, the object is tracked after finalization; if <see langword="false" />, the object is only tracked until finalization.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, using deserialized data
   from the specified serialization and stream objects.</para>
      </summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name=" context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info" />.</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>
        <para>Frees any resources allocated by this instance.</para>
      </summary>
    </member>
    <member name="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data
   needed to serialize this instance.</para>
      </summary>
      <param name=" info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name=" context">(Reserved) The location where serialized data will be stored and retrieved. </param>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>
        <para>Gets an indication whether the object referenced by this instance has been
      garbage collected.</para>
      </summary>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>
        <para>Gets an indication whether the object referenced by this instance is tracked 
       after it is garbage collected and finalized.</para>
      </summary>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>
        <para>Gets or sets the object (the target) referenced by this instance.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>
        <para> Specifies the apartment state of a <see cref="T:System.Threading.Thread" />.
   </para>
      </summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <para> The <see cref="T:System.Threading.Thread" /> 
will create and enter a single-threaded apartment.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <para> The <see cref="T:System.Threading.Thread" /> will
   create and enter a multithreaded apartment.
   </para>
      </summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>
        <para> The <see cref="P:System.Threading.Thread.ApartmentState" /> property 
   has not been set.</para>
      </summary>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
      <summary>
        <para>Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>
        <para>Encapsulates operating system-specific objects that wait for exclusive access
      to shared resources.</para>
      </summary>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>
        <para>Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation has timed out before any of the wait handles fire. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>
        <para>Represents an invalid handle that was passed to a method. 
      This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, blocks the current
      thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using 32-bit signed
      integer to measure the time interval and specifying whether to exit the synchronization domain before the wait. </para>
      </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal. </param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" />. </param>
      <returns>
        <para>
          <see langword="true" /> if the current instance receives a signal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, blocks the current thread until the current instance receives a signal, using
      a <see cref="T:System.TimeSpan" />
      to measure the time interval and specifying whether to exit the synchronization
      domain before the wait.</para>
      </summary>
      <param name="timeout">The number of milliseconds to wait for the thread to receive a signal. </param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" />. </param>
      <returns>
        <para>
          <see langword="true" /> if the current instance receives a signal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>
        <para>When overridden in a derived class, blocks the current
      thread until the current <see cref="T:System.Threading.WaitHandle" />
      receives a signal.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current instance receives a signal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>
        <para>Waits for all of the elements in the specified array to receive a signal,
      using an <see cref="T:System.Int32" />
      value to measure the time interval and specifying whether to exit the
      synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>
          <see langword="true" /> to exit the synchronization domain before the wait; 
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>
        <para>Waits for all of the elements in the specified array to receive a signal,
      using a <see cref="T:System.TimeSpan" />
      value to measure the time interval and specifying whether to exit the
      synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="timeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if the 
   method exited the synchronization domain before the wait; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>
        <para>Waits for all of the elements in the specified array to receive a signal.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <returns>
        <para>
          <see langword="true " />when every element in <paramref name="waitHandles " />has received
   a signal. If the current thread receives a request to abort before the signals
   are received, this method returns <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>
        <para>Waits for any of the elements in the specified array to
 receive a signal, using a 32-bit signed
 integer to measure the time interval, and specifying whether to exit the
 synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>The array index of the object that satisfied the wait, 
 or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no
 object satisfied the wait and a time interval equivalent to
 <paramref name="millisecondsTimeout" /> has passed.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>
        <para>Waits for any of the elements in the specified array to receive a signal,
 using a <see cref="T:System.TimeSpan" />
 to measure the time interval and specifying whether to exit the
 synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="timeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
 The array index of the object that satisfied the wait,
 or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no
 object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has
 passed.
</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>
        <para>Waits for any of the elements in the specified array to receive a signal.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <returns>
        <para>The array index of the object that satisfied the wait.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>
        <para>When overridden in a derived class, releases all 
      resources held by the current <see cref="T:System.Threading.WaitHandle" />
      .
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and
   optionally releases the managed resources.</para>
      </summary>
      <param name="explicitDisposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Threading.WaitHandle.Finalize">
      <summary>
        <para>Releases
      the resources held by the current instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.WaitHandle.Handle">
      <summary>
        <para> Gets or sets the native operating system handle.</para>
      </summary>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial
 state to signaled.</para>
      </summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to nonsignaled.</param>
    </member>
    <member name="M:System.Threading.AutoResetEvent.Reset">
      <summary>
        <para> Sets the state of the specified event to
 nonsignaled.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the function succeeds; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.AutoResetEvent.Set">
      <summary>
        <para> Sets the state of the specified event to signaled.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the function succeeds; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="T:System.Threading.Interlocked">
      <summary>
        <para> 
 Provides atomic operations for variables that are shared by
 multiple threads.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
      <summary>
        <para> Increments a specified variable and stores the result, 
 as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be incremented. </param>
      <returns>
        <para> The incremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
      <summary>
        <para> Decrements a specified variable and stores the result, as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be decremented. </param>
      <returns>
        <para> 
 The decremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
      <summary>
        <para> Increments a specified variable and stores the result, 
 as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be incremented. </param>
      <returns>
        <para> The incremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
      <summary>
        <para> Decrements the specified variable and stores the result, as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be decremented. </param>
      <returns>
        <para> The
 decremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
      <summary>
        <para> Sets a 32-bit signed integer to a specified value as an atomic
 operation, and returns the original value.
 </para>
      </summary>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <returns>
        <para> The
 original value of <paramref name="location1" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
      <summary>
        <para> Compares two 32-bit signed integers for equality and, if they are
 equal, replaces one of the values.</para>
      </summary>
      <param name="location1">
        <para>The destination value that will be compared with the value of the <paramref name="comparand" /> parameter and will possibly be replaced.</para>
      </param>
      <param name="value">The value that will replace the destination value if the comparison results in equality. </param>
      <param name="comparand">The value to be compared to the <paramref name="location1" /> parameter. </param>
      <returns>
        <para> The original value of the <paramref name="location1" /> parameter.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
      <summary>
        <para> Sets a single-precision floating point number to a specified value as an atomic
 operation, and returns the original value.
 </para>
      </summary>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <returns>
        <para> The original value of <paramref name="location1" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
      <summary>
        <para>Compares two single-precision floating point numbers for equality and, 
 if they are equal, replaces one of the values.</para>
      </summary>
      <param name="location1">The destination value that will be compared with the value of the <paramref name="comparand" /> parameter and will possibly be replaced. </param>
      <param name="value">The value that will replace the destination value if the comparison results in equality. </param>
      <param name="comparand">The value to be compared to the <paramref name="location1" /> parameter.</param>
      <returns>
        <para> The original destination value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
      <summary>
        <para> Sets an object to a specified value as an
 atomic operation, and returns a reference to the original object.
 </para>
      </summary>
      <param name="location1">The variable to set to the specified. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <returns>
        <para> The original value of <paramref name="location1" /> .
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
      <summary>
        <para> Compares two objects for equality and,
 if they are equal, replaces one of the objects.</para>
      </summary>
      <param name="location1">The destination object that will be compared with the value of the <paramref name="comparand" /> parameter and will possibly be replaced. </param>
      <param name="value">The object that will replace the destination object if the comparison results in equality.</param>
      <param name="comparand">The object to be compared to the <paramref name="location1" /> parameter. </param>
      <returns>
        <para> The original value of the <paramref name="location1" /> parameter.
 </para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.IObjectHandle">
      <summary>
        <para>Defines the interface for unwrapping marshal by value objects from
      indirection.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.IObjectHandle.Unwrap">
      <summary>
        <para>Unwraps the object.</para>
      </summary>
      <returns>
        <para>The unwrapped object.</para>
      </returns>
    </member>
    <member name="T:System.Threading.LockCookie">
      <summary>
        <para>
       Defines the lock that implements single-writer/multiple-reader
       semantics. This is a value type.
    </para>
      </summary>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
      <summary>
        <para> Occurs when notifying one
 or more waiting threads that an event has occurred. This
 class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether
 to set the initial state to signaled.
 </para>
      </summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled. </param>
    </member>
    <member name="M:System.Threading.ManualResetEvent.Reset">
      <summary>
        <para> Sets the state of the specified event to nonsignaled.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the function succeeds;
 otherwise, <see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.ManualResetEvent.Set">
      <summary>
        <para> Sets the state of the specified event to signaled.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the function succeeds; otherwise,
<see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="T:System.Threading.Monitor">
      <summary>
        <para> Provides
      a mechanism that synchronizes access to objects.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
      <summary>
        <para> Acquires an exclusive
      lock on the specified object. </para>
      </summary>
      <param name="obj">The object on which to acquire the monitor lock.</param>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
      <summary>
        <para>Releases an exclusive lock on the specified object. </para>
      </summary>
      <param name="obj">The object on which to release the lock.</param>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
      <summary>
        <para>Attempts to acquire an exclusive lock on the specified object.</para>
      </summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <returns>
        <para>
          <see langword="true " /> if the current thread acquires
   the lock; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
      <summary>
        <para>Attempts, for the specified number of milliseconds, to acquire an exclusive
      lock on the specified object.</para>
      </summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name=" millisecondsTimeout">The number of milliseconds to wait for the lock.</param>
      <returns>
        <para>
          <see langword="true " /> if the current thread acquires
   the lock; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
      <summary>
        <para>Attempts, for the specified amount of time, to acquire an exclusive lock on the
      specified object.</para>
      </summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name=" timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</param>
      <returns>
        <para>
          <see langword="true " /> if the current thread acquires the lock
   without blocking; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
      <summary>
        <para>Waits for notification from an object that called the <see cref="M:System.Threading.Monitor.Pulse(System.Object)" /> or <see cref="M:System.Threading.Monitor.PulseAll(System.Object)" /> method or
   for a specified timer to elapse. This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name=" millisecondsTimeout">The number of milliseconds to wait before the method returns.</param>
      <param name=" exitContext">
        <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if the wait
   succeeded or did not time out; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
      <summary>
        <para>Releases the lock on an object and blocks the current thread
      until it reacquires the lock, or until a specified amount of time elapses, optionally exiting
      the synchronization domain for the synchronized context before the wait and reacquiring the
      domain.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before this method returns.</param>
      <param name="exitContext">
        <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if the wait succeeded or did not time out; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
      <summary>
        <para>Releases the lock on an object and blocks the current
      thread until it reacquires the lock or a specified amount of time elapses.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait before this method returns.</param>
      <returns>
        <para>
          <see langword="true" /> if the lock
   was reacquired before the specified time elapsed; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
      <summary>
        <para>Releases the lock on an object and blocks the current
      thread until it reacquires the lock or a specified amount of time elapses.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before this method returns.</param>
      <returns>
        <para>
          <see langword="true" /> if the lock was reacquired before the specified time elapsed; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
      <summary>
        <para>Releases the lock on an object and blocks the current
      thread until it reacquires the
      lock.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <returns>
        <para>
          <see langword="true " />if the call returned because the
   caller reacquired the lock for the specified object. This method does not return
   if the lock is not reacquired. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
      <summary>
        <para>Notifies a thread in the waiting queue of a change in the locked object's state.</para>
      </summary>
      <param name="obj">The object a thread is waiting for.</param>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
      <summary>
        <para> Notifies all waiting threads of a change in the object's
      state.</para>
      </summary>
      <param name="obj">The object that sends the pulse.</param>
    </member>
    <member name="T:System.Threading.Mutex">
      <summary>
        <para>A synchronization primitive than can also be used for interprocess
 synchronization.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value indicating whether the calling thread should have initial ownership
   of the mutex, a string that is the name of the mutex, and a Boolean value that, when the
   method returns, will indicate whether the calling thread was granted initial ownership of the
   mutex.</para>
      </summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />. </param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed. </param>
      <param name="createdNew">When this method returns, contains a Boolean that is <see langword="true" /> if the calling thread was granted initial ownership of the mutex; otherwise, <see langword="false" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value indicating whether the calling thread should have
   initial ownership of the mutex, and a string that is the name of the
   mutex.</para>
      </summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />. </param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed. </param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value indicating whether the
   calling thread should have initial ownership of the mutex.
   </para>
      </summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Mutex.ReleaseMutex">
      <summary>
        <para> Releases the <see cref="T:System.Threading.Mutex" /> once.
 </para>
      </summary>
    </member>
    <member name="T:System.Threading.NativeOverlapped">
      <summary>
        <para>Provides an explicit layout that is visible from unmanaged code and that will have the
 same layout as the Win32 OVERLAPPED structure with additional reserved fields at
 the end.</para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalLow">
      <summary>
        <para>Specifies a system-dependent status. Reserved for operating system use. </para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalHigh">
      <summary>
        <para> Specifies 
      the length of the data transferred. Reserved for operating system
      use. </para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetLow">
      <summary>
        <para>Specifies a file position at which to start the
 transfer.</para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetHigh">
      <summary>
        <para> 
 Specifies the high word of the byte offset
 at which to start the transfer.</para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.EventHandle">
      <summary>
        <para>Specifies the handle to an event set to the signaled state when the operation is
 complete. The calling process must set this member either to zero or to a valid
 event handle before calling any overlapped functions. </para>
      </summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor">
      <summary>
        <para>
		  Initializes a new, empty instance of the <see langword="Overlapped" /> class.
	   </para>
      </summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
      <summary>
        <para> Initializes a new instance of the <see langword="Overlapped" /> class from the constructor
   parameters.
   </para>
      </summary>
      <param name="offsetLo">The file position at which to start the transfer.</param>
      <param name="offsetHi">The high word of the byte offset at which to start the transfer.</param>
      <param name="hEvent">The handle to an event.</param>
      <param name="ar">The results of an asynchronous operation on an asynchronous delegate.</param>
    </member>
    <member name="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
      <summary>
        <para> Packs a managed overlapped class into a <see cref="T:System.Threading.NativeOverlapped" /> value type.
   </para>
      </summary>
      <param name="iocb">
      </param>
      <returns>
        <para> An unmanaged pointer. This unmanaged pointer can be passed to the operating
      system in overlapped I/O operations. The <see cref="T:System.Threading.NativeOverlapped" /> value type is fixed in
      physical memory until <see cref="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)" /> is called.
      </para>
      </returns>
    </member>
    <member name="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
      <summary>
        <para>Unpacks an unmanaged <see cref="T:System.Threading.NativeOverlapped" /> value type into an unmanaged overlapped class.</para>
      </summary>
      <param name="iocb">
      </param>
    </member>
    <member name="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
      <summary>
        <para> Unpacks an unmanaged <see cref="T:System.Threading.NativeOverlapped" />
value type into a managed overlapped class.</para>
      </summary>
      <param name="nativeOverlappedPtr">
      </param>
      <returns>
        <para> The <see cref="T:System.Threading.NativeOverlapped" /> value type is not freed from physical memory 
   until you call <see cref="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)" />
   .
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
      <summary>
        <para>Frees the unmanaged memory associated with a native
      overlapped structure, allocated by <see cref="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)" />
      .</para>
      </summary>
      <param name="nativeOverlappedPtr">
      </param>
    </member>
    <member name="P:System.Threading.Overlapped.AsyncResult">
      <summary>
        <para>Gets or sets the results of an asynchronous operation on an asynchronous 
      delegate.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetLow">
      <summary>
        <para>Gets or sets the file position at which to start the transfer.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetHigh">
      <summary>
        <para>Gets or sets the high word of the byte offset at 
      which to start the transfer. </para>
      </summary>
    </member>
    <member name="P:System.Threading.Overlapped.EventHandle">
      <summary>
        <para> 
      Gets or sets the handle to an event.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLock">
      <summary>
        <para>Defines the lock that implements single-writer and
      multiple-reader semantics.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" />
 class.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
      <summary>
        <para>Acquires reader lock, using an <see cref="T:System.Int32" /> value for the timeout.</para>
      </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
      <summary>
        <para>Acquires the reader lock, using a <see cref="T:System.TimeSpan" />value for the timeout.</para>
      </summary>
      <param name="timeout">A <see langword="TimeSpan" /> specifying the timeout period.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
      <summary>
        <para>Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the timeout.</para>
      </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
      <summary>
        <para> Acquires the writer lock, using a <see cref="T:System.TimeSpan" />
value for the timeout.</para>
      </summary>
      <param name="timeout">The <see langword="TimeSpan" /> specifying the timeout period.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
      <summary>
        <para>Releases the reader lock.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
      <summary>
        <para>Releases the writer lock.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
      <summary>
        <para>Upgrades the reader thread to a writer, using an 
   <see langword="Int32" /> value for the timeout.</para>
      </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
      <returns>
        <para>A <see cref="T:System.Threading.LockCookie" /> value.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
      <summary>
        <para> Upgrades the reader thread to a writer, using 
      a <see langword="TimeSpan" />
      value for the
      timeout.</para>
      </summary>
      <param name="timeout">The <see langword="TimeSpan" /> specifying the timeout period.</param>
      <returns>
        <para>A <see cref="T:System.Threading.LockCookie" /> value.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
      <summary>
        <para> Restores the lock status of the thread to when it calls
   <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</para>
      </summary>
      <param name="lockCookie">The <see cref="T:System.Threading.LockCookie" /> .</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseLock">
      <summary>
        <para>Releases the lock, regardless of the number of times the thread
      acquired the lock.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
      <summary>
        <para> Restores the lock status of the thread
      to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</para>
      </summary>
      <param name="lockCookie">The <see cref="T:System.Threading.LockCookie" /> .</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
      <summary>
        <para> Indicates whether intermediate writes have occurred since the sequence number
      was obtained.</para>
      </summary>
      <param name="seqNum">The sequence number.</param>
      <returns>
        <para>
          <see langword="true " />if intermediate writes have occurred since the sequence number was obtained;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
      <summary>
        <para>Gets a value indicating whether the current thread holds the reader lock.</para>
      </summary>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
      <summary>
        <para>Gets a value indicating whether the
      current thread holds the writer lock.</para>
      </summary>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.WriterSeqNum">
      <summary>
        <para> Gets the current sequence number.</para>
      </summary>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
      <summary>
        <para> The exception that is thrown when a
      synchronized method is invoked from an unsynchronized block of code.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with default properties.
   </para>
      </summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with a specified error message.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>
        <para> Creates and controls a thread, sets its priority, and gets its
      status.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Thread" />
class.</para>
      </summary>
      <param name="start">A <see cref="T:System.Threading.ThreadStart" /> delegate that references the methods to be invoked when this thread begins executing. </param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>
        <para> Causes the operating system to change the state of the
      current instance to <see cref="F:System.Threading.ThreadState.Running" qualify="true" />
      . </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>
        <para> Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the
   process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates
   the thread.</para>
      </summary>
      <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</param>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>
        <para> Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is
   invoked, to begin the process of terminating the thread. Calling this method usually terminates
   the thread.
   </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>
        <para> Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current
   thread.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>
        <para> Either suspends the thread, or if the thread is already
      suspended, has no effect.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>
        <para> Resumes a thread that has been suspended.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>
        <para> Interrupts a thread that is in the
   <see langword="WaitSleepJoin" /> thread
      state.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>
        <para> Blocks the calling thread until
      a thread terminates.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>
        <para> Blocks the calling thread until a thread terminates or the specified time elapses.
      </para>
      </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate. </param>
      <returns>
        <para>
          <see langword="true " />if the thread has terminated; <see langword="false " />if the thread has
   not terminated after the amount of time
   specified by the <paramref name="millisecondsTimeout" /> parameter
   has elapsed.
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>
        <para> Blocks the calling thread until a thread terminates or the specified time
      elapses.
      </para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate. </param>
      <returns>
        <para>
          <see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated
   after the amount of time specified by the <paramref name="timeout" /> parameter
   has elapsed.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>
        <para> Suspends the current thread for a specified time.
      </para>
      </summary>
      <param name="millisecondsTimeout">The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate that this thread should be suspended to allow other waiting threads to execute. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to block the thread indefinitely. </param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>
        <para> Blocks the current thread for a specified time. 
   </para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> set to the amount of time for which the thread is blocked. Specify zero to indicate that this thread should be suspended to allow other waiting threads to execute. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to block the thread indefinitely. </param>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>
        <para>Causes a thread to wait the number of
      times defined by the <paramref name="iterations" /> parameter.</para>
      </summary>
      <param name="iterations">A 32-bit signed integer that defines how long a thread is to wait.</param>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>
        <para> Releases the resources held by this instance.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>
        <para> Allocates an unnamed data
      slot on all
      the threads.
      </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.LocalDataStoreSlot" /> . </para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>
        <para> Allocates a
      named data slot on all threads.
      </para>
      </summary>
      <param name="name">The name of the data slot to be allocated. </param>
      <returns>
        <para>A <see cref="T:System.LocalDataStoreSlot" /> .</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>
        <para> Looks up a named data slot.
      </para>
      </summary>
      <param name="name">The name of the local data slot.</param>
      <returns>
        <para>A <see cref="T:System.LocalDataStoreSlot" /> allocated for this
   thread.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>
        <para> Frees
      a previously allocated named data slot.
      </para>
      </summary>
      <param name="name">The name of the data slot to be freed. </param>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>
        <para> Retrieves the value
      from the specified slot on the current thread, within the current thread's current domain.
      </para>
      </summary>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value. </param>
      <returns>
        <para> The retrieved value.
      </para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>
        <para> Sets the
      data in the specified slot on the currently running thread, for that thread's current domain.
      </para>
      </summary>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value. </param>
      <param name="data">The value to be set. </param>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>
        <para> 
      Returns the current domain
      in which the current thread is running.
   </para>
      </summary>
      <returns>
        <para>An <see cref="T:System.AppDomain" /> representing the current application domain of the
   running thread.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>
        <para>Returns a unique application domain identifier.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer uniquely identifying the application domain.</para>
      </returns>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>
        <para> Gets or sets a value indicating
      the scheduling priority of a thread.
   </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>
        <para> Gets a value
      indicating the execution status of the current thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>
        <para> Gets the currently running thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>
        <para> Gets or sets a
      value indicating whether or not a thread is a background thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>
        <para> Gets a value containing the states of the
      current thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>
        <para> Gets or sets
      the apartment state of this thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>
        <para>Gets or sets the current culture used by the Resource Manager to look up 
      culture-specific resources at run time.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>
        <para>Gets or sets the culture for the
      current thread.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentContext">
      <summary>
        <para> Gets the current context in which the thread is executing.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>
        <para> Gets or sets the thread's current principal (for role-based
      security).
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>
        <para> Gets or
      sets the name of
      the thread.
      </para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>
        <para> The exception that is thrown when a call is made to the
   <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method. This
      class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>
        <para> Gets an object that contains application-specific
      information related to the thread abort.
      </para>
      </summary>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>
        <para> Indicates that the default threading model for an application
      
      is single-threaded apartment (STA).
      </para>
      </summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.STAThreadAttribute" /> 
class.</para>
      </summary>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>
        <para> Indicates that the default threading model for an
      application is multithreaded apartment (MTA). </para>
      </summary>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MTAThreadAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>
        <para> The exception that is thrown when a <see cref="T:System.Threading.Thread" /> is interrupted while it is in a waiting
   state.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" />
class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>
        <para> Represents a handle that has been registered when
      calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. This
      class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>
        <para> Cancels a registered wait operation issued by the
   <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
   
   method.
   </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled. </param>
      <returns>
        <para>
          <see langword="true " />if the function succeeds;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Finalize">
      <summary>
        <para>Ensures that resources are freed and other cleanup 
      operations are performed when the garbage collector reclaims the
   <see langword="RegisteredWaitHandle" /> .</para>
      </summary>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>
        <para> Defines the callback method
      for thread pool user work items. That
      method must match this delegate.</para>
      </summary>
      <param name="state">The object passed to the delegate. </param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>
        <para> Receives a <see langword="Boolean " />parameter that
   determines whether the handle was signaled or the <see langword="WaitHandle" />
   timed out.
   </para>
      </summary>
      <param name="state">The object passed to the delegate. </param>
      <param name=" timedOut">
        <see langword="true" /> to indicate the handle was signaled; <see langword="false" /> to indicate the handle timed out. </param>
    </member>
    <member name="T:System.Threading.IOCompletionCallback">
      <summary>
        <para>Receives the error code, number of bytes, and overlapped value type when an
 I/O operation completes on the thread pool.</para>
      </summary>
      <param name="errorCode">The error code.</param>
      <param name=" numBytes">The number of bytes that are transferred.</param>
      <param name=" pOVERLAP">A <see cref="T:System.Threading.NativeOverlapped" /> representing an unmanaged pointer to the native overlapped value type.</param>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>
        <para>Provides a pool of threads that can be used to post work items,
      process asynchronous I/O, wait on behalf of other threads, and process timers.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>
        <para> Retrieves the number of requests to the thread pool that
      can queue concurrently. All requests above that number are blocked until some
      of the queued requests finish work.</para>
      </summary>
      <param name="workerThreads">The number of worker threads.</param>
      <param name=" completionPortThreads">The number of asynchronous I/O threads.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>
        <para>Retrieves the number of thread pool requests or work 
      items that the user can add before reaching the maximum limit defined in <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      .</para>
      </summary>
      <param name="workerThreads">The number of worker threads.</param>
      <param name="completionPortThreads">The number of asynchronous I/O threads.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>
        <para> Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit unsigned integer for
   the time out in milliseconds.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para> The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used
   to cancel the registered
   wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>
        <para>Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the
   time out in
   milliseconds. </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" />
that encapsulates the
native handle.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>
        <para>Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit unsigned integer for the
   time out in
   milliseconds. </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" />
that encapsulates the
native handle.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>
        <para>Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a <see cref="T:System.TimeSpan" /> value 
   for the time out. </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" timeout">The time out represented by a <see cref="T:System.TimeSpan" /> . If <paramref name="timeout" /> is zero, the function tests the object's state and returns immediately. If <paramref name="timeout" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" />
that encapsulates the
native handle.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="timeout">The time out represented by a <see cref="T:System.TimeSpan" /> . If <paramref name="timeout" /> is zero, the function tests the object's state and returns immediately. If <paramref name="timeout" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>
        <para> Queues a user work item to the thread pool, invokes the
      specified delegate, and specifies an object to be passed to the delegate when serviced from the thread pool.
      </para>
      </summary>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback" /> representing the delegate to invoke when a thread in the thread pool picks up the work item. </param>
      <param name="state">The object that is passed to the delegate when serviced from the thread pool. </param>
      <returns>
        <para>
          <see langword="true " />if the method succeeds;
   otherwise, <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>
        <para> Queues a user work item to the thread pool and invokes the specified delegate.
      </para>
      </summary>
      <param name="callBack">A <see langword="WaitCallback" /> representing the delegate to invoke when the thread in the thread pool picks up the work item. </param>
      <returns>
        <para>
          <see langword="true " />if the method succeeds;
   otherwise, <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>
        <para> 
      Queues a user work item to the thread pool.</para>
      </summary>
      <param name="callBack">A <see langword="WaitCallback" /> representing the delegate to invoke when a thread in the thread pool picks up the work item. </param>
      <param name="state">The object that is passed to the delegate when serviced from the thread pool. </param>
      <returns>
        <para>
          <see langword="true " />if the method succeeds; otherwise, <see langword="false" /> . </para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>
        <para> Binds an operating system handle to the
   <see langword="ThreadPool" /> .
      </para>
      </summary>
      <param name="osHandle">An <see cref="T:System.IntPtr" /> that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side.</param>
      <returns>
        <para>
          <see langword="true" /> to bind the handle; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>
        <para> Specifies the scheduling priority of a <see cref="T:System.Threading.Thread" />.
   </para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled after threads with any other priority.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled after threads with <see langword="Normal" /> priority and before those
   with <see langword="Lowest" /> priority.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be
   scheduled after threads with <see langword="AboveNormal" /> priority and before
   those with <see langword="BelowNormal" />
   priority. Threads have <see langword="Normal" /> priority by
   default.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled after threads with <see langword="Highest " />priority and before those
   with <see langword="Normal" /> priority.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled before threads with any other priority.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>
        <para> Represents the method that will handle the
   <see langword="Start" /> event of the <see cref="T:System.Threading.Thread" />
   class.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>
        <para>Specifies the execution states of a <see cref="T:System.Threading.Thread" />.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>
        <para>The thread has been started, it is not blocked, and there
      is no pending <see cref="T:System.Threading.ThreadAbortException" /> .</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>
        <para>The thread is being
      requested to stop. This is for internal use only.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>
        <para>The thread is being
      requested to suspend.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>
        <para>The thread is
      being executed as a background thread, as opposed to a foreground thread. This
      state is controlled by setting the <see cref="P:System.Threading.Thread.IsBackground" qualify="true" />
      property.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>
        <para>The <see cref="M:System.Threading.Thread.Start" qualify="true" /> method has not been invoked on the thread.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>
        <para>The thread has
      stopped.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>
        <para>The thread is blocked as a result
      of a call to <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />, <see cref="M:System.Threading.Thread.Sleep(System.Int32)" />, or <see cref="M:System.Threading.Thread.Join" />.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>
        <para>The thread has
      been suspended.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>
        <para>The <see cref="M:System.Threading.Thread.Abort(System.Object)" qualify="true" /> method has been invoked on 
   the thread, but the thread has not yet received the pending <see cref="T:System.Threading.ThreadAbortException" qualify="true" /> that will attempt
   to terminate it.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>
        <para> The thread is in the <see langword="Stopped" /> state.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>
        <para> The exception that is thrown when a <see cref="T:System.Threading.Thread" /> is in an invalid <see cref="P:System.Threading.Thread.ThreadState" />
for the method call.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class
   with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message"> The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>
        <para> Indicates that the value of a static field is unique for each
      thread.</para>
      </summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> 
class.
</para>
      </summary>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>
        <para> Contains a constant used to specify an infinite amount of time. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>
        <para> A constant used to specify an infinite waiting period. This field is constant.
 </para>
      </summary>
    </member>
    <member name="T:System.Threading.TimerCallback">
      <summary>
        <para> Represents the method that will handle the state of a
 <see cref="T:System.Threading.Timer" /> .
 </para>
      </summary>
      <param name="state">The source of the event. This is an object containing application-specific information relevant to the methods invoked by this delegate, or <see langword="null" /> . </param>
    </member>
    <member name="T:System.Threading.Timer">
      <summary>
        <para> Provides a mechanism for executing methods at specified intervals. This class cannot be inherited.
 </para>
      </summary>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see langword="Timer " />class, using 32-bit signed integers to measure time intervals.</para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by the <paramref name="callback" /> parameter, or <see langword="null" />.</param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Initializes a new instance of the <see langword="Timer " />class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by the <paramref name="callback" /> parameter, or <see langword="null" />.</param>
      <param name="dueTime">The <see cref="T:System.TimeSpan" /> representing the amount of time to delay before the <paramref name="callback" /> parameter invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
      <summary>
        <para> Initializes a new instance of the <see langword="Timer " />class, using 32-bit unsigned integers to measure time intervals.
 </para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by <paramref name="callback" />, or <see langword="null" />.</param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see langword="Timer " />class, using 64-bit signed integers to measure time intervals.</para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by <paramref name="callback" />, or <see langword="null" />.</param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
      <summary>
        <para>Changes the start time and the interval between method 
 invocations for a timer, using 32-bit signed
 integers to measure
 time intervals.
 </para>
      </summary>
      <param name="dueTime">The amount of time to delay before the delegate specified at <see cref="T:System.Threading.Timer" /> construction time invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the
 current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Changes the start time and the
 interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to
 measure time intervals.
 </para>
      </summary>
      <param name="dueTime">The <see cref="T:System.TimeSpan" /> representing the amount of time to delay before the <paramref name="callback" /> parameter invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
      <summary>
        <para>Changes the start time and the interval between method 
 invocations for a timer, using 32-bit unsigned integers to measure
 time intervals.
 </para>
      </summary>
      <param name="dueTime">The amount of time to delay before the delegate specified at <see cref="T:System.Threading.Timer" /> construction time invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
      <summary>
        <para>Changes the start time and the interval between method 
 invocations for a timer, using 64-bit signed integers to measure
 time intervals.
 </para>
      </summary>
      <param name="dueTime">The amount of time to delay before the delegate specified at <see cref="T:System.Threading.Timer" /> construction time invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
      <summary>
        <para> Releases all resources used by the current instance
 of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.
 </para>
      </summary>
      <param name="notifyObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of. </param>
      <returns>
        <para>
          <see langword="true " />if the function succeeds;
 otherwise, <see langword="false" />
 .
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
      <summary>
        <para>Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Timer.Finalize">
      <summary>
        <para>Releases
      the resources held by the current instance.
      </para>
      </summary>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>
        <para>Implements the <see cref="T:System.Collections.IList" />
interface using an array whose size is dynamically increased as required.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> 
 class that is empty and has the default initial capacity.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> 
 class that is empty and has the specified initial capacity.</para>
      </summary>
      <param name="capacity">The number of elements that the new list is initially capable of storing.</param>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> class that contains elements copied from the specified 
    collection and that has the same initial capacity as the number of elements copied.</para>
      </summary>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements are copied to the new list.</param>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>
        <para>Creates an <see cref="T:System.Collections.ArrayList" />
wrapper for a specific <see cref="T:System.Collections.IList" />.
</para>
      </summary>
      <param name="list">
   The <see cref="T:System.Collections.IList" /> to wrap.
   </param>
      <returns>
        <para>The <see cref="T:System.Collections.ArrayList" />
wrapper around the <see cref="T:System.Collections.IList" />.
</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>
        <para>Adds an object to the end of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to be added to the end of the <see cref="T:System.Collections.ArrayList" />.</param>
      <returns>
        <para>The <see cref="T:System.Collections.ArrayList" /> index at which the <paramref name="value" /> has
   been added.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>
        <para>Adds the elements of an <see cref="T:System.Collections.ICollection" />
 to the end of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the end of the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches a section of the sorted <see cref="T:System.Collections.ArrayList" /> for
   an element using the specified comparer and returns the zero-based index of the
   element.</para>
      </summary>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the default comparer that is the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
      <returns>
        <para>The zero-based
      index of the value in the sorted <see cref="T:System.Collections.ArrayList" />,
      if value is found; otherwise, a negative number, which is the bitwise complement
      of the index of the next element.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>
        <para>Searches the entire sorted <see cref="T:System.Collections.ArrayList" /> for an element using the default comparer and
   returns the zero-based index of the element.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <returns>
        <para>The zero-based index of the value in the sorted <see cref="T:System.Collections.ArrayList" />, if value is found;
   otherwise, a negative number, which is the bitwise complement of the index of
   the next element.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches the entire sorted <see cref="T:System.Collections.ArrayList" /> for an element using the specified comparer
   and returns the zero-based index of the element.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default comparer that is the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
      <returns>
        <para>The zero-based index of the value in the sorted <see cref="T:System.Collections.ArrayList" />, if value is found;
   otherwise, a negative number, which is the bitwise complement of the index of
   the next element.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>
        <para>Removes all elements from the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>
        <para>Determines whether an element is in the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="item">
        <para>The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.The element to locate can be <see langword="null" />.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.ArrayList" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the beginning of the target array.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Copies a range of elements from the <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</para>
      </summary>
      <param name="index">The zero-based index in the source <see cref="T:System.Collections.ArrayList" /> at which copying begins.</param>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IList" /> wrapper with a fixed size.
    </para>
      </summary>
      <param name="list">
    The <see cref="T:System.Collections.IList" /> to wrap.
 </param>
      <returns>
        <para>An <see cref="T:System.Collections.IList" /> wrapper with a fixed size.
    </para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" /> wrapper with a fixed size.</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList" /> to wrap.</param>
      <returns>
        <para>An <see cref="T:System.Collections.ArrayList" /> wrapper with a fixed size.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>
        <para>Returns an enumerator for the entire
    <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" />
 for the entire <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>
        <para>Returns an enumerator for a section of the
    <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based starting index of the <see cref="T:System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
      <param name="count">The number of elements in the <see cref="T:System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" />
 for the specified section of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>
        <para>Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.ArrayList" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>
        <para>Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from the specified index to the last element.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that starts at the specified index and contains the specified number of elements.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that starts at <paramref name="startIndex" /> and contains <paramref name="count" /> number of elements, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>
        <para>Inserts an element into the <see cref="T:System.Collections.ArrayList" />
at the specified index.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">
        <para>The <see cref="T:System.Object" /> to insert.</para>
      </param>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>
        <para>Inserts the elements of a collection into
       the <see cref="T:System.Collections.ArrayList" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements should be inserted into the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>
        <para> Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" /> within the entire the <see cref="T:System.Collections.ArrayList" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>
        <para> Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the last occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from the first element to the specified index.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>
        <para> Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the last occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that contains the specified number of elements and ends at the specified index.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="startIndex" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>
        <para>Returns a read-only <see cref="T:System.Collections.IList" /> wrapper.</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.IList" /> to wrap.</param>
      <returns>
        <para>A read-only <see cref="T:System.Collections.IList" />
 wrapper around <paramref name="list" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>
        <para>Returns a read-only <see cref="T:System.Collections.ArrayList" /> wrapper.</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList" /> to wrap.</param>
      <returns>
        <para>A read-only <see cref="T:System.Collections.ArrayList" />
 wrapper around <paramref name="list" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>
        <para>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the element at the specified index
      of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <para>Removes a range of elements from the
   <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" />
 whose elements are copies of the specified value.</para>
      </summary>
      <param name="value">
        <para>The <see cref="T:System.Object" /> to copy multiple times in the new <see cref="T:System.Collections.ArrayList" />. The value to copy can be <see langword="null" />.</para>
      </param>
      <param name="count">The number of times <paramref name="value" /> should be copied.</param>
      <returns>
        <para>An <see cref="T:System.Collections.ArrayList" />
 with <paramref name="count" /> number of elements, all of which are copies of
 <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>
        <para>Reverses the order of the elements in the
       entire <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>
        <para>Reverses the order of the elements in the
       specified range.</para>
      </summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>
        <para>Copies the elements of a collection over a
       range of elements in the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList" /> index at which to start copying the elements of <paramref name="c" />.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements to copy to the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" /> which represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList" /> index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <returns>
        <para> An <see cref="T:System.Collections.ArrayList" /> which
   represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>
        <para>Sorts the elements in the
       entire <see cref="T:System.Collections.ArrayList" /> using the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in the
       entire <see cref="T:System.Collections.ArrayList" /> using the specified comparer.</para>
      </summary>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in a section
       of <see cref="T:System.Collections.ArrayList" /> using the specified comparer.</para>
      </summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements. <para>-or-</para><para><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para></param>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IList" />
wrapper that is synchronized (thread-safe).</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.IList" /> to synchronize.</param>
      <returns>
        <para>An <see cref="T:System.Collections.IList" /> wrapper that is
 synchronized (thread-safe).</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" />
wrapper that is synchronized (thread-safe).</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList" /> to synchronize.</param>
      <returns>
        <para>An <see cref="T:System.Collections.ArrayList" /> wrapper that is
 synchronized (thread-safe).</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>
        <para>Copies the elements of the <see cref="T:System.Collections.ArrayList" />
 to a new <see cref="T:System.Object" /> array.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Object" /> array containing copies of the
    elements of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>
        <para>Copies the elements of the <see cref="T:System.Collections.ArrayList" />
 to a new array of the specified type.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of array to create and copy elements to.</param>
      <returns>
        <para>An array of the specified type
       containing copies of the elements of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>
        <para>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>
        <para>Gets or sets the number of elements that
       the <see cref="T:System.Collections.ArrayList" /> can contain.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>
        <para>Gets the number of elements actually contained in 
       the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether
       the <see cref="T:System.Collections.ArrayList" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to
 the <see cref="T:System.Collections.ArrayList" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>
        <para>Gets an object that can be used to
 synchronize access to the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>
        <para>Manages a compact array of bit values,
      which are represented as Booleans, where <see langword="true" /> indicates that
      the bit is on (1) and <see langword="false" /> indicates the bit is off (0).</para>
      </summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> 
   class that can hold the specified number of bit values, which are initially set to <see langword="false" />.</para>
      </summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> 
   class that can hold the specified number of bit values, which are initially set to the specified value.</para>
      </summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</param>
      <param name="defaultValue">The Boolean value to assign to each bit.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from 
   the specified array of bytes.</para>
      </summary>
      <param name="bytes">An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from 
    the specified array of Booleans.</para>
      </summary>
      <param name="values">An array of Booleans to copy.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from 
    the specified array of 32-bit integers.</para>
      </summary>
      <param name="values">An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> 
   class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="bits">The <see cref="T:System.Collections.BitArray" /> to copy.</param>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>
        <para>Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="index">The zero-based index of the value to get.</param>
      <returns>
        <para>The value of the bit at position <paramref name="index" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>
        <para> Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray" /> to the specified value.</para>
      </summary>
      <param name="index">The zero-based index of the bit to set.</param>
      <param name="value">The Boolean value to assign to the bit.</param>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>
        <para> Sets all bits in the <see cref="T:System.Collections.BitArray" /> to the specified value.</para>
      </summary>
      <param name="value">The Boolean value to assign to all bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>
        <para>Performs the bitwise AND operation on the elements in the
       current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise AND operation.</param>
      <returns>
        <para>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise AND
    operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding
    elements in the specified <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>
        <para>Performs the bitwise OR operation on the elements in the
       current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise OR operation.</param>
      <returns>
        <para>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise OR
    operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding
    elements in the specified <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>
        <para>Performs the bitwise eXclusive OR operation on the
       elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise eXclusive OR operation.</param>
      <returns>
        <para>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise
    eXclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" />
    against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>
        <para>Inverts all the bit values in the current <see cref="T:System.Collections.BitArray" />,
    so that elements set to <see langword="true" /> are changed to <see langword="false" />,
    and elements set to <see langword="false" /> are changed to <see langword="true" />.</para>
      </summary>
      <returns>
        <para>The current instance with inverted bit values.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.BitArray" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the
   specified index of the target array.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.BitArray" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>
        <para>Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="index">The zero-based index of the value to get or set.</param>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>
        <para> Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>
        <para>Gets the number of elements contained in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.BitArray" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Collections.CaseInsensitiveComparer">
      <summary>
        <para>Compares two objects for equivalence,
 ignoring the case of strings.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>
        <para>Exposes a method that compares two objects.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>
        <para> Compares two objects and returns a value indicating whether one
 is less than, equal to or greater than the other.</para>
      </summary>
      <param name="x">First object to compare.</param>
      <param name="y">Second object to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.CaseInsensitiveComparer" /> class using
 the <see cref="P:System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.CaseInsensitiveComparer" /> class using the specified <see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" qualify="true" /> to use for the new <see cref="T:System.Collections.CaseInsensitiveComparer" />.</param>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)">
      <summary>
        <para>Performs
 a case-insensitive comparison of two objects of
 the same type and returns a value indicating whether one
 is less than, equal to or greater than the other.</para>
      </summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="a" /> is less than <paramref name="b" />, with casing ignored.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="a" /> equals <paramref name="b" />, with casing ignored.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="a" /> is greater than <paramref name="b" />, with casing ignored.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="P:System.Collections.CaseInsensitiveComparer.Default">
      <summary>
        <para>Gets an instance of <see cref="T:System.Collections.CaseInsensitiveComparer" />
that is always available.</para>
      </summary>
    </member>
    <member name="T:System.Collections.CaseInsensitiveHashCodeProvider">
      <summary>
        <para> Supplies a hash code for an object, using a
       hashing algorithm that ignores the case of strings.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>
        <para>Supplies a hash code for an object, using a custom hash function.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>
        <para>Returns a hash code for the specified object.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>
        <para>A hash code for the specified object.</para>
      </returns>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the 
    <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> class using the current <see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor(System.Globalization.CultureInfo)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> class using the current <see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" qualify="true" /> to use for the new <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />.</param>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.GetHashCode(System.Object)">
      <summary>
        <para>Returns a hash code for the
       given object, using a hashing algorithm that ignores the case of strings.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>
        <para>A hash code for the
       given object, using a hashing algorithm that ignores the case of strings.</para>
      </returns>
    </member>
    <member name="P:System.Collections.CaseInsensitiveHashCodeProvider.Default">
      <summary>
        <para> Gets an instance of <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
that is always available.</para>
      </summary>
    </member>
    <member name="T:System.Collections.CollectionBase">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for a strongly typed collection.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.Clear">
      <summary>
        <para>Removes all objects from the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the element at the specified index of the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <para> Performs additional custom processes before setting a value in the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found.</param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />.</param>
      <param name="newValue">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)">
      <summary>
        <para> Performs additional custom processes before inserting a new element into the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
      <param name="value">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnClear">
      <summary>
        <para>Performs additional custom processes
      when clearing the contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)">
      <summary>
        <para>Performs additional custom processes when removing an element from the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
      <param name="value">The value of the element to remove from <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnValidate(System.Object)">
      <summary>
        <para>Performs additional custom processes when validating a value.</para>
      </summary>
      <param name="value">The object to validate.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
        <para> Performs additional custom processes after setting a value in the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found.</param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />.</param>
      <param name="newValue">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>
        <para>Performs additional custom processes after inserting a
      new element into the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name=" index">The zero-based index at which to insert <paramref name="value" />.</param>
      <param name=" value">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnClearComplete">
      <summary>
        <para>Performs additional custom processes after clearing the
      contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
        <para>Performs additional custom processes after removing an
      element from the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
      <param name="value">The value of the element to remove from <paramref name="index" />.</param>
    </member>
    <member name="P:System.Collections.CollectionBase.InnerList">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ArrayList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.List">
      <summary>
        <para>Gets an <see cref="T:System.Collections.IList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.Count">
      <summary>
        <para>Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.CollectionBase" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.CollectionBase" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#$Item$(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>
        <para>Compares two objects for equivalence, where string comparisons are case-sensitive.</para>
      </summary>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>
        <para>Gets an instance of <see cref="T:System.Collections.Comparer" /> that is always available.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>
        <para>Performs a case-sensitive comparison of two objects of
 the same type and returns a value indicating whether one
 is less than, equal to or greater than the other.</para>
      </summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="a" /> is less than <paramref name="b" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="a" /> equals <paramref name="b" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="a" /> is greater than <paramref name="b" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:System.Collections.DictionaryBase">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for a strongly typed collection of key-and-value pairs.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>
        <para>Represents a collection of key-and-value pairs.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>
        <para>When implemented by a class, determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>
        <para>When implemented by a class, adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>
        <para>When implemented by a class, removes all elements from the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>
        <para>When implemented by a class, returns an
    <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>
        <para>When implemented by a class, removes the element with the
       specified key from the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>
        <para>When implemented by a class, gets or sets the element with the specified key.</para>
      </summary>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>
        <para>When implemented by a class, gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>
        <para>When implemented by a class, gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IDictionary" />
is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IDictionary" />
has a fixed size.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.DictionaryBase" /> elements to a one-dimensional <see cref="T:System.Array" /> at the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from the <see cref="T:System.Collections.DictionaryBase" /> instance. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.Clear">
      <summary>
        <para>Clears the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
      <summary>
        <para>Gets the element with the specified key and value in the
   <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to get.</param>
      <param name="currentValue">The current value of the element associated with <paramref name="key" />.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> containing the element with the specified key and
   value.</para>
      </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes before setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to locate.</param>
      <param name="oldValue">The old value of the element associated with <paramref name="key" />.</param>
      <param name="newValue">The new value of the element associated with <paramref name="key" />.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes before inserting a new element into the
   <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to insert.</param>
      <param name="value">The value of the element to insert.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnClear">
      <summary>
        <para>Performs additional custom processes before clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
      <summary>
        <para> Performs additional custom processes before removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
      <param name="value">The value of the element to remove.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes when validating the element with the specified key and value.</para>
      </summary>
      <param name="key">The key of the element to validate.</param>
      <param name="value">The value of the element to validate.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes after setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to locate.</param>
      <param name="oldValue">The old value of the element associated with <paramref name="key" />.</param>
      <param name="newValue">The new value of the element associated with <paramref name="key" />.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes after inserting a
      new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to insert.</param>
      <param name="value">The value of the element to insert.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnClearComplete">
      <summary>
        <para>Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes after removing an
      element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
      <param name="value">The value of the element to remove.</param>
    </member>
    <member name="P:System.Collections.DictionaryBase.InnerHashtable">
      <summary>
        <para>Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.Dictionary">
      <summary>
        <para>Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.Count">
      <summary>
        <para>Gets the number of elements contained in the 
    <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.DictionaryBase" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.DictionaryBase" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.DictionaryBase" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.DictionaryBase" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#$Item$(System.Object)">
      <summary>
        <para>Gets or sets the value associated with the specified key.</para>
      </summary>
      <param name=" key">The key whose value to get or set.</param>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>
        <para>Defines a dictionary key-and-value pair that can be set
      or retrieved.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> class with the specified key and 
    value.</para>
      </summary>
      <param name="key">The object defined in each key-and-value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
    </member>
    <member name="P:System.Collections.DictionaryEnt