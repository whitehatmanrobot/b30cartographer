andler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</returns>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.-or-<paramref name="conversion" /> is not null and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.-or-<paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</returns>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not null and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.-or-<paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.-or-The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.-or-<paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.-or-<paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.-or-The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.-or-<paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
      <param name="startLine">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="startColumn">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="endLine">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater or equal than the start line.</param>
      <param name="endColumn">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).-or-The method that <paramref name="addMethod" /> represents is not an instance method.-or-<paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that addMethod represents is not named "Add" (case insensitive).-or-The method that addMethod represents is not an instance method.-or-arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Creates an empty expression that has <see cref="T:System.Void" /> type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. For static (Shared in Visual Basic), <paramref name="expression" /> must be null.</param>
      <param name="field">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null.-or-The field represented by <paramref name="field" /> is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />. This can be null for static fields.</param>
      <param name="fieldName">The name of a field to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="fieldName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">The containing object of the field. This can be null for static fields.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</param>
      <param name="fieldName">The field to be accessed.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Creates a <see cref="T:System.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <returns>The type of a System.Action delegate that has the specified type arguments.</returns>
      <param name="typeArgs">An array of <see cref="T:System.Type" /> objects that specify the type arguments for the System.Action delegate type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains more than four elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func or System.Action delegate type that has specific type arguments.</summary>
      <returns>The delegate type.</returns>
      <param name="typeArgs">The type arguments of the delegate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <returns>The type of a System.Func delegate that has the specified type arguments.</returns>
      <param name="typeArgs">An array of one to five <see cref="T:System.Type" /> objects that specify the type arguments for the System.Func delegate type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains less than one or more than five elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an if statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values. The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with if and else statements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values. The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
      <param name="defaultValue">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="name">The name of the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">The type of value that is passed when jumping to the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">The type of value that is passed when jumping to the label.</param>
      <param name="name">The name of the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements of <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains more than sixteen elements.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging info.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to. </param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression. </param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.-or-The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.-or-The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.-or-The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.-or-The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.-or-<paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-<paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.-or-<paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-<paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
      <param name="continue">The continue target used by the loop body.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function. This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment..</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />. The value passed to the label upon jumping can also be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="kind">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. It should be null if the property is static (shared in Visual Basic).</param>
      <param name="indexer">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</param>
      <param name="arguments">An IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) in Visual Basic) that contains the arguments that will be used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to. This can be null for static members.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="member" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="type">The result type of the try expression. If null, bodh and all handlers must have identical type.</param>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block. Pass null if the try block has no finally block associated with it.</param>
      <param name="fault">The body of the t block. Pass null if the try block has no fault block associated with it.</param>
      <param name="handlers">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Represents an expression that creates a new object and initializes a property of the object.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The constructor that <paramref name="constructor" /> represents has at least one parameter.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.-or-An element of <paramref name="members" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.-or-The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.-or-An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.-or-An element of members represents a property that does not have a get accessor.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.-or-An element of <paramref name="members" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.-or-The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.-or-An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.-or-An element of <paramref name="members" /> represents a property that does not have a get accessor.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The type that <paramref name="type" /> represents does not have a constructor without parameters.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.-or-An element of <paramref name="bounds" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.-or-An element of <paramref name="bounds" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.-or-An element of <paramref name="initializers" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.-or-An element of <paramref name="initializers" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary not operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary not operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Returns the expression representing the ones complement.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns the expression representing the ones complement.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
      <param name="type">The type of the parameter or variable.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</returns>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable, used for debugging or printing purpose only.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null.-or-The method that <paramref name="propertyAccessor" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.-or-The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="property">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.-or-The property that <paramref name="property" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />. This can be null for static properties.</param>
      <param name="propertyName">The name of a property to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="propertyName">The name of the indexer.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">The containing object of the property. This can be null for static properties.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</param>
      <param name="propertyName">The property to be accessed.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />. This can be null for static members.</param>
      <param name="propertyOrFieldName">The name of a property or field to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
      <param name="variables">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
      <param name="variables">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement without a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case..</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
      <param name="documentType">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="fault">The body of the fault block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <returns>true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</returns>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Action delegate type.</param>
      <param name="actionType">When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <returns>true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</returns>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Func delegate type.</param>
      <param name="funcType">When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="T:System.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where null is supplied if the conversion fails.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary plus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary plus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</returns>
      <param name="type">The type of the parameter or variable.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable. This name is used for debugging or printing purpose only.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</summary>
      <returns>The expression being visited, or an expression which should replace it in the tree.</returns>
      <param name="visitor">An instance of <see cref="T:System.Func`2" />.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.</summary>
      <typeparam name="TDelegate">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate containing the compiled version of the lambda.</returns>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="body">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</param>
      <param name="parameters">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Describes the node types for the nodes of an expression tree.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>An addition operation, such as a + b, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>An addition operation, such as (a + b), with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>A bitwise or logical AND operation, such as (a &amp; b) in C# and (a And b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>A conditional AND operation that evaluates the second operand only if the first operand evaluates to true. It corresponds to (a &amp;&amp; b) in C# and (a AndAlso b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>An operation that obtains the length of a one-dimensional array, such as array.Length.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>An indexing operation in a one-dimensional array, such as array[index] in C# or array(index) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>A method call, such as in the obj.sampleMethod() expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>A node that represents a null coalescing operation, such as (a ?? b) in C# or If(a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>A conditional operation, such as a &gt; b ? a : b in C# or If(a &gt; b, a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>A constant value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>A division operation, such as (a / b), for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>A node that represents an equality comparison, such as (a == b) in C# or (a = b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>A bitwise or logical XOR operation, such as (a ^ b) in C# or (a Xor b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>A "greater than" comparison, such as (a &gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>A "greater than or equal to" comparison, such as (a &gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>An operation that invokes a delegate or lambda expression, such as sampleDelegate.Invoke().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>A lambda expression, such as a =&gt; a + a in C# or Function(a) a + a in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>A bitwise left-shift operation, such as (a &lt;&lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>A "less than" comparison, such as (a &lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>A "less than or equal to" comparison, such as (a &lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>An operation that creates a new <see cref="T:System.Collections.IEnumerable" /> object and initializes it from a list of elements, such as new List&lt;SampleType&gt;(){ a, b, c } in C# or Dim sampleList = { a, b, c } in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>An operation that reads from a field or property, such as obj.SampleProperty.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>An operation that creates a new object and initializes one or more of its members, such as new Point { X = 1, Y = 2 } in C# or New Point With {.X = 1, .Y = 2} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>An arithmetic remainder operation, such as (a % b) in C# or (a Mod b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>A multiplication operation, such as (a * b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>An multiplication operation, such as (a * b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>An arithmetic negation operation, such as (-a). The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>A unary plus operation, such as (+a). The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>An arithmetic negation operation, such as (-a), that has overflow checking. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>An operation that calls a constructor to create a new object, such as new SampleType().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as new SampleType[]{a, b, c} in C# or New SampleType(){a, b, c} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>An operation that creates a new array, in which the bounds for each dimension are specified, such as new SampleType[dim1, dim2] in C# or New SampleType(dim1, dim2) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>A bitwise complement or logical negation operation. In C#, it is equivalent to (~a) for integral types and to (!a) for Boolean values. In Visual Basic, it is equivalent to (Not a). The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>An inequality comparison, such as (a != b) in C# or (a &lt;&gt; b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>A bitwise or logical OR operation, such as (a | b) in C# or (a Or b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>A short-circuiting conditional OR operation, such as (a || b) in C# or (a OrElse b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>A reference to a parameter or variable that is defined in the context of the expression. For more information, see <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>A mathematical operation that raises a number to a power, such as (a ^ b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>An expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />. A <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> node can contain references to parameters that are defined in the context of the expression it represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>A bitwise right-shift operation, such as (a &gt;&gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>A subtraction operation, such as (a - b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>An arithmetic subtraction operation, such as (a - b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>An explicit reference or boxing conversion in which null is supplied if the conversion fails, such as (obj as SampleType) in C# or TryCast(obj, SampleType) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>A type test, such as obj is SampleType in C# or TypeOf obj is SampleType in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>An assignment operation, such as (a = b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>A block of expressions.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Debugging information.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>A unary decrement operation, such as (a - 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>A dynamic operation.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>A default value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>An extension expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>A "go to" expression, such as goto Label in C# or GoTo Label in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>A unary increment operation, such as (a + 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>An index operation or an operation that accesses a property that takes arguments. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>A label.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>A list of run-time variables. For more information, see <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>A loop, such as for or while.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>A switch operation, such as switch in C# or Select Case in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>An operation that throws an exception, such as throw new Exception().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>A try-catch expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>An unbox value type operation, such as unbox and unbox.any instructions in MSIL. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>An addition compound assignment operation, such as (a += b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>A bitwise or logical AND compound assignment operation, such as (a &amp;= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>An division compound assignment operation, such as (a /= b), for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>A bitwise or logical XOR compound assignment operation, such as (a ^= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>A bitwise left-shift compound assignment, such as (a &lt;&lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>An arithmetic remainder compound assignment operation, such as (a %= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>A multiplication compound assignment operation, such as (a *= b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>A bitwise or logical OR compound assignment, such as (a |= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>A compound assignment operation that raises a number to a power, such as (a ^= b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>A bitwise right-shift compound assignment operation, such as (a &gt;&gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>A subtraction compound assignment operation, such as (a -= b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>An addition compound assignment operation, such as (a += b), with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>A multiplication compound assignment operation, such as (a *= b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>A subtraction compound assignment operation, such as (a -= b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>A unary prefix increment, such as (++a). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>A unary prefix decrement, such as (--a). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>A unary postfix increment, such as (a++). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>A unary postfix decrement, such as (a--). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>An exact type test.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>A ones complement operation, such as (~a) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>A true condition value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>A false condition value.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Represents a visitor or rewriter for expression trees.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Dispatches the list of expressions to one of the more specialized visit methods in this class.</summary>
      <returns>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</returns>
      <param name="nodes">The expressions to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Visits all nodes in the collection using a specified element visitor.</summary>
      <returns>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</returns>
      <param name="nodes">The nodes to visit.</param>
      <param name="elementVisitor">A delegate that visits a single element, optionally replacing it with a new element.</param>
      <typeparam name="T">The type of the nodes.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Dispatches the expression to one of the more specialized visit methods in this class.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="nodes">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Visits the children of the extension expression.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
      <typeparam name="T">The type of the delegate.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>The kind of the "go to" expression. Serves information purposes only.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> object representing the kind of the "go to" expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>The target label where this node jumps to.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing the target label for this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.GotoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="target">The <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property of the result. </param>
      <param name="value">The <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> property of the result. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>The value passed to the target, or null if the target is of type System.Void.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the value passed to the target or null.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Specifies what kind of jump this <see cref="T:System.Linq.Expressions.GotoExpression" /> represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a jump to some location.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a return statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a break statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a continue statement.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Represents indexing a property or array.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Gets the arguments that will be used to index the property or array.</summary>
      <returns>The read-only collection containing the arguments that will be used to index the property or array.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Gets the <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, returns null otherwise.</summary>
      <returns>The <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, otherwise null.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>An object to index.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the object to index.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.IndexExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="object">The <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Represents an expression that applies a delegate or lambda expression to a list of argument expressions.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Gets the arguments that the delegate or lambda expression is applied to.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments that the delegate is applied to.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Gets the delegate or lambda expression to be applied.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate to be applied.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.InvocationExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Represents a label, which can be put in any <see cref="T:System.Linq.Expressions.Expression" /> context. If it is jumped to, it will get the value provided by the corresponding <see cref="T:System.Linq.Expressions.GotoExpression" />. Otherwise, it receives the value in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />. If the <see cref="T:System.Type" /> equals System.Void, no value should be provided.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>The value of the <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow (for example, is not jumped to).</summary>
      <returns>The Expression object representing the value of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LabelExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="target">The <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> property of the result.</param>
      <param name="defaultValue">The <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> property of the result</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Used to represent the target of a <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Gets the name of the label.</summary>
      <returns>The name of the label.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>The type of value that is passed when jumping to the label (or <see cref="T:System.Void" /> if no value should be passed).</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the value that is passed when jumping to the label or <see cref="T:System.Void" /> if no value should be passed</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Describes a lambda expression. This captures a block of code that is similar to a .NET method body.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Gets the body of the lambda expression.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the body of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A <see cref="T:System.Delegate" /> that contains the compiled version of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate containing the compiled version of the lambda.</returns>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Compiles the lambda into a method definition.</summary>
      <param name="method">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Compiles the lambda into a method definition and custom debug information.</summary>
      <param name="method">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</param>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Gets the name of the lambda expression.</summary>
      <returns>The name of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Gets the parameters of the lambda expression.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects that represent the parameters of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Gets the return type of the lambda expression.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.</summary>
      <returns>True if the lambda expression will be compiled with the tail call optimization, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LambdaExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Represents a constructor call that has a collection initializer.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Gets the element initializers that are used to initialize a collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects which represent the elements that are used to initialize the collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Gets the expression that contains a call to the constructor of a collection type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the call to the constructor of a collection type.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ListInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property of the result.</param>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Represents an infinite loop. It can be exited with "break".</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LoopExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="breakLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> property of the result.</param>
      <param name="continueLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Represents assignment operation for a field or property of an object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Gets the expression to assign to the field or property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that represents the value to assign to the field or property.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.MemberBinding" /> class.</summary>
      <param name="type">The <see cref="T:System.Linq.Expressions.MemberBindingType" /> that discriminates the type of binding that is represented.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to be initialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Gets the type of binding that is represented.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.MemberBindingType" /> values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Gets the field or property to be initialized.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be initialized.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Describes the binding types that are used in <see cref="T:System.Linq.Expressions.MemberInitExpression" /> objects.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>A binding that represents initializing a member with the value of an expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>A binding that represents recursively initializing members of a member.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>A binding that represents initializing a member of type <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.ICollection`1" /> from a list of elements.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Represents accessing a field or property.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Gets the containing object of the field or property.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the containing object of the field or property.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Gets the field or property to be accessed.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be accessed.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Returns the node type of this <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Represents calling a constructor and initializing one or more members of the new object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of the newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects which describe how to initialize the members.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Gets the expression that represents the constructor call.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the constructor call.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Reduces the <see cref="T:System.Linq.Expressions.MemberInitExpression" /> to a simpler expression. </summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property of the result.</param>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Represents initializing the elements of a collection member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Gets the element initializers for initializing a collection member of a newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection member with.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Represents initializing members of a member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of a member.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects that describe how to initialize the members of the member.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Represents a call to either static or an instance method.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Gets a collection of expressions that represent arguments of the called method.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments to the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the method to be called.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that represents the instance for instance method calls or null for static method calls.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the receiving object of the method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="object">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Represents creating a new array and possibly initializing the elements of the new array.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Gets the bounds of the array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, or the values to initialize the elements of the new array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent either the bounds of the array or the initialization values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Represents a constructor call.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Gets the arguments to the constructor.</summary>
      <returns>A collection of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Gets the called constructor.</summary>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo" /> that represents the called constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.</summary>
      <returns>A collection of <see cref="T:System.Reflection.MemberInfo" /> objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Represents a named parameter expression.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Indicates that this ParameterExpression is to be treated as a ByRef parameter.</summary>
      <returns>True if this ParameterExpression is a ByRef parameter, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Gets the name of the parameter or variable.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the parameter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ParameterExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>An expression that provides runtime read/write permission for variables.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="variables">The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property of the result.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>The variables or parameters to which to provide runtime access.</summary>
      <returns>The read-only collection containing parameters that will be provided the runtime access.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Represents one case of a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Gets the body of this case.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object that represents the body of the case block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Gets the values of this case. This case is selected for execution when the <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> matches any of these values.</summary>
      <returns>The read-only collection of the values for this case block.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="testValues">The <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Represents a control expression that handles multiple selections by passing control to <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects for the switch.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Gets the equality comparison method, if any.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> object representing the equality comparison method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.SwitchExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="switchValue">The <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> property of the result.</param>
      <param name="cases">The <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> property of the result.</param>
      <param name="defaultBody">The <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Returns the document type's unique identifier, if any. Defaults to the GUID for a text file.</summary>
      <returns>The document type's unique identifier.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>The source file name.</summary>
      <returns>The string representing the source file name.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Returns the language's unique identifier, if any.</summary>
      <returns>The language's unique identifier</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Returns the language vendor's unique identifier, if any.</summary>
      <returns>The language vendor's unique identifier.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Represents a try/catch/finally/fault block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="body">The <see cref="P:System.Linq.Expressions.TryExpression.Body" /> property of the result.</param>
      <param name="handlers">The <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> property of the result.</param>
      <param name="finally">The <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> property of the result.</param>
      <param name="fault">The <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Represents an operation between an expression and a type.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Gets the expression operand of a type test operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression operand of a type test operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Gets the type operand of a type test operation.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type operand of a type test operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Represents an expression that has a unary operator.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if a node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Gets the implementing method for the unary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Gets the operand of the unary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand of the unary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Reduces the expression node to a simpler expression. </summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.UnaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="operand">The <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property of the result.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstanceNotFoundException">
      <summary>The exception thrown to indicate that no instances are returned by a provider.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor">
      <summary>Initializes a new instance of the InstanceNotFoundException class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the InstanceNotFoundException class with the specified serialization information and streaming context.</summary>
      <param name="info">The SerializationInfo that contains all the data required to serialize the exception.</param>
      <param name="context">The StreamingContext that specifies the source and destination of the stream.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the InstanceNotFoundException class with its message string set to message.</summary>
      <param name="message">A string that contains the error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the InstanceNotFoundException class with the specified error message and the inner exception.</summary>
      <param name="message">A string that contains the error message that explains the reason for the exception.</param>
      <param name="innerException">The Exception that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationBaseException">
      <summary>Represents the base provider-related exception.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" />. class. This is the default constructor.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with serialization information.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">Description of the source and destination of the specified serialized stream.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with a message that describes the exception.</summary>
      <param name="message">Message that describes the exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with the specified string and exception.</summary>
      <param name="message">Message that describes the exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationException">
      <summary>Represents a provider-related exception.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class. This is the default constructor.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Exception)">
      <summary>Initializes a new <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with the System.Exception that caused the current exception.</summary>
      <param name="innerException">The Exception instance that caused the current exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with serialization information.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">Description of the source and destination of the specified serialized stream.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with a message that describes the exception.</summary>
      <param name="message">Message that describes the exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with the specified string and exception.</summary>
      <param name="message">Message that describes the exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementBindAttribute">
      <summary>The ManagementBind attribute indicates that a method is used to return the instance of a WMI class associated with a specific key value.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementBindAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementBindAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementBindAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementEnumerator attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the method marked with the <see cref="ManagementBind" /> attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCommitAttribute">
      <summary>The ManagementCommit attribute marks a method that is called when it is necessary to update a set of read-write properties in one, atomic operation.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCommitAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementCommitAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationAttribute">
      <summary>The ManagementConfiguration attribute indicates that a property or field represents a read-write WMI property.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementConfigurationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementConfigurationAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Mode">
      <summary>Gets or sets the mode of the property, which specifies whether changes to it are applied as soon as possible or when a commit method is called.</summary>
      <returns>Returns a <see cref="T:System.Management.Instrumentation.ManagementConfigurationType" /> that indicates whether the WMI property uses <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.Apply" /> or <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit" /> mode.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the property that is marked with the ManagementConfiguration attribute will return.</summary>
      <returns>A <see cref="T:System.Type" /> value representing the type of output that the property marked with the ManagementConfiguration attribute will return.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationType">
      <summary>Represents the possible commit behaviors of a read/write property. It is used as the value of a parameter of the <see cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" /> attribute.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.Apply">
      <summary>Set values take effect only when Commit is called.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit">
      <summary>Set values are applied immediately.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCreateAttribute">
      <summary>The ManagementCreateAttribute is used to indicate that a method creates a new instance of a managed entity.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCreateAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementCreateAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEntityAttribute">
      <summary>The ManagementEntity attribute indicates that a class provides management information exposed through a WMI provider.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementEntityAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.External">
      <summary>Gets or sets a value that specifies whether the class represents a WMI class in a provider implemented external to the current assembly.</summary>
      <returns>A boolean value that is true if the class represents an external WMI class and false otherwise.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Name">
      <summary>Gets or sets the name of the WMI class.</summary>
      <returns>A string that contains the name of the WMI class.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton">
      <summary>Specifies whether the associated class represents a singleton WMI class.</summary>
      <returns>A boolean value that is true if the class represents a singleton WMI class and false otherwise.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEnumeratorAttribute">
      <summary>The ManagementEnumerator attribute marks a method that returns all the instances of a WMI class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementEnumeratorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementEnumerator attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the method marked with the <see cref="ManagementEnumerator" /> attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementHostingModel">
      <summary>Defines values that specify the hosting model for the provider.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.Decoupled">
      <summary>Activates the provider as a decoupled provider.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.NetworkService">
      <summary>Activates the provider in the provider host process that is running under the NetworkService account.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalService">
      <summary>Activates the provider in the provider host process that is running under the LocalService account.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalSystem">
      <summary>Activates the provider in the provider host process that is running under the LocalSystem account.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementKeyAttribute">
      <summary>The ManagementKey attribute identifies the key properties of a WMI class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementKeyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementKeyAttribute" />  class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementMemberAttribute">
      <summary>This class is used by the WMI.NET Provider Extensions framework. It is the base class for all the management attributes that can be applied to members.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementMemberAttribute.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Management.ManagementMemberAttribute" /> the class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementMemberAttribute.Name">
      <summary>Gets or sets the name of the management attribute.</summary>
      <returns>Returns a string which is the name of the management attribute.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNameAttribute">
      <summary>The ManagementName attribute is used to override names exposed through a WMI class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementNameAttribute" /> class that specifies a value for the <see cref="P:System.Management.ManagementNameAttribute.Name" /> property of the class.</summary>
      <param name="name">The user-friendly name for the object.</param>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementNameAttribute.Name">
      <summary>Gets or sets the user-friendly name for an object. The object can be a method parameter or properties marked with the ManagementProbe, ManagementKey, or ManagementConfiguration attributes.</summary>
      <returns>A <see cref="T:System.String" /> value that indicates the user friendly name for an object.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNewInstanceAttribute">
      <summary>The base class for management attributes that have only run-time functionality and no schema representation. The management attribute classes ManagementBindAttribute, ManagementCreateAttribute and ManagementEnumeratorAttribute are all derived from this class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNewInstanceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementNewInstanceAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementProbeAttribute">
      <summary>The ManagementProbe attribute indicates that a property or field represents a read-only WMI property.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementProbeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementProbeAttribute" /> class. This is the default constructor for the class.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementProbeAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the property that is marked with the ManagementProbe attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the property that is marked with the ManagementProbe attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementReferenceAttribute">
      <summary>The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementReferenceAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type">
      <summary>Gets or sets the name of the referenced type.</summary>
      <returns>A string containing the name of the referenced type.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementRemoveAttribute">
      <summary>The ManagementRemoveAttribute is used to indicate that a method cleans up an instance of a managed entity.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementRemoveAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementRemoveAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementRemoveAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the object that is marked with the ManagementRemove attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the object marked with the Remove attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementTaskAttribute">
      <summary>The ManagementTask attribute indicates that the target method implements a WMI method.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementTaskAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementTaskAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementTaskAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementTask attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the method that is marked with the ManagementTask attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.WmiConfigurationAttribute">
      <summary>The WmiConfiguration attribute indicates that an assembly contains code that implements a WMI provider by using the WMI.NET Provider Extensions model. The attribute accepts parameters that establish the high-level configuration of the implemented WMI provider. </summary>
    </member>
    <member name="M:System.Management.Instrumentation.WmiConfigurationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.WmiConfigurationAttribute" /> class that specifies the WMI namespace in which the WMI provider will expose classes.</summary>
      <param name="scope">The WMI namespace in which the provider will expose classes. For example, "root\MyProviderNamespace".</param>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingGroup">
      <summary>Gets or sets the hosting group for the WMI provider.</summary>
      <returns>A <see cref="T:System.String" /> value that indicates the hosting group for the WMI provider.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingModel">
      <summary>Gets or sets the hosting model for the WMI provider.</summary>
      <returns>A <see cref="T:System.Management.Instrumentation.ManagementHostingModel" /> value that indicates the hosting model of the WMI provider.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.IdentifyLevel">
      <summary>Gets or sets a value that specifies whether the WMI provider can impersonate its callers. If the value is false, the provider cannot impersonate, and if the value is true, the provider can impersonate.</summary>
      <returns>A Boolean value that indicates whether a provider can or cannot impersonate its callers. If the value is false, the provider cannot impersonate, and if the value is true, the provider can impersonate.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.NamespaceSecurity">
      <summary>Gets or sets a Security Descriptor Definition Language (SDDL) string that specifies the security descriptor on the namespace in which the provider exposes management objects.</summary>
      <returns>An SDDL string that represents the security descriptor on the namespace in which the provider exposes management objects.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.Scope">
      <summary>Gets or sets the WMI namespace in which the WMI provider exposes classes.</summary>
      <returns>A <see cref="T:System.String" /> value that indicates the namespace in which the WMI provider exposes classes.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.SecurityRestriction">
      <summary>Gets or sets a security descriptor for the WMI provider. For more information, see the SecurityDescriptor property information in the "__Win32Provider" topic in the MSDN online library at http://www.msdn.com. </summary>
      <returns>A <see cref="T:System.String" /> value that contains the security descriptor for the WMI provider.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Class responsible for binding dynamic operations on the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> object responsible for binding dynamic operations.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates a call site with the given delegate type and binder.</summary>
      <returns>The new call site.</returns>
      <param name="delegateType">The call site delegate type.</param>
      <param name="binder">The call site binder.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Dynamic site type.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.</summary>
      <returns>The new instance of dynamic call site.</returns>
      <param name="binder">The binder responsible for the runtime binding of the dynamic operations at this call site.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>The Level 0 cache - a delegate specialized based on the site history.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>The update delegate. Called when the dynamic site experiences cache miss.</summary>
      <returns>The update delegate.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Class responsible for runtime binding of the dynamic operations on the dynamic call site.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression" /> for the new argument types.</returns>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.</summary>
      <returns>A new delegate which replaces the CallSite Target.</returns>
      <param name="site">The CallSite the bind is being performed for.</param>
      <param name="args">The arguments for the binder.</param>
      <typeparam name="T">The target type of the CallSite.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.</summary>
      <param name="target">The target delegate to be added to the cache.</param>
      <typeparam name="T">The type of target being added.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing a label that can be used to trigger the binding update.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Class that contains helper methods for DLR CallSites.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Checks if a <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack.</summary>
      <returns>True if the input <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack. Otherwise, false.</returns>
      <param name="mb">The input <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteOps">
      <summary>Creates and caches binding rules.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
      <summary>Adds a rule to the cache maintained on the dynamic call site.</summary>
      <param name="site">An instance of the dynamic call site.</param>
      <param name="rule">An instance of the call site rule.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Updates the call site target with a new rule based on the arguments.</summary>
      <returns>The new call site target.</returns>
      <param name="binder">The call site binder.</param>
      <param name="site">An instance of the dynamic call site.</param>
      <param name="args">Arguments to the call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Clears the match flag on the matchmaker call site.</summary>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Creates an instance of a dynamic call site used for cache lookup.</summary>
      <returns>The new call site.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
      <summary>Searches the dynamic rule cache for rules applicable to the dynamic operation.</summary>
      <returns>The collection of applicable rules.</returns>
      <param name="cache">The cache.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Checks whether the executed rule matched</summary>
      <returns>true if rule matched, false otherwise.</returns>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Retrieves binding rule cache.</summary>
      <returns>The cache.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Gets the dynamic binding rules from the call site.</summary>
      <returns>An array of dynamic binding rules.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
      <summary>Moves the binding rule within the cache.</summary>
      <param name="cache">The call site rule cache.</param>
      <param name="rule">An instance of the call site rule.</param>
      <param name="i">An index of the call site rule.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
      <summary>Checks if a dynamic site requires an update.</summary>
      <returns>true if rule does not need updating, false otherwise.</returns>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
      <summary>Updates rules in the cache.</summary>
      <param name="this">An instance of the dynamic call site.</param>
      <param name="matched">The matched rule index.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.Closure">
      <summary>Represents the runtime state of a dynamically generated method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Closure.#ctor(System.Object[],System.Object[])">
      <summary>Creates an object to hold state of a dynamically generated method.</summary>
      <param name="constants">The constant values that are used by the method.</param>
      <param name="locals">The hoisted local variables from the parent context.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Constants">
      <summary>Represents the non-trivial constants and locally executable expressions that are referenced by a dynamically generated method.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Locals">
      <summary>Represents the hoisted local variables from the parent context.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Generates debug information for lambda expressions in an expression tree.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Creates a program database (PDB) symbol generator.</summary>
      <returns>A PDB symbol generator.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Marks a sequence point in Microsoft intermediate language (MSIL) code.</summary>
      <param name="method">The lambda expression that is generated.</param>
      <param name="ilOffset">The offset within MSIL code at which to mark the sequence point.</param>
      <param name="sequencePoint">Debug information that corresponds to the sequence point.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Indicates that the use of <see cref="T:System.Object" /> on a member is meant to be treated as a dynamically dispatched type.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
      <param name="transformFlags">Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</summary>
      <returns>The list of <see cref="T:System.Object" /> occurrences that are meant to be treated as a dynamically dispatched type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>Represents the runtime state of a dynamically generated method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>Creates a delegate that can be used to execute a dynamically generated method.</summary>
      <returns>A <see cref="T:System.Delegate" /> that can execute a dynamically generated method.</returns>
      <param name="indexLambda">The index of the object that stores information about associated lambda expression of the dynamic method.</param>
      <param name="locals">An array that contains the hoisted local variables from the parent context.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>Creates an array to store the hoisted local variables.</summary>
      <returns>An array to store hoisted local variables.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>Represents the non-trivial constants and locally executable expressions that are referenced by a dynamically generated method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>Frees a specified expression tree of external parameter references by replacing the parameter with its current value.</summary>
      <returns>An expression tree that does not contain external parameter references.</returns>
      <param name="expression">An expression tree to free of external parameter references.</param>
      <param name="locals">An array that contains the hoisted local variables.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>Represents the hoisted local variables from the parent context.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>Represents the execution scope of the calling delegate.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Indicates that a method is an extension method, or that a class or assembly contains extension methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Represents the values of run-time variables.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Gets a count of the run-time variables.</summary>
      <returns>The number of run-time variables.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Gets the value of the run-time variable at the specified index.</summary>
      <returns>The value of the run-time variable.</returns>
      <param name="index">The zero-based index of the run-time variable whose value is to be returned.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Defines a property for accessing the value that an object references.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Gets or sets the value that an object references.</summary>
      <returns>The value that the object references.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>The builder for read only collection.</summary>
      <typeparam name="T">The type of the collection element.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Constructs a ReadOnlyCollectionBuilder.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Constructs a ReadOnlyCollectionBuilder, copying contents of the given collection.</summary>
      <param name="collection">Collection to copy elements from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Constructs a ReadOnlyCollectionBuilder with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.</summary>
      <param name="capacity">Initial capacity.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Gets and sets the capacity of this ReadOnlyCollectionBuilder.</summary>
      <returns>The capacity of this ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> contains a specific value</summary>
      <returns>true if item is found in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false.</returns>
      <param name="item">the object to locate in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to an <see cref="T:System.Array" />, starting at particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Returns number of elements in the ReadOnlyCollectionBuilder.</summary>
      <returns>The number of elements in the ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a given value in the builder.</summary>
      <returns>The index of the first occurrence of an item.</returns>
      <param name="item">An item to search for.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>true if item was successfully removed from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, –1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to a new array.</summary>
      <returns>An array containing copies of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing all of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, avoiding copying the elements to the new array if possible. Resets the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> after the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> has been created.</summary>
      <returns>A new instance of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Represents a cache of runtime binding rules.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeOps">
      <summary>Contains helper methods called from dynamically generated methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
      <summary>Creates an interface that can be used to modify closed over variables at runtime.</summary>
      <returns>An interface to access variables.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
      <summary>Creates an interface that can be used to modify closed over variables at runtime.</summary>
      <returns>An interface to access variables.</returns>
      <param name="data">The closure array.</param>
      <param name="indexes">An array of indicies into the closure array where variables are found.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
      <summary>Checks the version of the Expando object.</summary>
      <returns>Returns true if the version is equal; otherwise, false.</returns>
      <param name="expando">The Expando object.</param>
      <param name="version">The version to check.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
      <summary>Promotes an Expando object from one class to a new class.</summary>
      <param name="expando">The Expando object.</param>
      <param name="oldClass">The old class of the Expando object.</param>
      <param name="newClass">The new class of the Expando object.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
      <summary>Deletes the value of an item in an expando object.</summary>
      <returns>true if the item was successfully removed; otherwise, false.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
      <summary>Gets the value of an item in an expando object.</summary>
      <returns>True if the member exists in the expando object, otherwise false.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
      <param name="value">The out parameter containing the value of the member.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
      <summary>Sets the value of an item in an expando object.</summary>
      <returns>Returns the index for the set member.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="value">The value of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
      <summary>Combines two runtime variable lists and returns a new list.</summary>
      <returns>The merged runtime variables.</returns>
      <param name="first">The first list.</param>
      <param name="second">The second list.</param>
      <param name="indexes">The index array indicating which list to get variables from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
      <summary>Quotes the provided expression tree.</summary>
      <returns>The quoted expression.</returns>
      <param name="expression">The expression to quote.</param>
      <param name="hoistedLocals">The hoisted local state provided by the compiler.</param>
      <param name="locals">The actual hoisted local values.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Holds a reference to a value.</summary>
      <typeparam name="T">The type of the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>Initializes a new StrongBox which can receive a value when used in a reference call.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> class by using the supplied value. </summary>
      <param name="value">A value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> will reference.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Gets or sets the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
      <returns>The value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Represents the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Permits late-bound registration of an event handler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> class by using the specified type and a name of the event on the type.</summary>
      <param name="type">The type of object. </param>
      <param name="eventName">The name of an event on <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Attaches an event handler to a COM object.</summary>
      <param name="target">The target object that the event delegate should bind to.</param>
      <param name="handler">The event delegate.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Gets the method that was used to add an event handler delegate to the event source.</summary>
      <returns>The method that was used to add an event handler delegate to the event source.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.</summary>
      <returns>An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.</summary>
      <returns>An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.</returns>
      <param name="attributeType">The attribute type to search for. Only attributes that are assignable to this type can be returned.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that was called when the event was raised. </summary>
      <returns>The object that was called when the event was raised.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see cref="T:System.Reflection.MethodInfo" /> object for removing a method of the event.</summary>
      <returns>The method that was used to remove an event handler delegate from the event source.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of the specified attribute are applied to this member.</summary>
      <returns>true if the specified attribute has been applied to this member; otherwise, false.</returns>
      <param name="attributeType">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Gets the class object that was used to initialize this instance.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to initialize the current object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Detaches an event handler from a COM object.</summary>
      <param name="target">The target object that the event delegate is bound to.</param>
      <param name="handler">The event delegate.</param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public remove accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used.</exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access permission to the member.</exception>
    </member>
    <member name="T:System.Security.ManifestKinds">
      <summary>Represents the type of manifest that the signature information applies to.</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.None">
      <summary>The manifest is of no particular type. </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Deployment">
      <summary>The manifest is for deployment only.</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Application">
      <summary>The manifest is for an application. </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.ApplicationAndDeployment">
      <summary>The manifest is for deployment and application. The is the default value for verifying signatures. </summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>Performs symmetric encryption and decryption using the Cryptographic Application Programming Interfaces (CAPI) implementation of the Advanced Encryption Standard (AES) algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" /> class. </summary>
      <exception cref="T:System.PlatformNotSupportedException">There is no supported key size for the current platform.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>Creates a symmetric AES decryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric AES decryptor object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The current key is invalid or missing.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric AES decryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric AES decryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>Creates a symmetric AES encryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric AES encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric encryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric AES encryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="iv" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the algorithm.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The initialization vector (IV) could not be generated. </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>Generates a random key to use for the algorithm. </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be generated.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>Gets or sets the symmetric key that is used for encryption and decryption.</summary>
      <returns>The symmetric key that is used for encryption and decryption.</returns>
      <exception cref="T:System.ArgumentNullException">The value for the key is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The size of the key is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key. </summary>
      <returns>The size, in bits, of the key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Provides a managed implementation of the Advanced Encryption Standard (AES) symmetric algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesManaged" /> class. </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The Windows security policy setting for FIPS is enabled.</exception>
      <exception cref="T:System.InvalidOperationException">This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Creates a symmetric decryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric decryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric decryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric decryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Creates a symmetric encryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric encryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric encryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>Gets or sets the number of bits to use as feedback. </summary>
      <returns>The feedback size, in bits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the symmetric algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Generates a random key to use for the symmetric algorithm. </summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Gets or sets the initialization vector (IV) to use for the symmetric algorithm. </summary>
      <returns>The initialization vector to use for the symmetric algorithm</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Gets or sets the secret key used for the symmetric algorithm.</summary>
      <returns>The key for the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key used for the symmetric algorithm. </summary>
      <returns>The size, in bits, of the key used by the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>Gets or sets the mode for operation of the symmetric algorithm.</summary>
      <returns>One of the enumeration values that specifies the block cipher mode to use for encryption. The default is <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> is set to <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> or <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>Gets or sets the padding mode used in the symmetric algorithm. </summary>
      <returns>One of the enumeration values that specifies the type of padding to apply. The default is <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>Encapsulates the name of an encryption algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngAlgorithm" /> class.</summary>
      <param name="algorithm">The name of the algorithm to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="algorithm" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>Gets the algorithm name that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-256 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-256 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-384 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-384 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-521 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-521 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-256 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-256 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-384 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-384 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-521 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-521 curve.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> that specifies the same algorithm as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object. </summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same algorithm as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>Generates a hash value for the algorithm name that is embedded in the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <returns>The hash value of the embedded algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Message Digest 5 (MD5) hash algorithm.</summary>
      <returns>An object that specifies the MD5 algorithm.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithm" /> objects specify the same algorithm name.</summary>
      <returns>true if the two objects specify the same algorithm name; otherwise, false.</returns>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithm" /> objects do not specify the same algorithm.</summary>
      <returns>true if the two objects do not specify the same algorithm name; otherwise, false.</returns>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 1 (SHA-1) algorithm.</summary>
      <returns>An object that specifies the SHA-1 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 256 (SHA-256) algorithm.</summary>
      <returns>An object that specifies the SHA-256 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 384 (SHA-384) algorithm.</summary>
      <returns>An object that specifies the SHA-384 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 512 (SHA-512) algorithm.</summary>
      <returns>An object that specifies the SHA-512 algorithm.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>Gets the name of the algorithm that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>Encapsulates the name of an encryption algorithm group. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> class.</summary>
      <param name="algorithmGroup">The name of the algorithm group to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithmGroup" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="algorithmGroup" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>Gets the name of the algorithm group that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm group name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Diffie-Hellman family of algorithms.</summary>
      <returns>An object that specifies the Diffie-Hellman family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Digital Signature Algorithm (DSA) family of algorithms.</summary>
      <returns>An object that specifies the DSA family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Elliptic Curve Diffie-Hellman (ECDH) family of algorithms.</summary>
      <returns>An object that specifies the ECDH family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Elliptic Curve Digital Signature Algorithm (ECDSA) family of algorithms.</summary>
      <returns>An object that specifies the ECDSA family of algorithms.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> that specifies the same algorithm group as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same algorithm group as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>Generates a hash value for the algorithm group name that is embedded in the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>The hash value of the embedded algorithm group name.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> objects specify the same algorithm group.</summary>
      <returns>true if the two objects specify the same algorithm group; otherwise, false.</returns>
      <param name="left">An object that specifies an algorithm group.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> objects do not specify the same algorithm group.</summary>
      <returns>true if the two objects do not specify the same algorithm group; otherwise, false. </returns>
      <param name="left">An object that specifies an algorithm group.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Rivest-Shamir-Adleman (RSA) family of algorithms.</summary>
      <returns>An object that specifies the RSA family of algorithms.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>Gets the name of the algorithm group that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm group name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>Specifies the key export policies for a key. </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>No export policies are established. Key export is allowed without restriction.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>The private key can be exported multiple times.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>The private key can be exported multiple times as plaintext.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>The private key can be exported one time for archiving purposes.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>The private key can be exported one time as plaintext.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>Gets the algorithm that is used by the key.</summary>
      <returns>An object that specifies the name of an encryption algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>Gets the algorithm group that is used by the key.</summary>
      <returns>An object that specifies the name of an encryption algorithm group.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>Creates a <see cref="T:System.Security.Cryptography.CngKey" /> object that can be used with the specified algorithm.</summary>
      <returns>An ephemeral key.</returns>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>Creates a named <see cref="T:System.Security.Cryptography.CngKey" /> object that provides the specified algorithm.</summary>
      <returns>A persisted or ephemeral key that provides the specified algorithm.</returns>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <param name="keyName">The key name. If a name is not provided, the key will not be persisted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>Creates a named <see cref="T:System.Security.Cryptography.CngKey" /> object that provides the specified algorithm, using the supplied key creation parameters.</summary>
      <returns>A persisted or ephemeral key that provides the specified algorithm.</returns>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <param name="keyName">The key name. If a name is not provided, the key will not be persisted.</param>
      <param name="creationParameters">An object that specifies advanced parameters for the method, including the <see cref="T:System.Security.Cryptography.CngProvider" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>Removes the key that is associated with the object.</summary>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to access a deleted key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.CngKey" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>Checks to see whether a named key exists in the default key storage provider (KSP).</summary>
      <returns>true if the named key exists in the default KSP; otherwise, false.</returns>
      <param name="keyName">The key name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Checks to see whether a named key exists in the specified key storage provider (KSP).</summary>
      <returns>true if the named key exists in the specified provider; otherwise, false.</returns>
      <param name="keyName">The key name.</param>
      <param name="provider">The KSP to check for the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Checks to see whether a named key exists in the specified key storage provider (KSP), according to the specified options.</summary>
      <returns>true if the named key exists in the specified provider; otherwise, false.</returns>
      <param name="keyName">The key name.</param>
      <param name="provider">The KSP to search for the key.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for opening a key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Exports the key material into a BLOB, in the specified format.</summary>
      <returns>A BLOB that contains the key material in the specified format.</returns>
      <param name="format">An object that specifies the format of the key BLOB.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors. Typically, the <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> does not allow the key to be exported. </exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>Gets the export policy that is used by the key.</summary>
      <returns>An object that specifies the export policy for the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Gets a property, given a name and a set of property options.</summary>
      <returns>An object that contains the raw value of the specified property.</returns>
      <param name="name">The name of the desired property.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for the named property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>Gets a safe handle that represents a native key (NCRYPT_KEY_HANDLE). </summary>
      <returns>A safe handle that represents the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Checks to see whether the specified property exists on the key.</summary>
      <returns>true if the specified property is found; otherwise, false.</returns>
      <param name="name">The property name to check.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for the named property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Creates a new key by importing the specified key material into the default key storage provider (KSP) and using the specified format.</summary>
      <returns>A new key.</returns>
      <param name="keyBlob">An array that contains the key information.</param>
      <param name="format">An object that specifies the format of the <paramref name="keyBlob" /> array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> or <paramref name="format" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>Creates a new key by importing the specified key material into the specified key storage provider (KSP), using the specified format.</summary>
      <returns>A new key.</returns>
      <param name="keyBlob">An array that contains the key information.</param>
      <param name="format">An object that specifies the format of the <paramref name="keyBlob" /> array.</param>
      <param name="provider">The KSP.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />, <paramref name="format" />, or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>Gets the persistence state of the key.</summary>
      <returns>true if the key is ephemeral; otherwise, false. </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>Gets the scope (machine or user) of the key.</summary>
      <returns>true if the key is available on a machine-wide basis; false if the key is only for the current user.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>Gets the name of the key.</summary>
      <returns>The name of the key. If the key is ephemeral, the value is null.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>Gets the key size in bits.</summary>
      <returns>The key size in bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>Gets the cryptographic operations specified by the key.</summary>
      <returns>A bitwise combination of the enumeration values that specify the usages allowed for the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object by using a handle to an existing key.</summary>
      <returns>An existing key.</returns>
      <param name="keyHandle">A handle to an existing key.</param>
      <param name="keyHandleOpenOptions">One of the enumeration values that indicates whether <paramref name="keyHandle" /> represents an ephemeral key or a named key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyHandle" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyHandle" /> is invalid or malformed, or it is already closed. This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" /> value is not specified.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key.</summary>
      <returns>An existing key.</returns>
      <param name="keyName">The name of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key, using the specified key storage provider (KSP).</summary>
      <returns>An existing key.</returns>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key, using the specified key storage provider (KSP) and key open options.</summary>
      <returns>An existing key.</returns>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <param name="openOptions">A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>Gets or sets the window handle (HWND) that should be used for user interface (UI) prompts caused by accessing the key.</summary>
      <returns>The parent window handle for the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>Gets the key storage provider (KSP) that manages the key.</summary>
      <returns>The KSP that manages the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP).</summary>
      <returns>A handle to the KSP.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>Sets a named property on the key.</summary>
      <param name="property">The key property to set.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>Gets parameters that control the user interface (UI) for accessing the key.  </summary>
      <returns>An object that contains configuration parameters for displaying the UI.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>Gets the unique name for the key.</summary>
      <returns>An alternate name for the key. If the key is ephemeral, the value is null.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>Specifies a key BLOB format for use with Microsoft Cryptography Next Generation (CNG) objects. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> class by using the specified format.</summary>
      <param name="format">The key BLOB format to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="format" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="format" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key.</summary>
      <returns>An object that specifies an ECC private key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key.</summary>
      <returns>An object that specifies an ECC public key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies the same key BLOB format as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same key BLOB format as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>Gets the name of the key BLOB format that the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object specifies.</summary>
      <returns>The embedded key BLOB format name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a generic private key BLOB.</summary>
      <returns>An object that specifies a generic private key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a generic public key BLOB.</summary>
      <returns>An object that specifies a generic public key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>Generates a hash value for the embedded key BLOB format in the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>The hash value of the embedded key BLOB format. </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> objects specify the same key BLOB format.</summary>
      <returns>true if the two objects specify the same key BLOB format; otherwise, false.</returns>
      <param name="left">An object that specifies a key BLOB format.</param>
      <param name="right">A second object, to be compared to the object identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> objects do not specify the same key BLOB format.</summary>
      <returns>true if the two objects do not specify the same key BLOB format; otherwise, false.</returns>
      <param name="left">An object that specifies a key BLOB format.</param>
      <param name="right">A second object, to be compared to the object identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies an opaque transport key BLOB.</summary>
      <returns>An object that specifies an opaque transport key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a Private Key Information Syntax Standard (PKCS #8) key BLOB.</summary>
      <returns>An object that specifies a PKCS #8 private key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>Gets the name of the key BLOB format that the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object specifies.</summary>
      <returns>The embedded key BLOB format name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>Specifies options used for key creation.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>No key creation options are used.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>A machine-wide key is created.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>The existing key is overwritten during key creation.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>Contains advanced properties for key creation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>Gets or sets the key export policy.</summary>
      <returns>An object that specifies a key export policy. The default value is null, which indicates that the key storage provider's default export policy is set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>Gets or sets the key creation options.</summary>
      <returns>An object that specifies options for creating keys. The default value is null, which indicates that the key storage provider's default key creation options are set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>Gets or sets the cryptographic operations that apply to the current key. </summary>
      <returns>A bitwise combination of one or more enumeration values that specify key usage. The default value is null, which indicates that the key storage provider's default key usage is set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>Enables a <see cref="T:System.Security.Cryptography.CngKey" /> object to be created with additional properties that are set before the key is finalized.</summary>
      <returns>A collection object that contains any additional parameters that you must set on a <see cref="T:System.Security.Cryptography.CngKey" /> object during key creation.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>Gets or sets the window handle that should be used as the parent window for dialog boxes that are created by Cryptography Next Generation (CNG) classes.</summary>
      <returns>The HWND of the parent window that is used for CNG dialog boxes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>Gets or sets the key storage provider (KSP) to create a key in.</summary>
      <returns>An object that specifies the KSP that a new key will be created in.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> property is set to a null value.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>Gets or sets information about the user interface to display when a key is created or accessed.</summary>
      <returns>An object that contains details about the user interface shown by Cryptography Next Generation (CNG) classes when a key is created or accessed. A null value indicates that the key storage provider's default user interface policy is set.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>Specifies options for opening key handles.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>The key handle being opened does not specify an ephemeral key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>The key handle being opened specifies an ephemeral key.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>Specifies options for opening a key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>No key open options are specified.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>If the <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" /> value is not specified, a user key is opened instead.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>A machine-wide key is opened.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>UI prompting is suppressed.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>Specifies the cryptographic operations that a Cryptography Next Generation (CNG) key may be used with. </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>No usage values are assigned to the key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>The key can be used for encryption and decryption.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>The key can be used for signing and verification.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>The key can be used for secret agreement generation and key exchange.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>The key can be used for all purposes.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>Encapsulates a property of a Cryptography Next Generation (CNG) key or provider.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngProperty" /> class.</summary>
      <param name="name">The property name to initialize.</param>
      <param name="value">The property value to initialize.</param>
      <param name="options">A bitwise combination of the enumeration values that specify how the property is stored.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngProperty" /> object that specifies the same property as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngProperty" /> object to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter represents the same property as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>Generates a hash value for the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <returns>The hash value of the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>Gets the property value that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>An array that represents the value stored in the property.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>Gets the property name that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>The property name that is set in the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProperty" /> objects specify the same property name, value, and options.</summary>
      <returns>true if the two objects specify the same property; otherwise, false.</returns>
      <param name="left">An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProperty" /> objects do not specify the same property name, value, and options.</summary>
      <returns>true if the two objects do not specify the same property; otherwise, false.</returns>
      <param name="left">An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>Gets the property options that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>An object that specifies the options that are set in the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>Provides a strongly typed collection of Cryptography Next Generation (CNG) properties.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>Initializes a new <see cref="T:System.Security.Cryptography.CngPropertyCollection" /> object.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>Specifies Cryptography Next Generation (CNG) key property options.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>The referenced property has no options.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>The property is not specified by CNG. Use this option to avoid future name conflicts with CNG properties.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>The property should be persisted.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>Encapsulates the name of a key storage provider (KSP) for use with Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngProvider" /> class.</summary>
      <param name="provider">The name of the key storage provider (KSP) to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="provider" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngProvider" /> that specifies the same key storage provider(KSP) as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngProvider" /> object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same key storage provider (KSP) as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>Generates a hash value for the name of the key storage provider (KSP) that is embedded in the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>The hash value of the embedded KSP name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngProvider" /> object that specifies the Microsoft Smart Card Key Storage Provider. </summary>
      <returns>An object that specifies the Microsoft Smart Card Key Storage Provider.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngProvider" /> object that specifies the Microsoft Software Key Storage Provider.</summary>
      <returns>An object that specifies the Microsoft Software Key Storage Provider.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProvider" /> objects specify the same key storage provider (KSP).</summary>
      <returns>true if the two objects represent the same KSP; otherwise, false.</returns>
      <param name="left">An object that specifies a KSP.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProvider" /> objects do not represent the same key storage provider (KSP).</summary>
      <returns>true if the two objects do not represent the same KSP; otherwise, false.</returns>
      <param name="left">An object that specifies a KSP.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>Gets the name of the key storage provider (KSP) that the current <see cref="T:System.Security.Cryptography.CngProvider" /> object specifies.</summary>
      <returns>The embedded KSP name.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>Gets the name of the key storage provider (KSP) that the current <see cref="T:System.Security.Cryptography.CngProvider" /> object specifies.</summary>
      <returns>The embedded KSP name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>Encapsulates optional configuration parameters for the user interface (UI) that Cryptography Next Generation (CNG) displays when you access a protected key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level and friendly name.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, and description.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, description string, and use context.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
      <param name="useContext">A description of how the key will be used. Specify a null string to use the default description.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, description string, use context, and title.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
      <param name="useContext">A description of how the key will be used. Specify a null string to use the default description.</param>
      <param name="creationTitle">The title for the dialog box that provides the UI prompt. Specify a null string to use the default title.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>Gets the title that is displayed by the UI prompt.</summary>
      <returns>The title of the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>Gets the description string that is displayed by the UI prompt.</summary>
      <returns>The description text for the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>Gets the friendly name that is displayed by the UI prompt.</summary>
      <returns>The friendly name that is used to describe the key in the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>Gets the UI protection level for the key.</summary>
      <returns>An object that describes the level of UI protection to apply to the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>Gets the description of how the key will be used.</summary>
      <returns>The description of how the key will be used.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>Specifies the protection level for the key in user interface (UI) prompting scenarios.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>No UI prompt is displayed when the key is accessed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>A UI prompt is displayed the first time the key is accessed in a process.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>A UI prompt is displayed every time the key is accessed.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</summary>
      <returns>A new instance of the default implementation of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</summary>
      <returns>A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns null.</returns>
      <param name="algorithm">The name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the .NET Framework:"ECDH""ECDiffieHellman""ECDiffieHellmanCng""System.Security.Cryptography.ECDiffieHellmanCng"You can also provide the name of a custom ECDH implementation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is null. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Derives bytes that can be used as a key, given another party's public key.</summary>
      <returns>The key material from the key exchange with the other party’s public key.</returns>
      <param name="otherPartyPublicKey">The other party's public key.</param>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>Gets the name of the key exchange algorithm.</summary>
      <returns>The name of the key exchange algorithm. </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</summary>
      <returns>The public part of the ECDH key pair that is being used by this <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> instance.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>Gets the name of the signature algorithm.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</summary>
      <param name="keySize">The size of the key. Valid key sizes are 256, 384, and 521 bits.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySize" /> specifies an invalid length.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key. </summary>
      <returns>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is invalid. Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</exception>
      <exception cref="T:System.InvalidOperationException">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key. </summary>
      <returns>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">The public key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</summary>
      <returns>A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</summary>
      <returns>A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">The public key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)">
      <summary>This method is not implemented.</summary>
      <param name="xmlString">The XML-based key information to be deserialized.</param>
      <exception cref="T:System.NotImplementedException">This method was not overridden for this instance.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Deserializes the key information from an XML string by using the specified format.</summary>
      <param name="xml">The XML-based key information to be deserialized.</param>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> is malformed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>Gets or sets the hash algorithm to use when generating key material.</summary>
      <returns>An object that specifies the hash algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</summary>
      <returns>An <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</summary>
      <returns>The key pair used by this object to perform cryptographic operations.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />. The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The enumeration value is out of range.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>Gets or sets the label value that is used for key derivation.</summary>
      <returns>The label value.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</summary>
      <returns>The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>Gets or sets a value that will be appended to the secret agreement when generating key material.</summary>
      <returns>The value that is appended to the secret agreement.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</summary>
      <returns>The value that is appended to the beginning of the secret agreement during key derivation.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>Gets or sets the seed value that will be used when deriving key material.</summary>
      <returns>The seed value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)">
      <summary>This method is not implemented.</summary>
      <returns>Not applicable.</returns>
      <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">This method was not overridden for this instance.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Serializes the key information to an XML string by using the specified format.</summary>
      <returns>A string object that contains the key information, serialized to an XML string, according to the requested format.</returns>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</summary>
      <returns>true if the secret agreement is used as an HMAC key to derive key material; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>Specifies an Elliptic Curve Diffie-Hellman (ECDH) public key for use with the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>Gets the key BLOB format for a <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</summary>
      <returns>The format that the key BLOB is expressed in.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Converts a byte array that contains a public key to a <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object according to the specified format.</summary>
      <returns>An object that contains the ECDH public key that is serialized in the byte array.</returns>
      <param name="publicKeyBlob">A byte array that contains an Elliptic Curve Diffie-Hellman (ECDH) public key.</param>
      <param name="format">An object that specifies the format of the key BLOB.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="publicKeyBlob" /> or <paramref name="format" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="publicKeyBlob" /> parameter does not contain an <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>Converts an XML string to an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</summary>
      <returns>An object that contains the ECDH public key that is specified by the given XML.</returns>
      <param name="xml">An XML string that contains an Elliptic Curve Diffie-Hellman (ECDH) key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="xml" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="xml" /> parameter does not specify an <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>Converts the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object to a <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <returns>An object that contains the key represented by the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> public key to an XML string in RFC 4050 format.</summary>
      <returns>An XML string that contains the serialized <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> public key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>Specifies the key derivation function that the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class will use to convert secret agreements into key material.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>A hash algorithm is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> property specifies the name of the algorithm to use. If the algorithm name is not specified, <see cref="T:System.Security.Cryptography.SHA256" /> is used as the default algorithm. </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>A Hash-based Message Authentication Code (HMAC) algorithm is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> property specifies the key to use. Either this property must be set or the <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> property must be set to true; otherwise, a <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown when you use <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />. If both properties are set, the secret agreement is used as the HMAC key. </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>The Transport Layer Security (TLS) protocol is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> and <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> properties must be set; otherwise, a <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown when you use <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />. </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>Provides an abstract base class from which all <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> implementations must inherit. </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> class.</summary>
      <param name="keyBlob">A byte array that represents an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key BLOB to a byte array.</summary>
      <returns>A byte array that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> public key to an XML string.</summary>
      <returns>An XML string that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsa" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
      <returns>A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
      <returns>A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns null. </returns>
      <param name="algorithm">The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the .NET Framework:"ECDsa""ECDsaCng""System.Security.Cryptography.ECDsaCng"You can also provide the name of a custom ECDSA implementation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>Gets the name of the key exchange algorithm.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>Gets the name of the signature algorithm.</summary>
      <returns>The string "ECDsa".</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>Generates a digital signature for the specified hash value. </summary>
      <returns>A digital signature that consists of the given hash value encrypted with the private key.</returns>
      <param name="hash">The hash value of the data that is being signed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hash" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifies a digital signature against the specified hash value. </summary>
      <returns>true if the hash value equals the decrypted signature; otherwise, false.</returns>
      <param name="hash">The hash value of a block of data.</param>
      <param name="signature">The digital signature to be verified.</param>
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA). </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class with a random key pair.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class with a random key pair, using the specified key size.</summary>
      <param name="keySize">The size of the key. Valid key sizes are 256, 384, and 521 bits.</param>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> specifies an invalid length. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)">
      <summary>This method is not implemented.</summary>
      <param name="xmlString">The XML-based key information to be deserialized.</param>
      <exception cref="T:System.NotImplementedException">This method was not overridden for this instance. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Deserializes the key information from an XML string by using the specified format.</summary>
      <param name="xml">The XML-based key information to be deserialized.</param>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>Gets or sets the hash algorithm to use when signing and verifying data.</summary>
      <returns>An object that specifies the hash algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>Gets or sets the key to use when signing and verifying data.</summary>
      <returns>An object that specifies the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>Generates a signature for the specified data.</summary>
      <returns>A digital signature for the specified data.</returns>
      <param name="data">The message data to be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>Generates a digital signature for the specified length of data, beginning at the specified offset. </summary>
      <returns>A digital signature for the specified length of data.</returns>
      <param name="data">The message data to be signed.</param>
      <param name="offset">The location in the string at which to start signing.</param>
      <param name="count">The length of the string, in characters, following <paramref name="offset" /> that will be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="offset" /> caused reading outside the bounds of the data string. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>Generates a signature for the specified data stream, reading to the end of the stream.</summary>
      <returns>A digital signature for the specified data stream.</returns>
      <param name="data">The data stream to be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>Generates a signature for the specified hash value.</summary>
      <returns>A digital signature for the specified hash value.</returns>
      <param name="hash">The hash value of the data to be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)">
      <summary>This method is not implemented.</summary>
      <returns>Not applicable.</returns>
      <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Serializes the key information to an XML string by using the specified format.</summary>
      <returns>A string object that contains the key information, serialized to an XML string according to the requested format.</returns>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>Verifies the digital signature of the specified data. </summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="data">The data that was signed.</param>
      <param name="signature">The signature to be verified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>Verifies a signature for the specified length of data, beginning at the specified offset.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="data">The data that was signed.</param>
      <param name="offset">The location in the data at which the signed data begins.</param>
      <param name="count">The length of the data, in characters, following <paramref name="offset" /> that will be signed.</param>
      <param name="signature">The signature to be verified.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less then zero. -or-<paramref name="offset" /> or <paramref name="count" /> is larger than the length of the byte array passed in the <paramref name="data" /> parameter.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>Verifies the digital signature of the specified data stream, reading to the end of the stream.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="data">The data stream that was signed.</param>
      <param name="signature">The signature to be verified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifies the specified digital signature against a specified hash value.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="hash">The hash value of the data to be verified.</param>
      <param name="signature">The digital signature of the data to be verified against the hash value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>Defines XML serialization formats for elliptic curve keys.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>An XML serialization format described in RFC 4050, "Using the Elliptic Curve Signature Algorithm (ECDSA) for XML Digital Signatures."</summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformation">
      <summary>Provides information for a manifest signature. </summary>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature">
      <summary>Gets the Authenticode signature information for a manifest. </summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> object that contains Authenticode signature information for the manifest, or null if there is no signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.Manifest">
      <summary>Gets the type of a manifest.</summary>
      <returns>One of the <see cref="T:System.Security.ManifestKinds" /> values.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature">
      <summary>Gets the details of the strong name signature of a manifest.</summary>
      <returns>A <see cref="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature" /> object that contains the signature, or null if there is no strong name signature.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)">
      <summary>Gathers and verifies information about the signatures of manifests that belong to a specified activation context.</summary>
      <returns>A collection that contains a <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> object for each manifest that is verified.</returns>
      <param name="application">The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)">
      <summary>Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type.</summary>
      <returns>A collection that contains a <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> object for each manifest that is verified.</returns>
      <param name="application">The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.</param>
      <param name="manifests">The type of manifest. This parameter specifies which manifests in the activation context you want to verify.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
      <summary>Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type, and allows certificates to be selected for revocation.</summary>
      <returns>A collection that contains a <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> object for each manifest that is verified.</returns>
      <param name="application">The application context of the manifests. Activation contexts belong to an application and contain multiple manifests.</param>
      <param name="manifests">The type of manifest. This parameter specifies which manifests in the activation context you want to verify.</param>
      <param name="revocationFlag">One of the enumeration values that specifies which certificates in the chain are checked for revocation. The default is <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot" />.</param>
      <param name="revocationMode">Determines whether the X.509 verification should look online for revocation lists. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value specified for the <paramref name="revocationFlag" /> or <paramref name="revocationMode" /> parameter is invalid.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformationCollection">
      <summary>Represents a read-only collection of <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> objects.  </summary>
    </member>
    <member name="T:System.Security.Cryptography.MD5Cng">
      <summary>Provides a CNG (Cryptography Next Generation) implementation of the MD5 (Message Digest 5) 128-bit hashing algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MD5Cng" /> class. </summary>
      <exception cref="T:System.InvalidOperationException">This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA1Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA) for 256-bit hash values.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA256Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA256" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA) for 384-bit hash values.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA384Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA384" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA) for 512-bit hash values.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA512Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA512" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureVerificationResult">
      <summary>Specifies most of the result codes for signature verification. </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.Valid">
      <summary>The certificate verification result is valid.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.AssemblyIdentityMismatch">
      <summary>The identity of the assembly specified in the /asm:assembly/asm:assemblyIdentity node of the manifest does not match the identity of the assembly in the Authenticode signature in the /asm:assembly/ds:signature/ds:KeyInfo/msrel:RelData/r:license/r:grant/as:ManifestInformation/as:assemblyIdentity node.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.ContainingSignatureInvalid">
      <summary>The strong name signature does not verify in the <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> object. Because the strong name signature wraps the Authenticode signature, someone could replace the Authenticode signature with a signature of their choosing. To prevent this, this error code is returned if the strong name does not verify because substituting a part of the strong name signature will invalidate it.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublicKeyTokenMismatch">
      <summary>The public key token from the manifest identity in the /asm:assembly/asm:AssemblyIdentity node does not match the public key token of the key that is used to sign the manifest.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublisherMismatch">
      <summary>The publisher name from /asm:assembly/asmv2:publisherIdentity does not match the subject name of the signing certificate, or the issuer key hash from the same publisherIdentity node does not match the key hash of the signing certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.SystemError">
      <summary>A system-level error occurred while verifying trust.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidSignerCertificate">
      <summary>The certificate for the signer of the message is invalid or not found.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCountersignature">
      <summary>One of the counter signatures is invalid.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateSignature">
      <summary>The signature of the certificate cannot be verified.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimestamp">
      <summary>The time stamp signature or certificate could not be verified or is malformed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadDigest">
      <summary>The digital signature of the object did not verify.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BasicConstraintsNotObserved">
      <summary>The basic constraint extension of a certificate has not been observed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownTrustProvider">
      <summary>The certificate has an unknown trust provider.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownVerificationAction">
      <summary>The certificate has an unknown verification action.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadSignatureFormat">
      <summary>The signature format is invalid.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateNotExplicitlyTrusted">
      <summary>The certificate is not trusted explicitly.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.MissingSignature">
      <summary>The signature is missing.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExpired">
      <summary>The certificate has expired.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimePeriodNesting">
      <summary>A certificate was issued after the issuing certificate has expired.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateRole">
      <summary>The certificate has an invalid role.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PathLengthConstraintViolated">
      <summary>A path length constraint in the certification chain has been violated.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownCriticalExtension">
      <summary>A certificate contains an unknown extension that is marked critical.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateUsageNotAllowed">
      <summary>The certificate cannot be used for signing and verification.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.IssuerChainingError">
      <summary>A parent of a given certificate did not issue that child certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateMalformed">
      <summary>The certificate is missing or has an empty value for an important field, such as a subject or issuer name.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedRootCertificate">
      <summary>The root certificate is not trusted.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CouldNotBuildChain">
      <summary>The chain could not be built.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.GenericTrustFailure">
      <summary>There is a general trust failure with the certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateRevoked">
      <summary>The certificate has been revoked.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedTestRootCertificate">
      <summary>The test root certificate is not trusted.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.RevocationCheckFailure">
      <summary>The revocation check failed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateUsage">
      <summary>The certificate has an invalid usage.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExplicitlyDistrusted">
      <summary>The certificate was explicitly marked as not trusted by the user.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedCertificationAuthority">
      <summary>The certification chain processed correctly, but one of the CA certificates is not trusted by the policy provider.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificatePolicy">
      <summary>The certificate has an invalid policy.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateName">
      <summary>The certificate has an invalid name. The name is either not included in the permitted list or is explicitly excluded.</summary>
    </member>
    <member name="T:System.Security.Cryptography.StrongNameSignatureInformation">
      <summary>Holds the strong name signature information for a manifest.</summary>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm">
      <summary>Gets the hash algorithm that is used to calculate the strong name signature.</summary>
      <returns>The name of the hash algorithm that is used to calculate the strong name signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HResult">
      <summary>Gets the HRESULT value of the result code.</summary>
      <returns>The HRESULT value of the result code.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.IsValid">
      <summary>Gets a value indicating whether the strong name signature is valid.</summary>
      <returns>true if the strong name signature is valid; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.PublicKey">
      <summary>Gets the public key that is used to verify the signature.</summary>
      <returns>The public key that is used to verify the signature. </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult">
      <summary>Gets the results of verifying the strong name signature.</summary>
      <returns>The result codes for signature verification.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation">
      <summary>Provides information about an Authenticode signature for a manifest. </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Description">
      <summary>Gets the description of the signing certificate.</summary>
      <returns>The description of the signing certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.DescriptionUrl">
      <summary>Gets the description URL of the signing certificate.</summary>
      <returns>The description URL of the signing certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HashAlgorithm">
      <summary>Gets the hash algorithm used to compute the signature.</summary>
      <returns>The hash algorithm used to compute the signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HResult">
      <summary>Gets the HRESULT value from verifying the signature.</summary>
      <returns>The HRESULT value from verifying the signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SignatureChain">
      <summary>Gets the chain of certificates used to verify the Authenticode signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> object that contains the certificate chain.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SigningCertificate">
      <summary>Gets the certificate that signed the manifest.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Timestamp">
      <summary>Gets the time stamp that was applied to the Authenticode signature.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.X509Certificates.TimestampInformation" /> object that contains the signature time stamp.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.TrustStatus">
      <summary>Gets the trustworthiness of the Authenticode signature.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.X509Certificates.TrustStatus" /> values. </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.VerificationResult">
      <summary>Gets the result of verifying the Authenticode signature.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> values.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TimestampInformation">
      <summary>Provides details about the time stamp that was applied to an Authenticode signature for a manifest. </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HashAlgorithm">
      <summary>Gets the hash algorithm used to compute the time stamp signature.</summary>
      <returns>The hash algorithm used to compute the time stamp signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HResult">
      <summary>Gets the HRESULT value that results from verifying the signature.</summary>
      <returns>The HRESULT value that results from verifying the signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.IsValid">
      <summary>Gets a value indicating whether the time stamp of the signature is valid.</summary>
      <returns>true if the time stamp is valid; otherwise, false. </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SignatureChain">
      <summary>Gets the chain of certificates used to verify the time stamp of the signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> object that represents the certificate chain.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SigningCertificate">
      <summary>Gets the certificate that signed the time stamp.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.Timestamp">
      <summary>Gets the time stamp that was applied to the signature.</summary>
      <returns>A <see cref="T:System.DateTime" /> object that represents the time stamp.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.VerificationResult">
      <summary>Gets the result of verifying the time stamp signature.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> values.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TrustStatus">
      <summary>Identifies the level of trustworthiness that is assigned to the signature for a manifest.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Untrusted">
      <summary>The signature 
                    was created by an explicitly distrusted publisher.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.UnknownIdentity">
      <summary>The identity is not known and the signature is invalid. Because there is no verified signature, an identity cannot be determined.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.KnownIdentity">
      <summary>The identity is known and the signature is valid. A valid Authenticode signature provides an identity.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Trusted">
      <summary>The signature is valid and was created by an explicitly trusted publisher.</summary>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>Specifies whether a lock can be entered multiple times by the same thread.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect. </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>A thread can enter a lock recursively. Some classes may restrict this capability. </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</summary>
      <param name="recursionPolicy">One of the enumeration values that specifies the lock recursion policy. </param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>Gets the total number of unique threads that have entered the lock in read mode.</summary>
      <returns>The number of unique threads that have entered the lock in read mode.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>Tries to enter the lock in read mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered read mode. -or-The recursion number would exceed the capacity of the counter. This limit is so large that applications should never encounter it.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>Tries to enter the lock in upgradeable mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode. -or-The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>Tries to enter the lock in write mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode. -or-The current thread has entered read mode, so trying to enter the lock in write mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in read mode.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in upgradeable mode.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in write mode.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in read mode.</summary>
      <returns>true if the current thread has entered read mode; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in upgradeable mode. </summary>
      <returns>true if the current thread has entered upgradeable mode; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in write mode.</summary>
      <returns>true if the current thread has entered write mode; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</summary>
      <returns>One of the enumeration values that specifies the lock recursion policy.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</summary>
      <returns>0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or n if the thread has entered the lock recursively n - 1 times.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</summary>
      <returns>0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or n if the thread has entered upgradeable mode recursively n - 1 times.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</summary>
      <returns>0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or n if the thread has entered write mode recursively n - 1 times.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>Tries to enter the lock in read mode, with an optional integer time-out.</summary>
      <returns>true if the calling thread entered read mode, otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>Tries to enter the lock in read mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered read mode, otherwise, false.</returns>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely. </param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.-or-The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>Tries to enter the lock in upgradeable mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered upgradeable mode, otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>Tries to enter the lock in upgradeable mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered upgradeable mode, otherwise, false.</returns>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.-or-The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>Tries to enter the lock in write mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered write mode, otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>Tries to enter the lock in write mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered write mode, otherwise, false.</returns>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.-or-The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in read mode.</summary>
      <returns>The total number of threads that are waiting to enter read mode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</summary>
      <returns>The total number of threads that are waiting to enter upgradeable mode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in write mode.</summary>
      <returns>The total number of threads that are waiting to enter write mode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task" /> instances.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Unwraps a Task that returns another Task.</summary>
      <returns>A Task{TResult} that represents the asynchronous operation of the provided Task{Task{TResult}}.</returns>
      <param name="task">The Task{Task{TResult}} to unwrap.</param>
      <typeparam name="TResult"></typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a Task{Task}.</summary>
      <returns>A Task that represents the asynchronous operation of the provided Task{Task}.</returns>
      <param name="task">The Task{Task} to unwrap.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task" /> argument is null.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Data.Services.Design.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Services.Design</name>
  </assembly>
  <members>
    <member name="T:System.Data.Services.BuildProvider.DataServiceBuildProvider">
      <summary>Generates C# or Visual Basic code for a WCF Data Services client application based on the metadata returned by the data service.</summary>
    </member>
    <member name="M:System.Data.Services.BuildProvider.DataServiceBuildProvider.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.BuildProvider.DataServiceBuildProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Services.BuildProvider.DataServiceBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Generates C# or Visual Basic code for a WCF Data Services client application based on the metadata returned by the data service.</summary>
      <param name="assemblyBuilder">A container for building an assembly.</param>
    </member>
    <member name="T:System.Data.Services.Design.DataServiceCodeVersion">
      <summary>Specifies the specific version of The following code-behind page for the XAML file creates an WCF Data Services that should be targeted by code generation. </summary>
    </member>
    <member name="F:System.Data.Services.Design.DataServiceCodeVersion.V1">
      <summary>Generate code targets version 1.0.</summary>
    </member>
    <member name="F:System.Data.Services.Design.DataServiceCodeVersion.V2">
      <summary>Generate code targets version 2.0.</summary>
    </member>
    <member name="T:System.Data.Services.Design.EdmToObjectNamespaceMap">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services.</summary>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Add(System.String,System.String)">
      <summary>Adds mapping between the Entity Data Model namespace and the object.</summary>
      <param name="edmNamespace">String containing the namespace name.</param>
      <param name="objectNamespace">String containing the object namespace.</param>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Clear">
      <summary>Clears <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" />.</summary>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Contains(System.String)">
      <summary>Queries whether mapping contains object in <paramref name="edmNamespace" /> parameter. </summary>
      <returns>true if the object is found; otherwise false.</returns>
      <param name="edmNamespace">String value that contains the mapping object to query.</param>
    </member>
    <member name="P:System.Data.Services.Design.EdmToObjectNamespaceMap.Count">
      <summary>Gets a count of mappings contained by <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" />.</summary>
      <returns>Integer value that contains the count of mappings.</returns>
    </member>
    <member name="P:System.Data.Services.Design.EdmToObjectNamespaceMap.EdmNamespaces">
      <summary>Gets edmNamespace items in an <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" /> object.</summary>
      <returns>String value that contains EdmNamespace items.</returns>
    </member>
    <member name="P:System.Data.Services.Design.EdmToObjectNamespaceMap.Item(System.String)">
      <summary>Gets namespace identified by <paramref name="edmNamespace" /> parameter.</summary>
      <returns>EdmNamespace object. </returns>
      <param name="edmNamespace">String value that contains edmNamespace name.</param>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Remove(System.String)">
      <summary>Removes object identified by <paramref name="edmNamespace" /> parameter.</summary>
      <returns>true if operation succeeds; otherwise false.</returns>
      <param name="edmNamespace">String value that contains the mapping object.</param>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.TryGetObjectNamespace(System.String,System.String@)">
      <summary>Tests whether an object identified by <paramref name="objectNamespace" /> and <paramref name="edmNamespace" /> is mapped by <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" />.</summary>
      <returns>true if the mapping is returned; otherwise false.</returns>
      <param name="edmNamespace">String value that contains the namespace name.</param>
      <param name="objectNamespace">String value that identifies the object namespace</param>
    </member>
    <member name="T:System.Data.Services.Design.EntityClassGenerator">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. </summary>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.EntityClassGenerator" /> class. </summary>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.#ctor(System.Data.Services.Design.LanguageOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.EntityClassGenerator" /> class. </summary>
      <param name="languageOption">Selects the programming language.</param>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.EdmToObjectNamespaceMap">
      <summary>Gets the EdmToObjectNamespaceMap object used in entity class generation.</summary>
      <returns>EdmToObjectNamespaceMap object.</returns>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.GenerateCode(System.Xml.XmlReader,System.IO.TextWriter,System.String)">
      <summary>Generates code for the data model from switches identified by parameters.</summary>
      <returns>The list of schema errors that occurred during generation.</returns>
      <param name="sourceReader">The XML reader object.</param>
      <param name="targetWriter">The text writer object.</param>
      <param name="namespacePrefix">The string that contains the namespace prefix.</param>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.GenerateCode(System.Xml.XmlReader,System.String)">
      <summary>Generates code for the object model.</summary>
      <returns>The list of schema errors that occurred during generation.</returns>
      <param name="sourceReader">The XML reader object.</param>
      <param name="targetFilePath">The string that contains the path to the target file.</param>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.LanguageOption">
      <summary>Gets the language option used in generation of the data model.</summary>
      <returns>Language option.</returns>
    </member>
    <member name="E:System.Data.Services.Design.EntityClassGenerator.OnPropertyGenerated">
      <summary>Occurs when a property is generated. </summary>
    </member>
    <member name="E:System.Data.Services.Design.EntityClassGenerator.OnTypeGenerated">
      <summary>Occurs when a type is generated.</summary>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.UseDataServiceCollection">
      <summary>Gets or sets whether code generation should include the code that is required to support data binding.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when data binding code is required; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.Version">
      <summary>Gets and sets the version of WCF Data Services that the generated code targets.</summary>
      <returns>A <see cref="T:System.Data.Services.Design.DataServiceCodeVersion" /> value that indicates the version of the generated code.</returns>
    </member>
    <member name="T:System.Data.Services.Design.LanguageOption">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services.</summary>
    </member>
    <member name="F:System.Data.Services.Design.LanguageOption.GenerateCSharpCode">
      <summary>Generates C# code.</summary>
    </member>
    <member name="F:System.Data.Services.Design.LanguageOption.GenerateVBCode">
      <summary>Generates Visual Basic code. </summary>
    </member>
    <member name="T:System.Data.Services.Design.PropertyGeneratedEventArgs">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. </summary>
    </member>
    <member name="M:System.Data.Services.Design.PropertyGeneratedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.PropertyGeneratedEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Data.Services.Design.PropertyGeneratedEventArgs.#ctor(System.Data.Metadata.Edm.MetadataItem,System.String,System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.PropertyGeneratedEventArgs" /> class. </summary>
      <param name="propertySource">Property source.</param>
      <param name="backingFieldName">Backing field name.</param>
      <param name="returnType">Return type.</param>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.AdditionalAttributes">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional attributes.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.AdditionalGetStatements">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional Get statements.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.AdditionalSetStatements">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional Set statements.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.BackingFieldName">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Backing field name.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.PropertySource">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Property source.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.ReturnType">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Return type.</returns>
    </member>
    <member name="T:System.Data.Services.Design.TypeGeneratedEventArgs">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. </summary>
    </member>
    <member name="M:System.Data.Services.Design.TypeGeneratedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.TypeGeneratedEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Data.Services.Design.TypeGeneratedEventArgs.#ctor(System.Data.Metadata.Edm.GlobalItem,System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.TypeGeneratedEventArgs" /> class. </summary>
      <param name="typeSource">The type source.</param>
      <param name="baseType">The base type.</param>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.AdditionalAttributes">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional attributes.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.AdditionalInterfaces">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional interfaces.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.AdditionalMembers">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional members.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.BaseType">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Base type.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.TypeSource">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Type source.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Data.Services.Client.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Services.Client</name>
  </assembly>
  <members>
    <member name="T:System.Data.Services.Client.ChangeOperationResponse">
      <summary>Results returned after a call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> when enumerating operation responses returned by the <see cref="T:System.Data.Services.Client.DataServiceResponse" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Client.ChangeOperationResponse.Descriptor">
      <summary>Gets the <see cref="T:System.Data.Services.Client.EntityDescriptor" /> or <see cref="T:System.Data.Services.Client.LinkDescriptor" /> modified by a change operation.</summary>
      <returns>An <see cref="T:System.Data.Services.Client.EntityDescriptor" /> or <see cref="T:System.Data.Services.Client.LinkDescriptor" /> modified by a change operation. </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceClientException">
      <summary>Represents errors that occur during execution of WCF Data Services client applications.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class with a system-supplied message that describes the error. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class with a specified message that describes the error. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class. </summary>
      <param name="message">The string value that contains the error message.</param>
      <param name="innerException">The System.Exception object that contains the inner exception.</param>
      <param name="statusCode">The integer value that contains status code.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class. </summary>
      <param name="message">The string value that contains the error message.</param>
      <param name="statusCode">The integer value that contains status code.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceClientException.StatusCode">
      <summary>Gets the HTTP error status code returned after <see cref="T:System.Data.Services.Client.DataServiceClientException" />.</summary>
      <returns>An integer value that represents the exception.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceCollection`1">
      <summary>Represents a dynamic entity collection that provides notifications when items get added, removed, or when the list is refreshed.</summary>
      <typeparam name="T">An entity type.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> class based on query execution.</summary>
      <param name="items">A <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> or LINQ query that  returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Data.Services.Client.TrackingMode)">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> class based on query execution and with the specified tracking mode.</summary>
      <param name="items">A <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> or LINQ query that returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
      <param name="trackingMode">A <see cref="T:System.Data.Services.Client.TrackingMode" /> value that indicated whether or not changes made to items in the collection are automatically tracked.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Data.Services.Client.TrackingMode,System.String,System.Func{System.Data.Services.Client.EntityChangedParams,System.Boolean},System.Func{System.Data.Services.Client.EntityCollectionChangedParams,System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> class a based on query execution and with the supplied change method delegates.</summary>
      <param name="items">A <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> or LINQ query that returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
      <param name="trackingMode">A <see cref="T:System.Data.Services.Client.TrackingMode" /> value that indicated whether or not changes made to items in the collection are automatically tracked.</param>
      <param name="entitySetName">The entity set of the objects in the collection.</param>
      <param name="entityChangedCallback">A delegate that encapsulates a method that is called when an entity changes.</param>
      <param name="collectionChangedCallback">A delegate that encapsulates a method that is called when the collection of entities changes.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.#ctor(System.Data.Services.Client.DataServiceContext)">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> class that uses the specified <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="context">The <see cref="T:System.Data.Services.Client.DataServiceContext" /> used to track changes to objects in the collection.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.#ctor(System.Data.Services.Client.DataServiceContext,System.Collections.Generic.IEnumerable{`0},System.Data.Services.Client.TrackingMode,System.String,System.Func{System.Data.Services.Client.EntityChangedParams,System.Boolean},System.Func{System.Data.Services.Client.EntityCollectionChangedParams,System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> class a based on query execution, with the supplied change method delegates, and that uses the supplied <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="context">The <see cref="T:System.Data.Services.Client.DataServiceContext" /> used to track items in the collection.</param>
      <param name="items">A <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> or LINQ query that returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects that are used to initialize the collection.</param>
      <param name="trackingMode">A <see cref="T:System.Data.Services.Client.TrackingMode" /> value that indicated whether or not changes made to items in the collection are automatically tracked.</param>
      <param name="entitySetName">The entity set of the objects in the collection.</param>
      <param name="entityChangedCallback">A delegate that encapsulates a method that is called when an entity changes.</param>
      <param name="collectionChangedCallback">A delegate that encapsulates a method that is called when the collection of entities changes.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.#ctor(System.Data.Services.Client.DataServiceContext,System.String,System.Func{System.Data.Services.Client.EntityChangedParams,System.Boolean},System.Func{System.Data.Services.Client.EntityCollectionChangedParams,System.Boolean})">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> class with the supplied change method delegates and that uses the specified <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="context">The <see cref="T:System.Data.Services.Client.DataServiceContext" /> used to track items in the collection.</param>
      <param name="entitySetName">The entity set of the objects in the collection.</param>
      <param name="entityChangedCallback">A delegate that encapsulates a method that is called when an entity changes.</param>
      <param name="collectionChangedCallback">A delegate that encapsulates a method that is called when the collection of entities changes.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.Clear(System.Boolean)">
      <summary>Removes all items from the collection, and optionally detaches all the items from the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="stopTracking">When true, detaches all items from the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceCollection`1.Continuation">
      <summary>Gets a continuation object that is used to return the next set of paged results.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that contains the URI to return the next set of paged results.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.Detach">
      <summary>Disables <see cref="T:System.Data.Services.Client.DataServiceContext" /> tracking of all items in the collection. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.InsertItem(System.Int32,`0)">
      <summary>Adds a specified item to the collection at the specified index. </summary>
      <param name="index">Index at which to add the item.</param>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.Load(System.Collections.Generic.IEnumerable{`0})">
      <summary>Loads a collection of entity objects into the collection.</summary>
      <param name="items">Collection of entity objects to be added to the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceCollection`1.Load(`0)">
      <summary>Loads a single entity object into the collection.</summary>
      <param name="item">Entity object to be added.</param>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceContext">
      <summary>The <see cref="T:System.Data.Services.Client.DataServiceContext" /> represents the runtime context of the data service. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceContext" /> class with the specified <paramref name="serviceRoot" />.</summary>
      <param name="serviceRoot">An absolute URI that identifies the root of a data service.</param>
      <exception cref="T:System.ArgumentNullException">When the <paramref name="serviceRoot" /> is null.</exception>
      <exception cref="T:System.ArgumentException">If the <paramref name="serviceRoot" /> is not an absolute URI -or-If the <paramref name="serviceRoot" /> is a well formed URI without a query or query fragment.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AddLink(System.Object,System.String,System.Object)">
      <summary>Adds the specified link to the set of objects the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.</summary>
      <param name="source">The source object for the new link.</param>
      <param name="sourceProperty">The name of the navigation property on the source object that returns the related object.</param>
      <param name="target">The object related to the source object by the new link. </param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" />, or <paramref name="target" /> are null.</exception>
      <exception cref="T:System.InvalidOperationException">If a link already exists.-or-If either the <paramref name="source" /> or <paramref name="target" /> objects are in a <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Deleted" /> state.-or-If <paramref name="sourceProperty" /> is not a collection.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AddObject(System.String,System.Object)">
      <summary>Adds the specified object to the set of objects that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.</summary>
      <param name="entitySetName">The name of the entity set to which the resource will be added.</param>
      <param name="entity">The object to be tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> or <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is empty.-or-When <paramref name="entity" /> does not have a key property defined.</exception>
      <exception cref="T:System.InvalidOperationException">When the entity is already being tracked by the context.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AddRelatedObject(System.Object,System.String,System.Object)">
      <summary>Adds a related object to the context and creates the link that defines the relationship between the two objects in a single request.</summary>
      <param name="source">The parent object that is being tracked by the context.</param>
      <param name="sourceProperty">The name of the navigation property that returns the related object based on an association between the two entities.</param>
      <param name="target">The related object that is being added.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.ApplyingChanges">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is currently applying changes to tracked objects.</summary>
      <returns>Returns true when changes are currently being applied; otherwise returns false.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachLink(System.Object,System.String,System.Object)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified link that defines a relationship between entity objects.</summary>
      <param name="source">The source object in the new link.</param>
      <param name="sourceProperty">The name of the property on the source object that represents the link between the source and target object.</param>
      <param name="target">The target object in the link that is bound to the source object specified in this call. The target object must be of the type identified by the source property or a subtype.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" />, or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the link between the two entities already exists.-or-When <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.Services.Client.EntityStates.Added" /> or <see cref="F:System.Data.Services.Client.EntityStates.Deleted" /> state.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource within the specified resource set.</summary>
      <param name="entitySetName">The name of the set that contains the resource.</param>
      <param name="entity">The resource to be tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. The resource is attached in the Unchanged state.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> or <paramref name="entitySetName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.-or-When the <paramref name="entity" /> does not have a key property defined.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is already being tracked by the context.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object,System.String)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource in the specified resource set.</summary>
      <param name="entitySetName">The string value that contains the name of the entity set to which to the entity is attached.</param>
      <param name="entity">The entity to add.</param>
      <param name="etag">An etag value that represents the state of the entity the last time it was retrieved from the data service. This value is treated as an opaque string; no validation is performed on it by the client library.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> is null.-or-When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.-or-When the supplied object does not have a key property.</exception>
      <exception cref="T:System.InvalidOperationException">When the supplied object is already being tracked by the context</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.BaseUri">
      <summary>Gets the absolute URI identifying the root of the target data service. </summary>
      <returns>An absolute URI that identifies the root of a T data service.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Data.Services.Client.DataServiceQueryContinuation{``0},System.AsyncCallback,System.Object)">
      <summary>Asynchronously sends a request to the data service to retrieve the next page of data in a paged query result.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the operation.</returns>
      <param name="continuation">A <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that represents the next page of data to return from the data service.</param>
      <param name="callback">Delegate to invoke when results are available for client consumption.</param>
      <param name="state">User-defined state object passed to the callback.</param>
      <typeparam name="T">The type returned by the query.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)">
      <summary>Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.</summary>
      <returns>An object that is used to track the status of the asynchronous operation. </returns>
      <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.</param>
      <param name="callback">Delegate to invoke when results are available for client consumption.</param>
      <param name="state">User-defined state object passed to the callback.</param>
      <typeparam name="TElement">The type returned by the query.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest[])">
      <summary>Asynchronously submits a group of queries as a batch to the data service.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation. </returns>
      <param name="callback">The delegate that is called when a response to the batch request is received.</param>
      <param name="state">User-defined state object that is used to pass context data to the callback method.</param>
      <param name="queries">The array of query requests to include in the batch request.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginGetReadStream(System.Object,System.Data.Services.Client.DataServiceRequestArgs,System.AsyncCallback,System.Object)">
      <summary>Asynchronously gets binary property data for the specified entity as a data stream along with the specified message headers.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation. </returns>
      <param name="entity">The entity that has the binary property to retrieve. </param>
      <param name="args">Instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
      <param name="callback">Delegate to invoke when results are available for client consumption.</param>
      <param name="state">User-defined state object passed to the callback.</param>
      <exception cref="T:System.ArgumentNullException">Any of the parameters supplied to the method is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:System.Data.Services.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a binary property.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronously loads the value of the specified property from the data service.</summary>
      <returns>An IAsyncResult that represents the status of the asynchronous operation.</returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property on the specified entity to load.</param>
      <param name="callback">The delegate called when a response to the request is received.</param>
      <param name="state">The user-defined state object that is used to pass context data to the callback method.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.Data.Services.Client.DataServiceQueryContinuation,System.AsyncCallback,System.Object)">
      <summary>Asynchronously loads the next page of related entities from the data service by using the supplied query continuation object.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the operation.</returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property of the specified entity to load.</param>
      <param name="continuation">A <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that represents the next page of related entity data to return from the data service.</param>
      <param name="callback">Delegate to invoke when results are available for client consumption.</param>
      <param name="state">User-defined state object passed to the callback.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.Uri,System.AsyncCallback,System.Object)">
      <summary>Asynchronously loads a page of related entities from the data service by using the supplied next link URI.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation. </returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property of the specified entity to load.</param>
      <param name="nextLinkUri">The URI used to load the next results page.</param>
      <param name="callback">Delegate to invoke when results are available for client consumption.</param>
      <param name="state">User-defined state object passed to the callback.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)">
      <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> since the last time changes were saved.</summary>
      <returns>An IAsyncResult that represents the status of the asynchronous operation.</returns>
      <param name="callback">The delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state object that is used to pass context data to the callback method.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.Data.Services.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
      <summary>Asynchronously submits the pending changes to the data service collected by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> since the last time changes were saved.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</returns>
      <param name="options">The options for how the client can save the pending set of changes.</param>
      <param name="callback">The delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state object that is used to pass context data to the callback method.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.CancelRequest(System.IAsyncResult)">
      <summary>Attempts to cancel the operation that is associated with the supplied <see cref="T:System.IAsyncResult" /> object.</summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> object from the operation being canceled.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.CreateQuery``1(System.String)">
      <summary>Creates a data service query for data of a specified generic type.</summary>
      <returns>A new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> instance that represents a data service query.</returns>
      <param name="entitySetName">A string that resolves to a URI.</param>
      <typeparam name="T">The type returned by the query</typeparam>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Credentials">
      <summary>Gets or sets the authentication information that is used by each query created by using the <see cref="T:System.Data.Services.Client.DataServiceContext" /> object.</summary>
      <returns>The base authentication interface for retrieving credentials for Web client authentication.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.DataNamespace">
      <summary>Gets or sets the XML namespace for data items, not metadata items, of an Atom payload.</summary>
      <returns>A string representing the XML namespace for data items of a payload in the ATOM format.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DeleteLink(System.Object,System.String,System.Object)">
      <summary>Changes the state of the link to deleted in the list of links being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="source">The source object in the link to be marked for deletion.</param>
      <param name="sourceProperty">The name of the navigation property on the source object that is used to access the target object.</param>
      <param name="target">The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" />, or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.-or-When <paramref name="sourceProperty" /> is not a collection.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DeleteObject(System.Object)">
      <summary>Changes the state of the specified object to be deleted in the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <param name="entity">The tracked entity to be changed to the deleted state.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the object is not being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.Detach(System.Object)">
      <summary>Removes the entity from the list of entities that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.</summary>
      <returns>Returns true if the specified entity was detached; otherwise false.</returns>
      <param name="entity">The tracked entity to be detached from the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DetachLink(System.Object,System.String,System.Object)">
      <summary>Removes the specified link from the list of links being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <returns>Returns true if the specified entity was detached; otherwise false.</returns>
      <param name="source">The source object participating in the link to be marked for deletion.</param>
      <param name="sourceProperty">The name of the property on the source object that represents the source in the link between the source and the target.</param>
      <param name="target">The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="sourceProperty" /> are null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="sourceProperty" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)" />.</summary>
      <returns>The results returned by the query operation.</returns>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> object.</param>
      <typeparam name="TElement">The type returned by the query.</typeparam>
      <exception cref="T:System.ArgumentNullException">When<paramref name=" asyncResult" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When<paramref name=" asyncResult" /> did not originate from this <see cref="T:System.Data.Services.Client.DataServiceContext" /> instance. -or- When the <see cref="M:System.Data.Services.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)" /> method was previously called.</exception>
      <exception cref="T:System.InvalidOperationException">When an error is raised either during execution of the request or when it converts the contents of the response message into objects.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndExecuteBatch(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest[])" />.</summary>
      <returns>The DataServiceResult object that indicates the result of the batch operation.</returns>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndGetReadStream(System.IAsyncResult)">
      <summary>Called to complete the asynchronous operation of retrieving a binary property as a stream.</summary>
      <returns>An instance of <see cref="T:System.Data.Services.Client.DataServiceStreamResponse" /> which contains the response stream along with its metadata.</returns>
      <param name="asyncResult">The result from the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginGetReadStream(System.Object,System.Data.Services.Client.DataServiceRequestArgs,System.AsyncCallback,System.Object)" /> operation that contains the binary data stream.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndLoadProperty(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)" /> operation.</summary>
      <returns>The response to the load operation.</returns>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndSaveChanges(System.IAsyncResult)">
      <summary>Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" /> operation.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object that indicates the result of the batch operation.</returns>
      <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Entities">
      <summary>Gets a list of all the resources currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</summary>
      <returns>A list of <see cref="T:System.Data.Services.Client.EntityDescriptor" /> objects that represent all the resources currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.Execute``1(System.Data.Services.Client.DataServiceQueryContinuation{``0})">
      <summary>Sends a request to the data service to retrieve the next page of data in a paged query result.</summary>
      <returns>The response that contains the next page of data in the query result.</returns>
      <param name="continuation">A <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that represents the next page of data to return from the data service.</param>
      <typeparam name="T">The type returned by the query.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.Execute``1(System.Uri)">
      <summary>Sends a request to the data service to execute a specific URI.</summary>
      <returns>The results of the query operation.</returns>
      <param name="requestUri">The URI to which the query request will be sent. The URI may be any valid data service URI. Can contain $ query parameters.</param>
      <typeparam name="TElement">The type that the query returns.</typeparam>
      <exception cref="T:System.Net.WebException">When a response is not received from a request to the <paramref name="requestUri" />.</exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="requestUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="requestUri" /> is not a valid URI for the data service.</exception>
      <exception cref="T:System.InvalidOperationException">When an error is raised either during execution of the request or when it converts the contents of the response message into objects.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.ExecuteBatch(System.Data.Services.Client.DataServiceRequest[])">
      <summary>Submits a group of queries as a batch to the data service.</summary>
      <returns>The response to the batch operation.</returns>
      <param name="queries">Array of <see cref="T:System.Data.Services.Client.DataServiceRequest[]" /> objects that make up the queries.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetEntityDescriptor(System.Object)">
      <summary>Gets the <see cref="T:System.Data.Services.Client.EntityDescriptor" /> for the supplied entity object.</summary>
      <returns>The <see cref="T:System.Data.Services.Client.EntityDescriptor" /> instance for the <paramref name="entity" />, or null if an <see cref="T:System.Data.Services.Client.EntityDescriptor" /> does not exist for the object.</returns>
      <param name="entity">The object for which to return the entity descriptor.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetLinkDescriptor(System.Object,System.String,System.Object)">
      <summary>Gets the <see cref="T:System.Data.Services.Client.LinkDescriptor" /> for a specific link that defines the relationship between two entities.</summary>
      <returns>The <see cref="T:System.Data.Services.Client.LinkDescriptor" /> instance for the specified relationship, or null if a <see cref="T:System.Data.Services.Client.LinkDescriptor" /> does not exist for the relationship.</returns>
      <param name="source">Source object in the link</param>
      <param name="sourceProperty">The name of the navigation property on the <paramref name="source" /> object that returns the related object.</param>
      <param name="target">The related entity.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetMetadataUri">
      <summary>Gets a URI of the location of .edmx metadata.</summary>
      <returns>A URI that identifies the location of the metadata description, in .edmx format, for the data service identified by the base URI that is passed to the constructor.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetReadStream(System.Object)">
      <summary>Gets binary property data for the specified entity as a data stream.</summary>
      <returns>An instance of <see cref="T:System.Data.Services.Client.DataServiceStreamResponse" /> that represents the response.</returns>
      <param name="entity">The entity that has the binary property to retrieve. </param>
      <exception cref="T:System.ArgumentNullException">The<paramref name=" entity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:System.Data.Services.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a binary property.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetReadStream(System.Object,System.Data.Services.Client.DataServiceRequestArgs)">
      <summary>Gets binary property data for the specified entity as a data stream along with the specified message headers.</summary>
      <returns>An instance of <see cref="T:System.Data.Services.Client.DataServiceStreamResponse" /> that represents the response.</returns>
      <param name="entity">The entity that has the binary property to retrieve. </param>
      <param name="args">Instance of <see cref="T:System.Data.Services.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> is null.-or- <paramref name="args" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:System.Data.Services.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a binary property.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetReadStream(System.Object,System.String)">
      <summary>Gets binary property data for the specified entity as a data stream, with the specified Accept message header.</summary>
      <returns>An instance of <see cref="T:System.Data.Services.Client.DataServiceStreamResponse" /> that represents the response.</returns>
      <param name="entity">The entity that has the binary property to retrieve. </param>
      <param name="acceptContentType">The content type of the data requested from the data service, specified in the Accept header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> is null.-or- <paramref name="acceptContentType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:System.Data.Services.Client.DataServiceContext" />.-or-The <paramref name="entity" /> is in the <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.-or-The <paramref name="entity" /> is not a Media Link Entry and does not have a binary property.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetReadStreamUri(System.Object)">
      <summary>Gets the URI that is used to return binary property data as a data stream.</summary>
      <returns>The read URI of the binary data stream.</returns>
      <param name="entity">The entity that has the binary property to retrieve. </param>
      <exception cref="T:System.ArgumentNullException">If the entity specified is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not tracked by this <see cref="T:System.Data.Services.Client.DataServiceContext" />.</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.IgnoreMissingProperties">
      <summary>Gets or sets whether the properties read from the type must be mapped to properties on the client-side type.</summary>
      <returns>A Boolean value that indicates whether the properties read from the type must be mapped to properties on the client-side type.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.IgnoreResourceNotFoundException">
      <summary>Gets or sets whether an exception is raised when a 404 error (resource not found) is returned by the data service. </summary>
      <returns>When set to true, the client library returns an empty set instead of raising a <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> when the data service returns an HTTP 404: Resource Not Found error.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Links">
      <summary>Gets the collection of all associations or links currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> object.</summary>
      <returns>A collection of <see cref="T:System.Data.Services.Client.LinkDescriptor" /> objects that represent all associations or links current being tracked by the current being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> object.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.LoadProperty(System.Object,System.String)">
      <summary>Loads deferred content for a specified property from the data service.</summary>
      <returns>The response to the load operation.</returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property of the specified entity to load.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.LoadProperty(System.Object,System.String,System.Data.Services.Client.DataServiceQueryContinuation)">
      <summary>Loads the next page of related entities from the data service by using the supplied query continuation object.</summary>
      <returns>The response that contains the next page of related entity data.</returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property of the specified entity to load.</param>
      <param name="continuation">A <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that represents the next page of related entities to load from the data service.</param>
      <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is in the <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.LoadProperty``1(System.Object,System.String,System.Data.Services.Client.DataServiceQueryContinuation{``0})">
      <summary>Loads the next page of related entities from the data service by using the supplied generic query continuation object.</summary>
      <returns>The response that contains the next page of related entity data.</returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property of the specified entity to load.</param>
      <param name="continuation">A <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that represents the next page of related entities to load from the data service.</param>
      <typeparam name="T">Element type of collection to load.</typeparam>
      <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is in the <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.LoadProperty(System.Object,System.String,System.Uri)">
      <summary>Loads a page of related entities by using the supplied next link URI.</summary>
      <returns>An instance of <see cref="T:System.Data.Services.Client.QueryOperationResponse`1" /> that contains the results of the request.</returns>
      <param name="entity">The entity that contains the property to load.</param>
      <param name="propertyName">The name of the property of the specified entity to load.</param>
      <param name="nextLinkUri">The URI that is used to load the next results page.</param>
      <exception cref="T:System.InvalidOperationException">When <paramref name="entity" /> is in a <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Added" /> state.</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.MergeOption">
      <summary>Gets or sets the synchronization option for receiving entities from a data service.</summary>
      <returns>One of the members of the <see cref="T:System.Data.Services.Client.MergeOption" /> enumeration.</returns>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.ReadingEntity">
      <summary>Occurs after entity data has been completely read into the entity object.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.ResolveName">
      <summary>Gets or sets a function to override the default type resolution strategy used by the client library when you send entities to a data service.</summary>
      <returns>Returns a string that contains the name of the <see cref="T:System.Data.Services.Client.DataServiceContext" />.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.ResolveType">
      <summary>Gets or sets a function that is used to override the default type resolution option that is used by the client library when receiving entities from a data service.</summary>
      <returns>A function delegate that identifies an override function that is used to override the default type resolution option that is used by the client library.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.SaveChanges">
      <summary>Saves the changes that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking to storage.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> that contains status, headers, and errors that result from the call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges.Remarks" />.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.SaveChanges(System.Data.Services.Client.SaveChangesOptions)">
      <summary>Saves the changes that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking to storage.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> that contains status, headers, and errors that result from the call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.</returns>
      <param name="options">A member of the <see cref="T:System.Data.Services.Client.MergeOption" /> enumeration that specifies the materialization option.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.SaveChangesDefaultOptions">
      <summary>Gets or sets the <see cref="T:System.Data.Services.Client.SaveChangesOptions" /> values that are used by the <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> method.</summary>
      <returns>The current options for the save changes operation.</returns>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.SendingRequest">
      <summary>Occurs when a new <see cref="T:System.Net.HttpWebRequest" /> has been created.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.SetLink(System.Object,System.String,System.Object)">
      <summary>Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> that a new link exists between the objects specified and that the link is represented by the property specified by the <paramref name="sourceProperty" /> parameter.</summary>
      <param name="source">The source object for the new link.</param>
      <param name="sourceProperty">The property on the source object that identifies the target object of the new link.</param>
      <param name="target">The child object involved in the new link that is to be initialized by calling this method. The target object must be a subtype of the type identified by the <paramref name="sourceProperty" /> parameter. If <paramref name="target" /> is set to null, the call represents a delete link operation.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="sourceProperty" /> or <paramref name="target" /> are null.</exception>
      <exception cref="T:System.InvalidOperationException">When the specified link already exists.-or-When the objects supplied as <paramref name="source" /> or <paramref name="target" /> are in the <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> or <see cref="F:System.Data.Services.Client.EntityStates.Deleted" /> state.-or-When <paramref name="sourceProperty" /> is not a navigation property that defines a reference to a single related object.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.SetSaveStream(System.Object,System.IO.Stream,System.Boolean,System.Data.Services.Client.DataServiceRequestArgs)">
      <summary>Sets a new data stream as the binary property of an entity, with the specified settings in the request message.</summary>
      <param name="entity">The entity that has a binary property to which to assign the data stream.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which to read the binary data. </param>
      <param name="closeStream">A <see cref="T:System.Boolean" /> value that determines whether the data stream is closed when the <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> method is completed. </param>
      <param name="args">An instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestArgs" /> class that contains settings for the HTTP request message.</param>
      <exception cref="T:System.ArgumentNullException">Any of the parameters supplied to the method are null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not being tracked by this <see cref="T:System.Data.Services.Client.DataServiceContext" /> instance. -or-The <paramref name="entity" /> has the <see cref="T:System.Data.Services.Client.MediaEntryAttribute" /> applied. </exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.SetSaveStream(System.Object,System.IO.Stream,System.Boolean,System.String,System.String)">
      <summary>Sets a new data stream as the binary property of an entity. The specified Content-Type and Slug headers are included in the request message.</summary>
      <param name="entity">The entity that has a binary property to which to assign the data stream.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which to read the binary data. </param>
      <param name="closeStream">A <see cref="T:System.Boolean" /> value that determines whether the data stream is closed when the <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> method is completed. </param>
      <param name="contentType">The Content-Type header value for the request message.</param>
      <param name="slug">The Slug header value for the request message.</param>
      <exception cref="T:System.ArgumentNullException">Any of the parameters supplied to the method are null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="entity" /> is not being tracked by this <see cref="T:System.Data.Services.Client.DataServiceContext" /> instance. -or-The entity has the <see cref="T:System.Data.Services.Client.MediaEntryAttribute" /> applied. </exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Timeout">
      <summary>Gets or sets the time-out option that is used for the underlying HTTP request to the data service.</summary>
      <returns>An integer that indicates the time interval before time-out of a service request.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.TryGetEntity``1(System.Uri,``0@)">
      <summary>Test retrieval of an entity being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> by reference to the URI of the entity.</summary>
      <returns>If an entity is found at <paramref name="resourceUri" />, the entity is returned in the out parameter <paramref name="entity" /> and true is returned. If no entity is found, false is returned.</returns>
      <param name="identity">The URI of the tracked entity to be retrieved.</param>
      <param name="entity">The entity to be retrieved.</param>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="identity" /> is null.</exception>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.TryGetUri(System.Object,System.Uri@)">
      <summary>Retrieves the canonical URI associated with the specified entity, if available.</summary>
      <returns>Returns true if the canonical URI is returned in the out parameter. If the specified entity is not tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> or is in the added state, no URI is available and false is returned.</returns>
      <param name="entity">The entity identified by the <paramref name="identity" />.</param>
      <param name="identity">The URI of the entity.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.TypeScheme">
      <summary>Gets or sets the URI used to indicate what type scheme is used by the service.</summary>
      <returns>A <see cref="T:System.Uri" /> object that contains the type scheme.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.UpdateObject(System.Object)">
      <summary>Changes the state of the specified object in the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to <see cref="F:System.Data.Services.Client.EntityStates.Modified" />.</summary>
      <param name="entity">The tracked entity to be assigned to the <see cref="F:System.Data.Services.Client.EntityStates.Modified" /> state.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entity" /> is in the <see cref="F:System.Data.Services.Client.EntityStates.Detached" /> state.</exception>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.UsePostTunneling">
      <summary>Gets or sets a Boolean value that indicates whether to use post tunneling.</summary>
      <returns>A Boolean value that indicates whether to use post tunneling.</returns>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.WritingEntity">
      <summary>Occurs after an entity has been fully serialized into XML in a request message.</summary>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQuery">
      <summary>An abstract class that represents a single query request to WCF Data Services. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery.BeginExecute(System.AsyncCallback,System.Object)">
      <summary>Asynchronously sends a request to execute the data service query.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that is used to track the status of the asynchronous operation.</returns>
      <param name="callback">Delegate to invoke when results are available for client consumption.</param>
      <param name="state">User-defined state object passed to the callback.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery.EndExecute(System.IAsyncResult)">
      <summary>Called to complete the asynchronous operation of executing a data service query.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the results of the query operation.</returns>
      <param name="asyncResult">The result from the <see cref="M:System.Data.Services.Client.DataServiceQuery.BeginExecute(System.AsyncCallback,System.Object)" /> operation that contains the query results.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery.Execute">
      <summary>Executes the query against the data service.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the results of the query operation.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery.Expression">
      <summary>Represents an expression that contains the query to the data service.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> object that represents the query.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery.Provider">
      <summary>Represents the query provider instance.</summary>
      <returns>An <see cref="T:System.Linq.IQueryProvider" /> representing the data source provider.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets the <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection returned by the query.</summary>
      <returns>An enumerator over the query results.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQuery`1">
      <summary>Represents a single query request to a data service.</summary>
      <typeparam name="TElement">Type of results returned by the query.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.AddQueryOption(System.String,System.Object)">
      <summary>Creates a new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> with the query option set in the URI generated by the returned query.</summary>
      <returns>A new query that includes the requested query option appended to the URI of the supplied query</returns>
      <param name="name">The string value that contains the name of the query string option to add.</param>
      <param name="value">The object that contains the value of the query string option.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.BeginExecute(System.AsyncCallback,System.Object)">
      <summary>Starts an asynchronous network operation that executes the query represented by this object instance.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation.</returns>
      <param name="callback">The delegate to invoke when the operation completes.</param>
      <param name="state">User defined object used to transfer state between the start of the operation and the callback defined by <paramref name="callback" />.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.ElementType">
      <summary>Returns the type of the object used in the template to create the <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> instance.</summary>
      <returns>Returns <see cref="T:System.Type" /> representing the type used in the template when the query is created.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.EndExecute(System.IAsyncResult)">
      <summary>Ends an asynchronous query request to a data service.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" />  that contains the results of the query operation.</returns>
      <param name="asyncResult">The pending asynchronous query request.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.Execute">
      <summary>Executes the query and returns the results as a collection that implements IEnumerable.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> in which <paramref name="T" /> represents the type of the query results.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.Expand(System.String)">
      <summary>Creates a new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> with the expand option set in the URI generated by the returned query.</summary>
      <returns>A new query that includes the requested $expand query option appended to the URI of the supplied query.</returns>
      <param name="path">A string value that contains the requesting URI.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.Expression">
      <summary>Represents an expression containing the query to the data service.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.Expression" /> object representing the query.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.GetEnumerator">
      <summary>Executes the query and returns the results as a collection.</summary>
      <returns>A typed enumerator over the results in which <paramref name="TEntity" /> represents the type of the query results.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.IncludeTotalCount">
      <summary>Requests that the count of all entities in the entity set be returned inline with the query results.</summary>
      <returns>A new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> object that has the inline count option set.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.Provider">
      <summary>Represents the query provider instance.</summary>
      <returns>A <see cref="T:System.Linq.IQueryProvider" /> representing the data source provider.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.RequestUri">
      <summary>Get the URI for the query.</summary>
      <returns>The URI of the request.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Executes the query and returns the results as a collection.</summary>
      <returns>An enumerator over the query results.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.ToString">
      <summary>Represents the URI of the query to the data service.</summary>
      <returns>A URI as string that represents the query to the data service for this <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> instance.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQueryContinuation">
      <summary>Encapsulates a URI that returns the next page of a paged WCF Data Services query result.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQueryContinuation.NextLinkUri">
      <summary>Gets the URI that is used to return the next page of data from a paged query result.</summary>
      <returns>A URI that returns the next page of data.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryContinuation.ToString">
      <summary>Returns the next link URI as a string.</summary>
      <returns>A string representation of the next link URI.  </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQueryContinuation`1">
      <summary>Encapsulates a URI that returns the next page of a paged WCF Data Services query result. </summary>
      <typeparam name="T">The type of continuation token.</typeparam>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQueryException">
      <summary>Exception that indicates an error occurred loading the property value from the data service. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class with a system-supplied message that describes the error. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class with a specified message that describes the error. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.The string value that the contains error message.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. The string value that contains the error message.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. The inner exception object.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception,System.Data.Services.Client.QueryOperationResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class. </summary>
      <param name="message">The string value that contains the error message.</param>
      <param name="innerException">The inner exception object.</param>
      <param name="response">The <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> object.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQueryException.Response">
      <summary>Gets the <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> that indicates the exception results.</summary>
      <returns>A <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> object that indicates the exception results.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequest">
      <summary>Represents request objects submitted as a batch to WCF Data Services.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest.ElementType">
      <summary>Gets the type of object submitted as a batch to the data service.</summary>
      <returns>Type object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest.RequestUri">
      <summary>Gets the URI of the request object submitted to a data service.</summary>
      <returns>URI of the request object.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequest.ToString">
      <summary>Represents the URI of the query to the data service. </summary>
      <returns>The requested URI as a <see cref="T:System.String" /> value.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequest`1">
      <summary>Represents request objects submitted as a batch to the data service.</summary>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequest`1.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> class. </summary>
      <param name="requestUri">The URI object that contains the request string.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest`1.ElementType">
      <summary>Gets the type of the object used to create the <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> instance.</summary>
      <returns>A <see cref="System.Type" /> value that indicates the type of data returned.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest`1.RequestUri">
      <summary>Gets the URI object that contains the request string. </summary>
      <returns>A <see cref="System.Uri" /> object that contains the request string.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequestArgs">
      <summary>Represents additional metadata that is included in a request message to WCF Data Services.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestArgs.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestArgs" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequestArgs.AcceptContentType">
      <summary>Gets or sets the Accept header of the request message.</summary>
      <returns>The value of the Accept header.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequestArgs.ContentType">
      <summary>Gets or sets the Content-Type header of the request message.</summary>
      <returns>The value of the Content-Type header.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequestArgs.Headers">
      <summary>Gets the headers in the request message.</summary>
      <returns>The headers in the request message.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequestArgs.Slug">
      <summary>Gets or sets the value of the Slug header of the request message.</summary>
      <returns>A value that is the Slug header of the request. </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequestException">
      <summary>Represents the error thrown if the data service returns a response code less than 200 or greater than 299, or the top-level element in the response is &lt;error&gt;. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class with a system-supplied message that describes the error. </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class with a specified message that describes the error. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.The error message text.</param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception,System.Data.Services.Client.DataServiceResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class. </summary>
      <param name="message">Error message text.</param>
      <param name="innerException">Exception object that contains the inner exception.</param>
      <param name="response">
        <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.</param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequestException.Response">
      <summary>Gets the response as a <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object. </summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceResponse">
      <summary>Represents the response to operations sent to the data service as a result of calling <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />. </summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.BatchHeaders">
      <summary>The headers from an HTTP response associated with a batch request.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> object containing the name-value pairs of an HTTP response.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.BatchStatusCode">
      <summary>The status code from an HTTP response associated with a batch request.</summary>
      <returns>An integer based on status codes defined in Hypertext Transfer Protocol.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceResponse.GetEnumerator">
      <summary>Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:System.Data.Services.Client.OperationResponse" /> objects within the <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>An enumerator over the response received from the service.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.IsBatchResponse">
      <summary>Gets a Boolean value that indicates whether the response contains multiple results.</summary>
      <returns>A Boolean value that indicates whether the response contains multiple results.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceResponse.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:System.Data.Services.Client.OperationResponse" /> objects within the <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>An enumerator over the response received from the service.</returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceStreamResponse">
      <summary>Represents a response from WCF Data Services that contains binary data as a stream.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceStreamResponse.ContentDisposition">
      <summary>Gets the Content-Disposition header field for the response stream.</summary>
      <returns>The contents of the Content-Disposition header field.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceStreamResponse.ContentType">
      <summary>Gets the content type of the response stream.</summary>
      <returns>The content type of the response stream.</returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceStreamResponse.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Data.Services.Client.DataServiceStreamResponse" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceStreamResponse.Headers">
      <summary>Gets the collection of headers from the response.</summary>
      <returns>The headers collection from the response message as a <see cref="T:System.Collections.Generic.Dictionary`2" /> object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceStreamResponse.Stream">
      <summary>Gets the binary property data from the data service as a binary stream. </summary>
      <returns>The stream that contains the binary property data.</returns>
      <exception cref="T:System.ObjectExposedException">When the <see cref="T:System.Data.Services.Client.DataServiceStreamResponse" /> is already disposed.</exception>
    </member>
    <member name="T:System.Data.Services.Client.Descriptor">
      <summary>Abstract class from which <see cref="T:System.Data.Services.Client.EntityDescriptor" /> is derived.</summary>
    </member>
    <member name="P:System.Data.Services.Client.Descriptor.State">
      <summary>When overridden in a derived class, gets the state of the object at the time this instance was constructed.</summary>
      <returns>An <see cref="T:System.Data.Services.Client.EntityStates" /> of the object returned at the time this instance was constructed.  </returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityChangedParams">
      <summary>Encapsulates the arguments of a <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> delegate</summary>
    </member>
    <member name="P:System.Data.Services.Client.EntityChangedParams.Context">
      <summary>The context that is associated with the entity object that has changed.</summary>
      <returns>The context that is tracking the changed object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityChangedParams.Entity">
      <summary>The entity object that has changed.</summary>
      <returns>The changed object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityChangedParams.PropertyName">
      <summary>The name of the property on the entity object that references the target object.</summary>
      <returns>The name of the changed property.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityChangedParams.PropertyValue">
      <summary>The object that is currently referenced by the changed property on the entity object.</summary>
      <returns>The current value that references a target entity. </returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityChangedParams.SourceEntitySet">
      <summary>The entity set of the source object.</summary>
      <returns>An entity set name.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityChangedParams.TargetEntitySet">
      <summary>The entity set to which the target entity object belongs</summary>
      <returns>An entity set name.</returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityCollectionChangedParams">
      <summary>Encapsulates the arguments of a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> delegate.</summary>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.Action">
      <summary>A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> value that indicates how the collection was changed. </summary>
      <returns>A value that indicates how the collection was changed.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.Collection">
      <summary>The <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> that has changed.</summary>
      <returns>A reference to the collection that has changed.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.Context">
      <summary>The <see cref="T:System.Data.Services.Client.DataServiceContext" /> associated with the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> that has changed.</summary>
      <returns>The context associated with the collection that has changed</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.PropertyName">
      <summary>The navigation property on the source object that references the collection that has changed.</summary>
      <returns>The navigation property name.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.SourceEntity">
      <summary>The source object that references the target object in the collection by using a navigation property. </summary>
      <returns>The source object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.SourceEntitySet">
      <summary>The entity set of the source object.</summary>
      <returns>An entity set name.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.TargetEntity">
      <summary>The entity object in the collection that has changed.</summary>
      <returns>The changed entity object in the collection.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.TargetEntitySet">
      <summary>The entity set name of the object in the collection.</summary>
      <returns>An entity set name.</returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityDescriptor">
      <summary>Description of modifications done to entities by operations returned in a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.EditLink">
      <summary>Gets or sets the URI that modifies the entity.</summary>
      <returns>The edit link URI for the entity resource.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.EditStreamUri">
      <summary>Gets or sets the URI that modifies the binary property data of the entity.</summary>
      <returns>The <see cref="P:System.Data.Services.Client.EntityDescriptor.EditStreamUri" /> property contains the edit-media link URI for the Media Resource that is associated with the entity, which is a Media Link Entry.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.Entity">
      <summary>Gets the entity that contains the update data.</summary>
      <returns>An object that contains update data.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.ETag">
      <summary>Gets an eTag value that indicates the state of data targeted for update since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.</summary>
      <returns>A string value that indicates the state of data.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.Identity">
      <summary>Gets or sets the URI that is the identity value of the entity.</summary>
      <returns>The <see cref="P:System.Data.Services.Client.EntityDescriptor.Identity" /> property corresponds to the identity element of the entry that represents the entity in the Atom response.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.ParentForInsert">
      <summary>Gets the parent entity that is related to the entity.</summary>
      <returns>An object that is the parent entity in the relationship link.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.ParentPropertyForInsert">
      <summary>Gets the name of the property of the entity that is a navigation property and links to the parent entity.</summary>
      <returns>The name of the parent property.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.ReadStreamUri">
      <summary>Gets or sets the URI that accesses the binary property data of the entity.</summary>
      <returns>A URI that accesses the binary property as a stream.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.SelfLink">
      <summary>Gets or sets the URI that is used to return the entity resource.</summary>
      <returns>A URI that returns the entity.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.ServerTypeName">
      <summary>Gets or sets the name of the type in the data source to which the entity is mapped.</summary>
      <returns>A string that is the name of the data type.</returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.StreamETag">
      <summary>Gets an eTag value that indicates the state of the Media Resource targeted for update since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> when the entity is a Media Link Entry.</summary>
      <returns>A string value that indicates the state of data. </returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityStates">
      <summary>Represents the enumeration that identifies the state of an entity being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.  </summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Detached">
      <summary>The entity was detached since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Unchanged">
      <summary>The entity is unchanged since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Added">
      <summary>The entity was added since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Deleted">
      <summary>The entity was deleted since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.</summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Modified">
      <summary>The entity was modified since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.</summary>
    </member>
    <member name="T:System.Data.Services.Client.LinkDescriptor">
      <summary>Provides a description of modifications done to entities by operations returned in a <see cref="T:System.Data.Services.Client.DataServiceResponse" />. </summary>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.Source">
      <summary>A source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>
        <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.SourceProperty">
      <summary>The identifier property of the source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.</summary>
      <returns>The string identifier of an identity property in a source entity. </returns>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.Target">
      <summary>The source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />. </summary>
      <returns>
        <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Data.Services.Client.MediaEntryAttribute">
      <summary>Signifies that the specified class is to be treated as a media link entry. </summary>
    </member>
    <member name="M:System.Data.Services.Client.MediaEntryAttribute.#ctor(System.String)">
      <summary>Creates a new instance of <see cref="T:System.Data.Services.Client.MediaEntryAttribute" />.</summary>
      <param name="mediaMemberName">A string value that identifies the property that holds media data.</param>
    </member>
    <member name="P:System.Data.Services.Client.MediaEntryAttribute.MediaMemberName">
      <summary>The name of the property on the class that holds the media, usually binary data.</summary>
      <returns>A string value that identifies the property that holds media data.</returns>
    </member>
    <member name="T:System.Data.Services.Client.MergeOption">
      <summary>Determines the synchronization option for sending or receiving entities to or from WCF Data Services. </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.AppendOnly">
      <summary>Append new entities only. Existing entities or their original values will not be modified. No client-side changes are lost in this merge. This is the default behavior.</summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.OverwriteChanges">
      <summary>All current values on the client are overwritten with current values from the data service regardless of whether they have been changed on the client. </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.PreserveChanges">
      <summary>Current values that have been changed on the client are not modified, but any unchanged values are updated with current values from the data service. No client-side changes are lost in this merge.</summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.NoTracking">
      <summary>Objects are always loaded from persisted storage. Any property changes made to objects in the object context are overwritten by the data source values.</summary>
    </member>
    <member name="T:System.Data.Services.Client.MimeTypePropertyAttribute">
      <summary>Annotates a property on a class that has been annotated with the <see cref="T:System.Data.Services.Client.MediaEntryAttribute" />. </summary>
    </member>
    <member name="M:System.Data.Services.Client.MimeTypePropertyAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the MimeTypePropertyAttribute.</summary>
      <param name="dataPropertyName">A string that contains the name of the new property attribute.</param>
      <param name="mimeTypePropertyName">A string that contains the Mime type of the new property attribute.</param>
    </member>
    <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.DataPropertyName">
      <summary>Gets the name of the MimeTypePropertyAttribute.</summary>
      <returns>A string that contains the name of the property attribute. </returns>
    </member>
    <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.MimeTypePropertyName">
      <summary>Gets the Mime type of the MimeTypePropertyAttribute</summary>
      <returns>A string that contains the Mime type of the property attribute. </returns>
    </member>
    <member name="T:System.Data.Services.Client.OperationResponse">
      <summary>Abstract class that represents the response of a single query or create, update, or delete operation.  </summary>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.Error">
      <summary>Gets error thrown by the operation.</summary>
      <returns>An <see cref="T:System.Exception" /> object that contains the error.</returns>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.Headers">
      <summary>When overridden in a derived class, contains the HTTP response headers associated with a single operation.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> object that contains name value pairs of headers and values.</returns>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.StatusCode">
      <summary>When overridden in a derived class, gets or sets the HTTP response code associated with a single operation.</summary>
      <returns>Integer value that contains response code.</returns>
    </member>
    <member name="T:System.Data.Services.Client.QueryOperationResponse">
      <summary>Represents the responses to a <see cref="T:System.Data.Services.Client.DataServiceQuery" />. </summary>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse.GetContinuation">
      <summary>Gets a <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation" /> object containing the URI that is used to retrieve the next results page.</summary>
      <returns>An object containing the URI that is used to return the next results page.</returns>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse.GetContinuation``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gets a <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that contains the URI that is used to retrieve the next page of related entities in the specified collection.</summary>
      <returns>A continuation object that points to the next page for the collection.</returns>
      <param name="collection">The collection of related objects being loaded.</param>
      <typeparam name="T">The type of the items in the collection.</typeparam>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse.GetContinuation(System.Collections.IEnumerable)">
      <summary>Gets a <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation" /> object containing the URI that is used to retrieve the next page of related entities in the specified collection.</summary>
      <returns>A continuation object that points to the next page for the collection.</returns>
      <param name="collection">The collection of related objects being loaded.</param>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse.GetEnumerator">
      <summary>Executes the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> and returns <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items. </summary>
      <returns>The enumerator to a collection of <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items.</returns>
    </member>
    <member name="P:System.Data.Services.Client.QueryOperationResponse.Query">
      <summary>Gets the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> that generates the <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items. </summary>
      <returns>A <see cref="T:System.Data.Services.Client.DataServiceQuery" /> object.</returns>
    </member>
    <member name="P:System.Data.Services.Client.QueryOperationResponse.TotalCount">
      <summary>The server result set count value from a query, if the query has requested the value.</summary>
      <returns>The return value can be either a zero or positive value equal to the number of entities in the set on the server.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown when the count tag is not found in the response stream.</exception>
    </member>
    <member name="T:System.Data.Services.Client.QueryOperationResponse`1">
      <summary>Represents the responses to a <see cref="T:System.Data.Services.Client.DataServiceQuery`1" />.  </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse`1.GetContinuation">
      <summary>Gets a <see cref="T:System.Data.Services.Client.DataServiceQueryContinuation`1" /> object that contains the URI that is used to retrieve the next results page.</summary>
      <returns>An object that contains the URI that is used to return the next results page.</returns>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse`1.GetEnumerator">
      <summary>Executes the <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> and gets <see cref="T:System.Data.Services.Client.QueryOperationResponse`1" /> items.</summary>
      <returns>An enumerator to a collection of <see cref="T:System.Data.Services.Client.QueryOperationResponse`1" /> items.</returns>
    </member>
    <member name="P:System.Data.Services.Client.QueryOperationResponse`1.TotalCount">
      <summary>The server result set count value from a query, if the query has requested the value.</summary>
      <returns>The return value can be either zero or a positive value equal to the number of entities in the set on the server.</returns>
    </member>
    <member name="T:System.Data.Services.Client.ReadingWritingEntityEventArgs">
      <summary>Gives access to the entity and an XLinq object that represents an Atom entry. <see cref="T:System.Data.Services.Client.ReadingWritingEntityEventArgs" /> is used with the <see cref="E:System.Data.Services.Client.DataServiceContext.ReadingEntity" /> and <see cref="E:System.Data.Services.Client.DataServiceContext.WritingEntity" /> events.  </summary>
    </member>
    <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data">
      <summary>Gets an XML Atom entry or feed data represented as <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" />
      </returns>
    </member>
    <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Entity">
      <summary>Gets the object representation of data returned from the <see cref="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data" /> property. </summary>
      <returns>
        <see cref="T:System.Object" /> representation of the <see cref="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data" /> property.</returns>
    </member>
    <member name="T:System.Data.Services.Client.SaveChangesOptions">
      <summary>Indicates change options when <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> is called.  </summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.None">
      <summary>Pending changes are saved by using multiple requests to the server, but the operation stops on the first failure (default).</summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.Batch">
      <summary>All pending changes are saved in a single batch request.</summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.ContinueOnError">
      <summary>Pending changes are saved by using multiple requests to the server, and the operation continues after an error occurs.</summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.ReplaceOnUpdate">
      <summary>Pending updates are made by replacing all values of the entity in the data source with values from the updated entity. </summary>
    </member>
    <member name="T:System.Data.Services.Client.SendingRequestEventArgs">
      <summary>Used with the <see cref="E:System.Data.Services.Client.DataServiceContext.SendingRequest" /> event to provide access to the <see cref="T:System.Net.HttpWebRequest" /> instance that the client is about to send to the target data service. </summary>
    </member>
    <member name="P:System.Data.Services.Client.SendingRequestEventArgs.Request">
      <summary>Gets or sets the <see cref="T:System.Net.HttpWebRequest" /> instance about to be sent by the client library to the data service.</summary>
      <returns>
        <see cref="T:System.Net.HttpWebRequest" />.</returns>
    </member>
    <member name="P:System.Data.Services.Client.SendingRequestEventArgs.RequestHeaders">
      <summary>Gets the collection protocol headers that are associated with the request to the data service.</summary>
      <returns>A collection of protocol headers that are associated with the request.</returns>
    </member>
    <member name="T:System.Data.Services.Client.TrackingMode">
      <summary>Determines whether changes that are made to a <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> are tracked.</summary>
    </member>
    <member name="F:System.Data.Services.Client.TrackingMode.None">
      <summary>Changes made to items in the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> are not tracked automatically by the client. </summary>
    </member>
    <member name="F:System.Data.Services.Client.TrackingMode.AutoChangeTracking">
      <summary>Changes to items in the <see cref="T:System.Data.Services.Client.DataServiceCollection`1" /> are automatically tracked by the client.</summary>
    </member>
    <member name="T:System.Data.Services.Common.DataServiceEntityAttribute">
      <summary>Marks a class as an entity type in WCF Data Services.</summary>
    </member>
    <member name="M:System.Data.Services.Common.DataServiceEntityAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Common.DataServiceEntityAttribute" /> class.</summary>
    </member>
    <member name="T:System.Data.Services.Common.DataServiceKeyAttribute">
      <summary>Denotes the key property or properties of an entity. </summary>
    </member>
    <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Common.DataServiceKeyAttribute" /> class. </summary>
      <param name="keyName">The string that contains name of the key attribute.</param>
    </member>
    <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Common.DataServiceKeyAttribute" /> class. </summary>
      <param name="keyNames">An array of string values that contain key attribute names.</param>
    </member>
    <member name="P:System.Data.Services.Common.DataServiceKeyAttribute.KeyNames">
      <summary>Gets the names of key attributes.</summary>
      <returns>String value that contains names of key attributes. </returns>
    </member>
    <member name="T:System.Data.Services.Common.DataServiceProtocolVersion">
      <summary>Represents the versions of the Atom Publishing (AtomPub) protocol that the data service may support. </summary>
    </member>
    <member name="F:System.Data.Services.Common.DataServiceProtocolVersion.V1">
      <summary>Version 1 of the AtomPub protocol.</summary>
    </member>
    <member name="F:System.Data.Services.Common.DataServiceProtocolVersion.V2">
      <summary>Version 2 of the AtomPub protocol.</summary>
    </member>
    <member name="T:System.Data.Services.Common.EntityPropertyMappingAttribute">
      <summary>Attribute that specifies a custom mapping between properties of an entity type and elements of an entry in a feed returned by WCF Data Services. </summary>
    </member>
    <member name="M:System.Data.Services.Common.EntityPropertyMappingAttribute.#ctor(System.String,System.Data.Services.Common.SyndicationItemProperty,System.Data.Services.Common.SyndicationTextContentKind,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" />.</summary>
      <param name="sourcePath">The name of the property, as string, of the entity type that is mapped to the specified property of the feed item.</param>
      <param name="targetSyndicationItem">A <see cref="T:System.Data.Services.Common.SyndicationItemProperty" /> value that represents the element in the feed to which to map the property. This value must be set to None if the <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath" /> is not null.</param>
      <param name="targetTextContentKind">A <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetTextContentKind" /> value that identifies the format of the content to display in the feed.</param>
      <param name="keepInContent">Boolean value that is true when the property being mapped should appear both in its mapped-to location and in the content section of the feed. </param>
    </member>
    <member name="M:System.Data.Services.Common.EntityPropertyMappingAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> to map a property to a custom feed element.</summary>
      <param name="sourcePath">The name of the property of the entity type, as string, that is mapped to the specified property in the feed.</param>
      <param name="targetPath">The name of the target, as string, in the resulting feed to which the property is mapped.</param>
      <param name="targetNamespacePrefix">This parameter, together with <paramref name="targetNamespaceUri" />, specifies the namespace in which the <paramref name="targetPath " />element exists.</param>
      <param name="targetNamespaceUri">Specifies the namespace URI of the element, as string, specified by the <paramref name="targetName" /> property. </param>
      <param name="keepInContent">Boolean value that is true when the property being mapped should appear both in its mapped-to location and in the content section of the feed. </param>
    </member>
    <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.KeepInContent">
      <summary>Gets a Boolean value that indicates whether a property value should be repeated both in the content section of the feed and in the mapped location.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when the property is mapped into both locations in the feed; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.SourcePath">
      <summary>Gets the name of the property of the syndication item that will be mapped to the specified element of the feed.</summary>
      <returns>String value that contains property name.</returns>
    </member>
    <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespacePrefix">
      <summary>Gets a string value that, together with <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespaceUri" />, specifies the namespace in which the <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath" />element exists.</summary>
      <returns>String value that contains the target namespace prefix.</returns>
    </member>
    <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespaceUri">
      <summary>Gets a string value that specifies the namespace URI of the element specified by the <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath" /> property.</summary>
      <returns>String that contains the namespace URI.</returns>
    </member>
    <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath">
      <summary>Gets the name of the custom target in the feed to which the property is mapped.</summary>
      <returns>String value with target XML element or attribute.</returns>
    </member>
    <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetSyndicationItem">
      <summary>Gets a property on the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> object.</returns>
    </member>
    <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetTextContentKind">
      <summary>Gets the type of content of the property mapped by <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" />.</summary>
      <returns>A string that identifies the type of content in the feed element.</returns>
    </member>
    <member name="T:System.Data.Services.Common.EntitySetAttribute">
      <summary>Indicates the entity set to which a client data service class belongs.</summary>
    </member>
    <member name="M:System.Data.Services.Common.EntitySetAttribute.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Common.EntitySetAttribute" />.</summary>
      <param name="entitySet">The entity set to which the class belongs.</param>
    </member>
    <member name="P:System.Data.Services.Common.EntitySetAttribute.EntitySet">
      <summary>Gets the entity set to which the class belongs.</summary>
      <returns>The entity set as string value. </returns>
    </member>
    <member name="T:System.Data.Services.Common.HasStreamAttribute">
      <summary>Indicates that a class that is an entity type has a default binary property to stream. </summary>
    </member>
    <member name="M:System.Data.Services.Common.HasStreamAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Common.HasStreamAttribute" /> class.</summary>
    </member>
    <member name="T:System.Data.Services.Common.SyndicationItemProperty">
      <summary>Enumeration type used to identify the syndication item element. </summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.CustomProperty">
      <summary>Custom property element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorEmail">
      <summary>Author email element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorName">
      <summary>Author name element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorUri">
      <summary>Author URI element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.ContributorEmail">
      <summary>Contributor email element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.ContributorName">
      <summary>Contributor name element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.ContributorUri">
      <summary>Contributor URI element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.Updated">
      <summary>Updated element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.Published">
      <summary>Published resource element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.Rights">
      <summary>Rights protected resource element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.Summary">
      <summary>Summary element.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationItemProperty.Title">
      <summary>Title element.</summary>
    </member>
    <member name="T:System.Data.Services.Common.SyndicationTextContentKind">
      <summary>Enumeration used to identify text content of syndication item. </summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Plaintext">
      <summary>Plain text content.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Html">
      <summary>HTML content.</summary>
    </member>
    <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Xhtml">
      <summary>XHTML content.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\Microsoft.JScript.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.JScript</name>
  </assembly>
  <members>
    <member name="T:Microsoft.JScript.ActivationObject">
      <summary>Represents an object that is taking part in a scope hierarchy. This class contains methods for resolving scope and for getting member information. It belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>Creates a new global variable, using the specified name, value, and attributes.</summary>
      <returns>A global variable that has the specified name, value, and attributes.</returns>
      <param name="name">The name of the field.</param>
      <param name="attributeFlags">A bitwise combination of the enumeration values that describe the attributes of a field. <see cref="F:System.Reflection.FieldAttributes.Static" /> is added automatically.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="F:Microsoft.JScript.ActivationObject.field_table">
      <summary>Stores an array of variables that are in scope.</summary>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetDefaultThisObject">
      <summary>Gets the current default scope, which is either the contained object of a with statement scope, or the global scope.</summary>
      <returns>The current default scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetField(System.String,System.Int32)">
      <summary>Returns a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object that has the specified name.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetGlobalScope">
      <summary>Gets the global scope by searching the scope hierarchy until it finds a scope that includes static variables, for example, a module scope.</summary>
      <returns>The global scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetLocalField(System.String)">
      <summary>Gets the local declaration of a field that has the specified name. This is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that corresponds to all members of the current object.</summary>
      <returns>An array of objects that contains all members of the current object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>Gets the value of the specified member by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>The value of the member <paramref name="name" />.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="lexlevel">The lexical level to search.</param>
    </member>
    <member name="T:Microsoft.JScript.ActiveXObjectConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.Invoke">
      <summary>Returns null in all cases.</summary>
      <returns>null.</returns>
    </member>
    <member name="T:Microsoft.JScript.ArgumentsObject">
      <summary>Represents the information that is used to call a function. This includes the function, the caller, the arguments, and information about the stack frame. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.callee">
      <summary>A closure function that represents the function that is being called.</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.caller">
      <summary>The calling scope information from the stack frame.</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.length">
      <summary>The number of arguments.</summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])">
      <summary>Helper method that creates a new array and populates it with the specified values.</summary>
      <returns>The new array.</returns>
      <param name="args">The values to populate the array with.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.Invoke(System.Object[])">
      <summary>Invokes a method of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="args">The arguments to pass to the method.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayLiteral">
      <summary>This class is used by the JScript parser to represent an array literal.</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayLiteral.#ctor(Microsoft.JScript.Context,Microsoft.JScript.ASTList)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ArrayLiteral" /> class, specifying the context and elements.</summary>
      <param name="context">The current document context.</param>
      <param name="elements">The elements of the array.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayObject">
      <summary>Represents an array object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.ArrayObject.length">
      <summary>Gets or sets the length of the array.</summary>
      <returns>The length of the array.</returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayObject.SpliceSlowly(System.UInt32,System.UInt32,System.Object[],Microsoft.JScript.ArrayObject,System.UInt32,System.UInt32)">
      <summary>Adds elements to and removes elements from an array, at the specified position in the array. You can add elements, remove elements, or both.</summary>
      <param name="start">The position in this array at which to add and remove elements.</param>
      <param name="deleteCount">The number of elements to remove, if any.</param>
      <param name="args">The elements to add, if any.</param>
      <param name="outArray">An array that contains the elements removed from this array, if any have been removed.</param>
      <param name="oldLength">The previous length of this array.</param>
      <param name="newLength">The new length of this array.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.ArrayObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])">
      <summary>Concatenates objects or arrays to the end of the specified object or array.</summary>
      <returns>
        <paramref name="thisob" /> and <paramref name="args" /> concatenated.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="args">The objects or arrays to append to <paramref name="thisob" />.</param>
    </member>
    <member name="P:Microsoft.JScript.ArrayPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)">
      <summary>Concatenates the elements of the specified array into a string. The elements are separated by the specified separator.</summary>
      <returns>A string that concatenates the elements of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="separator">The string to use to separate the elements. The default is a comma.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)">
      <summary>Removes the last element from the specified array and returns it.</summary>
      <returns>The last element of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])">
      <summary>Adds new elements to the end of the specified array.</summary>
      <returns>The new length of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The elements to add to <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)">
      <summary>Reverses the elements of the specified array.</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)">
      <summary>Removes the first element from the specified array and returns it. Shifts the remaining elements to the previous positions. </summary>
      <returns>The first element of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)">
      <summary>Creates a new array that contains the specified consecutive elements from the specified array.</summary>
      <returns>A new array that contains the consecutive elements between <paramref name="thisob" />[<paramref name="start" />] and <paramref name="thisob" />[<paramref name="end" />].</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="start">The first consecutive element to get.</param>
      <param name="end">The last consecutive element to get.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)">
      <summary>Sorts the elements of the specified array by using the specified function to compare the elements.</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="function">The function to use to compare elements.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])">
      <summary>Adds and removes elements from an array at the specified position in the array. You can add elements, remove elements, or both.</summary>
      <returns>A new array that contains the elements removed from <paramref name="thisob" />, if any have been removed.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="start">The position in the array to add and remove elements.</param>
      <param name="deleteCnt">The number of elements to remove, if any.</param>
      <param name="args">The elements to add, if any.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified object that concatenates the elements and separates them with a <see cref="P:System.Globalization.TextInfo.ListSeparator" /> and a space.</summary>
      <returns>A string that concatenates the elements of <paramref name="thisob" /> and separates them with a <see cref="P:System.Globalization.TextInfo.ListSeparator" /> and a space.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object that concatenates the elements and separates them with a comma.</summary>
      <returns>A string that concatenates the elements of <paramref name="thisob" /> and separates them with a comma.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])">
      <summary>Adds new elements to the start of the specified array. Shifts the existing elements to the next positions.</summary>
      <returns>The new length of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The elements to add to <paramref name="thisob" />.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayWrapper">
      <summary>Wraps an array to create a JScript <see cref="T:Microsoft.JScript.ArrayObject" />. This class wraps either a .NET Framework <see cref="T:System.Array" /> object or a JScript <see cref="T:Microsoft.JScript.ArrayObject" /> object. </summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayWrapper.GetType">
      <summary>Gets the type of the array.</summary>
      <returns>The type of <see cref="T:System.Array" /> or <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.ArrayWrapper.length">
      <summary>Gets the length of the array.</summary>
      <returns>The length of the array.</returns>
    </member>
    <member name="T:Microsoft.JScript.AssemblyCustomAttributeList">
      <summary>This class is used by the JScript parser to store the attributes that are assigned to an assembly.</summary>
    </member>
    <member name="T:Microsoft.JScript.AST">
      <summary>Represents the abstract syntax tree that is used to parse JScript code.</summary>
    </member>
    <member name="T:Microsoft.JScript.ASTList">
      <summary>Maintains a list of <see cref="T:Microsoft.JScript.AST" /> elements. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="T:Microsoft.JScript.BinaryOp">
      <summary>Represents the base class for classes that perform operations on two operands, such as <see cref="T:Microsoft.JScript.Plus" />, <see cref="T:Microsoft.JScript.Equality" />, and <see cref="T:Microsoft.JScript.Relational" />. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BinaryOp.GetOperator(System.Reflection.IReflect,System.Reflection.IReflect)">
      <summary>Determines the best method to call based on the operation that is requested and the data types of the operands.</summary>
      <returns>The recommended method to call on the operands.</returns>
      <param name="ir1">The data type of the first operand.</param>
      <param name="ir2">The data type of the second operand.</param>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand1">
      <summary>Represents the first operand of the operation.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand2">
      <summary>Represents the second operand of the operation.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorMeth">
      <summary>Represents the operation that is actually performed.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorTok">
      <summary>Represents the operation that is requested. One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type1">
      <summary>Represents the data type of the first operand of the operation.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type2">
      <summary>Represents the data type of the second operand of the operation.</summary>
    </member>
    <member name="T:Microsoft.JScript.Binding">
      <summary>Represents a reference to a class member, callable expression, or variable name. This class attempts to resolve the reference to the correct value at compile time. </summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.defaultMember">
      <summary>Stores a reference to a default indexed property.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.GetObject">
      <summary>When overridden in a derived class, gets the object that the binding reference is defined on.</summary>
      <returns>The object that the binding reference is defined on.</returns>
    </member>
    <member name="M:Microsoft.JScript.Binding.HandleNoSuchMemberError">
      <summary>When overridden in a derived class, handles situations in which the binding reference is to a member that cannot be found.</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isAssignmentToDefaultIndexedProperty">
      <summary>Stores a value that indicates whether the binding reference is to a default indexed property.</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isFullyResolved">
      <summary>Stores a value that indicates whether the binding reference is fully resolved.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.IsMissing(System.Object)">
      <summary>Determines whether the specified object is equivalent to <see cref="T:Microsoft.JScript.Missing" />.</summary>
      <returns>true if <paramref name="value" /> is equivalent to <see cref="T:Microsoft.JScript.Missing" />; otherwise, false.</returns>
      <param name="value">The object to compare.</param>
    </member>
    <member name="F:Microsoft.JScript.Binding.isNonVirtual">
      <summary>Stores a value that indicates whether the binding reference is to a member that overrides a member in a base class.</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.name">
      <summary>Stores a string that identifies the binding reference.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.ResolveRHValue">
      <summary>Resolves the right-hand side of the binding reference.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILObject(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
      <summary>When overridden in a derived class, generates Microsoft intermediate language (MSIL) code for the object that the binding reference is defined on.</summary>
      <param name="il">An object that generates Microsoft intermediate language (MSIL) instructions.</param>
      <param name="obtype">The type of the object.</param>
      <param name="noValue">true if the object does not have a value; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILWithDupOfThisOb(System.Reflection.Emit.ILGenerator)">
      <summary>When overridden in a derived class, generates Microsoft intermediate language (MSIL) code for the binding reference. If necessary, copies the current topmost value on the evaluation stack and then pushes the copy onto the evaluation stack.</summary>
      <param name="il">An object that generates Microsoft intermediate language (MSIL) instructions.</param>
    </member>
    <member name="T:Microsoft.JScript.BitwiseBinary">
      <summary>Performs bitwise binary operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BitwiseBinary" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.EvaluateBitwiseBinary(System.Object,System.Object)">
      <summary>Performs a bitwise binary operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.Block">
      <summary>Represents a block in JScript. This class is used mainly by the <see cref="T:Microsoft.JScript.JSParser" /> to create <see cref="T:Microsoft.JScript.Block" /> objects when it parses code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="T:Microsoft.JScript.BlockScope">
      <summary>Represents the scope of a block of code that is taking part in a scope hierarchy and that can be pushed onto the global scope stack. For example, this class can represent the scope of a try block. </summary>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.#ctor(Microsoft.JScript.ScriptObject,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BlockScope" /> class.</summary>
      <param name="parent">The parent of the scope.</param>
      <param name="name">The name of the scope.</param>
      <param name="scopeId">The ID of the scope.</param>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>Creates a new scope variable, using the specified name, value, and attributes.</summary>
      <returns>A scope variable that has the specified name, value, and attributes.</returns>
      <param name="name">The name of the field.</param>
      <param name="attributeFlags">A bitwise combination of the enumeration values that describe the attributes of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="T:Microsoft.JScript.BooleanConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.Invoke(System.Object)">
      <summary>Invokes a method of a prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="arg">The arguments to pass to the method.</param>
    </member>
    <member name="T:Microsoft.JScript.BooleanObject">
      <summary>Represents a Boolean object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.#ctor(Microsoft.JScript.ScriptObject,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BooleanObject" /> class, specifying the parent and subtype.</summary>
      <param name="prototype">The parent of the object.</param>
      <param name="subType">The subtype of the object.</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.GetType">
      <summary>Returns <see cref="T:System.Boolean" /> or <see cref="T:Microsoft.JScript.BooleanObject" />.</summary>
      <returns>
        <see cref="T:System.Boolean" /> or <see cref="T:Microsoft.JScript.BooleanObject" />.</returns>
    </member>
    <member name="T:Microsoft.JScript.BooleanPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.BooleanObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.#ctor(Microsoft.JScript.ObjectPrototype,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
      <param name="parent">A static instance of the parent class of this class.</param>
      <param name="baseType">An instance of the type of this class.</param>
    </member>
    <member name="P:Microsoft.JScript.BooleanPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object by using the <see cref="T:Microsoft.JScript.Convert" /> class.</summary>
      <returns>A string representation of <paramref name="thisob" /> that is created by the <see cref="T:Microsoft.JScript.Convert" /> class.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)">
      <summary>Returns the specified object as a <see cref="T:Microsoft.JScript.BooleanObject" /> or a <see cref="T:System.Boolean" />.</summary>
      <returns>
        <paramref name="thisob" /> as a <see cref="T:Microsoft.JScript.BooleanObject" /> or a <see cref="T:System.Boolean" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.BreakOutOfFinally">
      <summary>Represents the exception state when code execution breaks out of a finally block.  </summary>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> class, using the specified target.</summary>
      <param name="target">The target of the exception.</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores information about the exception in the <see cref="T:System.Runtime.Serialization.SerializationInfo" />. The stored information includes the <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> value.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="F:Microsoft.JScript.BreakOutOfFinally.target">
      <summary>Stores the target of the exception.</summary>
    </member>
    <member name="T:Microsoft.JScript.Closure">
      <summary>Represents a closure function. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Closure.#ctor(Microsoft.JScript.FunctionObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Closure" /> class.</summary>
      <param name="func">The function that this closure represents.</param>
    </member>
    <member name="F:Microsoft.JScript.Closure.arguments">
      <summary>The arguments to use for the function.</summary>
    </member>
    <member name="F:Microsoft.JScript.Closure.caller">
      <summary>The calling scope information from the stack frame.</summary>
    </member>
    <member name="M:Microsoft.JScript.Closure.ToString">
      <summary>Creates a string representation of the function, such as the name of the function or the context.</summary>
      <returns>A string representation of the function.</returns>
    </member>
    <member name="T:Microsoft.JScript.CmdLineError">
      <summary>Specifies errors that occur when you run the command-line compiler jsc.exe. This enumeration is used to create <see cref="T:Microsoft.JScript.CmdLineException" /> objects.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoError">
      <summary>No error. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.AssemblyNotFound">
      <summary>The referenced assembly '{0}' could not be found.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CannotCreateEngine">
      <summary>Cannot create JScript engine.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CompilerConstant">
      <summary>Cannot change value of compiler constant '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateFileAsSourceAndAssembly">
      <summary>Duplicate file name: '{0}' is listed as both a source file and an imported assembly.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceFile">
      <summary>Resource file '{0}' referenced more than once.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceName">
      <summary>Resource name '{0}' is not unique.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateSourceFile">
      <summary>Duplicate file name: '{0}' is listed as a source file more than once.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ErrorSavingCompiledState">
      <summary>Error saving compiled state: {0}.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.IncompatibleTargets">
      <summary>The value of the <see cref="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" /> property is not compatible with target type '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidAssembly">
      <summary>'{0}' is not a valid assembly.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCharacters">
      <summary>File name '{0}' contains invalid characters (wildcard characters are not supported).</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCodePage">
      <summary>Code page '{0}' is invalid or not installed.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidDefinition">
      <summary>Definition '{0}' must be assigned a Boolean or integral value.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidForCompilerOptions">
      <summary>'{0}' is not allowed in the CompilerOptions field.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidLocaleID">
      <summary>Locale ID '{0}' is invalid or not installed.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidPlatform">
      <summary>Platform '{0}' is invalid. Specify 'x86', 'Itanium', 'x64', or 'anycpu'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidTarget">
      <summary>Target '{0}' is invalid. Specify 'exe' or 'library'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidSourceFile">
      <summary>'{0}' is not a valid source file.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidVersion">
      <summary>'{0}' is not a valid version string.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidWarningLevel">
      <summary>Invalid warning level specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ManagedResourceNotFound">
      <summary>Managed resource '{0}' was not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingDefineArgument">
      <summary>Missing identifier for '-define:' command-line option.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingExtension">
      <summary>Missing file extension for '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingLibArgument">
      <summary>Missing file specification for '-lib:' command-line option.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingReference">
      <summary>Missing reference in argument list '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingVersionInfo">
      <summary>Missing version information in -assembly.version option.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleOutputNames">
      <summary>Multiple output file names specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleTargets">
      <summary>Multiple targets specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleWin32Resources">
      <summary>Cannot specify more than one Win32 resource file.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NestedResponseFiles">
      <summary>Cannot process nested response files.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoCodePage">
      <summary>No code page is specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoFileName">
      <summary>No file name specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoInputSourcesSpecified">
      <summary>No input sources specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoLocaleID">
      <summary>No Locale ID is specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoWarningLevel">
      <summary>No warning level specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ResourceNotFound">
      <summary>Win32 resource '{0}' was not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceFileTooBig">
      <summary>Source file too big.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceNotFound">
      <summary>Could not find source file '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.UnknownOption">
      <summary>Unknown option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.Unspecified">
      <summary>Unspecified error.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.LAST">
      <summary>A placeholder enumeration member that contains the same value as the last (highest) assigned enumeration value.</summary>
    </member>
    <member name="T:Microsoft.JScript.CmdLineException">
      <summary>Represents errors that occur when you run the command-line compiler jsc.exe. </summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error code and culture information.</summary>
      <param name="errorCode">One of the enumeration values. Specifies what the error is.</param>
      <param name="culture">Culture-specific information.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.String,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error code, context, and culture information.</summary>
      <param name="errorCode">One of the enumeration values. Specifies what the error is.</param>
      <param name="context">The context in which the error occurred.</param>
      <param name="culture">Culture-specific information.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using serialized data.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception, or null if no inner exception is specified.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores serialized object data about the exception that is being thrown.</summary>
      <param name="s">Serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination</param>
    </member>
    <member name="P:Microsoft.JScript.CmdLineException.Message">
      <summary>Gets a message that describes the current exception.</summary>
      <returns>The error message that explains the reason for the exception.</returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.ResourceKey(Microsoft.JScript.CmdLineError)">
      <summary>Returns the key for the specified error in a resource file.</summary>
      <returns>The key for <paramref name="errorCode" />.</returns>
      <param name="errorCode">One of the enumeration values. Specifies the error to get the key for.</param>
    </member>
    <member name="T:Microsoft.JScript.CmdLineOptionParser">
      <summary>Determines whether options that are specified to the command-line compiler jsc.exe are correctly formed, and reads the arguments if any are included.</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineOptionParser" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String)">
      <summary>Gets the argument from the specified command-line option. Applies to options that have only one name, such as /out:&lt;filename&gt;.</summary>
      <returns>The argument, "" if the argument is not specified, or null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="prefix">The option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String,System.String)">
      <summary>Gets the argument from the specified command-line option. Applies to options that can be specified by a short or long form of the option name, such as /r or /reference for /r[eference]:&lt;file list&gt;.</summary>
      <returns>The argument, "" if the argument is not specified, or null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="shortPrefix">The short form of the option name.</param>
      <param name="longPrefix">The long form of the option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String)">
      <summary>Gets the + or - argument from the specified command-line option. Applies to options that have only one name, such as /debug[+|-].</summary>
      <returns>false for -; true for + or if the argument is not specified; null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="prefix">The option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String,System.String)">
      <summary>Gets the + or - argument from the specified command-line option. Applies to options that can be specified by a short or long form of the option name.</summary>
      <returns>false for -; true for + or if the argument is not specified; null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="shortPrefix">The short form of the option name.</param>
      <param name="longPrefix">The long form of the option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsSimpleOption(System.String,System.String)">
      <summary>Verifies that the specified option is correctly formed.</summary>
      <returns>true if the option is correctly formed; otherwise, false.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="prefix">The option name.</param>
    </member>
    <member name="T:Microsoft.JScript.COMCharStream">
      <summary>Represents a stream that sends its data to an <see cref="T:Microsoft.JScript.IMessageReceiver" />. The data is stored in a buffer until the data is flushed or the stream is closed. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.#ctor(Microsoft.JScript.IMessageReceiver)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMCharStream" /> class.</summary>
      <param name="messageReceiver">The receiver of the data of the stream.</param>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanRead">
      <summary>Gets a value that indicates whether the current stream supports reading.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanSeek">
      <summary>Gets a value that indicates whether the current stream supports seeking.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanWrite">
      <summary>Gets a value that indicates whether the current stream supports writing.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Close">
      <summary>Sends this stream's data to the <see cref="T:Microsoft.JScript.IMessageReceiver" /> and clears its buffer.</summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Flush">
      <summary>Sends this stream's data to the <see cref="T:Microsoft.JScript.IMessageReceiver" /> and clears its buffer.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Length">
      <summary>Gets the length of the stream.</summary>
      <returns>The length of the stream.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Position">
      <summary>Gets the current position in the stream. The set method does not do anything.</summary>
      <returns>The current position in the stream.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</returns>
      <param name="buffer">An array of bytes in which to store the data that is read from the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data that is read from the stream.</param>
      <param name="count">The maximum number of bytes to read from the stream.</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position in the current stream. This method does not do anything. It always returns 0.</summary>
      <returns>0 in all cases.</returns>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
      <param name="origin">A value that indicates the reference point that is used to obtain the new position.</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.SetLength(System.Int64)">
      <summary>Sets the length of the stream.</summary>
      <param name="value">The new length of the stream.</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes the specified byte data to the stream.</summary>
      <param name="buffer">An array of byte data to copy to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to copy from <paramref name="buffer" /> to the current stream.</param>
    </member>
    <member name="T:Microsoft.JScript.COMFieldInfo">
      <summary>Enables JScript to communicate with an external COM field. This class is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> in order to bind to an external object. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMFieldInfo" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>
        <see cref="F:System.Reflection.FieldAttributes.Public" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>null, because the type that declares this field is an external COM object.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldHandle">
      <summary>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</summary>
      <returns>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCOMMemberInfo">
      <summary>Gets a managed object that enables JScript to communicate with this external COM field.</summary>
      <returns>A managed object that enables JScript to communicate with this external COM field.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetValue(System.Object)">
      <summary>Gets the value of the external COM field by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <returns>The value of the external COM field.</returns>
      <param name="obj">The argument list to pass to the external COM field. This parameter is ignored.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>Initializes the information that enables JScript to communicate with this external COM field.</summary>
      <param name="name">The name of the external COM field that this object represents.</param>
      <param name="dispatch">Information that enables JScript to access the external COM field.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this field.</summary>
      <returns>false in all cases.</returns>
      <param name="t">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.MemberType">
      <summary>Gets the type of member that this field is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Field" />, because this class derives from <see cref="T:System.Reflection.FieldInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Name">
      <summary>Gets the name of the external COM field that this object represents.</summary>
      <returns>The name of the external COM field that this object represents.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>null, because this instance was not obtained through reflection.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the external COM field by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <param name="obj">The object whose field value will be set. This parameter is ignored.</param>
      <param name="value">The new value of the external COM member.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.COMMemberInfo">
      <summary>Defines methods that enable JScript to communicate with an external COM member. This interface is used by an external COM implementation to expose its objects to JScript because JScript requires a managed <see cref="T:System.Reflection.MemberInfo" /> to bind to an external object.</summary>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.Call(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a class, enables JScript to call an external COM member. Uses the specified binding information.</summary>
      <returns>The value of the call to the external COM member.</returns>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="arguments">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.GetValue(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a class, enables JScript to get the value of an external COM member using the specified binding information.</summary>
      <returns>The value of the external COM member.</returns>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.SetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a class, enables JScript to set the value of an external COM member to the specified new value, using the specified binding information.</summary>
      <param name="value">The new value of the external COM member.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.COMMethodInfo">
      <summary>Enables JScript to communicate with an external COM method. This class is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> in order to bind to an external object. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMMethodInfo" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._comObject">
      <summary>Stores a managed object that enables JScript to communicate with this external COM method.</summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._name">
      <summary>Stores the name of the external COM method that this object represents.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Attributes">
      <summary>Gets the attributes that are associated with this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodAttributes.Public" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.DeclaringType">
      <summary>Gets the type that declares this method.</summary>
      <returns>null, because the type that declares this method is an external COM object.</returns>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo.EmptyParams">
      <summary>Stores an array of <see cref="T:System.Reflection.ParameterInfo" /> objects that has zero elements.</summary>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetBaseDefinition">
      <summary>Returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method on the direct or indirect base class in which this method was first declared.</summary>
      <returns>this in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetCOMMemberInfo">
      <summary>Gets a managed object that enables JScript to communicate with this external COM method.</summary>
      <returns>A managed object that enables JScript to communicate with this external COM method.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> and <see cref="F:System.Reflection.MethodImplAttributes.IL" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetParameters">
      <summary>Gets the parameters of this external COM method.</summary>
      <returns>An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that has zero elements.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>Initializes the information that enables JScript to communicate with this external COM method.</summary>
      <param name="name">The name of the external COM method that this object represents.</param>
      <param name="dispatch">Information that enables JScript to access the external COM method.</param>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Calls the external COM method by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <returns>The return value of the call to the external COM method.</returns>
      <param name="obj">The object to call the method on. This parameter is ignored.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Method" />, because this class derives from <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MethodHandle">
      <summary>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</summary>
      <returns>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Name">
      <summary>Gets the name of the external COM method that this object represents.</summary>
      <returns>The name of the external COM method that this object represents.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>null, because this instance was not obtained through reflection.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnType">
      <summary>Gets the type of the return value of this method.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the type of the return value of this method.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.ToString">
      <summary>Returns a string that represents the current method.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:Microsoft.JScript.COMPropertyInfo">
      <summary>Enables JScript to communicate with an external COM property. This class is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> in order to bind to an external object. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMPropertyInfo" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Attributes">
      <summary>Gets the attributes that are associated with this property.</summary>
      <returns>
        <see cref="F:System.Reflection.PropertyAttributes.None" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanRead">
      <summary>Gets a value that indicates whether the property can be read.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanWrite">
      <summary>Gets a value that indicates whether the property can be written to.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.DeclaringType">
      <summary>Gets the type that declares this property.</summary>
      <returns>null, because the type that declares this property is an external COM object.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetAccessors(System.Boolean)">
      <summary>Gets an array whose elements contain the get and set accessors of the external COM property that this object represents.</summary>
      <returns>A two-element array of <see cref="T:System.Reflection.MethodInfo" /> objects that contains the get and set methods of this property.</returns>
      <param name="nonPublic">true to include non-public accessors.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCOMMemberInfo">
      <summary>Gets a managed object that enables JScript to communicate with this external COM property.</summary>
      <returns>A managed object that enables JScript to communicate with this external COM property.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this property.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this property, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetGetMethod(System.Boolean)">
      <summary>Returns the get accessor for this property.</summary>
      <returns>The get accessor for this property.</returns>
      <param name="nonPublic">true to include non-public accessors.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetIndexParameters">
      <summary>Returns an array of all the index parameters for the property.</summary>
      <returns>An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that has zero elements.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetSetMethod(System.Boolean)">
      <summary>Returns the set accessor for this property.</summary>
      <returns>The set accessor for this property.</returns>
      <param name="nonPublic">true to include non-public accessors.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Gets the value of the external COM property by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <returns>The value of the external COM property.</returns>
      <param name="obj">The object whose property value you want to get. This parameter is ignored.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM property.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>Initializes the information that enables JScript to communicate with this external COM property.</summary>
      <param name="name">The name of the external COM property that this object represents.</param>
      <param name="dispatch">Information that enables JScript to access the external COM property.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this property.</summary>
      <returns>false in all cases.</returns>
      <param name="t">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.MemberType">
      <summary>Gets the type of member that this property is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Property" />, because this class derives from <see cref="T:System.Reflection.PropertyInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Name">
      <summary>Gets the name of the external COM property that this object represents.</summary>
      <returns>The name of the external COM property that this object represents.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.PropertyType">
      <summary>Gets the type of this property.</summary>
      <returns>The type of <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>null, because this instance was not obtained through reflection.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Sets the value of the external COM property by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <param name="obj">The object whose property value will be set. This parameter is ignored.</param>
      <param name="value">The new value of the external COM member.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM property.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.Context">
      <summary>Represents JScript source code. This class belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="P:Microsoft.JScript.Context.EndColumn">
      <summary>Gets the column number in the line where this code ends. This includes whitespace at the start of the line.</summary>
      <returns>The column number where this code ends.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndLine">
      <summary>Gets the ending line number of this code.</summary>
      <returns>The ending line number of this code.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndPosition">
      <summary>Gets the position in the code string where this code ends, because all lines of code are stored in a single string.</summary>
      <returns>The position in the code string where this code ends.</returns>
    </member>
    <member name="M:Microsoft.JScript.Context.GetCode">
      <summary>Gets the code that the context contains, discarding any whitespace.</summary>
      <returns>The code that the context contains.</returns>
    </member>
    <member name="M:Microsoft.JScript.Context.GetToken">
      <summary>Gets an individual unit of code, or a token, that the context contains.</summary>
      <returns>An individual unit of code, or a token, that the context contains.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartColumn">
      <summary>Gets the column number in the line where this code starts. This includes whitespace at the start of the line.</summary>
      <returns>The column number where this code starts.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartLine">
      <summary>Gets the line number where this code starts.</summary>
      <returns>The line number where this code starts.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartPosition">
      <summary>Gets the position in the code string where this code starts, because all lines of code are stored in a single string.</summary>
      <returns>The position in the code string where this code starts.</returns>
    </member>
    <member name="T:Microsoft.JScript.ContinueOutOfFinally">
      <summary>Represents the exception state when code execution continues out of a finally block.  </summary>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class, using the specified target.</summary>
      <param name="target">The target of the exception.</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores information about the exception in the <see cref="T:System.Runtime.Serialization.SerializationInfo" />. The stored information includes the <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> value.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="F:Microsoft.JScript.ContinueOutOfFinally.target">
      <summary>Stores the target of the exception.</summary>
    </member>
    <member name="T:Microsoft.JScript.Convert">
      <summary>Converts data from one type to another. This is a utility class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Convert.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Convert" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfDoubleIsInteger(System.Double)">
      <summary>Determines whether a <see cref="T:System.Double" /> variable contains an integer value.</summary>
      <returns>If <paramref name="d" /> contains an integer value, <paramref name="d" /> is returned. If not, an exception is thrown.</returns>
      <param name="d">The <see cref="T:System.Double" /> to test.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfSingleIsInteger(System.Single)">
      <summary>Determines whether a <see cref="T:System.Single" /> variable contains an integer value.</summary>
      <returns>If <paramref name="s" /> contains an integer value, <paramref name="s" /> is returned. If not, an exception is thrown.</returns>
      <param name="s">The <see cref="T:System.Single" /> to test.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce(System.Object,System.Object)">
      <summary>Converts the specified value to the specified type.</summary>
      <returns>
        <paramref name="value" /> converted to <paramref name="type" />.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="type">The type to convert <paramref name="value" /> to.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce2(System.Object,System.TypeCode,System.Boolean)">
      <summary>Converts the specified value to the specified <see cref="T:System.TypeCode" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the <paramref name="target" /> type.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="target">The type to convert <paramref name="value" /> to.</param>
      <param name="truncationPermitted">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.CoerceT(System.Object,System.Type,System.Boolean)">
      <summary>Converts the specified value to the specified <see cref="T:System.Type" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the type <paramref name="t" />.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="t">The type to convert <paramref name="value" /> to.</param>
      <param name="explicitOK">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.IsBadIndex(Microsoft.JScript.AST)">
      <summary>Determines whether a variable contains an array index value.</summary>
      <returns>true if <paramref name="ast" /> contains an array index value; otherwise, false.</returns>
      <param name="ast">The variable to test.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ThrowTypeMismatch(System.Object)">
      <summary>Throws a <see cref="T:Microsoft.JScript.JScriptException" /> exception in all cases.</summary>
      <param name="val">The source code that caused the exception.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>false if <paramref name="d" /> is 0; otherwise, true.</returns>
      <param name="d">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object)">
      <summary>Converts the specified <see cref="T:System.Object" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.Boolean" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object,System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Object" /> value to a <see cref="T:System.Boolean" /> structure, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.Boolean" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="explicitConversion">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToForInObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts the specified value to an <see cref="T:System.Object" /> that represents a collection of <see cref="T:Microsoft.JScript.AST" /> objects.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToInt32(System.Object)">
      <summary>Converts the specified value to an <see cref="T:System.Int32" />.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Int32" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNativeArray(System.Object,System.RuntimeTypeHandle)">
      <summary>Converts the specified <see cref="T:Microsoft.JScript.ArrayObject" /> to a typed <see cref="T:System.Array" />.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Array" /> if this is possible; otherwise, <paramref name="value" />.</returns>
      <param name="value">The <see cref="T:Microsoft.JScript.ArrayObject" /> to convert. </param>
      <param name="handle">The type of the elements in the array.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.Object)">
      <summary>Converts the specified <see cref="T:System.Object" /> to a <see cref="T:System.Double" />.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.Double" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</summary>
      <returns>
        <paramref name="str" /> converted to a <see cref="T:System.Double" />.</returns>
      <param name="str">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts the specified value to an <see cref="T:System.Object" />. Throws an error if it cannot perform the conversion.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject2(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts the specified value to an <see cref="T:System.Object" />. Returns null if it cannot perform the conversion.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</summary>
      <returns>
        <paramref name="b" /> converted to a <see cref="T:System.String" />.</returns>
      <param name="b">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> to a <see cref="T:System.String" />.</summary>
      <returns>
        <paramref name="d" /> converted to a <see cref="T:System.String" />.</returns>
      <param name="d">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Object,System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Object" /> to a <see cref="T:System.String" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.String" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="explicitOK">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="T:Microsoft.JScript.DateConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.Invoke">
      <summary>Returns the number of milliseconds that have elapsed since January 1, 1970.</summary>
      <returns>The number of milliseconds that have elapsed since January 1, 1970.</returns>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.parse(System.String)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A <see cref="T:System.Double" /> equivalent of the date and time that is contained in <paramref name="str" />.</returns>
      <param name="str">A string that contains a date and time to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
      <summary>Converts the specified date and time to its <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A <see cref="T:System.Double" /> equivalent of the specified date and time.</returns>
      <param name="year">The year of the date and time to convert.</param>
      <param name="month">The month of the date and time to convert.</param>
      <param name="date">The date of the date and time to convert.</param>
      <param name="hours">The hours of the date and time to convert.</param>
      <param name="minutes">The minutes of the date and time to convert.</param>
      <param name="seconds">The seconds of the date and time to convert.</param>
      <param name="ms">The milliseconds of the date and time to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.DateObject">
      <summary>Represents a date object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="T:Microsoft.JScript.DatePrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.DateObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.DatePrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDate(System.Object)">
      <summary>Gets the date value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The date value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDay(System.Object)">
      <summary>Gets the day-of-the-week value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The day-of-the-week value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)">
      <summary>Gets the year value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The year value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getHours(System.Object)">
      <summary>Gets the hour value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The hour value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)">
      <summary>Gets the millisecond value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The millisecond value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)">
      <summary>Gets the minutes value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The minutes value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)">
      <summary>Gets the month value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The month value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)">
      <summary>Gets the seconds value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The seconds value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTime(System.Object)">
      <summary>Gets the time value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The time value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)">
      <summary>Gets the offset of the specified <see cref="T:Microsoft.JScript.DateObject" /> from Coordinated Universal Time (UTC).</summary>
      <returns>The difference between <paramref name="thisob" /> and Coordinated Universal Time (UTC).</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)">
      <summary>Gets the date value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The date value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)">
      <summary>Gets the day-of-the-week value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The day-of-the-week value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)">
      <summary>Gets the year value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The year value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)">
      <summary>Gets the hour value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The hour value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)">
      <summary>Gets the millisecond value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The millisecond value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)">
      <summary>Gets the minutes value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The minutes value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)">
      <summary>Gets the month value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The month value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)">
      <summary>Gets the seconds value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The seconds value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)">
      <summary>Returns the specified <see cref="T:Microsoft.JScript.DateObject" /> as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The value of <paramref name="thisob" />, expressed as a <see cref="T:System.DateTime" /> object.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getYear(System.Object)">
      <summary>Gets the year value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The year value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)">
      <summary>Sets the date value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified date value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="ddate">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the year value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified year value.</summary>
      <returns>The year value that is set for <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dyear">The year value to set for <paramref name="thisob" />.</param>
      <param name="month">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>Sets the hour value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified hour value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dhour">The hour value to set for <paramref name="thisob" />.</param>
      <param name="min">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)">
      <summary>Sets the millisecond value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified millisecond value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmsec">The millisecond value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the minutes value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified minutes value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmin">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)">
      <summary>Sets the month value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified month value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmonth">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)">
      <summary>Sets the seconds value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified seconds value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dsec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)">
      <summary>Sets the time value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified time value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="time">The time value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)">
      <summary>Sets the date value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified date value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="ddate">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the year value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified year value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dyear">The year value to set for <paramref name="thisob" />.</param>
      <param name="month">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>Sets the hour value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified hour value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dhour">The hour value to set for <paramref name="thisob" />.</param>
      <param name="min">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)">
      <summary>Sets the millisecond value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified millisecond value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmsec">The millisecond value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the minutes value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified minutes value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmin">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)">
      <summary>Sets the month value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified month value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmonth">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)">
      <summary>Sets the seconds value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified seconds value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dsec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)">
      <summary>Sets the year value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified year value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dyear">The year value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, and the year.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, the year, and the time, expressed in Coordinated Universal Time (UTC). Use <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> instead, when you can.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the date but not the time.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the date and time.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the time but not the date.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, the time, the time zone, and the year.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the time and the time zone.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, the year, and the time, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)">
      <summary>Returns the value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.DebugBreak">
      <summary>This class is used by the JScript parser to represent a breakpoint in a debugger.</summary>
    </member>
    <member name="T:Microsoft.JScript.DebugConvert">
      <summary>Converts data from one type to another. Includes methods that convert values to <see cref="T:System.String" /> objects so that they can be displayed by the debugger. </summary>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.DebugConvert" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.BooleanToString(System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Boolean" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The literal string "true" or the literal string "false".</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Byte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DecimalToString(System.Decimal)">
      <summary>Converts the specified <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToDateString(System.Double)">
      <summary>Creates a string representation of the specified <see cref="T:System.Double" />. The string representation contains the day of the week, the month, the date, the time, the time zone, and the year.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToString(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>Gets an error message that is created from the specified <see cref="P:System.Exception.HResult" /> and the <see cref="T:System.Globalization.CultureInfo" /> of the specified <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />.</summary>
      <returns>A localized string that contains information about the error.</returns>
      <param name="hr">The HRESULT error code.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>Creates a managed object that has the specified primitive <see cref="T:System.Char" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to a <see cref="T:System.Char" /> and then an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>Creates a managed object that has the specified primitive <see cref="T:System.Int64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedObject(System.Object)">
      <summary>Creates a managed object that has the specified primitive value.</summary>
      <returns>
        <paramref name="value" /> converted to a managed <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>Creates a managed object that has the specified primitive <see cref="T:System.UInt64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Int16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Int32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Int64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Converts the specified regular expression information to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of the regular expression information.</returns>
      <param name="source">The regular expression pattern to match.</param>
      <param name="ignoreCase">true to use case-insensitive matching; otherwise, false.</param>
      <param name="global">true to use a global match; otherwise, false.</param>
      <param name="multiline">true to use a multiline match; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>Converts the specified <see cref="T:System.SByte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SingleToString(System.Single)">
      <summary>Converts the specified <see cref="T:System.Single" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.StringToPrintable(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> to a <see cref="T:System.String" /> that contains escape characters for non-printable characters.</summary>
      <returns>The string representation of <paramref name="source" /> that contains escape characters.</returns>
      <param name="source">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>Converts the specified value to the specified <see cref="T:System.TypeCode" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the <paramref name="typeCode" /> type.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="typeCode">The type to convert <paramref name="value" /> to.</param>
      <param name="truncationPermitted">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>Converts the specified <see cref="T:System.UInt16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>Converts the specified <see cref="T:System.UInt32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>Converts the specified <see cref="T:System.UInt64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="T:Microsoft.JScript.DocumentContext">
      <summary>Represents a source code file that is written in the JScript language.</summary>
    </member>
    <member name="T:Microsoft.JScript.DynamicFieldInfo">
      <summary>Represents field information. This class is used to return fields of expando classes and script arrays to the debugger. </summary>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> class, using the specified name and value.</summary>
      <param name="name">The name of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> class, using the specified name, value, and type.</summary>
      <param name="name">The name of the field.</param>
      <param name="value">The value of the field.</param>
      <param name="fieldTypeName">The type of the field.</param>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.fieldTypeName">
      <summary>The type of the field.</summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.name">
      <summary>The name of the field.</summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.value">
      <summary>The value of the field.</summary>
    </member>
    <member name="T:Microsoft.JScript.Empty">
      <summary>Represents the value of a variable that has not been instantiated.</summary>
    </member>
    <member name="F:Microsoft.JScript.Empty.Value">
      <summary>Specifies the value of a variable that has not been instantiated.</summary>
    </member>
    <member name="T:Microsoft.JScript.EndOfFile">
      <summary>This class is used by the JScript parser to represent reaching the end of a file as an exception. Code can throw this error to stop the parser.</summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.Invoke">
      <summary>Returns null in all cases.</summary>
      <returns>null.</returns>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorObject">
      <summary>Represents an enumerator object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.EnumeratorObject.enumerator">
      <summary>Contains the enumerator that is represented by the <see cref="T:Microsoft.JScript.EnumeratorObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorObject.LoadObject">
      <summary>Advances the enumerator to the next element of the collection and stores a reference to the current element of the collection.</summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.EnumeratorObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)">
      <summary>Determines whether the enumerator has passed the last item of the collection.</summary>
      <returns>true if the enumerator has passed the last item of the collection; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="P:Microsoft.JScript.EnumeratorPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)">
      <summary>Moves the enumerator to its initial position, which is before the first element in the collection.</summary>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.Equality">
      <summary>Performs comparison operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Equality.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Equality" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the comparison to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.Equality.EvaluateEquality(System.Object,System.Object)">
      <summary>Performs a comparison operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Equality.JScriptEquals(System.Object,System.Object)">
      <summary>Performs a comparison operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.Invoke(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorObject">
      <summary>Represents an error object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.description">
      <summary>Specifies the message that explains the reason for the error.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.message">
      <summary>Specifies the message that explains the reason for the error.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.number">
      <summary>Specifies a number or code for the error.</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.op_Explicit(Microsoft.JScript.ErrorObject)~System.Exception">
      <summary>Converts an <see cref="T:Microsoft.JScript.ErrorObject" /> to an <see cref="T:System.Exception" />, explicitly.</summary>
      <returns>The converted <see cref="T:Microsoft.JScript.ErrorObject" />.</returns>
      <param name="err">The object to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.ToException(Microsoft.JScript.ErrorObject)">
      <summary>Converts an <see cref="T:Microsoft.JScript.ErrorObject" /> to an <see cref="T:System.Exception" />, implicitly.</summary>
      <returns>The converted <see cref="T:Microsoft.JScript.ErrorObject" />.</returns>
      <param name="err">The object to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.ErrorObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.ErrorPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="F:Microsoft.JScript.ErrorPrototype.name">
      <summary>Specifies the name of the type of the error. Possible values include Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, and URIError.</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" /> that contains the name of the type of the error object, and an error message if there is one.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorType">
      <summary>Specifies the JScript error types.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.OtherError">
      <summary>Any error other than one of the other error types. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.EvalError">
      <summary>An eval Method (JScript) error. Corresponds to the <see cref="T:Microsoft.JScript.EvalErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.RangeError">
      <summary>A range error. Corresponds to the <see cref="T:Microsoft.JScript.RangeErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.ReferenceError">
      <summary>A reference error. Corresponds to the <see cref="T:Microsoft.JScript.ReferenceErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.SyntaxError">
      <summary>A syntax error. Corresponds to the <see cref="T:Microsoft.JScript.SyntaxErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.TypeError">
      <summary>A type error. Corresponds to the <see cref="T:Microsoft.JScript.TypeErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.URIError">
      <summary>A Uniform Resource Identifier (URI) error. Corresponds to the <see cref="T:Microsoft.JScript.URIErrorObject" /> object.</summary>
    </member>
    <member name="T:Microsoft.JScript.Eval">
      <summary>Evaluates JScript code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Evaluates the specified JScript code by using the specified engine.</summary>
      <returns>The result of the evaluation. If <paramref name="source" /> is not a string, return value is <paramref name="source" />.</returns>
      <param name="source">The code to evaluate.</param>
      <param name="engine">A reference to the scripting engine to use to evaluate <paramref name="source" />.</param>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Evaluates the specified JScript code by using the specified engine and safety option.</summary>
      <returns>The result of the evaluation. If <paramref name="source" /> is not a string, return value is <paramref name="source" />.</returns>
      <param name="source">The code to evaluate.</param>
      <param name="unsafeOption">The string literal unsafe to enable unsafe evaluation; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine to use to evaluate <paramref name="source" />.</param>
    </member>
    <member name="T:Microsoft.JScript.EvalErrorObject">
      <summary>Represents an error that occurs when the eval method is used. For more information, see eval Method (JScript).</summary>
    </member>
    <member name="T:Microsoft.JScript.Expando">
      <summary>Indicates that a class or method is an expando class or method.</summary>
    </member>
    <member name="M:Microsoft.JScript.Expando.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Expando" /> attribute class.</summary>
    </member>
    <member name="T:Microsoft.JScript.FieldAccessor">
      <summary>Represents a field accessor.</summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.FieldAccessor" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.GetValue(System.Object)">
      <summary>When overridden in a derived class, gets the value of the field for the specified object.</summary>
      <returns>The value of the field for <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.SetValue(System.Object,System.Object)">
      <summary>When overridden in a derived class, sets the specified value of the field for the specified object.</summary>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="value">The value to set for the field.</param>
    </member>
    <member name="T:Microsoft.JScript.ForIn">
      <summary>Represents the JScript for...in statement. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ForIn.JScriptGetEnumerator(System.Object)">
      <summary>Returns an enumerator that iterates through the specified collection.</summary>
      <returns>An enumerator that iterates through <paramref name="coll" />.</returns>
      <param name="coll">The collection for which to get an enumerator.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.Invoke(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionDeclaration">
      <summary>Represents a function declaration. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionDeclaration.JScriptFunctionDeclaration(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new closure function, using the specified information.</summary>
      <returns>A new closure function that represents the function declaration.</returns>
      <param name="handle">A handle to the type of the function.</param>
      <param name="name">The name of the function.</param>
      <param name="method_name">The name of the function.</param>
      <param name="formal_parameters">The parameters of the function.</param>
      <param name="fields">The fields of the function.</param>
      <param name="must_save_stack_locals">true to save local stack variables. This is important for a nested function that accesses one of its local variables or for an eval statement.</param>
      <param name="hasArgumentsObject">true if the function has a parameter array.</param>
      <param name="text">The text of the function declaration.</param>
      <param name="declaringObject">Gets the type that declares this method.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionExpression">
      <summary>Represents a function object. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionExpression.JScriptFunctionExpression(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new function object, using the specified information.</summary>
      <returns>A new function object.</returns>
      <param name="handle">A handle to the type of the function.</param>
      <param name="name">The name of the function.</param>
      <param name="method_name">The name of the function.</param>
      <param name="formal_params">The parameters of the function.</param>
      <param name="fields">The fields of the function.</param>
      <param name="must_save_stack_locals">true to save local stack variables. This is important for a nested function that accesses one of its local variables, or for an eval statement.</param>
      <param name="hasArgumentsObject">true if the function has a parameter array.</param>
      <param name="text">The text of the function declaration.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionObject">
      <summary>Represents a function object. </summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionObject.ToString">
      <summary>Returns a string representation of this function object.</summary>
      <returns>A string representation of this function object that contains the text of the function.</returns>
    </member>
    <member name="T:Microsoft.JScript.FunctionPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.FunctionObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)">
      <summary>Calls the function that this object represents, converting the specified argument object to an array of arguments if it has to.</summary>
      <returns>The return value of the call to the function that this object represents.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="thisarg">The current default scope. Either the contained object of a with statement scope, or the global scope.</param>
      <param name="argArray">The arguments to pass to the function, as an <see cref="T:Microsoft.JScript.ArgumentsObject" /> or an <see cref="T:Microsoft.JScript.ArrayObject" />.</param>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])">
      <summary>Calls the function that this object represents.</summary>
      <returns>The return value of the call to the function that this object represents.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="thisarg">The current default scope. Either the contained object of a with statement scope, or the global scope.</param>
      <param name="args">The arguments to pass to the function as an array.</param>
    </member>
    <member name="P:Microsoft.JScript.FunctionPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" /> that contains the name of the function.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionWrapper">
      <summary>Binds the members of a function to an object. </summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionWrapper.ToString">
      <summary>Creates a string representation of the function.</summary>
      <returns>A string representation of the function that contains the function source, the function members, and the function name.</returns>
    </member>
    <member name="T:Microsoft.JScript.GlobalObject">
      <summary>Stores constants, data type information, utility functions, and references to prototype-based objects. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ActiveXObject">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Array">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.boolean">
      <summary>Gets the managed type that corresponds to the JScript boolean data type.</summary>
      <returns>The managed type that corresponds to the JScript boolean data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Boolean">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.byte">
      <summary>Gets the managed type that corresponds to the JScript byte data type.</summary>
      <returns>The managed type that corresponds to the JScript byte data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.char">
      <summary>Gets the managed type that corresponds to the JScript char data type.</summary>
      <returns>The managed type that corresponds to the JScript char data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.CollectGarbage">
      <summary>Calls the garbage collector.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Date">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.decimal">
      <summary>Gets the managed type that corresponds to the JScript decimal data type.</summary>
      <returns>The managed type that corresponds to the JScript decimal data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)">
      <summary>Decodes the specified Uniform Resource Identifier (URI), accounting for reserved characters.</summary>
      <returns>The decoded version of <paramref name="encodedURI" />.</returns>
      <param name="encodedURI">The URI to decode.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)">
      <summary>Decodes the specified Uniform Resource Identifier (URI).</summary>
      <returns>The decoded version of <paramref name="encodedURI" />.</returns>
      <param name="encodedURI">The URI to decode.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.double">
      <summary>Gets the managed type that corresponds to the JScript double data type.</summary>
      <returns>The managed type that corresponds to the JScript double data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)">
      <summary>Encodes the specified Uniform Resource Identifier (URI), accounting for reserved characters.</summary>
      <returns>The encoded version of <paramref name="uri" />.</returns>
      <param name="uri">The URI to encode.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)">
      <summary>Encodes the specified Uniform Resource Identifier (URI).</summary>
      <returns>The encoded version of <paramref name="uriComponent" />.</returns>
      <param name="uriComponent">The URI to encode.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Enumerator">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Error">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.escape(System.Object)">
      <summary>Converts the specified string to use the % character to escape reserved characters (@, *, _, +, -, ., /) and express them in Unicode notation.</summary>
      <returns>A new copy of <paramref name="string" /> in which the reserved characters are escaped by the % character and expressed in Unicode.</returns>
      <param name="string">The string to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.eval(System.Object)">
      <summary>Throws an <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> exception in all cases.</summary>
      <returns>Throws an <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> exception in all cases.</returns>
      <param name="x">The expression to evaluate.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.EvalError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.float">
      <summary>Gets the managed type that corresponds to the JScript float data type.</summary>
      <returns>The managed type that corresponds to the JScript float data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Function">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)">
      <summary>Creates a managed object from an unmanaged object by using either the moniker or the ProgID.</summary>
      <returns>The managed object.</returns>
      <param name="moniker">The moniker of the object.</param>
      <param name="progId">The ProgID of the object.</param>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.Infinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.int">
      <summary>Gets the managed type that corresponds to the JScript int data type.</summary>
      <returns>The managed type that corresponds to the JScript int data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)">
      <summary>Determines whether the specified number represents infinity.</summary>
      <returns>true if <paramref name="number" /> is not <see cref="F:System.Double.NaN" />, not <see cref="F:System.Double.PositiveInfinity" />, and not <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
      <param name="number">The number to check.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)">
      <summary>Determines whether the specified number can be converted to a JScript number.</summary>
      <returns>true if <paramref name="num" /> can be converted to a JScript number; otherwise, false.</returns>
      <param name="num">The number to check.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.long">
      <summary>Gets the managed type that corresponds to the JScript long data type.</summary>
      <returns>The managed type that corresponds to the JScript long data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Math">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.MathObject" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.MathObject" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.NaN">
      <summary>Represents a value that is not a number (NaN). This field is constant.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Number">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Object">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalActiveXObjectField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalArrayField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalBooleanField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalDateField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEnumeratorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEvalErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalFunctionField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalNumberField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectPrototypeField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ObjectPrototype" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRangeErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalReferenceErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRegExpField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalStringField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalSyntaxErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalTypeErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalURIErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalVBArrayField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)">
      <summary>Converts the specified string to its <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A value equivalent to the value that is contained in <paramref name="string" />.</returns>
      <param name="string">The string to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)">
      <summary>Converts the specified string to its <see cref="T:System.Double" /> equivalent, using the specified base.</summary>
      <returns>A value that is equivalent to the value that is contained in <paramref name="string" />.</returns>
      <param name="string">The string to convert.</param>
      <param name="radix">A number between 2 and 36 that represents the base of the number system that <paramref name="string" /> is expressed in. The default is 10.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RangeError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ReferenceError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RegExp">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.sbyte">
      <summary>Gets the managed type that corresponds to the JScript sbyte data type.</summary>
      <returns>The managed type that corresponds to the JScript sbyte data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngine">
      <summary>Gets the name of the scripting engine.</summary>
      <returns>The string literal "JScript".</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion">
      <summary>Gets the build number of the scripting engine.</summary>
      <returns>The build number of the scripting engine.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion">
      <summary>Gets the major version number of the scripting engine.</summary>
      <returns>The major version number of the scripting engine.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion">
      <summary>Gets the minor version number of the scripting engine.</summary>
      <returns>The minor version number of the scripting engine.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.short">
      <summary>Gets the managed type that corresponds to the JScript short data type.</summary>
      <returns>The managed type that corresponds to the JScript short data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.String">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.SyntaxError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.TypeError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.uint">
      <summary>Gets the managed type that corresponds to the JScript uint data type.</summary>
      <returns>The managed type that corresponds to the JScript uint data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ulong">
      <summary>Gets the managed type that corresponds to the JScript ulong data type.</summary>
      <returns>The managed type that corresponds to the JScript ulong data type.</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.undefined">
      <summary>Represents a value that is null.</summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.unescape(System.Object)">
      <summary>Converts % escaped characters (@, *, _, +, -, ., /) in the specified string to their original form. The escaped characters are expressed in Unicode notation.</summary>
      <returns>A new copy of <paramref name="string" /> in which the escaped characters are converted to their original form.</returns>
      <param name="string">The string to convert.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.URIError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ushort">
      <summary>Gets the managed type that corresponds to the JScript ushort data type.</summary>
      <returns>The managed type that corresponds to the JScript ushort data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.VBArray">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.void">
      <summary>Gets the managed type that corresponds to the return value of a function that does not return a value.</summary>
      <returns>The managed type that corresponds to the return value of a function that does not return a value.</returns>
    </member>
    <member name="T:Microsoft.JScript.Globals">
      <summary>Stores references to all globally available types and manages the stack. This class belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArray(System.Object[])">
      <summary>Provides global access to the <see cref="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])" /> method.</summary>
      <returns>A new instance of a JScript <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
      <param name="args">The values to populate the array with.</param>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArrayLiteral(System.Object[])">
      <summary>Provides global access to the <see cref="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])" /> method.</summary>
      <returns>A new instance of a JScript <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
      <param name="args">The values to populate the array with.</param>
    </member>
    <member name="F:Microsoft.JScript.Globals.contextEngine">
      <summary>Stores a global reference to the single scripting engine that is running in the current context.</summary>
    </member>
    <member name="T:Microsoft.JScript.GlobalScope">
      <summary>Represents the global scope. </summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.#ctor(Microsoft.JScript.GlobalScope,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.GlobalScope" /> class.</summary>
      <param name="parent">A reference to the parent object.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.AddField(System.String)">
      <summary>Adds the specified field to the global scope.</summary>
      <returns>The new field, if it is successfully added.</returns>
      <param name="name">The name of the field to add.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetDefaultThisObject">
      <summary>Gets the current default scope, which is either the contained object of a with statement scope, or the global scope.</summary>
      <returns>This object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetField(System.String,System.Int32)">
      <summary>Gets a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>A field that has the specified name.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetFields(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the global scope.</summary>
      <returns>An array of objects that contains all fields of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetGlobalScope">
      <summary>Gets the global scope by returning a reference to this object.</summary>
      <returns>This object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetLocalField(System.String)">
      <summary>Gets the local declaration of a field that has the specified name. This is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMembers(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the global scope.</summary>
      <returns>An array of objects that contains all members of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMethods(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the global scope.</summary>
      <returns>An array of objects that contains all methods of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetProperties(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the global scope.</summary>
      <returns>An array of objects that contains all properties of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>Adds the specified method to the global scope. This method is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="method">The delegate to the method.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>Adds the specified property to the global scope. This method is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the property to add.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>Removes the specified member from the global scope.</summary>
      <param name="m">The name of the member to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.Hide">
      <summary>Indicates that a method or field hides a method or field in a base class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Hide.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Hide" /> attribute class.</summary>
    </member>
    <member name="T:Microsoft.JScript.IActivationObject">
      <summary>Defines methods for resolving scope. This interface is implemented by all objects that take part in a scope hierarchy.</summary>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetDefaultThisObject">
      <summary>When implemented in a class, gets the current default scope. Either the contained object of a with statement scope, or the global scope.</summary>
      <returns>The current default scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetField(System.String,System.Int32)">
      <summary>When implemented in a class, returns a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object that has the specified name.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetGlobalScope">
      <summary>When implemented in a class, gets the global scope by searching the scope hierarchy until it finds a scope that includes static variables, for example, a module scope.</summary>
      <returns>The global scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetLocalField(System.String)">
      <summary>When implemented in a class, gets the local declaration of a field that has the specified name. This is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>When implemented in a class, gets the value of the specified member by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>The value of the member <paramref name="name" />.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="lexlevel">The lexical level to search.</param>
    </member>
    <member name="T:Microsoft.JScript.IAuthorServices">
      <summary>Defines services for authoring JScript code in an editor.</summary>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetCodeSense">
      <summary>When implemented in a class, gets an object that is used to add IntelliSense to text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to add IntelliSense to text.</returns>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetColorizer">
      <summary>When implemented in a class, gets an object that is used to colorize text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to colorize text.</returns>
    </member>
    <member name="T:Microsoft.JScript.IColorizeText">
      <summary>Defines services for colorizing text when JScript code is being authored in an editor.</summary>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.Colorize(System.String,Microsoft.JScript.SourceState)">
      <summary>When implemented in a class, scans the specified source code for individual units of code and identifies the color that each should have.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects that represent units of code to colorize.</returns>
      <param name="sourceCode">The source code to colorize.</param>
      <param name="state">The current state (normal, comment, string) of the source code.</param>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.GetStateForText(System.String,Microsoft.JScript.SourceState)">
      <summary>When implemented in a class, scans the specified source code for individual units of code and identifies the state (normal, comment, string) of the specified code.</summary>
      <returns>The state of the source code.</returns>
      <param name="sourceCode">The source code to analyze.</param>
      <param name="currentState">The current state (normal, comment, string) of the source code.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert">
      <summary>Defines a set of utility methods that convert data from one type to another. Includes methods that convert values to <see cref="T:System.String" /> objects so that they can be displayed by the debugger.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.BooleanToString(System.Boolean)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Boolean" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The literal string "true" or the literal string "false".</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Byte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToDateString(System.Double)">
      <summary>When implemented in a class, creates a string representation of the specified <see cref="T:System.Double" />. The string representation contains the day of the week, the month, the date, the time, the time zone, and the year.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToString(System.Double)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Double" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>When implemented in a class, gets an error message that is created from the specified <see cref="P:System.Exception.HResult" /> and the <see cref="T:System.Globalization.CultureInfo" /> of the specified <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />.</summary>
      <returns>A localized string that contains information about the error.</returns>
      <param name="hr">The HRESULT error code.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive <see cref="T:System.Char" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to a <see cref="T:System.Char" /> and then an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive <see cref="T:System.Int64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedObject(System.Object)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive value.</summary>
      <returns>
        <paramref name="value" /> converted to a managed <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive <see cref="T:System.UInt64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Int16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Int32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Int64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>When implemented in a class, converts the specified regular expression information to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of the regular expression information.</returns>
      <param name="source">The regular expression pattern to match.</param>
      <param name="ignoreCase">true to use case-insensitive matching; otherwise, false.</param>
      <param name="global">true to use a global match; otherwise, false.</param>
      <param name="multiline">true to use a multiline match; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.SByte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SingleToString(System.Single)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Single" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.StringToPrintable(System.String)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.String" /> to a <see cref="T:System.String" /> that contains escape characters for non-printable characters.</summary>
      <returns>The string representation of <paramref name="source" /> that contains escape characters.</returns>
      <param name="source">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>When implemented in a class, converts the specified value to the specified <see cref="T:System.TypeCode" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the <paramref name="typeCode" /> type.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="typeCode">The type to convert <paramref name="value" /> to.</param>
      <param name="truncationPermitted">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.UInt16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.UInt32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.UInt64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert2">
      <summary>Defines utility methods that convert data from one type to another. Includes methods that convert values to <see cref="T:System.String" /> objects so that they can be displayed by the debugger.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert2.DecimalToString(System.Decimal)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebuggerObject">
      <summary>Defines methods that provide information about debugger objects. This interface is implemented by all <see cref="T:System.Reflection.IReflect" /> objects that are implemented by the debugger. Currently, this interface serves only to flag these objects as such to the scripting engine.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.HasEnumerableMember(System.String)">
      <summary>When implemented in a class, determines whether the current object has a member that has the specified name and that is enumerable.</summary>
      <returns>true if the current object has an enumerable member named <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name of the member to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsCOMObject">
      <summary>When implemented in a class, determines whether the current object is a true COM object or a proxy to a managed object.</summary>
      <returns>true if the current object is a COM object; false if the current object is a proxy to a managed object.</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsEqual(Microsoft.JScript.IDebuggerObject)">
      <summary>When implemented in a class, determines whether the current object is equal to the specified object.</summary>
      <returns>true if the current object is the same as <paramref name="o" />; otherwise, false.</returns>
      <param name="o">The object to test for equality.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptFunction">
      <summary>When implemented in a class, determines whether the current object is a proxy to a managed JScript function.</summary>
      <returns>true if the current object is a proxy to a managed JScript function; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptObject">
      <summary>When implemented in a class, determines whether the current object is a proxy to a managed JScript object.</summary>
      <returns>true if the current object is a proxy to a managed JScript object; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.JScript.IDebugScriptScope">
      <summary>Defines methods that set the this value that is associated with the global scope. Used by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugScriptScope.SetThisValue(System.Object)">
      <summary>When implemented in a class, sets the this value that is associated with the global scope.</summary>
      <param name="thisValue">The value that is used as the this object for the global scope.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugType">
      <summary>Defines methods that provide information about debugger objects. This interface is implemented by debugger objects that represent a type in the debugger target. </summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugType.HasInstance(System.Object)">
      <summary>When implemented in a class, determines whether the specified object is an instance of the current type.</summary>
      <returns>true if <paramref name="o" /> is an instance of the current type; otherwise, false.</returns>
      <param name="o">The object to test.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugVsaScriptCodeItem">
      <summary>Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interface provides extra functionality that is needed by an IActiveScript host.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
      <summary>When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value. It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example). For expressions, the value is the result of the expression. For blocks and statements, the resulting expression is the last expression calculated by the block or statement. </summary>
      <returns>Returns a value that represents the evaluation of the statement, expression, or block.</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
      <summary>When implemented in a class, parses strings and returns the parsed-out information. This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a string. The debugger might have a breakpoint typed in by the user in the form functionname-arguments-ILoffset. A named breakpoint string can have a complex format, for example, F.B(C.D[], int, arg : double ) : C.Abc + 123. The parameter list is optional, as is the IL offset.</summary>
      <returns>Returns true if the named breakpoint is successfully parsed, false otherwise.</returns>
      <param name="input">A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.</param>
      <param name="functionName">Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.</param>
      <param name="nargs">Out parameter returning the number of arguments in the optional argument list. Returns zero if there is no arguments list or if the string is not well formed.</param>
      <param name="arguments">Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.</param>
      <param name="returnType">Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.</param>
      <param name="offset">Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.</param>
    </member>
    <member name="T:Microsoft.JScript.IDefineEvent">
      <summary>Defines extra functionality that is needed by an active script host. </summary>
    </member>
    <member name="M:Microsoft.JScript.IDefineEvent.AddEvent(System.String,System.Int32)">
      <summary>Used by an active script host to define an event.</summary>
      <returns>The event, if it was successfully added.</returns>
      <param name="code">The code that contains the event.</param>
      <param name="startLine">The line number where the code starts.</param>
    </member>
    <member name="T:Microsoft.JScript.IEngine2">
      <summary>Defines extra functionality that is needed by an IActiveScript host. Implemented by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> engine.  </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Clone(System.AppDomain)">
      <summary>When implemented in a class, creates a new identical engine that runs in a new application domain, with the same compiled state and named items. This is not implemented in JScript.</summary>
      <returns>The new engine.</returns>
      <param name="domain">The application domain in which to create the new engine.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.CompileEmpty">
      <summary>When implemented in a class, triggers compilation of all the state currently in the engine. All references, code items, host items, and resources are run through the compiler.</summary>
      <returns>true if the compilation was successful, otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.ConnectEvents">
      <summary>When implemented in a class, communicates to the engine that it can connect any registered event sources that have events to any global event handlers. This is not implemented in JScript. </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.DisconnectEvents">
      <summary>When implemented in a class, directs the engine to unhook event sources from event handlers. This is not implemented in JScript.</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetAssembly">
      <summary>When implemented in a class, gets the compiled assembly that is produced by the compilation step.</summary>
      <returns>The compiled assembly.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetGlobalScope">
      <summary>When implemented in a class, gets the global scope object.</summary>
      <returns>The global scope object.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetModule">
      <summary>When implemented in a class, gets the code module from the compiled assembly.</summary>
      <returns>The code module from the compiled assembly.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>When implemented in a class, initializes the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />.</summary>
      <param name="rootMoniker">The root moniker of the script engine. For more information, see <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" />.</param>
      <param name="site">The host-implemented <see cref="T:Microsoft.Vsa.IVsaSite" /> object that is used by the script engine to communicate with the host. For more information, see <see cref="P:Microsoft.Vsa.IVsaEngine.Site" />.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Interrupt">
      <summary>When implemented in a class, calls <see cref="M:System.Threading.Thread.Abort" /> on the thread that is running the script code.</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RegisterEventSource(System.String)">
      <summary>When implemented in a class, specifies the name of an item that is marked as an event source, so that the <see cref="M:Microsoft.JScript.IEngine2.ConnectEvents" /> method can determine which events to connect. This is not implemented in JScript.</summary>
      <param name="name">The name of an added item that provides events.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Restart">
      <summary>When implemented in a class, this method is called by the debugger when it has to reset the engine to a clean state before evaluating a new expression. The method resets the added items and the global scope back to their original state.</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Run(System.AppDomain)">
      <summary>When implemented in a class, runs the compiled code in the specified application domain. This is not implemented in JScript because managed engines do not support running code in user-provided application domains.</summary>
      <param name="domain">The application domain in which to run the compiled code.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RunEmpty">
      <summary>When implemented in a class, runs the compiled code in the current <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.IErrorHandler">
      <summary>Defines methods to handle errors that occur when code is being parsed.</summary>
    </member>
    <member name="M:Microsoft.JScript.IErrorHandler.OnCompilerError(Microsoft.JScript.IVsaFullErrorInfo)">
      <summary>When implemented in a class, determines how to handle an error that occurs when code is being parsed.</summary>
      <returns>false to handle the error; true to ignore the error and continue parsing.</returns>
      <param name="error">An object that contains information about the error.</param>
    </member>
    <member name="T:Microsoft.JScript.IMessageReceiver">
      <summary>Defines methods that receive output from a scripting engine. This interface acts as a callback object to capture output that would otherwise go to the console.</summary>
    </member>
    <member name="M:Microsoft.JScript.IMessageReceiver.Message(System.String)">
      <summary>When implemented in a class, captures the specified output.</summary>
      <param name="strValue">The output to capture.</param>
    </member>
    <member name="T:Microsoft.JScript.IMethodsCompletionInfo">
      <summary>This is a marker interface and has no methods.</summary>
    </member>
    <member name="T:Microsoft.JScript.Import">
      <summary>Imports namespaces for use in code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Import.JScriptImport(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Imports the specified namespace for use by the specified scripting engine.</summary>
      <param name="name">The namespace to import.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.In">
      <summary>Determines whether an object is contained in another object. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.In.JScriptIn(System.Object,System.Object)">
      <summary>Determines whether the first specified object is contained in the second specified object.</summary>
      <returns>true if <paramref name="v1" /> is contained in <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The object to search for.</param>
      <param name="v2">The object to search in.</param>
    </member>
    <member name="T:Microsoft.JScript.INeedEngine">
      <summary>Defines methods that get and set references to the scripting engine. </summary>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.GetEngine">
      <summary>When implemented in a class, gets a reference to the scripting engine.</summary>
      <returns>A reference to the scripting engine.</returns>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.SetEngine(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>When implemented in a class, sets a reference to the scripting engine.</summary>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.Instanceof">
      <summary>Determines whether an object can be coerced to the type of another object. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Instanceof.JScriptInstanceof(System.Object,System.Object)">
      <summary>Determines whether the first specified object can be coerced to the type of the second specified object.</summary>
      <returns>true if <paramref name="v1" /> can be coerced to the type of object v2; otherwise, false.</returns>
      <param name="v1">The object to coerce to the type of object <paramref name="v2" />.</param>
      <param name="v2">The object that has the desired type.</param>
    </member>
    <member name="T:Microsoft.JScript.IObjectCompletionInfo">
      <summary>This is a marker interface and has no methods.</summary>
    </member>
    <member name="T:Microsoft.JScript.IParseText">
      <summary>Defines methods for parsing text when JScript code is being authored in an editor.</summary>
    </member>
    <member name="M:Microsoft.JScript.IParseText.Parse(System.String,Microsoft.JScript.IErrorHandler)">
      <summary>When implemented in a class, parses the specified source code.</summary>
      <param name="code">The source code to parse.</param>
      <param name="error">An object that contains information about errors that occur when <paramref name="code" /> is being parsed.</param>
    </member>
    <member name="T:Microsoft.JScript.IRedirectOutput">
      <summary>Defines methods that capture output that would otherwise go to the console. This interface is implemented by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.IRedirectOutput.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <summary>When implemented in a class, redirects the specified output stream to a new stream or data storage.</summary>
      <param name="output">The output to redirect. </param>
    </member>
    <member name="T:Microsoft.JScript.ISite2">
      <summary>Defines methods that are used by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> for name resolution. Provides extra functionality that is needed by an IActiveScript host. </summary>
    </member>
    <member name="M:Microsoft.JScript.ISite2.GetParentChain(System.Object)">
      <summary>When implemented in a class, gets the parent object hierarchy for the specified object.</summary>
      <returns>An array that contains the parent objects of <paramref name="obj" />.</returns>
      <param name="obj">An <see cref="T:System.Reflection.IReflect" /> object to get the parent hierarchy of.</param>
    </member>
    <member name="T:Microsoft.JScript.ITokenColorInfo">
      <summary>Defines properties for coloring specific units of code.</summary>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.Color">
      <summary>When implemented in a class, gets the color that should be used to show a unit of code.</summary>
      <returns>The color that should be used to show the unit of code.</returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.EndPosition">
      <summary>When implemented in a class, gets the position where a unit of code ends.</summary>
      <returns>The position where the unit of code ends.</returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.StartPosition">
      <summary>When implemented in a class, gets the position where a unit of code starts.</summary>
      <returns>The position where the unit of code starts.</returns>
    </member>
    <member name="T:Microsoft.JScript.ITokenEnumerator">
      <summary>Defines methods for iterating over a collection of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.GetNext">
      <summary>When implemented in a class, returns the next item in a collection of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
      <returns>The next item in the collection.</returns>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.Reset">
      <summary>When implemented in a class, sets the enumerator to its initial position before the first item in a collection of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
    </member>
    <member name="T:Microsoft.JScript.IVsaFullErrorInfo">
      <summary>Defines properties to obtain information about errors. This interface provides extra functionality that is needed by an IActiveScript host.</summary>
    </member>
    <member name="P:Microsoft.JScript.IVsaFullErrorInfo.EndLine">
      <summary>When implemented in a class, gets the end line of the code in which an error occurred.</summary>
      <returns>The end line of the code in which an error occurred.</returns>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptCodeItem">
      <summary>Defines extra functionality that is needed by an IActiveScript host. </summary>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptCodeItem.Execute">
      <summary>When implemented in a class, compiles and runs this code.</summary>
      <returns>The return value from running the code, if there is any; otherwise, null.</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartColumn">
      <summary>When implemented in a class, gets or sets the column number in the line where this code starts.</summary>
      <returns>The column number where this code starts.</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartLine">
      <summary>When implemented in a class, gets or sets the line number where this code starts.</summary>
      <returns>The line number where this code starts.</returns>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptScope">
      <summary>Defines methods for resolving scope. The global scope object of the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> implements this interface.</summary>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.AddItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>When implemented in a class, adds an item to the scope. </summary>
      <returns>The new item, if it is successfully added.</returns>
      <param name="itemName">The name of the item.</param>
      <param name="type">One of the enumeration values. Specifies the type of the item to add.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.CreateDynamicItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>When implemented in a class, adds an item to the scope. The <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> must be running to use this method.</summary>
      <returns>The new item, if it is successfully added.</returns>
      <param name="itemName">The name of the item.</param>
      <param name="type">One of the enumeration values. Specifies the type of the item to add.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItem(System.String)">
      <summary>When implemented in a class, gets the item from the scope that is designated by the specified name.</summary>
      <returns>The item that is named <paramref name="itemName" />.</returns>
      <param name="itemName">The name of the item to get.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemAtIndex(System.Int32)">
      <summary>When implemented in a class, gets the item from the scope that is designated by the specified index value.</summary>
      <returns>The item at <paramref name="index" />.</returns>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemCount">
      <summary>When implemented in a class, gets the number of items in the scope.</summary>
      <returns>The number of items in the scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetObject">
      <summary>When implemented in a class, gets a reference to the global scope.</summary>
      <returns>A reference to the global scope.</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptScope.Parent">
      <summary>When implemented in a class, gets a reference to the parent object.</summary>
      <returns>The parent scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(Microsoft.JScript.Vsa.IJSVsaItem)">
      <summary>When implemented in a class, removes the specified <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> object from the scope.</summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(System.String)">
      <summary>When implemented in a class, removes the item that is designated by the specified name from the scope.</summary>
      <param name="itemName">The name of the item to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItemAtIndex(System.Int32)">
      <summary>When implemented in a class, removes the item that is designated by the specified index value from the scope.</summary>
      <param name="index">The index of the item to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.IWrappedMember">
      <summary>Defines methods for accessing the object that a member is defined on.</summary>
    </member>
    <member name="M:Microsoft.JScript.IWrappedMember.GetWrappedObject">
      <summary>When implemented in a class, returns the object that a member is defined on.</summary>
      <returns>The object that a member is defined on.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSAuthor">
      <summary>Provides services for authoring JScript code in an editor. </summary>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSAuthor" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetCodeSense">
      <summary>Gets an object that is used to add IntelliSense to text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to add IntelliSense to text.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetColorizer">
      <summary>Gets an object that is used to colorize text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to colorize text.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSBuiltin">
      <summary>Specifies the built-in JScript functions. These functions correspond to the static methods of the intrinsic JScript objects. The members of this enumeration are used to create <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> objects.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.None">
      <summary>No method. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_concat">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_join">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_pop">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_push">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_reverse">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_shift">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_slice">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_sort">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_splice">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toString">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_unshift">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_toString">
      <summary>The static <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDay">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTime">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTimezoneOffset">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDay">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getVarDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_parse">
      <summary>The static <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setTime">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toDateString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toGMTString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleDateString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleTimeString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toTimeString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toUTCString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_UTC">
      <summary>The static <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_atEnd">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_item">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveFirst">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveNext">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Error_toString">
      <summary>The static <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ErrorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_apply">
      <summary>The static <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_call">
      <summary>The static <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_toString">
      <summary>The static <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_CollectGarbage">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.CollectGarbage" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURI">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURIComponent">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURI">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURIComponent">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_escape">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_eval">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_GetObject">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isNaN">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isFinite">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseFloat">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseInt">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngine">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineBuildVersion">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMajorVersion">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMinorVersion">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_unescape">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_abs">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_acos">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_asin">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan2">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_ceil">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_cos">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_exp">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_floor">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_log">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_max">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_min">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_pow">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_random">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.random" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_round">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sin">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sqrt">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_tan">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toExponential">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toFixed">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toPrecision">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toString">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_hasOwnProperty">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_isPrototypeOf">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_propertyIsEnumerable">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toString">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_compile">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_exec">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_test">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_toString">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_anchor">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_big">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_blink">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_bold">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charAt">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charCodeAt">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_concat">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fixed">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontcolor">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontsize">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fromCharCode">
      <summary>The static <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_indexOf">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_italics">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_lastIndexOf">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_link">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_localeCompare">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_match">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_replace">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_search">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_slice">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_small">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_split">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_strike">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sub">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substr">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substring">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sup">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleLowerCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleUpperCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLowerCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toString">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toUpperCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_dimensions">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_getItem">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_lbound">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_toArray">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_ubound">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSConstructor">
      <summary>Wraps a <see cref="T:Microsoft.JScript.FunctionObject" />. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Attributes">
      <summary>Gets the attributes that are associated with this constructor.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.DeclaringType">
      <summary>Gets the type that declares this constructor.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this constructor.</summary>
      <returns>An array of custom attributes that are attached to this method, or, if there are none, an array that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this constructor, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Object" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> and <see cref="F:System.Reflection.MethodImplAttributes.IL" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetParameters">
      <summary>Gets the parameters of this constructor.</summary>
      <returns>An array that contains information that matches the signature of this constructor.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor on the specified object, using the specified culture and binding information.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The object to call the constructor on.</param>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the constructor.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor, using the specified culture and binding information.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the constructor.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this constructor.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Constructor" />, because this class derives from <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of this constructor.</summary>
      <returns>A handle to the internal metadata representation of this constructor.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Name">
      <summary>Gets the name of this constructor.</summary>
      <returns>The name of this constructor.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="T:Microsoft.JScript.JScriptCodeProvider">
      <summary>Provides access to instances of the JScript code generator and code compiler. </summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptCodeProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateCompiler">
      <summary>Returns an instance of the JScript code compiler.</summary>
      <returns>An instance of the JScript code compiler.</returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateGenerator">
      <summary>Returns an instance of the JScript code generator.</summary>
      <returns>An instance of the JScript code generator.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptCodeProvider.FileExtension">
      <summary>Gets the file name extension for JScript code files.</summary>
      <returns>The string literal "js".</returns>
    </member>
    <member name="T:Microsoft.JScript.JScriptException">
      <summary>The exception that is thrown by JScript to notify a common language runtime (CLR) host or program that an error occurred. A <see cref="T:Microsoft.JScript.JScriptException" /> usually takes a <see cref="T:Microsoft.JScript.JSError" /> enumeration value. </summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(Microsoft.JScript.JSError)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified <see cref="T:Microsoft.JScript.JSError" />.</summary>
      <param name="errorNumber">One of the enumeration values. The value specifies the error.</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified serialized data.</summary>
      <param name="info">The serialized object data about the exception that is being thrown.</param>
      <param name="context">Contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Column">
      <summary>Gets the column in the code in which the error occurs.</summary>
      <returns>The column in the code in which the error occurs, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Description">
      <summary>Gets a message that describes the error.</summary>
      <returns>A message that describes the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndColumn">
      <summary>Gets the column in the code in which the error ends.</summary>
      <returns>The column in the code in which the error ends, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndLine">
      <summary>Gets the line of code in which the error ends.</summary>
      <returns>The line of code in which the error ends, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.ErrorNumber">
      <summary>Gets the <see cref="P:System.Exception.HResult" /> code of the error.</summary>
      <returns>The <see cref="P:System.Exception.HResult" /> code of the error.</returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores information about the exception, including IsError and Code values, in the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
      <param name="info">The serialized object data about the exception that is being thrown.</param>
      <param name="context">Contextual information about the source or destination.</param>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Line">
      <summary>Gets the line of code in which the error occurs.</summary>
      <returns>The line of code in which the error occurs, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.LineText">
      <summary>Gets the text of the code in which the error occurs.</summary>
      <returns>The text of the code, or an empty string if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Message">
      <summary>Gets a message that describes the error.</summary>
      <returns>A message that describes the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Description">
      <summary>Gets a message that describes the error.</summary>
      <returns>A message that describes the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Number">
      <summary>Gets the <see cref="P:System.Exception.HResult" /> code of the error.</summary>
      <returns>The <see cref="P:System.Exception.HResult" /> code of the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Number">
      <summary>Gets the <see cref="P:System.Exception.HResult" /> code of the error.</summary>
      <returns>The <see cref="P:System.Exception.HResult" /> code of the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Severity">
      <summary>Gets a number between 0 (most severe) and 4 (least severe) that indicates the severity of the error. 0 is the default.</summary>
      <returns>A number between 0 and 4.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceItem">
      <summary>Gets the source code item that caused the error.</summary>
      <returns>The source code item; or throws a <see cref="T:Microsoft.JScript.NoContextException" /> if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceMoniker">
      <summary>Gets the name of the source code file that contains the error.</summary>
      <returns>The name of the source code file, or the string literal "no source" if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StackTrace">
      <summary>Gets the stack trace information at the time of the error.</summary>
      <returns>The stack trace information.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StartColumn">
      <summary>Gets the column in the code in which the error occurs.</summary>
      <returns>The column in the code in which the error occurs, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSError">
      <summary>Specifies the JScript error messages. This class belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoError">
      <summary>No error. This is the default (0) value for the enumeration.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCall">
      <summary>Invalid procedure call or argument.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfMemory">
      <summary>Out of memory.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeMismatch">
      <summary>Type mismatch.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfStack">
      <summary>Out of stack space.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InternalError">
      <summary>An internal error has been thrown.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FileNotFound">
      <summary>File not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedObject">
      <summary>An object is required.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantCreateObject">
      <summary>Cannot create object.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OLENoPropOrMethod">
      <summary>Object does not support this property or method.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ActionNotSupported">
      <summary>The object does not support this action.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotCollection">
      <summary>This object is not a collection.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SyntaxError">
      <summary>Discovered syntax error.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoColon">
      <summary>Expected ":".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSemicolon">
      <summary>Expected ";".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftParen">
      <summary>Expected "(".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParen">
      <summary>Expected ")".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracket">
      <summary>Expected "]".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftCurly">
      <summary>Expected "{".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightCurly">
      <summary>Expected "}".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoIdentifier">
      <summary>Expected identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoEqual">
      <summary>Expected "=".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalChar">
      <summary>Invalid character.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnterminatedString">
      <summary>String constant not terminated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommentEnd">
      <summary>Comment not terminated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadReturn">
      <summary>Return statement cannot appear outside the function.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadBreak">
      <summary>Cannot have break outside the loop.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadContinue">
      <summary>Cannot have continue outside the loop.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadHexDigit">
      <summary>Expected hexadecimal digit.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoWhile">
      <summary>Expected while.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadLabel">
      <summary>There is already a label that has that name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLabel">
      <summary>Label not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupDefault">
      <summary>default can appear only once in a switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMemberIdentifier">
      <summary>Expected identifier or string.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCcEnd">
      <summary>Expected @end.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcOff">
      <summary>Conditional compilation is turned off.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotConst">
      <summary>Expected constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoAt">
      <summary>Expected @.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCatch">
      <summary>Expected catch.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidElse">
      <summary>Unmatched else; no if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoComma">
      <summary>Expected ",".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupVisibility">
      <summary>Visibility modifier already defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalVisibility">
      <summary>Invalid visibility modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadSwitch">
      <summary>Missing case or default statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidEnd">
      <summary>Unmatched @end; no @if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElse">
      <summary>Unmatched @else; no @if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElif">
      <summary>Unmatched @elif; no @if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ErrEOF">
      <summary>Expecting more source characters.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleVisibility">
      <summary>Incompatible visibility modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClassNotAllowed">
      <summary>Class definition not allowed in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedCompileTimeConstant">
      <summary>An expression must be a compile-time constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateName">
      <summary>Identifier already in use.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedType">
      <summary>A type name is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotInsideClass">
      <summary>Valid only inside a class definition.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPositionDirective">
      <summary>An unknown position directive was discovered.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustBeEOL">
      <summary>Directive cannot be followed by other code on the same line.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongDirective">
      <summary>Wrong debugger directive or wrong position for the directive.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotNestPositionDirective">
      <summary>Position directive must be ended before a new one can be started.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CircularDefinition">
      <summary>Circular definition.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.Deprecated">
      <summary>The specified type is deprecated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfThis">
      <summary>It is not valid to use this in the current context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAccessible">
      <summary>The object or member is not accessible from this scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseNameOfClass">
      <summary>Only a constructor function can have the same name as the class it appears in.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustImplementMethod">
      <summary>The class must provide an implementation of the method.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInterface">
      <summary>An interface name is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnreachableCatch">
      <summary>Catch clause will never be reached.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeCannotBeExtended">
      <summary>Type cannot be extended.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndeclaredVariable">
      <summary>Variable has not been declared.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableLeftUninitialized">
      <summary>Uninitialized variables are dangerous and slow to use. Did you intend to leave it uninitialized?</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.KeywordUsedAsIdentifier">
      <summary>You cannot use a reserved word as an identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAllowedInSuperConstructorCall">
      <summary>Object or member is not allowed in a call to the base class constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotMeantToBeCalledDirectly">
      <summary>You cannot call this method directly. If possible, use property accessors instead.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.GetAndSetAreInconsistent">
      <summary>The get and set methods of this property do not match each other.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttribute">
      <summary>A custom attribute class must derive from <see cref="T:System.Attribute" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeArgument">
      <summary>Only primitive types are allowed in a custom attribute constructor arguments list.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeClassOrCtor">
      <summary>Unknown custom attribute class or constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyParameters">
      <summary>There are too many actual parameters. The excess parameters will be ignored.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfWith">
      <summary>The <see cref="T:Microsoft.JScript.With" /> statement has made the use of this name ambiguous.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfEval">
      <summary>The presence of <see cref="T:Microsoft.JScript.Eval" /> has made the use of this name ambiguous.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchMember">
      <summary>Objects of this type do not have such a member.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ItemNotAllowedOnExpandoClass">
      <summary>Cannot define the property Item on an <see cref="T:Microsoft.JScript.Expando" /> class. This Item is reserved for the <see cref="T:Microsoft.JScript.Expando" /> fields.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodNotAllowedOnExpandoClass">
      <summary>Cannot define a property named Item on an <see cref="T:Microsoft.JScript.Expando" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodClashOnExpandoSuperClass">
      <summary>Cannot create the <see cref="T:Microsoft.JScript.Expando" /> class because a property named Item is already defined in the class hierarchy.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BaseClassIsExpandoAlready">
      <summary>A base class is already marked <see cref="T:Microsoft.JScript.Expando" />; current specification will be ignored.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBePrivate">
      <summary>An abstract method cannot be private.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotIndexable">
      <summary>Objects of this type are not indexable.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMissingInStaticInit">
      <summary>Static initializer must specify the static keyword.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingConstructForAttributes">
      <summary>The list of attributes does not apply to the current context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAllowed">
      <summary>Only classes are allowed inside a package.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoClassShouldNotImpleEnumerable">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> classes should not implement <see cref="T:System.Collections.IEnumerable" />. The interface is implicitly defined on <see cref="T:Microsoft.JScript.Expando" /> classes.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantMember">
      <summary>The specified member is not CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotDeletable">
      <summary>The object or member cannot be deleted.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageExpected">
      <summary>Package name expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessExpression">
      <summary>Expression has no effect.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesParentMember">
      <summary>base class already contains a member by this name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotChangeVisibility">
      <summary>Cannot change visibility specification of a base method.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesAbstractInBase">
      <summary>Method hides abstract in a base class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NewNotSpecifiedInMethodDeclaration">
      <summary>A method matches a method in a base class. Must specify override or hide.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodInBaseIsNotVirtual">
      <summary>A method in a base class that is final or not virtualoverride is ignored. Specify hide.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToNew">
      <summary>There is no member in a base class to hide.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DifferentReturnTypeFromBase">
      <summary>Method in base has a different return type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClashWithProperty">
      <summary>The name of the field conflicts with the name of the property.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OverrideAndHideUsedTogether">
      <summary>Cannot use override and hide together in a member declaration.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidLanguageOption">
      <summary>Must specify either "fast" or "versionSafe" language option.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToOverride">
      <summary>There is no member in a base class to override.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidForConstructor">
      <summary>Not valid for a constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotReturnValueFromVoidFunction">
      <summary>Cannot return a value from a void function or constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousMatch">
      <summary>More than one method or property matches this parameter list.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousConstructorCall">
      <summary>More than one constructor matches this parameter list.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuperClassConstructorNotAccessible">
      <summary>Base class constructor is not accessible from this scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OctalLiteralsAreDeprecated">
      <summary>Octal literals are deprecated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableMightBeUnitialized">
      <summary>Variable might not be initialized.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotOKToCallSuper">
      <summary>It is not valid to call a base class constructor from this location.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfSuper">
      <summary>It is not valid to use the base class in this way.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadWayToLeaveFinally">
      <summary>It is slow and potentially confusing to leave a finally block this way.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommaOrTypeDefinitionError">
      <summary>Expected "," or invalid type declaration; write "&lt;Identifier&gt; : &lt;Type&gt;" not "&lt;Type&gt; &lt;Identifier&gt;".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractWithBody">
      <summary>An abstract function cannot have a body.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParenOrComma">
      <summary>Expected "," or ")".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracketOrComma">
      <summary>Expected "," or "]".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpressionExpected">
      <summary>Expected expression.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnexpectedSemicolon">
      <summary>Unexpected ";".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyTokensSkipped">
      <summary>Too many errors. The file might not be a JScript file.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadVariableDeclaration">
      <summary>Possible invalid variable declaration, var missing, or unrecognized syntax error.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadFunctionDeclaration">
      <summary>Possible invalid function declaration, function missing, or unrecognized syntax error.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadPropertyDeclaration">
      <summary>Invalid property declaration. The get accessor must not have arguments and the set accessor must have one argument.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DoesNotHaveAnAddress">
      <summary>Expression does not have an address.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooFewParameters">
      <summary>Not all required parameters have been supplied.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessAssignment">
      <summary>An assignment creates an <see cref="T:Microsoft.JScript.Expando" /> property that is immediately thrown away.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectAssignment">
      <summary>If condition cannot contain an assignment.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectSemicolon">
      <summary>Empty statement found in if statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImpossibleConversion">
      <summary>The specified conversion or coercion is not possible.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FinalPrecludesAbstract">
      <summary>final and abstract cannot be used together.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInstance">
      <summary>An instance is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotBeAbstract">
      <summary>Cannot be abstract unless class is marked as abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidBaseTypeForEnum">
      <summary>enum base type must be a primitive integral type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotInstantiateAbstractClass">
      <summary>It is not possible to construct an instance of an abstract class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayMayBeCopied">
      <summary>Assigning a JScript array to a <see cref="T:System.Array" /> may cause the array to be copied.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBeStatic">
      <summary>Static methods cannot be abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticIsAlreadyFinal">
      <summary>Static methods cannot be final.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotOverride">
      <summary>Static methods cannot override base class methods.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotHide">
      <summary>Static methods cannot hide base class methods.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesOverride">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods cannot override base class methods.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalParamArrayAttribute">
      <summary>A variable argument list must be of an array type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesAbstract">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods cannot be abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ShouldBeAbstract">
      <summary>A function without a body should be abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadModifierInInterface">
      <summary>This modifier cannot be used on an interface member.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VarIllegalInInterface">
      <summary>Variables cannot be declared in an interface.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InterfaceIllegalInInterface">
      <summary>Interfaces cannot be declared in an interface.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoVarInEnum">
      <summary>enum member declarations should not use the var keyword.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidImport">
      <summary>The import statement is not valid in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumNotAllowed">
      <summary>enum definition not allowed in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeTarget">
      <summary>This attribute is not valid for this type of declaration.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageInWrongContext">
      <summary>Package definition is not allowed in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ConstructorMayNotHaveReturnType">
      <summary>A constructor cannot have a return type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAndPackagesAllowed">
      <summary>Only classes and packages are allowed inside a library.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidDebugDirective">
      <summary>Invalid debug directive.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CustomAttributeUsedMoreThanOnce">
      <summary>This type of attribute must be unique.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NestedInstanceTypeCannotBeExtendedByStatic">
      <summary>A non-static nested type can be extended only by a non-static type nested in the same class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PropertyLevelAttributesMustBeOnGetter">
      <summary>An attribute that targets the property must be specified on the get accessor, if the get accessor is present.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadThrow">
      <summary>A throw statement must have an argument unless it is inside the catch block of a try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ParamListNotLast">
      <summary>A variable argument list must be the last argument.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchType">
      <summary>Type could not be found. An assembly reference might be missing.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadOctalLiteral">
      <summary>Malformed octal literal treated as decimal literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InstanceNotAccessibleFromStatic">
      <summary>A non-static member is not accessible from a static scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticRequiresTypeName">
      <summary>A static member must be accessed by the class name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonStaticWithTypeName">
      <summary>A non-static member cannot be accessed with the class name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchStaticMember">
      <summary>Type does not have such a static member.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectLoopCondition">
      <summary>Loop condition cannot contain a function call.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpectedAssembly">
      <summary>Expected assembly.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssemblyAttributesMustBeGlobal">
      <summary>Assembly custom attributes cannot be part of another construct.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesStatic">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods cannot be static.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateMethod">
      <summary>This method has the same name, parameter types, and return type as another method in this class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAnExpandoFunction">
      <summary>Class members used as constructors should be marked as <see cref="T:Microsoft.JScript.Expando" /> functions.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidVersionString">
      <summary>Not a valid version string.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExecutablesCannotBeLocalized">
      <summary>Executables cannot be localized; <see cref="P:System.Reflection.AssemblyCultureAttribute.Culture" /> should always be empty.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringConcatIsSlow">
      <summary>The plus operator is a slow way to concatenate strings. Consider using <see cref="T:System.Text.StringBuilder" /> instead.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidInDebugger">
      <summary>Conditional compilation directives and variables cannot be used in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoMustBePublic">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods must be public.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DelegatesShouldNotBeExplicitlyConstructed">
      <summary>Delegates should not be explicitly constructed; simply use the method name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImplicitlyReferencedAssemblyNotFound">
      <summary>A referenced assembly depends on another assembly that is not referenced or could not be found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversion">
      <summary>This conversion may fail at runtime.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversionFromString">
      <summary>Converting a string to a number or Boolean is slow and may fail at run time.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidResource">
      <summary>This is not a valid .resources file.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongUseOfAddressOf">
      <summary>The address of operator can be used only in a list of arguments.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantType">
      <summary>The specified type is not CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberTypeCLSCompliantMismatch">
      <summary>Class member cannot be marked Common Language Specification (CLS) compliant because the class is not marked CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeAssemblyCLSCompliantMismatch">
      <summary>Type cannot be marked CLS compliant because the assembly is not marked as CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleAssemblyReference">
      <summary>The assembly referenced is incompatible.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidAssemblyKeyFile">
      <summary>An invalid assembly key file has been used.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeNameTooLong">
      <summary>The fully qualified type name is too long. It must be less than 1,024 characters.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberInitializerCannotContainFuncExpr">
      <summary>A member initializer cannot contain a function expression.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantAssignThis">
      <summary>Cannot assign to this.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NumberExpected">
      <summary>Expected a number.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FunctionExpected">
      <summary>A function was expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotAssignToFunctionResult">
      <summary>Cannot assign to a function result.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringExpected">
      <summary>String expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DateExpected">
      <summary>Date object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ObjectExpected">
      <summary>Expected an object.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalAssignment">
      <summary>Invalid assignment.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndefinedIdentifier">
      <summary>Undefined identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BooleanExpected">
      <summary>No Boolean value found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VBArrayExpected">
      <summary>A VBArray is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumeratorExpected">
      <summary>Enumerator object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpExpected">
      <summary>
        <see cref="T:Microsoft.JScript.RegExpObject" /> object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpSyntax">
      <summary>Syntax error in regular expression.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UncaughtException">
      <summary>Exception thrown and not caught.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPrototype">
      <summary>This function does not have a valid prototype object.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIEncodeError">
      <summary>The URI to be encoded contains an invalid character.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIDecodeError">
      <summary>The URI to be decoded is not a valid encoding.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FractionOutOfRange">
      <summary>The number of fractional digits is out of range.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PrecisionOutOfRange">
      <summary>The precision is out of range.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthConstructIncorrect">
      <summary>Array length must be a finite positive integer.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthAssignIncorrect">
      <summary>Array length must be assigned a finite positive number.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedArrayObject">
      <summary>A "|" is not an array object. Array object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoConstructor">
      <summary>No such constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalEval">
      <summary>An <see cref="T:Microsoft.JScript.Eval" /> cannot be called by an alias.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotYetImplemented">
      <summary>Not yet implemented.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustProvideNameForNamedParameter">
      <summary>Cannot provide null or empty named parameter name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateNamedParameter">
      <summary>Duplicate named parameter.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingNameParameter">
      <summary>The specified named parameter name is not one of the formal parameters.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MoreNamedParametersThanArguments">
      <summary>Too few arguments specified. The number of named parameter names cannot exceed the number of arguments passed in.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonSupportedInDebugger">
      <summary>The expression cannot be evaluated in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssignmentToReadOnly">
      <summary>Cannot assign to read-only field or property.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WriteOnlyProperty">
      <summary>The property is write-only.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncorrectNumberOfIndices">
      <summary>The number of indices does not match the dimension of the array.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RefParamsNonSupportedInDebugger">
      <summary>Methods with ref parameters cannot be called in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotCallSecurityMethodLateBound">
      <summary>The <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />, and <see cref="M:System.Security.CodeAccessPermission.Assert" /> security methods cannot be called using late binding.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseStaticSecurityAttribute">
      <summary>JScript does not support static security attributes.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonClsException">
      <summary>A target threw a non-CLS exception.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalAborted">
      <summary>Function evaluation was aborted.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalTimedout">
      <summary>Function evaluation timed out.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSuspended">
      <summary>Function evaluation failed. The thread is suspended.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSleepWaitJoin">
      <summary>Function evaluation failed. The thread is sleeping, waiting for an object, or waiting for another thread to finish.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadState">
      <summary>Function evaluation failed. The thread can contain incorrect data.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadNotStarted">
      <summary>Function evaluation failed and the thread has not started.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoFuncEvalAllowed">
      <summary>Function evaluation aborted. To turn on property evaluation, click Options on the Tools menu and then select the Debugging in the tree view.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadLocation">
      <summary>Function evaluation cannot be done when stopped at this point in the program.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalWebMethod">
      <summary>Cannot call a Web method in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticVarNotAvailable">
      <summary>A static variable is not available.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeObjectNotAvailable">
      <summary>The type object for this type is not available.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExceptionFromHResult">
      <summary>Exception from HRESULT.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SideEffectsDisallowed">
      <summary>The expression causes side effects and will not be evaluated.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSField">
      <summary>Supports all fields in JScript. This is the base class for all fields that are defined by JScript. This class belongs to the name binding category.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSField.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSField" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.JSField.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>
        <see cref="F:System.Reflection.FieldAttributes.PrivateScope" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldHandle">
      <summary>Gets a handle to the internal metadata representation of this field.</summary>
      <returns>A handle to the internal metadata representation of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSField.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this field.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSField.MemberType">
      <summary>Gets the type of member that this field is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Field" />, because this class derives from <see cref="T:System.Reflection.FieldInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.Name">
      <summary>Gets the name of this field.</summary>
      <returns>The name of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The type that declares this method.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSFieldInfo">
      <summary>Wraps a <see cref="T:System.Reflection.FieldInfo" /> object. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldHandle">
      <summary>Gets a handle to the internal metadata representation of this field.</summary>
      <returns>A handle to the internal metadata representation of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of this field.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetValue(System.Object)">
      <summary>Gets the value of the field.</summary>
      <returns>The value of the field.</returns>
      <param name="obj">The object whose field value will be returned.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this field.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.MemberType">
      <summary>Gets the type of member that this field is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Field" />, because this class derives from <see cref="T:System.Reflection.FieldInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Name">
      <summary>Gets the name of this field.</summary>
      <returns>The name of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The Type object that was used to obtain this method.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the field, using the specified value.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the field, using the specified value, culture, and binding information.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttribute">
      <summary>Used with <see cref="T:Microsoft.JScript.JSFunctionAttributeEnum" /> to annotate the calling conventions of methods and constructors that are generated by the JScript compiler.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> class, using the specified calling conventions.</summary>
      <param name="value">The calling conventions of the method or constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum,Microsoft.JScript.JSBuiltin)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> class, using the specified calling conventions. The attribute identifies the specified built-in function.</summary>
      <param name="value">The calling conventions of the method or constructor.</param>
      <param name="builtinFunction">The built-in function that this attribute identifies.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.GetAttributeValue">
      <summary>Gets the calling conventions of the method or constructor.</summary>
      <returns>The calling conventions of the method or constructor.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttributeEnum">
      <summary>Specifies the calling conventions of functions that are generated by the JScript compiler. Used with the <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> custom attribute.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.None">
      <summary>Specifies a regular .NET Framework method with no special calling conventions. Typically not used as in this case the JSFunctionAttribute is not emitted.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments">
      <summary>Specifies that the third parameter of the function is of type Object. The caller should pass in an object that implements the JScript arguments object, typically an instance of <see cref="T:Microsoft.JScript.ArgumentsObject" />. The JScript runtime assumes that if <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" /> is set, then <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" /> and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" /> are also set.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject">
      <summary>Specifies that the first parameter of the function is of type Object and that it is usually named <paramref name="thisob" />. The caller should pass in an instance of the object that the function acts on.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested">
      <summary>Specifies that the function is nested in another JScript function.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame">
      <summary>Specifies that the function copies its local variables into a stack frame object maintained by the JScript runtime before making a call out. It copies the variables back from the stack frame object to its locals when control is returned to the function. This flag is set on functions that contain nested functions that access the parent function's locals.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs">
      <summary>Specifies that the function takes a variable number of arguments. The last parameter is of type array of Object, which holds any arguments that are explicitly specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine">
      <summary>Specifies that the second parameter of the function is of type <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />. The caller should pass in an instance of <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> from which the function can retrieve the runtime infrastructure. The JScript runtime assumes that if <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" /> is set then <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" /> is also set.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsExpandoMethod">
      <summary>Specifies that the function is a constructor function for a prototype-based object. For more information, see Prototype-based Objects and expando Modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsInstanceNestedClassConstructor">
      <summary>Specifies that the function is a constructor for a nested instance class. The first parameter of the function an instance of the parent class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction">
      <summary>Specifies the aggregate of <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" />, <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />, and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction">
      <summary>Specifies the aggregate of <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" />, <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested" />, and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicNestedFunction">
      <summary>Specifies the aggregate of <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction" /> and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSLocalField">
      <summary>Represents a local variable.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.#ctor(System.String,System.RuntimeTypeHandle,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSLocalField" /> class, using the specified name, handle, and slot number.</summary>
      <param name="name">The name of this field.</param>
      <param name="handle">A handle to the internal metadata representation of this field.</param>
      <param name="slotNumber">The slot number of the variable.</param>
    </member>
    <member name="P:Microsoft.JScript.JSLocalField.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of this field.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.GetValue(System.Object)">
      <summary>Gets the value of the field.</summary>
      <returns>The value of the field.</returns>
      <param name="obj">The object whose field value will be returned.</param>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the field, using the specified value, culture, and binding information.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</param>
      <param name="locale">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.JSMethod">
      <summary>Represents a JScript method. This class belongs to the name binding category.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetBaseDefinition">
      <summary>Returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method on the direct or indirect base class in which this method was first declared.</summary>
      <returns>this in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method.</summary>
      <returns>An array of <see cref="T:System.Object" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Object" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> and <see cref="F:System.Reflection.MethodImplAttributes.IL" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the method, using the specified information.</summary>
      <returns>The return value of the call to the method.</returns>
      <param name="obj">The object to call the method on.</param>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the method.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this method.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Method" />, because this class derives from <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of this method.</summary>
      <returns>A handle to the internal metadata representation of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The type that declares this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the type of the return value of this method.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSMethodInfo">
      <summary>Wraps a <see cref="T:System.Reflection.MethodInfo" /> object. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Attributes">
      <summary>Gets the attributes that are associated with this method.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.DeclaringType">
      <summary>Gets the type that declares this method.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetBaseDefinition">
      <summary>Returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method of the direct or indirect base class in which this method was first declared.</summary>
      <returns>The first implementation of this method in the hierarchy.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method.</summary>
      <returns>An array that contains the custom attributes that are attached to this method, or, if there are none, an array that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method, searching only for attributes of the specified type.</summary>
      <returns>An array that contains the custom attributes that are attached to this method, or, if there are none, an array that has zero elements.</returns>
      <param name="type">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetParameters">
      <summary>Gets the parameters of this method.</summary>
      <returns>An array that contains information that matches the signature of this method.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the method, using the specified information.</summary>
      <returns>The return value of the call to the method.</returns>
      <param name="obj">The object to call the method on.</param>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the method.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this method.</summary>
      <returns>true if one or more instances of the specified attribute <paramref name="type" /> is attached to this method; otherwise, false.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Method" />, because this class derives from <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of this method.</summary>
      <returns>A handle to the internal metadata representation of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Name">
      <summary>Gets the name of this method.</summary>
      <returns>The name of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The Type object that was used to obtain this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnType">
      <summary>Gets the type of the return value of this method.</summary>
      <returns>The type of the return value of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the type of the return value of this method.</summary>
      <returns>The custom attributes for the type of the return value of this method.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.ToString">
      <summary>Returns a string that represents the method.</summary>
      <returns>A string that represents the method.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSObject">
      <summary>Represents an object in JScript. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.AddField(System.String)">
      <summary>Adds the specified field to the object.</summary>
      <returns>The new field, if it is successfully added.</returns>
      <param name="name">The name of the field to add.</param>
    </member>
    <member name="F:Microsoft.JScript.JSObject.field_table">
      <summary>Stores a list of fields that are dynamically added and removed from the object.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match the specified name.</summary>
      <returns>An array of members that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current script object.</summary>
      <returns>An array of objects that contains all members of the current object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.SetMemberValue2(System.String,System.Object)">
      <summary>Sets the value of a field that was dynamically added to the object and stored in <see cref="F:Microsoft.JScript.JSObject.field_table" />.</summary>
      <param name="name">The name of the field for which to set the value.</param>
      <param name="value">The new value of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the members of the object.</summary>
      <returns>An enumerator object that is used to iterate through the members of the object.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>Adds the specified method to the object. <see cref="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)" /> is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="method">The delegate to the method.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>Adds the specified property to the object. This method is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the property to add.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>Removes the specified member from the object.</summary>
      <param name="m">The name of the member to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSParser">
      <summary>Parses JScript code. This class belongs to the scanning and parsing category. For more information about scanning and parsing, see Create a Language Compiler for the .NET Framework.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSParser.#ctor(Microsoft.JScript.Context)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSParser" /> class, specifying the source code to parse.</summary>
      <param name="context">The source code to parse.</param>
    </member>
    <member name="M:Microsoft.JScript.JSParser.Parse">
      <summary>Parses the source code.</summary>
      <returns>The root of the abstract syntax tree that is created by parsing the code.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSParser.ParseEvalBody">
      <summary>Parses the source code. Use this method instead of <see cref="M:Microsoft.JScript.JSParser.Parse" /> when the source code is inside an eval method call.</summary>
      <returns>The root of the abstract syntax tree that is created by parsing the code.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSPrototypeObject">
      <summary>Adds a constructor function property to a <see cref="T:Microsoft.JScript.JSObject" /> for early binding purposes. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSPrototypeObject.constructor">
      <summary>Stores a constructor function object that defines a prototype-based object.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSScanner">
      <summary>Scans JScript code searching for individual units of code, or tokens. This class belongs to the scanning and parsing category. For more information about scanning and parsing, see Create a Language Compiler for the .NET Framework.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSScanner" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor(Microsoft.JScript.Context)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSScanner" /> class, specifying the source code to scan.</summary>
      <param name="sourceContext">The source code to scan.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentLine">
      <summary>Gets the current line number in the code. This is a pointer that moves as the code is scanned.</summary>
      <returns>The current line number in the code.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentPosition(System.Boolean)">
      <summary>Gets the current position in the code string. This is a pointer that moves as the code is scanned.</summary>
      <returns>The current position in the code string.</returns>
      <param name="absolute">This parameter is ignored.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetNextToken">
      <summary>Scans for the next token in the code.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetSourceCode">
      <summary>Gets the source code that is associated with this scanner object.</summary>
      <returns>The source code to scan.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStartLinePosition">
      <summary>Gets the position in the code string where the first line of the current code starts. All lines of code are stored in a single string. This is a pointer that moves as the code is scanned.</summary>
      <returns>The position in the code string where the first line of the current code starts.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStringLiteral">
      <summary>Gets a string that has been scanned and had all its escape sequences replaced.</summary>
      <returns>A string that has been scanned and had all its escape sequences replaced.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GotEndOfLine">
      <summary>Indicates whether the end of a line was reached after the scanner scans or peeks for a token.</summary>
      <returns>true if the end of the line was reached; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsKeyword(Microsoft.JScript.JSToken)">
      <summary>Determines whether the specified token is a keyword in the JScript language.</summary>
      <returns>true if the token is a keyword; otherwise, false.</returns>
      <param name="token">The token to check.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsOperator(Microsoft.JScript.JSToken)">
      <summary>Determines whether the specified token is an operator in the JScript language.</summary>
      <returns>true if the token is an operator; otherwise, false.</returns>
      <param name="token">The token to check.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetAuthoringMode(System.Boolean)">
      <summary>Sets a flag that indicates whether the scanner is operating in authoring mode.</summary>
      <param name="mode">true to indicate authoring mode; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetSource(Microsoft.JScript.Context)">
      <summary>Sets the source code to scan.</summary>
      <param name="sourceContext">The source code to scan.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SkipMultiLineComment">
      <summary>Skips a comment that spans multiple lines, and advances the pointers that identify the current position in the code.</summary>
      <returns>The new current position in the code string.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSToken">
      <summary>Specifies the individual units of code, or tokens, that make up the JScript language.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.None">
      <summary>No token. For example, before scanning any tokens, or in error situations.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfFile">
      <summary>The end of the file being scanned or parsed. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.If">
      <summary>The if statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.For">
      <summary>The for statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Do">
      <summary>The do statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.While">
      <summary>The while statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Continue">
      <summary>The continue statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Break">
      <summary>The break statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Return">
      <summary>The return statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Import">
      <summary>The import statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.With">
      <summary>The with statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Switch">
      <summary>The switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throw">
      <summary>The throw statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Try">
      <summary>The try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Package">
      <summary>The package statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Internal">
      <summary>The internal modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Abstract">
      <summary>The abstract modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Public">
      <summary>The public modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Static">
      <summary>The static modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Private">
      <summary>The private modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Protected">
      <summary>The protected modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Final">
      <summary>The final modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Event">
      <summary>The event reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Var">
      <summary>The var statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Const">
      <summary>The const statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Class">
      <summary>The class statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Function">
      <summary>The function statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftCurly">
      <summary>The { symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Semicolon">
      <summary>The ; symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Null">
      <summary>The null literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.True">
      <summary>The true literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.False">
      <summary>The false literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.This">
      <summary>The this statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Identifier">
      <summary>An identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StringLiteral">
      <summary>A numeric literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.IntegerLiteral">
      <summary>An integer literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NumericLiteral">
      <summary>A numeric literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftParen">
      <summary>The ( symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftBracket">
      <summary>The [ symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.AccessField">
      <summary>The . field accessor symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalNot">
      <summary>The ! logical NOT operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseNot">
      <summary>The ~ bitwise NOT operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Delete">
      <summary>The delete operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Void">
      <summary>The void operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Typeof">
      <summary>The typeof operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Increment">
      <summary>The ++ increment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decrement">
      <summary>The -- decrement operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstBinaryOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Plus">
      <summary>The + addition operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Minus">
      <summary>The - subtraction operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalOr">
      <summary>The || logical OR operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalAnd">
      <summary>The &amp;&amp; logical AND operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOr">
      <summary>The | bitwise OR operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXor">
      <summary>The ^ bitwise XOR operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAnd">
      <summary>The &amp; bitwise AND operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Equal">
      <summary>The == equality comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NotEqual">
      <summary>The != inequality comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictEqual">
      <summary>The === identity comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictNotEqual">
      <summary>The !== identity comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThan">
      <summary>The &gt; relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThan">
      <summary>The &lt; relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThanEqual">
      <summary>The &lt;= relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThanEqual">
      <summary>The &gt;= relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShift">
      <summary>The &lt;&lt; bitwise left shift operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShift">
      <summary>The &gt;&gt; bitwise right shift operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShift">
      <summary>The &gt;&gt;&gt; unsigned right shift operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Multiply">
      <summary>The * multiplication operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Divide">
      <summary>The / division operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Modulo">
      <summary>The % modulus operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastPPOperator">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastPPOperator then... PPOperators are operations that can be pre-processed.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Instanceof">
      <summary>The instanceof operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.In">
      <summary>The in operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assign">
      <summary>The = assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PlusAssign">
      <summary>The += addition assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MinusAssign">
      <summary>The -= subtraction assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MultiplyAssign">
      <summary>The *= multiplication assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DivideAssign">
      <summary>The /= division assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAndAssign">
      <summary>The &amp;= bitwise AND assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOrAssign">
      <summary>The |= bitwise OR assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXorAssign">
      <summary>The ^= bitwise XOR assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ModuloAssign">
      <summary>The %= modulus assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShiftAssign">
      <summary>The &lt;&lt;= left shift assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShiftAssign">
      <summary>The &gt;&gt;= right shift assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShiftAssign">
      <summary>The &gt;&gt;&gt;= unsigned right shift assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastAssign">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.Assign &lt;= token &amp;&amp; token &lt;= JSToken.LastAssign then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastBinaryOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ConditionalIf">
      <summary>The ? ternary operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Colon">
      <summary>The : ternary operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comma">
      <summary>The , comma operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Case">
      <summary>The case keyword of a switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Catch">
      <summary>The catch keyword of a try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Debugger">
      <summary>The debugger statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Default">
      <summary>The default keyword of a switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Else">
      <summary>The else keyword of an if statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Export">
      <summary>The export reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Extends">
      <summary>The extends keyword of a class statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Finally">
      <summary>The finally keyword of a try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Get">
      <summary>The get keyword of a function get statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Implements">
      <summary>The implements keyword of a class or interface statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Interface">
      <summary>The interface statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.New">
      <summary>The new operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Set">
      <summary>The set keyword of a function set statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Super">
      <summary>The super statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightParen">
      <summary>The ) symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightCurly">
      <summary>The } symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightBracket">
      <summary>The ] symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessorConstant">
      <summary>A preprocessor constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comment">
      <summary>Comment text.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnterminatedComment">
      <summary>An un-terminated comment.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assert">
      <summary>The assert reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Boolean">
      <summary>The boolean data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Byte">
      <summary>The byte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Char">
      <summary>The char data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decimal">
      <summary>The decimal data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Double">
      <summary>The double data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DoubleColon">
      <summary>The :: reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Enum">
      <summary>The enum statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ensure">
      <summary>The ensure reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Float">
      <summary>The float data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Goto">
      <summary>The goto reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Int">
      <summary>The int data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Invariant">
      <summary>The invariant reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Long">
      <summary>The long data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Namespace">
      <summary>The namespace reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Native">
      <summary>The native reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Require">
      <summary>The require reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Sbyte">
      <summary>The sbyte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Short">
      <summary>The short data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Synchronized">
      <summary>The synchronized reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Transient">
      <summary>The transient reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throws">
      <summary>The throws reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ParamArray">
      <summary>The ... reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Volatile">
      <summary>The volatile reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ushort">
      <summary>The ushort data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Uint">
      <summary>The uint data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ulong">
      <summary>The ulong data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Use">
      <summary>The use reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfLine">
      <summary>The end of the line being parsed.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessDirective">
      <summary>A preprocessor directive.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSVariableField">
      <summary>Supports variable fields in JScript. This is the base class for parameters, local variables, global variables, and class members. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of this field.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSVariableField.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array that contains the custom attributes that are attached to this field, or, if there are none, an array that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Name">
      <summary>Gets the name of this field.</summary>
      <returns>The name of this field.</returns>
    </member>
    <member name="T:Microsoft.JScript.LateBinding">
      <summary>Represents a reference to a class member, callable expression, or variable name. This class attempts to resolve the reference to the correct value at run time. </summary>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.LateBinding" /> class, using the specified identifier.</summary>
      <param name="name">A string that identifies the binding reference.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.LateBinding" /> class, using the specified identifier and object.</summary>
      <param name="name">A string that identifies the binding reference.</param>
      <param name="obj">The object that the binding reference is defined on.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Call(System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Resolves the binding reference by calling a member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="construct">true to use the construct method; otherwise, false.</param>
      <param name="brackets">true if the binding reference contains brackets; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Resolves the binding reference by calling a member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="thisob">The object that the binding reference is defined on.</param>
      <param name="val">Information about the member to call.</param>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="construct">true to use the construct method; otherwise, false.</param>
      <param name="brackets">true if the binding reference contains brackets; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue2(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Resolves the binding reference by calling a member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="val">Information about the member to call.</param>
      <param name="thisob">The object that the binding reference is defined on.</param>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="construct">true to use the construct method; otherwise, false.</param>
      <param name="brackets">true if the binding reference contains brackets; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Delete">
      <summary>Deletes the binding reference member from the object that the binding reference is defined on.</summary>
      <returns>true if the member was successfully deleted; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.DeleteMember(System.Object,System.String)">
      <summary>Deletes the specified member from the specified object.</summary>
      <returns>true if the member was successfully deleted; otherwise, false.</returns>
      <param name="obj">The object to delete from.</param>
      <param name="name">The member to delete.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetNonMissingValue">
      <summary>Gets the value of the binding reference, and converts a <see cref="T:Microsoft.JScript.Missing" /> value to null.</summary>
      <returns>The value of the binding reference; otherwise, null.</returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetValue2">
      <summary>Gets the value of the binding reference, and throws an exception if it cannot be resolved.</summary>
      <returns>The value of the binding reference.</returns>
    </member>
    <member name="F:Microsoft.JScript.LateBinding.obj">
      <summary>Stores a reference to the object that the binding reference is defined on.</summary>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetIndexedPropertyValueStatic(System.Object,System.Object[],System.Object)">
      <summary>Sets an indexed property.</summary>
      <param name="obj">The object that the binding reference is defined on.</param>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetValue(System.Object)">
      <summary>Sets a property.</summary>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="T:Microsoft.JScript.LenientArrayPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientArrayPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.concat">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.join">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.pop">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.push">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.reverse">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.shift">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.slice">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.sort">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.splice">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.unshift">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientBooleanPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientBooleanPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDateConstructor">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.DateConstructor" /> class. The <see cref="T:Microsoft.JScript.LenientDateConstructor" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.parse">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.UTC">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDatePrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.DatePrototype" /> class. The <see cref="T:Microsoft.JScript.LenientDatePrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDay">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTime">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTimezoneOffset">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDay">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getVarDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setTime">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toDateString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toGMTString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleDateString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleTimeString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toTimeString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toUTCString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientEnumeratorPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientEnumeratorPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.atEnd">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.item">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveFirst">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveNext">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientErrorPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.ErrorPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientErrorPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.name">
      <summary>Stores a string that contains the name of the subtype of the error.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ErrorPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientFunctionPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientFunctionPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.apply">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.call">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientGlobalObject">
      <summary>Stores constructor function objects, data type information, and objects that represent the static methods of the <see cref="T:Microsoft.JScript.GlobalObject" /> class. The <see cref="T:Microsoft.JScript.LenientGlobalObject" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ActiveXObject">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Array">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ArrayConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.boolean">
      <summary>Stores the managed type that corresponds to the JScript boolean data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Boolean">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.BooleanConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.byte">
      <summary>Stores the managed type that corresponds to the JScript byte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.char">
      <summary>Stores the managed type that corresponds to the JScript char data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Date">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.LenientDateConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.LenientDateConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decimal">
      <summary>Stores the managed type that corresponds to the JScript decimal data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURI">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURIComponent">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.double">
      <summary>Stores the managed type that corresponds to the JScript double data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURI">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURIComponent">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Enumerator">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Error">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.escape">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.eval">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.EvalError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.float">
      <summary>Stores the managed type that corresponds to the JScript float data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Function">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.FunctionConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.GetObject">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.Infinity">
      <summary>Represents positive infinity.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.int">
      <summary>Stores the managed type that corresponds to the JScript int data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isFinite">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isNaN">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.long">
      <summary>Stores the managed type that corresponds to the JScript long data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Math">
      <summary>Gets or sets a <see cref="T:Microsoft.JScript.LenientMathObject" /> object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.LenientMathObject" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.NaN">
      <summary>Represents a value that is not a number (NaN).</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Number">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.NumberConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Object">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ObjectConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseFloat">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseInt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RangeError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ReferenceError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RegExp">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.RegExpConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.sbyte">
      <summary>Stores the managed type that corresponds to the JScript sbyte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngine">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineBuildVersion">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMajorVersion">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMinorVersion">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.short">
      <summary>Stores the managed type that corresponds to the JScript short data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.String">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.LenientStringConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.LenientStringConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.SyntaxError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.TypeError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.uint">
      <summary>Stores the managed type that corresponds to the JScript uint data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ulong">
      <summary>Stores the managed type that corresponds to the JScript ulong data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.undefined">
      <summary>Represents a value that is null.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.unescape">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.URIError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ushort">
      <summary>Stores the managed type that corresponds to the JScript ushort data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.VBArray">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.void">
      <summary>Stores the managed type that corresponds to the return value of a function that does not return a value.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientMathObject">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.MathObject" /> class. The <see cref="T:Microsoft.JScript.LenientMathObject" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.abs">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.acos">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.asin">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan2">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.ceil">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.cos">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.E">
      <summary>Stores a value that represents Euler's constant, the base of the natural logarithm, specified by the constant e.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.exp">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.floor">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN10">
      <summary>Stores a value that represents the logarithm base e of 10, the natural logarithm of 10.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN2">
      <summary>Stores a value that represents the logarithm base e of 2, the natural logarithm of 2.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.log">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG10E">
      <summary>Stores a value that represents the logarithm base 10 of e, the common logarithm of e.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG2E">
      <summary>Stores a value that represents the logarithm base 2 of e, the binary logarithm of e.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.max">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.min">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.PI">
      <summary>Stores a value that represents the ratio of the circumference of a circle to its diameter, specified by the constant π.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.pow">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.random">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.random" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.round">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sin">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sqrt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT1_2">
      <summary>Stores a value that represents the following equivalent values: (√2)/2, √(½), and 1/(√2).</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT2">
      <summary>Stores a value that represents √2.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.tan">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientNumberPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientNumberPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toExponential">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toFixed">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toPrecision">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientObjectPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientObjectPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.hasOwnProperty">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.isPrototypeOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.propertyIsEnumerable">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientRegExpPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientRegExpPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.compile">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.exec">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.test">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringConstructor">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.StringConstructor" /> class. The <see cref="T:Microsoft.JScript.LenientStringConstructor" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringConstructor.fromCharCode">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringConstructor" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.StringPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientStringPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.anchor">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.big">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.blink">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.bold">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charAt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charCodeAt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.concat">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fixed">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontcolor">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontsize">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.indexOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.italics">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.lastIndexOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.link">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.localeCompare">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.match">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.replace">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.search">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.slice">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.small">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.split">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.strike">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sub">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substr">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substring">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sup">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleLowerCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleUpperCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLowerCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toUpperCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientVBArrayPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientVBArrayPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.dimensions">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.getItem">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.lbound">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.toArray">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.ubound">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.MathObject">
      <summary>Provides constants and static methods for trigonometric functions, logarithmic functions, and other common mathematical functions. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.abs(System.Double)">
      <summary>Calculates the absolute value of the specified number.</summary>
      <returns>The absolute value of <paramref name="d" />.</returns>
      <param name="d">The number to calculate the absolute value of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.acos(System.Double)">
      <summary>Calculates the inverse cosine of the specified number.</summary>
      <returns>The inverse cosine of <paramref name="x" />, measured in radians.</returns>
      <param name="x">The number to calculate the inverse cosine of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.asin(System.Double)">
      <summary>Calculates the inverse sine of the specified number.</summary>
      <returns>The inverse sine of <paramref name="x" />, measured in radians.</returns>
      <param name="x">The number to calculate the inverse sine of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan(System.Double)">
      <summary>Calculates the inverse tangent of the specified number.</summary>
      <returns>The inverse tangent of <paramref name="x" />, measured in radians.</returns>
      <param name="x">The number to calculate the inverse tangent of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)">
      <summary>Calculates the inverse tangent of the quotient of the specified numbers.</summary>
      <returns>The inverse tangent of <paramref name="dy" />/<paramref name="dx" />, measured in radians.</returns>
      <param name="dy">The numerator of the quotient to calculate the inverse tangent of.</param>
      <param name="dx">The denominator of the quotient to calculate the inverse tangent of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.ceil(System.Double)">
      <summary>Calculates the ceiling of the specified number, which is the smallest integer that is greater than or equal to the specified number.</summary>
      <returns>The ceiling of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the ceiling of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.cos(System.Double)">
      <summary>Calculates the cosine of the specified angle.</summary>
      <returns>The cosine of <paramref name="x" />.</returns>
      <param name="x">An angle, measured in radians.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.E">
      <summary>Stores a value that represents Euler's constant, which is the base of the natural logarithm, specified by the constant e.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.exp(System.Double)">
      <summary>Calculates the number e to the raised specified power, where e is Euler's constant, the base of the natural logarithm.</summary>
      <returns>The number e raised to the <paramref name="x" /> power.</returns>
      <param name="x">The power to raise e to.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.floor(System.Double)">
      <summary>Calculates the floor of the specified number, which is the largest integer that is less than or equal to the specified number.</summary>
      <returns>The floor of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the floor of.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN10">
      <summary>Stores a value that represents the logarithm base e of 10, the natural logarithm of 10.</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN2">
      <summary>Stores a value that represents the logarithm base e of 2, the natural logarithm of 2.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.log(System.Double)">
      <summary>Calculates the logarithm base e of the specified number, which is the natural logarithm of the specified number.</summary>
      <returns>The natural logarithm of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the natural logarithm of.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG10E">
      <summary>Stores a value that represents the logarithm base 10 of e, the common logarithm of e.</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG2E">
      <summary>Stores a value that represents the logarithm base 2 of e, the binary logarithm of e.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])">
      <summary>Returns the largest of two or more specified numbers.</summary>
      <returns>The largest of <paramref name="x" />, <paramref name="y" />, and the numbers that are contained in <paramref name="args" />.</returns>
      <param name="x">The first number to compare.</param>
      <param name="y">The second number to compare.</param>
      <param name="args">Additional numbers to compare.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])">
      <summary>Returns the smallest of two or more specified numbers.</summary>
      <returns>The smallest of <paramref name="x" />, <paramref name="y" />, and the numbers that are contained in <paramref name="args" />.</returns>
      <param name="x">The first number to compare.</param>
      <param name="y">The second number to compare.</param>
      <param name="args">Additional numbers to compare.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.PI">
      <summary>Stores a value that represents the ratio of the circumference of a circle to its diameter, specified by the constant π.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)">
      <summary>Calculates the specified number raised to the specified power.</summary>
      <returns>The number <paramref name="dx" /> raised to the <paramref name="dy" /> power.</returns>
      <param name="dx">The number to raise to the <paramref name="dy" /> power.</param>
      <param name="dy">The power to raise <paramref name="dx" /> to.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.random">
      <summary>Generates a random number between 0 and 1. This method does not generate a cryptographically secure random number.</summary>
      <returns>A number that is greater than or equal to 0, and less than 1.</returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.round(System.Double)">
      <summary>Rounds the specified number down or up to the nearest integer.</summary>
      <returns>If the fractional part of <paramref name="d" /> is less than halfway to the next integer, <paramref name="d" /> rounded down. If the fractional part of <paramref name="d" /> is halfway or more to the next integer, <paramref name="d" /> rounded up.</returns>
      <param name="d">The number to round.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sin(System.Double)">
      <summary>Calculates the sine of the specified angle.</summary>
      <returns>The sine of <paramref name="x" />.</returns>
      <param name="x">An angle, measured in radians.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sqrt(System.Double)">
      <summary>Calculates the square root of the specified number.</summary>
      <returns>The square root of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the square root of.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT1_2">
      <summary>Stores a value that represents the following equivalent values: (√2)/2, √(½), and 1/(√2).</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT2">
      <summary>Stores a value that represents √2.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.tan(System.Double)">
      <summary>Calculates the tangent of the specified angle.</summary>
      <returns>The tangent of <paramref name="x" />.</returns>
      <param name="x">An angle, measured in radians.</param>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoInitializer">
      <summary>Defines methods that an external COM object must implement. This interface is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> to bind to an external object. This interface is implemented by <see cref="T:Microsoft.JScript.COMFieldInfo" />, <see cref="T:Microsoft.JScript.COMMethodInfo" />, and <see cref="T:Microsoft.JScript.COMPropertyInfo" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.GetCOMMemberInfo">
      <summary>When implemented in a class, gets a managed object that enables JScript to communicate with an external COM member.</summary>
      <returns>A managed object that enables JScript to communicate with an external COM member.</returns>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>When implemented in a class, initializes the information that enables JScript to communicate with the specified external COM member.</summary>
      <param name="name">The name of the external COM member.</param>
      <param name="dispatch">Information that enables JScript to call, get, and set the external COM member.</param>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoList">
      <summary>Maintains a list of <see cref="T:System.Reflection.MemberInfo" /> elements.</summary>
    </member>
    <member name="T:Microsoft.JScript.MethodInvoker">
      <summary>Represents the invoker for a particular method. Used by the <see cref="T:Microsoft.JScript.JSMethodInfo" /> class to invoke methods.</summary>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.MethodInvoker" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.Invoke(System.Object,System.Object[])">
      <summary>When overridden in a derived class, invokes the method.</summary>
      <returns>The result of invoking the method.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="parameters">The arguments to use for the method.</param>
    </member>
    <member name="T:Microsoft.JScript.Missing">
      <summary>Represents the value of a variable that has been instantiated but that has not yet had its value set.</summary>
    </member>
    <member name="F:Microsoft.JScript.Missing.Value">
      <summary>Specifies the value of a variable that has been instantiated but that has not yet had its value set.</summary>
    </member>
    <member name="T:Microsoft.JScript.Namespace">
      <summary>Represents a namespace.</summary>
    </member>
    <member name="M:Microsoft.JScript.Namespace.GetNamespace(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates and returns a new instance of the <see cref="T:Microsoft.JScript.Namespace" /> class.</summary>
      <returns>A new instance of the <see cref="T:Microsoft.JScript.Namespace" /> class.</returns>
      <param name="name">The name of the namespace.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.NoContextException">
      <summary>The exception that is thrown when there is no code <see cref="T:Microsoft.JScript.Context" /> associated with a <see cref="T:Microsoft.JScript.JScriptException" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class, using the specified serialized data.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.JScript.NotRecommended">
      <summary>Indicates that a method or field is not recommended.</summary>
    </member>
    <member name="M:Microsoft.JScript.NotRecommended.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NotRecommended" /> attribute class.</summary>
      <param name="message">The name of the method or field that is not recommended.</param>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.IsError">
      <summary>Gets a value that indicates whether using a method or field that is not recommended is an error.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.Message">
      <summary>Gets the name of the method or field that is not recommended.</summary>
      <returns>The name of the method or field that is not recommended.</returns>
    </member>
    <member name="T:Microsoft.JScript.NumberConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.Invoke(System.Object)">
      <summary>Converts the specified object to a number.</summary>
      <returns>
        <paramref name="arg" /> expressed as a number, if that is possible.</returns>
      <param name="arg">The object to convert.</param>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MAX_VALUE">
      <summary>Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MIN_VALUE">
      <summary>Represents the smallest positive <see cref="T:System.Double" /> value that is greater than zero. This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NaN">
      <summary>Represents a value that is not a number (NaN). This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NEGATIVE_INFINITY">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.POSITIVE_INFINITY">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="T:Microsoft.JScript.NumberObject">
      <summary>Represents a number object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.#ctor(Microsoft.JScript.ScriptObject,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NumberObject" /> class.</summary>
      <param name="parent">The parent of the object.</param>
      <param name="value">The underlying value that the class represents.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.GetType">
      <summary>Returns the type of the underlying value object, or returns <see cref="T:Microsoft.JScript.NumberObject" />.</summary>
      <returns>The type of the underlying value object, or <see cref="T:Microsoft.JScript.NumberObject" />.</returns>
    </member>
    <member name="T:Microsoft.JScript.NumberPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.NumberObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.NumberPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.NumberObject" /> that uses scientific (E) notation.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="fractionDigits">A number between 0 and 20 that represents the number of decimal places to display. The default is 16.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.NumberObject" /> that displays the specified number of decimal digits.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="fractionDigits">A number between 0 and 20 that represents the number of decimal places to display. The default is 0.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified object that is based on <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> and <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.NumberObject" /> that displays the specified number of precision digits.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="precision">A number between 0 and 21 that represents the number of precision digits to display. Precision digits are the digits of the decimal and the exponent combined.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="radix">A number between 2 and 36 that represents the base of the number system that <paramref name="thisob" /> is expressed in. The default is 10.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)">
      <summary>Returns the value of the specified <see cref="T:Microsoft.JScript.NumberObject" />.</summary>
      <returns>The value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.NumericBinary">
      <summary>Performs binary operations on numeric operands. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NumericBinary" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.DoOp(System.Object,System.Object,Microsoft.JScript.JSToken)">
      <summary>Performs the specified binary operation on the specified numeric operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.EvaluateNumericBinary(System.Object,System.Object)">
      <summary>Performs a binary operation on the specified numeric operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.NumericUnary">
      <summary>Performs unary operations on numeric operands. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NumericUnary" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.EvaluateUnary(System.Object)">
      <summary>Performs a unary operation on a numeric operand.</summary>
      <returns>The result of the operation.</returns>
      <param name="v">The operand.</param>
    </member>
    <member name="T:Microsoft.JScript.ObjectConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.ConstructObject">
      <summary>Creates an instance of the prototype-based object.</summary>
      <returns>The instance of the object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.Invoke(System.Object[])">
      <summary>Invokes a method of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="args">The arguments to pass to the method.</param>
    </member>
    <member name="T:Microsoft.JScript.ObjectPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.JSObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.ObjectPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)">
      <summary>Determines whether the specified object contains the specified property.</summary>
      <returns>true if <paramref name="name" /> is a property of <paramref name="thisob" /> and has been set; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="name">The property to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)">
      <summary>Determines whether the first specified object can be instantiated as the type of the second specified object.</summary>
      <returns>true if <paramref name="ob" /> is in the inheritance hierarchy of <paramref name="thisob" />; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="ob">The object that has the desired type.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)">
      <summary>Determines whether the specified property of the specified object is enumerable.</summary>
      <returns>true if <paramref name="name" /> is an enumerable property; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="name">The property to test.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified object by using the <see cref="T:Microsoft.JScript.Convert" /> class.</summary>
      <returns>A string representation of <paramref name="thisob" /> that is created by the <see cref="T:Microsoft.JScript.Convert" /> class.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>The name of the class of the object, if it has one defined; otherwise, the <see cref="P:System.Reflection.MemberInfo.Name" /> of the <see cref="T:System.Type" /> of the object.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)">
      <summary>Returns the specified object.</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.Override">
      <summary>Indicates that a method or field overrides a method or field in a base class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Override.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Override" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.Package">
      <summary>Creates packages of JScript code for use by other code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Package.JScriptPackage(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates the specified package by using the specified scripting engine.</summary>
      <param name="rootName">The name of the package.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.ParserException">
      <summary>This class is used by the JScript parser to represent parser exceptions.</summary>
    </member>
    <member name="T:Microsoft.JScript.Plus">
      <summary>Performs addition and concatenation operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Plus.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Plus" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Plus.DoOp(System.Object,System.Object)">
      <summary>Performs an addition or concatenation operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Plus.EvaluatePlus(System.Object,System.Object)">
      <summary>Performs an addition or concatenation operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.PostOrPrefixOperator">
      <summary>Performs increment and decrement operations that correspond to the prefix and postfix syntax. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.PostOrPrefixOperator" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.EvaluatePostOrPrefix(System.Object@)">
      <summary>Performs an increment or decrement operation on the specified operand.</summary>
      <returns>The result of the operation.</returns>
      <param name="v">The operand.</param>
    </member>
    <member name="T:Microsoft.JScript.RangeErrorObject">
      <summary>Represents a range error. For example, a range error can occur when you use an incorrect index to access an array element.</summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceAttribute">
      <summary>Represents a reference to an assembly.</summary>
    </member>
    <member name="M:Microsoft.JScript.ReferenceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReferenceAttribute" /> class.</summary>
      <param name="reference">The reference to the assembly.</param>
    </member>
    <member name="F:Microsoft.JScript.ReferenceAttribute.reference">
      <summary>Specifies the reference to the assembly.</summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceErrorObject">
      <summary>Represents a reference error. For example, a reference error can occur when you reference an undeclared variable.</summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Construct(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.RegExpObject" /> object for the specified regular expression pattern and flags.</summary>
      <returns>A new <see cref="T:Microsoft.JScript.RegExpObject" /> object.</returns>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="ignoreCase">true to use case-insensitive matching; otherwise, false.</param>
      <param name="global">true to use a global match; otherwise, false.</param>
      <param name="multiline">true to use a multiline match; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.index">
      <summary>Gets the index of the last successful match, before advancing the index.</summary>
      <returns>The index of the last successful match, if there was one. </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.input">
      <summary>Gets or sets the input string for a regular expression search.</summary>
      <returns>The input string for a regular expression search.</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Invoke(System.Object[])">
      <summary>Creates an instance of a prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastIndex">
      <summary>Gets the index of the last successful match, after advancing the index.</summary>
      <returns>The index of the last successful match, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastMatch">
      <summary>Gets a string representation of the last successful match.</summary>
      <returns>A string representation of the last successful match, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastParen">
      <summary>Gets the last <see cref="T:System.Text.RegularExpressions.Group" /> from the <see cref="P:System.Text.RegularExpressions.Match.Groups" /> of the last match.</summary>
      <returns>A string representation of the last group, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.leftContext">
      <summary>Gets a substring of the input string between the start of the input and the start of the last successful match.</summary>
      <returns>A substring of the input string, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.rightContext">
      <summary>Gets a substring of the input string between the start of the last successful match and the end of the input.</summary>
      <returns>A substring of the input string, if there was one.</returns>
    </member>
    <member name="T:Microsoft.JScript.RegExpMatch">
      <summary>Represents the results from a regular expression match. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpObject">
      <summary>Represents a regular expression object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.global">
      <summary>Gets a value indicating whether searches are performed with the global flag (/g), matching all occurrences.</summary>
      <returns>true if global searches are performed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.ignoreCase">
      <summary>Gets a value indicating whether searches are performed with the case-insensitive flag (/i).</summary>
      <returns>true if case-insensitive searches are performed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.lastIndex">
      <summary>Gets or sets the index of the last successful match.</summary>
      <returns>The index of the last successful match, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.multiline">
      <summary>Gets a value indicating whether searches are performed with the multiline flag (/m).</summary>
      <returns>true if searches are performed in multiline mode; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.source">
      <summary>Gets the regular expression pattern that is represented by this object.</summary>
      <returns>The regular expression pattern that is represented by this object.</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpObject.ToString">
      <summary>Creates a string representation of this object that contains the regular expression pattern and flags.</summary>
      <returns>A string representation of this object.</returns>
    </member>
    <member name="T:Microsoft.JScript.RegExpPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.RegExpObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)">
      <summary>Creates and compiles a new <see cref="T:Microsoft.JScript.RegExpObject" /> object for the specified regular expression pattern and flags.</summary>
      <returns>A new <see cref="T:Microsoft.JScript.RegExpObject" /> object.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="source">The regular expression pattern to search for.</param>
      <param name="flags">Flags for the ignore case, global, and multiline modes.</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the specified object.</summary>
      <returns>The result of the search for the regular expression pattern.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="input">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)">
      <summary>Tests the search for the specified regular expression pattern on the specified object.</summary>
      <returns>true if the search succeeds; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="input">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object that contains the regular expression pattern and flags.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.Relational">
      <summary>Performs relational comparison operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Relational.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Relational" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the comparison to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.Relational.EvaluateRelational(System.Object,System.Object)">
      <summary>Performs a relational comparison operation on the specified operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Relational.JScriptCompare(System.Object,System.Object)">
      <summary>Performs a relational comparison operation on the specified operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.ReturnOutOfFinally">
      <summary>Represents the exception state when code execution returns out of a finally block.  </summary>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.JScript.Runtime">
      <summary>Provides utility functions.</summary>
    </member>
    <member name="M:Microsoft.JScript.Runtime.DoubleToInt64(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> value to an <see cref="T:System.Int64" />.</summary>
      <returns>
        <paramref name="val" /> converted to an <see cref="T:System.Int64" />.</returns>
      <param name="val">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Runtime.Equals(System.Object,System.Object)">
      <summary>Determines whether two specified values are equal.</summary>
      <returns>true if the values are equal; false if the values are not equal.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Runtime.UncheckedDecimalToInt64(System.Decimal)">
      <summary>Converts the specified <see cref="T:System.Decimal" /> value to an <see cref="T:System.Int64" />.</summary>
      <returns>
        <paramref name="val" /> converted to an <see cref="T:System.Int64" />.</returns>
      <param name="val">The value to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.ScriptBlock">
      <summary>Represents a block of JScript code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="T:Microsoft.JScript.ScriptFunction">
      <summary>Represents a prototype-based object that is defined by a constructor function. Most of the constructor function classes, such as <see cref="T:Microsoft.JScript.DateConstructor" />, <see cref="T:Microsoft.JScript.NumberConstructor" />, <see cref="T:Microsoft.JScript.StringConstructor" />, and <see cref="T:Microsoft.JScript.ObjectConstructor" />, inherit from this class. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ScriptFunction" /> class.</summary>
      <param name="parent">The parent prototype of the object that this function constructs.</param>
      <param name="name">The name of the object that this function constructs.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.GetPrototypeForConstructedObject">
      <summary>Gets the prototype object for this constructor function.</summary>
      <returns>The prototype object for this constructor function.</returns>
    </member>
    <member name="F:Microsoft.JScript.ScriptFunction.ilength">
      <summary>Stores the number of elements that are in the <paramref name="args" /> parameter of the <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> method.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.Invoke(System.Object,System.Object[])">
      <summary>Invokes a method of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The arguments to pass to the method.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="target">The object on which to invoke the member. This must be the current script object.</param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name="modifiers">An array that has the same length as the <paramref name="args" /> parameter. It represents the invoked member's argument attributes in the metadata.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
      <param name="namedParameters">An array of parameters.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.length">
      <summary>Gets or sets the number of elements that are in the <paramref name="args" /> parameter of the <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> method.</summary>
      <returns>The number of elements that are in the <paramref name="args" /> parameter of the <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> method.</returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.prototype">
      <summary>Gets or sets the prototype object for this constructor function.</summary>
      <returns>The prototype object for this constructor function.</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.ToString">
      <summary>Returns a string representation of the constructor function.</summary>
      <returns>A string that contains the name of the constructor function and a placeholder for the code.</returns>
    </member>
    <member name="T:Microsoft.JScript.ScriptObject">
      <summary>Supports all JScript classes. This is the ultimate base class of all JScript classes. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.engine">
      <summary>Stores a reference to the scripting engine.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a field that has the specified name.</summary>
      <returns>A field that has the specified <paramref name="name" />, or null if the script object does not contain the field.</returns>
      <param name="name">The name of the field to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the current script object.</summary>
      <returns>An array of objects that contains all fields of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current script object.</summary>
      <returns>An array of objects that contains all members of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a method that has the specified name.</summary>
      <returns>A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a method that has the specified name by using the specified selection criteria.</summary>
      <returns>A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</returns>
      <param name="name">The name of the method to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="types">The parameter types that are used to locate a matching method.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the current script object.</summary>
      <returns>An array of objects that contains all methods of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetParent">
      <summary>Gets a reference to the parent object.</summary>
      <returns>A reference to the parent object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the current script object.</summary>
      <returns>An array of objects that contains all properties of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a property that has the specified name.</summary>
      <returns>A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a property that has the specified name by using the specified selection criteria.</summary>
      <returns>A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</returns>
      <param name="name">The name of the property to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="returnType">The type of the return value that the property must have.</param>
      <param name="types">The index types of the property being searched for. Used for index properties, such as the indexer for a class.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="target">The object on which to invoke the member. This must be the current script object.</param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name="modifiers">An array that has the same length as the args parameter. It represents the invoked member's argument attributes in the metadata.</param>
      <param name="locale">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
      <param name="namedParameters">An array of parameters.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Double)">
      <summary>Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Double" /> index value.</summary>
      <returns>The value of the member that is at <paramref name="index" />.</returns>
      <param name="index">The index of the member.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Int32)">
      <summary>Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Int32" /> index value.</summary>
      <returns>The value of the member that is at <paramref name="index" />.</returns>
      <param name="index">The index of the member.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Object[])">
      <summary>Gets or sets a member of the script object that is designated by the specified name, <see cref="T:System.Double" /> index value, or <see cref="T:System.Int32" /> index value.</summary>
      <returns>The value of the member that is specified in <paramref name="pars" />.</returns>
      <param name="pars">The name or index of the member.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.String)">
      <summary>Gets or sets a member of the script object that is designated by the specified name.</summary>
      <returns>The value of the member that is named <paramref name="name" />.</returns>
      <param name="name">The name of the member.</param>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.parent">
      <summary>Stores a reference to the parent object.</summary>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.UnderlyingSystemType">
      <summary>Gets the type of the script object.</summary>
      <returns>The type of the script object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)">
      <summary>Creates a wrapped object that contains the specified member together with the specified object.</summary>
      <returns>A one-element array that has a wrapped object that contains the member information and <paramref name="obj" />.</returns>
      <param name="member">The member to wrap.</param>
      <param name="obj">The object that <paramref name="member" /> is defined on.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)">
      <summary>Creates an array of wrapped objects that contain the specified members together with the specified object.</summary>
      <returns>An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</returns>
      <param name="members">The members to wrap.</param>
      <param name="obj">The object that <paramref name="members" /> are defined on.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)">
      <summary>Creates an array of wrapped objects that contain the specified members together with the specified object, caching the results in the specified data storage.</summary>
      <returns>An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</returns>
      <param name="members">The members to wrap.</param>
      <param name="obj">The object that <paramref name="members" /> are defined on.</param>
      <param name="cache">Temporary data storage for the wrapped objects.</param>
    </member>
    <member name="T:Microsoft.JScript.ScriptStream">
      <summary>Represents a stream of data. This class sends its data to either a <see cref="T:Microsoft.JScript.COMCharStream" /> or a <see cref="T:System.Console" /> stream. </summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ScriptStream" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Error">
      <summary>Stores a reference to either the standard console <see cref="P:System.Console.Error" /> stream or a custom <see cref="T:Microsoft.JScript.COMCharStream" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Out">
      <summary>Stores a reference to either the standard console <see cref="P:System.Console.Out" /> stream or a custom <see cref="T:Microsoft.JScript.COMCharStream" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace">
      <summary>Writes a string that describes the current contents of the call stack. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace(System.Exception)">
      <summary>Writes a string that describes the contents of the call stack at the time the specified exception was thrown. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
      <param name="e">The exception that was thrown.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.Write(System.String)">
      <summary>Writes the specified string to the stream. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
      <param name="str">The string to write to the stream.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.WriteLine(System.String)">
      <summary>Writes the specified string to the stream, followed by the line terminator. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
      <param name="str">The string to write to the stream.</param>
    </member>
    <member name="T:Microsoft.JScript.SimpleHashtable">
      <summary>A hash table for the internal storage of items.</summary>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.SimpleHashtable" /> class, using the specified threshold.</summary>
      <param name="threshold">The number of items at which the hash table must be resized.</param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.GetEnumerator">
      <summary>Gets an enumerator for the hash table.</summary>
      <returns>An enumerator for the hash table.</returns>
    </member>
    <member name="P:Microsoft.JScript.SimpleHashtable.Item(System.Object)">
      <summary>Gets or sets the item that has the specified key.</summary>
      <returns>The value of the item that has the specified <paramref name="key" />.</returns>
      <param name="key">The key of the item to get or set.</param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.Remove(System.Object)">
      <summary>Removes the item with the specified key from the hash table.</summary>
      <param name="key">The key of the item to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.SourceState">
      <summary>Specifies the state of source code text. This class is used together with other classes that provide information to color JScript code in an editor.</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_NORMAL">
      <summary>Normal text.</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_COMMENT">
      <summary>Comment text.</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_STRING">
      <summary>String literal text.</summary>
    </member>
    <member name="T:Microsoft.JScript.StackFrame">
      <summary>Represents a stack frame for executing code. This class contains methods for resolving scope. It belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.closureInstance">
      <summary>Stores a reference to the caller of the current stack frame.</summary>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetDefaultThisObject">
      <summary>Gets the current default scope, which will be either the contained object of a with statement scope, or the global scope.</summary>
      <returns>The current default scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetField(System.String,System.Int32)">
      <summary>Gets a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetGlobalScope">
      <summary>Gets the global scope by searching the scope hierarchy until it finds a scope that includes static variables, for example, a module scope.</summary>
      <returns>The global scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The member name to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current object.</summary>
      <returns>An array of objects that contains all members of the current object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMemberValue(System.String,System.Int32)">
      <summary>Gets the value of the specified member by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>The value of the member <paramref name="name" />.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="lexlevel">The lexical level to search.</param>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.localVars">
      <summary>Stores the local variables for this stack frame.</summary>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.Microsoft#JScript#IActivationObject#GetLocalField(System.String)">
      <summary>Gets the local declaration of a field that has the specified name. This method is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForMethod(System.Object,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.StackFrame" /> object for a method and pushes it onto the global scope stack.</summary>
      <param name="thisob">The object that contains the method.</param>
      <param name="fields">The local variables for the stack frame.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForStaticMethod(System.RuntimeTypeHandle,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.StackFrame" /> object for a static method and pushes it onto the global scope stack.</summary>
      <param name="thisclass">The class that contains the static method.</param>
      <param name="fields">The local variables for the stack frame.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.StrictEquality">
      <summary>Performs comparison operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StrictEquality.JScriptStrictEquals(System.Object,System.Object)">
      <summary>Performs a comparison operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.StringConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])">
      <summary>Converts each element of the specified array to a character and concatenates them.</summary>
      <returns>A string representation of <paramref name="arg" />.</returns>
      <param name="args">The elements to convert to a string.</param>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.Invoke(System.Object)">
      <summary>Converts the specified object to a string.</summary>
      <returns>A string representation of <paramref name="arg" />.</returns>
      <param name="arg">The object to convert to a string.</param>
    </member>
    <member name="T:Microsoft.JScript.StringObject">
      <summary>Represents a string object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StringObject.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.StringObject" /> class. </summary>
      <param name="prototype">The parent of the object.</param>
      <param name="value">The underlying value that the class represents.</param>
    </member>
    <member name="M:Microsoft.JScript.StringObject.Equals(System.Object)">
      <summary>Determines whether this string and the specified string have the same value.</summary>
      <returns>true if this string and <paramref name="ob" /> have the same value; otherwise, false.</returns>
      <param name="ob">The string to compare.</param>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A hash code for this string.</returns>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetType">
      <summary>Returns <see cref="T:System.String" /> or <see cref="T:Microsoft.JScript.StringObject" />.</summary>
      <returns>
        <see cref="T:System.String" /> or <see cref="T:Microsoft.JScript.StringObject" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.StringObject.length">
      <summary>Gets the number of characters in the string.</summary>
      <returns>The number of characters in the string.</returns>
    </member>
    <member name="T:Microsoft.JScript.StringPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.StringObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in anchor tags, and gives the anchor element the specified name attribute.</summary>
      <returns>A string in the form "&lt;A NAME=\""+ <paramref name="anchorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="anchorName">The name attribute of the anchor element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.big(System.Object)">
      <summary>Converts the specified object to text enclosed in bigger text markup tags.</summary>
      <returns>A string in the form "&lt;BIG&gt;"+ <paramref name="thisob" /> +"&lt;/BIG&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.blink(System.Object)">
      <summary>Converts the specified object to text enclosed in blink markup tags.</summary>
      <returns>A string in the form "&lt;BLINK&gt;"+ <paramref name="thisob" /> +"&lt;/BLINK&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.bold(System.Object)">
      <summary>Converts the specified object to text enclosed in bold text markup tags.</summary>
      <returns>A string in the form "&lt;B&gt;"+ <paramref name="thisob" /> +"&lt;/B&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)">
      <summary>Returns the character at the specified position in the specified object.</summary>
      <returns>The character at <paramref name="pos" />, if there is one.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="pos">The position of the character to return.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)">
      <summary>Returns the ASCII code of the character at the specified position in the specified object.</summary>
      <returns>The code of the character at <paramref name="pos" />, if there is one.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="pos">The position of the character whose code you want to return.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])">
      <summary>Appends the specified arguments to the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" />, with <paramref name="args" /> appended.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The arguments to append to <paramref name="thisob" />.</param>
    </member>
    <member name="P:Microsoft.JScript.StringPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fixed(System.Object)">
      <summary>Converts the specified object to text enclosed in fixed-width text markup tags.</summary>
      <returns>A string in the form "&lt;TT&gt;"+ <paramref name="thisob" /> +"&lt;/TT&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in font tags, and gives the element the specified color attribute.</summary>
      <returns>A string in the form "&lt;FONT COLOR=\""+ <paramref name="colorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="colorName">The color attribute of the font element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in font tags, and gives the element the specified size attribute.</summary>
      <returns>A string in the form "&lt;FONT SIZE=\""+ <paramref name="fontSize" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="fontSize">The size attribute of the font element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)">
      <summary>Searches for the first occurrence of the specified string in the specified object, starting from the specified character position.</summary>
      <returns>The position of the first occurrence of <paramref name="searchString" />, if it is found.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="searchString">The string to search for.</param>
      <param name="position">The position at which to start the search.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.italics(System.Object)">
      <summary>Converts the specified object to text enclosed in italic text markup tags.</summary>
      <returns>A string in the form "&lt;I&gt;"+ <paramref name="thisob" /> +"&lt;/I&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)">
      <summary>Searches for the last occurrence of the specified string in the specified object, starting from the specified character position.</summary>
      <returns>The position of the last occurrence of <paramref name="searchString" />, if it is found.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="searchString">The string to search for.</param>
      <param name="position">The position at which to start the search.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in anchor tags, and gives the anchor element the link target attribute that is specified.</summary>
      <returns>A string in the form "&lt;A HREF=\""+ <paramref name="linkRef" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="linkRef">The target attribute of the anchor element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)">
      <summary>Compares the two specified strings and returns an integer that indicates the lexical relationship between them.</summary>
      <returns>A negative value when <paramref name="thisob" /> is less than <paramref name="thatob" />; zero when <paramref name="thisob" /> equals <paramref name="thatob" />; a positive value when <paramref name="thisob" /> is greater than <paramref name="thatob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="thatob">The string to compare to <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the specified object.</summary>
      <returns>The result of the search for the regular expression pattern.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="regExp">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the first specified object, and replaces any matches with the third specified object.</summary>
      <returns>The new string, after the replacement is made.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="regExp">The regular expression pattern to search for.</param>
      <param name="replacement">The replacement for any matches.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the specified object.</summary>
      <returns>If the search is successful, the index of the match; otherwise, -1.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="regExp">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)">
      <summary>Creates a new string that contains the specified consecutive characters from the specified string.</summary>
      <returns>A new string that contains the consecutive characters between <paramref name="start" /> and <paramref name="end" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="start">The first consecutive character to get.</param>
      <param name="end">The last consecutive character to get.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.small(System.Object)">
      <summary>Converts the specified object to text enclosed in smaller text markup tags.</summary>
      <returns>A string in the form "&lt;SMALL&gt;"+ <paramref name="thisob" /> +"&lt;/SMALL&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)">
      <summary>Returns an array that contains the substrings in the specified object that are delimited by the specified characters. The number of substrings in the array is constrained by the specified limit.</summary>
      <returns>An array that contains the substrings in <paramref name="thisob" /> that are delimited by <paramref name="separator" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="separator">The characters that delimit the substrings in <paramref name="thisob" />.</param>
      <param name="limit">The maximum number of substrings to return.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.strike(System.Object)">
      <summary>Converts the specified object to text enclosed in strikethrough markup tags.</summary>
      <returns>A string in the form "&lt;STRIKE&gt;"+ <paramref name="thisob" /> +"&lt;/STRIKE&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sub(System.Object)">
      <summary>Converts the specified object to text enclosed in subscript markup tags.</summary>
      <returns>A string in the form "&lt;SUB&gt;"+ <paramref name="thisob" /> +"&lt;/SUB&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)">
      <summary>Creates a new string that contains the specified number of consecutive characters from the specified string, starting from the specified character position. Use <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> instead, if you can.</summary>
      <returns>A new string that contains <paramref name="count" /> consecutive characters, starting at <paramref name="start" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="start">The first consecutive character to get.</param>
      <param name="count">The number of characters to get.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)">
      <summary>Creates a new string that contains the specified consecutive characters from the specified string.</summary>
      <returns>A new string that contains the consecutive characters between <paramref name="start" /> and <paramref name="end" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="start">The first consecutive character to get.</param>
      <param name="end">The last consecutive character to get.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sup(System.Object)">
      <summary>Converts the specified object to text enclosed in superscript markup tags.</summary>
      <returns>A string in the form "&lt;SUP&gt;"+ <paramref name="thisob" /> +"&lt;/SUP&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)">
      <summary>Returns a copy of the specified string converted to lowercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</summary>
      <returns>A lowercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)">
      <summary>Returns a copy of the specified string converted to uppercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</summary>
      <returns>An uppercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)">
      <summary>Returns a copy of the specified string converted to lowercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
      <returns>A lowercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)">
      <summary>Returns a copy of the specified string converted to uppercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
      <returns>An uppercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)">
      <summary>Returns the value of the specified object.</summary>
      <returns>The value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.SuperTypeMembersSorter">
      <summary>Stores members from base classes and interfaces.</summary>
    </member>
    <member name="T:Microsoft.JScript.SyntaxErrorObject">
      <summary>Represents a syntax error. For example, a syntax error can occur when you omit a semicolon.</summary>
    </member>
    <member name="T:Microsoft.JScript.Throw">
      <summary>Throws an exception. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Throw.JScriptThrow(System.Object)">
      <summary>Returns the specified object as an exception, converting if it has to.</summary>
      <returns>An exception that represents <paramref name="value" />.</returns>
      <param name="value">The exception to throw. </param>
    </member>
    <member name="T:Microsoft.JScript.TokenColor">
      <summary>Specifies the colors that individual units of code should have when text is being colorized in an editor. The members of this enumeration are used by the <see cref="P:Microsoft.JScript.ITokenColorInfo.Color" /> property of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_TEXT">
      <summary>The color for a unit of code that represents text. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_IDENTIFIER">
      <summary>The color for a unit of code that represents an identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_KEYWORD">
      <summary>The color for a unit of code that represents a keyword.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_COMMENT">
      <summary>The color for a unit of code that represents a comment.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_OPERATOR">
      <summary>The color for a unit of code that represents an operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_NUMBER">
      <summary>The color for a unit of code that represents a numeric literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_STRING">
      <summary>The color for a unit of code that represents a string literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_CONDITIONAL_COMP">
      <summary>Not used.</summary>
    </member>
    <member name="T:Microsoft.JScript.Try">
      <summary>Identifies blocks of code to run in error handling scopes. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Try.JScriptExceptionValue(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Returns the specified object as an exception, converting it to a specific <see cref="T:Microsoft.JScript.JScriptException" /> if it can.</summary>
      <returns>The exception <paramref name="e" />, converted to a specific <see cref="T:Microsoft.JScript.JScriptException" /> if that is possible.</returns>
      <param name="e">The object that represents the exception.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Try.PushHandlerScope(Microsoft.JScript.Vsa.VsaEngine,System.String,System.Int32)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.BlockScope" /> object for the try block and pushes it onto the global scope stack.</summary>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="id">The name of the scope of the try block.</param>
      <param name="scopeId">The ID of the scope of the try block.</param>
    </member>
    <member name="T:Microsoft.JScript.TypedArray">
      <summary>Represents a reflectable reference to the <see cref="T:System.Array" /> class. This class stores the element type of a typed array, but this class does not store data. </summary>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.#ctor(System.Reflection.IReflect,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.TypedArray" /> class.</summary>
      <param name="elementType">The element type of a typed array.</param>
      <param name="rank">The rank (number of dimensions) of the array.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.Equals(System.Object)">
      <summary>Determines whether the specified typed array has the same element type and rank as the current typed array.</summary>
      <returns>true if <paramref name="obj" /> has the same element type and rank as the current typed array; otherwise, false.</returns>
      <param name="obj">The typed array to compare with the current typed array.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a field of the <see cref="T:System.Array" /> class type that has the specified name.</summary>
      <returns>A field that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the field to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetFields(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all fields of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetHashCode">
      <summary>Serves as a hash function for the element type of the typed array.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the <see cref="T:System.Array" /> class type that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMembers(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all members of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a method of the <see cref="T:System.Array" /> class type that has the specified name.</summary>
      <returns>A method that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a method of the <see cref="T:System.Array" /> class type that has the specified name by using the specified selection criteria.</summary>
      <returns>A method that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="types">The parameter types that are used to locate a matching method.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethods(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all methods of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperties(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all properties of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a property of the <see cref="T:System.Array" /> class type that has the specified name.</summary>
      <returns>A property that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a property of the <see cref="T:System.Array" /> class type that has the specified name by using the specified selection criteria.</summary>
      <returns>A property that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="returnType">The type of the return value that the property must have.</param>
      <param name="types">The index types of the property being searched for. Used for index properties, such as the indexer for a class.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member of the element type or the <see cref="T:System.Array" /> class type.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="flags">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="target">The object on which to invoke the member. This must be the current script object.</param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name="modifiers">An array that has the same length as the <paramref name="args" /> parameter. It represents the invoked member's argument attributes in the metadata.</param>
      <param name="locale">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
      <param name="namedParameters">An array of parameters.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.ToString">
      <summary>Returns a string that contains the element type of the typed array and the rank information.</summary>
      <returns>A string that contains the element type of the typed array and the rank information.</returns>
    </member>
    <member name="P:Microsoft.JScript.TypedArray.UnderlyingSystemType">
      <summary>Gets the type of the <see cref="T:Microsoft.JScript.TypedArray" /> object.</summary>
      <returns>The type of the <see cref="T:Microsoft.JScript.TypedArray" /> object.</returns>
    </member>
    <member name="T:Microsoft.JScript.TypeErrorObject">
      <summary>Represents a type error. For example, a type error can occur when you pass an object of one type to a method that expects an object of another type.</summary>
    </member>
    <member name="T:Microsoft.JScript.Typeof">
      <summary>Determines the data types of objects. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Typeof.JScriptTypeof(System.Object)">
      <summary>Determines the data type of the specified object.</summary>
      <returns>The type of <paramref name="value" />.</returns>
      <param name="value">The object to determine the type of.</param>
    </member>
    <member name="T:Microsoft.JScript.TypeReflector">
      <summary>Provides an implementation of <see cref="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)" /> that is faster than <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified member, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects that represents the public members that have the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify the way in which the search for members and types is conducted by the reflection operation.</param>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMembers(System.Reflection.BindingFlags)">
      <summary>Throws a <see cref="T:Microsoft.JScript.JScriptException" /> exception in all cases.</summary>
      <returns>Throws a <see cref="T:Microsoft.JScript.JScriptException" /> exception in all cases.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify the way in which the search for members and types is conducted by the reflection operation.</param>
    </member>
    <member name="T:Microsoft.JScript.UnaryOp">
      <summary>Represents the base class for classes that perform operations on single operands, such as <see cref="T:Microsoft.JScript.Typeof" /> and <see cref="T:Microsoft.JScript.PostOrPrefixOperator" />. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="F:Microsoft.JScript.UnaryOp.operand">
      <summary>Represents the operand.</summary>
    </member>
    <member name="T:Microsoft.JScript.URIErrorObject">
      <summary>Represents a Uniform Resource Identifier (URI) error. For example, a URI error can occur when you try to encode or decode a URI.</summary>
    </member>
    <member name="T:Microsoft.JScript.VBArrayConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.VBArrayConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="T:Microsoft.JScript.VBArrayObject">
      <summary>Represents a VBArray object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.VBArrayObject.#ctor(Microsoft.JScript.VBArrayPrototype,System.Array)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.VBArrayObject" /> class.</summary>
      <param name="parent">The parent of the object.</param>
      <param name="array">The underlying array that the class represents.</param>
    </member>
    <member name="T:Microsoft.JScript.VBArrayPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.VBArrayObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.VBArrayPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)">
      <summary>Determines the number of dimensions in the specified array.</summary>
      <returns>The number of dimensions in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])">
      <summary>Gets the value at the specified position in the specified array.</summary>
      <returns>The value at the specified position in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">An array that represents the indexes of each dimension that specifies the position of the element to get.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)">
      <summary>Gets the lower bound of the specified dimension in the specified array.</summary>
      <returns>The lower bound of <paramref name="dimension" /> in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dimension">The dimension whose lower bound is determined.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts a <see cref="T:Microsoft.JScript.VBArrayObject" /> object to an <see cref="T:Microsoft.JScript.ArrayObject" /> object.</summary>
      <returns>
        <paramref name="thisob" /> expressed as an <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)">
      <summary>Gets the upper bound of the specified dimension in the specified array.</summary>
      <returns>The upper bound of <paramref name="dimension" /> in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dimension">The dimension whose upper bound is determined.</param>
    </member>
    <member name="T:Microsoft.JScript.VsaItem">
      <summary>Represents items added to the .NET script engine. This includes code items, reference items, and global items.</summary>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.flag">
      <summary>Specifies the type of the item as <see cref="F:Microsoft.Vsa.VsaItemFlag.Class" />, <see cref="F:Microsoft.Vsa.VsaItemFlag.Module" />, or <see cref="F:Microsoft.Vsa.VsaItemFlag.None" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.VsaItem.GetOption(System.String)">
      <summary>Gets the codebase option.</summary>
      <returns>The value of the codebase option.</returns>
      <param name="name">The string literal "codebase".</param>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.isDirty">
      <summary>Specifies whether the current in-memory representation of the item differs from the persisted representation.</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.IsDirty">
      <summary>Gets or sets a value that indicates whether the current in-memory representation of the item differs from the persisted representation.</summary>
      <returns>true if the in-memory representation differs from the persisted representation; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.ItemType">
      <summary>Gets the type of the item.</summary>
      <returns>One of the enumeration values. The value indicates the type of the item.</returns>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.name">
      <summary>Specifies the name of the item.</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.Name">
      <summary>Gets or sets the name of the item.</summary>
      <returns>The string literal name of the item.</returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItem.SetOption(System.String,System.Object)">
      <summary>Sets the codebase option.</summary>
      <param name="name">The string literal "codebase".</param>
      <param name="value">The new value for the option.</param>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.type">
      <summary>Specifies the type of the item as <see cref="F:Microsoft.Vsa.VsaItemType.Code" />, <see cref="F:Microsoft.Vsa.VsaItemType.Reference" />, or <see cref="F:Microsoft.Vsa.VsaItemType.AppGlobal" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.VsaItems">
      <summary>Represents a collection of <see cref="T:Microsoft.Vsa.IVsaItem" /> objects that can be addressed either by name or by index.</summary>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.#ctor(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.VsaItems" /> class.</summary>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Close">
      <summary>Disconnects each item in the collection from the scripting engine.</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)">
      <summary>Creates a new item and adds it to the collection.</summary>
      <returns>The newly created item.</returns>
      <param name="name">The name of the new item.</param>
      <param name="itemType">One of the enumeration values. The value specifies the type of the new item as <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" />, <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference" />, or <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal" />.</param>
      <param name="itemFlag">One of the enumeration values. The value specifies the initial content of a <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" /> item as <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class" />, <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module" />, or <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None" />.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.GetEnumerator">
      <summary>Gets an enumerator that iterates over the collection.</summary>
      <returns>An enumerator that iterates over the collection.</returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.Int32)">
      <summary>Gets the item from the collection that is designated by the specified index value.</summary>
      <returns>The item at <paramref name="index" />.</returns>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.String)">
      <summary>Gets the item from the collection that is designated by the specified name.</summary>
      <returns>The item that is named <paramref name="itemName" />.</returns>
      <param name="itemName">The name of the item to get.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.Int32)">
      <summary>Removes the item that is designated by the specified index value from the collection.</summary>
      <param name="itemIndex">The index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.String)">
      <summary>Removes the item that is designated by the specified name from the collection.</summary>
      <param name="itemName">The name of the item to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.VSAITEMTYPE2">
      <summary>Extends the <see cref="T:Microsoft.Vsa.VsaItemType" /> enumeration. Provides extra functionality that is needed by an IActiveScript host. </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.None">
      <summary>Specifies none. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTOBJECT">
      <summary>Specifies a host object.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPE">
      <summary>Specifies the scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPEANDOBJECT">
      <summary>Specifies both the scope and the object.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTSCOPE">
      <summary>Specifies the script scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTBLOCK">
      <summary>Specifies a script block. This applies to an <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.STATEMENT">
      <summary>Specifies a single statement. This applies to an <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.EXPRESSION">
      <summary>Specifies an expression. This applies to an <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.With">
      <summary>Represents the with statement. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.With.JScriptWith(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Establishes the default object for a with statement block by adding it to the scope stack.</summary>
      <returns>
        <paramref name="withOb" /> converted to an object.</returns>
      <param name="withOb">The default object.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.AppDomain"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.ApplicationBase"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.applicationPath"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Assembly"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.assemblyVersion"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Close"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Compile"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.compiledRootNamespace"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoClose"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoCompile"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoLoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineMoniker"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineName"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineSite"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Error(Microsoft.JScript.Vsa.JSVsaError)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.errorLocale"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Evidence"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.executionEvidence"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.failedCompilation"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.genDebugInfo"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.GenerateDebugInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetCustomOption(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetOption(System.String)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.haveCompiledState"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.InitNew"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isClosed"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsCompiled"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isDebugInfoSupported"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsDirty"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineCompiled"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineDirty"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineInitialized"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineRunning"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsRunning"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidIdentifier(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidNamespaceName(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Items"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Language"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.LCID"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadCompiledState"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.loadedAssembly"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Name"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.nameTable"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Preconditions(Microsoft.JScript.Vsa.BaseVsaEngine.Pre)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Reset"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ResetCompiledState"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.RevokeCache"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootMoniker"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.rootNamespace"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootNamespace"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Run"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.scriptLanguage"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetCustomOption(System.String,System.Object)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetOption(System.String,System.Object)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Site"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupClass"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupInstance"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ValidateRootMoniker(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Version"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.vsaItems"></member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine.Pre"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.None">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotClosed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SupportForDebug">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineCompiled">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootNamespaceSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineInitialised">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotInitialised">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaSite"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.#ctor"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.Assembly"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.DebugInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetEventSourceInstance(System.String,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetGlobalInstance(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.Notify(System.String,System.Object)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)"></member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaStartup"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.#ctor"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.SetSite(Microsoft.JScript.Vsa.IJSVsaSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Shutdown"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaStartup.site"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Startup"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaCodeItem"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AddEventSource(System.String,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AppendSourceText(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.CodeDOM"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.RemoveEventSource(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.SourceText"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaEngine"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Assembly"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Close"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Compile"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Evidence"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.GenerateDebugInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.GetOption(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.InitNew"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsCompiled"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsDirty"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsRunning"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.IsValidIdentifier(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Items"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Language"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.LCID"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Name"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Reset"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.RevokeCache"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootMoniker"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootNamespace"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Run"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SetOption(System.String,System.Object)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Site"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Version"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaError"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Description"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.EndColumn"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Line"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.LineText"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Number"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Severity"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceItem"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceMoniker"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.StartColumn"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaGlobalItem"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.ExposeMembers"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.TypeString"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItem"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.GetOption(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.IsDirty"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.ItemType"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.Name"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.SetOption(System.String,System.Object)"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItems"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Count"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.Int32)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.Int32)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.String)"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaPersistSite"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.LoadElement(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.SaveElement(System.String,System.String)"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaReferenceItem"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaReferenceItem.AssemblyName"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaSite"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetEventSourceInstance(System.String,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetGlobalInstance(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.Notify(System.String,System.Object)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)"></member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaError"></member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainCannotBeSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseCannotBeSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyExpected">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BadAssembly">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CachedAssemblyInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CallbackUnexpected">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CodeDOMNotAvailable">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CompiledStateNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebugInfoNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineBusy">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotClose">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotReset">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineClosed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineEmpty">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineInitialized">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotCompiled">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotInitialized">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceTypeInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GetCompiledStateFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceTypeInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.InternalCompilerError">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRemoved">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemFlagNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemTypeNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LCIDNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LoadElementFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotificationInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RevokeFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerAlreadySet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerProtocolInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveCompiledStateFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveElementFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteAlreadySet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceItemNotAvailable">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceMonikerNotAvailable">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.URLInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BrowserNotExist">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebuggeeNotStarted">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotExist">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileFormatUnsupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileTypeUnknown">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRenamed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingSource">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotInitCompleted">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NameTooLong">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.VsaServerDown">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingPdb">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotClientSideAndNoUrl">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CannotAttachToWebServer">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.UnknownError">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaException"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String,System.Exception)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String,System.Exception)"></member>
    <member name="P:Microsoft.JScript.Vsa.JSVsaException.ErrorCode"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.ToString"></member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemFlag"></member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemType"></member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Code">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.ResInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.Boolean)">
      <param name="resinfo"></param>
      <param name="isLinked"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
      <param name="filename"></param>
      <param name="name"></param>
      <param name="isPublic"></param>
      <param name="isLinked"></param>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.filename"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.fullpath"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isLinked"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isPublic"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.name"></member>
    <member name="T:Microsoft.JScript.Vsa.VsaEngine">
      <summary>Implements <see cref="T:Microsoft.Vsa.IVsaEngine" /> interface. </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor(System.Boolean)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Clone(System.AppDomain)">
      <param name="domain"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CompileEmpty"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ConnectEvents"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngine"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScope(System.Boolean,System.String[])">
      <param name="fast"></param>
      <param name="assemblyNames"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithType(System.Boolean,System.String[],System.RuntimeTypeHandle)">
      <param name="fast"></param>
      <param name="assemblyNames"></param>
      <param name="callingTypeHandle"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithTypeAndRootNamespace(System.Boolean,System.String[],System.RuntimeTypeHandle,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineWithType(System.RuntimeTypeHandle)">
      <param name="callingTypeHandle"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.DisconnectEvents"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetAssembly"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetGlobalScope"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItem(System.String)">
      <param name="itemName"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemAtIndex(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemCount"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetMainScope"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetModule"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalArrayConstructor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalObjectConstructor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalRegExpConstructor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Interrupt"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.IsValidIdentifier(System.String)">
      <param name="ident"></param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.VsaEngine.LenientGlobalObject"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PopScriptObject"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PushScriptObject(Microsoft.JScript.ScriptObject)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RegisterEventSource(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Reset"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Restart"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Run(System.AppDomain)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RunEmpty"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ScriptObjectStackTop"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <param name="output"></param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Data.SqlXml.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.SqlXml</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Xsl.Runtime.AncestorDocOrderIterator">
      <summary>Iterates over all ancestor nodes according to the <see cref="N:System.Xml.XPath" /> ancestor axis rules, and returns the nodes in document order without duplicates.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AncestorDocOrderIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter,System.Boolean)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.AncestorDocOrderIterator" />.</summary>
      <param name="context">The node from which you start traversing ancestors.</param>
      <param name="filter">Enables you to filter nodes based on the name.  </param>
      <param name="orSelf">true if you want the <paramref name="context" /> node to be returned as a part of the iteration, instead of being filtered out.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.AncestorDocOrderIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AncestorDocOrderIterator.MoveNext">
      <summary>Positions the iterator on the next ancestor node in document order.</summary>
      <returns>true if the iterator was set to the next ancestor node in document order; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.AncestorIterator">
      <summary>Iterates over all ancestor nodes according to the <see cref="N:System.Xml.XPath" /> ancestor axis rules, and returns the nodes in reverse document order.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AncestorIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter,System.Boolean)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.AncestorIterator" />.</summary>
      <param name="context">The node from which you start traversing ancestors.</param>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name. For more information, see <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" />.  </param>
      <param name="orSelf">true if you want the <paramref name="context" /> node to be returned as a part of the iteration and not filtered out.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.AncestorIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AncestorIterator.MoveNext">
      <summary>Positions the iterator on the next ancestor node.  </summary>
      <returns>true if the next ancestor node exists; otherwise, false. </returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.AttributeContentIterator">
      <summary>Iterates over all attributes and child content nodes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AttributeContentIterator.Create(System.Xml.XPath.XPathNavigator)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.AttributeContentIterator" />.</summary>
      <param name="context">The node from which you start traversing attribute and child content nodes.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.AttributeContentIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AttributeContentIterator.MoveNext">
      <summary>Positions the iterator on the next attribute or child content node.  </summary>
      <returns>true if the next attribute or child content node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.AttributeIterator">
      <summary>Iterates over all the attributes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AttributeIterator.Create(System.Xml.XPath.XPathNavigator)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.AttributeIterator" />.</summary>
      <param name="context">The node from which you start traversing the attribute nodes.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.AttributeIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.AttributeIterator.MoveNext">
      <summary>Positions the iterator on the next attribute node.  </summary>
      <returns>true if the next attribute node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.ContentIterator">
      <summary>Iterates over all child content nodes of the current node.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ContentIterator.Create(System.Xml.XPath.XPathNavigator)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.ContentIterator" />.</summary>
      <param name="context">The node from which you start traversing the child content nodes.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.ContentIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ContentIterator.MoveNext">
      <summary>Positions the iterator on the next child content node.  </summary>
      <returns>true if the next child content node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.ContentMergeIterator">
      <summary>Iterates over child content nodes or following sibling nodes. Maintains the nodes in document order. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ContentMergeIterator.Create(System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.ContentMergeIterator" />. Merges multiple sets of content nodes in document order and removes duplicates.</summary>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on name.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.ContentMergeIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ContentMergeIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Positions the iterator on the next content or sibling node.  </summary>
      <returns>Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NoMoreNodes" /> if there are no more content or sibling nodes. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NeedInputNode" /> if the next input node must be fetched first. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.HaveCurrentNode" /> if the <see cref="P:System.Xml.Xsl.Runtime.ContentMergeIterator.Current" /> property was set to the next node while iterating through the nodes.</returns>
      <param name="input">The input nodes. </param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.DecimalAggregator">
      <summary>Computes aggregates over a sequence of Decimal values.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DecimalAggregator.Average(System.Decimal)">
      <summary>Averages Decimal values.  </summary>
      <param name="value">The Decimal value.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DecimalAggregator.AverageResult">
      <summary>Gets an average of the sequence of Decimal values.</summary>
      <returns>The average of the sequence of Decimal values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DecimalAggregator.Create">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.DecimalAggregator" />. </summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DecimalAggregator.IsEmpty">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.Xsl.Runtime.DecimalAggregator" /> contains a result.</summary>
      <returns>true if the <see cref="T:System.Xml.Xsl.Runtime.DecimalAggregator" /> contains a result; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DecimalAggregator.Maximum(System.Decimal)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is greater than the existing result.  </summary>
      <param name="value">The Decimal value.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DecimalAggregator.MaximumResult">
      <summary>Gets the largest value among the sequence of Decimal values.</summary>
      <returns>The largest value among the sequence of Decimal values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DecimalAggregator.Minimum(System.Decimal)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is less than the existing result. </summary>
      <param name="value">The Decimal value.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DecimalAggregator.MinimumResult">
      <summary>Gets the smallest value among the sequence of Decimal values.</summary>
      <returns>The smallest value among the sequence of Decimal values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DecimalAggregator.Sum(System.Decimal)">
      <summary>Adds a Decimal value to the existing result.  </summary>
      <param name="value">The Decimal value.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DecimalAggregator.SumResult">
      <summary>Gets the sum of the sequence of Decimal values.</summary>
      <returns>The sum of the sequence of Decimal values.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.DescendantIterator">
      <summary>Iterates over all descendant nodes according to the <see cref="N:System.Xml.XPath" /> descendant axis rules.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DescendantIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter,System.Boolean)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.DescendantIterator" />.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> that identifies the node from which you start traversing descendants.</param>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name. For more information, see <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" />.</param>
      <param name="orSelf">
        <see cref="T:System.Boolean" /> that indicates whether the current node is returned as part of the iteration or filtered out.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DescendantIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DescendantIterator.MoveNext">
      <summary>Positions the iterator on the next descendant node.</summary>
      <returns>true if the next descendant node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.DescendantMergeIterator">
      <summary>Iterate over all descendant content nodes according to XPath descendant axis rules. Eliminates duplicates by not querying over nodes that are contained in the subtree of the previous node.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DescendantMergeIterator.Create(System.Xml.Xsl.Runtime.XmlNavigatorFilter,System.Boolean)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.DescendantMergeIterator" />. Merges multiple sets of descendant nodes in document order and removes duplicates.</summary>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class that enables you to filter nodes based on the name. For more information, see <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" />.  </param>
      <param name="orSelf">
        <see cref="T:System.Boolean" /> that indicates whether the current node is returned as part of the iteration or filtered out.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DescendantMergeIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.  </returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DescendantMergeIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Position this iterator to the next descendant node.  </summary>
      <returns>Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NoMoreNodes" /> if there are no more descendant nodes. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NeedInputNode" /> if the next input node needs to be fetched first. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.HaveCurrentNode" /> if while iterating through the nodes the <see cref="P:System.Xml.Xsl.Runtime.DescendantMergeIterator.Current" /> property was set to the next node.</returns>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object that identifies the input node.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.DifferenceIterator">
      <summary>Positions the iterator to the next node in the difference between two sets of nodes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DifferenceIterator.Create(System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.DifferenceIterator" />.</summary>
      <param name="runtime">The <see cref="T:System.Xml.Xsl.Runtime.XmlQueryRuntime" /> object.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DifferenceIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator. </returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DifferenceIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Positions this iterator to the next node in the union.</summary>
      <returns>The <see cref="T:System.Xml.Xsl.Runtime.SetIteratorResult" />.</returns>
      <param name="nestedNavigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object that identifies the current node.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.DodSequenceMerge">
      <summary>Merges several doc-order-distinct sequences into a single doc-order-distinct sequence.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DodSequenceMerge.AddSequence(System.Collections.Generic.IList{System.Xml.XPath.XPathNavigator})">
      <summary>Adds a new sequence to the list of sequences to merge.</summary>
      <param name="sequence">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DodSequenceMerge.Create(System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Initializes this instance of <see cref="T:System.Xml.Xsl.Runtime.DodSequenceMerge" /> .</summary>
      <param name="runtime">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class, which provides methods and properties to support the XSLT processor.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DodSequenceMerge.MergeSequences">
      <summary>Returns the fully-merged sequence.</summary>
      <returns>The fully-merged sequence.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.DoubleAggregator">
      <summary>Computes aggregates over a sequence of double values.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DoubleAggregator.Average(System.Double)">
      <summary>Returns the average of a sequence of double values.</summary>
      <param name="value">A value of type double.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DoubleAggregator.AverageResult">
      <summary>Computes the average value over a sequence of double values.</summary>
      <returns>The average result.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DoubleAggregator.Create">
      <summary>Initializes a sequence of double values.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DoubleAggregator.IsEmpty">
      <summary>Determines whether a sequence of double values is empty.</summary>
      <returns>true if the result is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DoubleAggregator.Maximum(System.Double)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is greater than the existing result. </summary>
      <param name="value">A value of type double.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DoubleAggregator.MaximumResult">
      <summary>Returns the maximum value of a sequence of double values.</summary>
      <returns>The maximum result.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DoubleAggregator.Minimum(System.Double)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is less than the existing result. </summary>
      <param name="value">A value of type double.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DoubleAggregator.MinimumResult">
      <summary>Returns the minimum value of a sequence of double values.</summary>
      <returns>The minimum result.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.DoubleAggregator.Sum(System.Double)">
      <summary>Adds a Double value to the existing result..</summary>
      <param name="value">A value of type double.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.DoubleAggregator.SumResult">
      <summary>Returns the sum of a sequence of double values.</summary>
      <returns>The sum of all results.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.ElementContentIterator">
      <summary>Iterates over all child elements with a matching name.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ElementContentIterator.Create(System.Xml.XPath.XPathNavigator,System.String,System.String)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.ElementContentIterator" />.</summary>
      <param name="context">The node from which you start traversing child elements.</param>
      <param name="localName">The local name.</param>
      <param name="ns">The namespace.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.ElementContentIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ElementContentIterator.MoveNext">
      <summary>Positions the iterator on the next child element with a matching name.</summary>
      <returns>true if the iterator was set to the next child element with the matching name; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.FollowingSiblingIterator">
      <summary>Iterates over all following sibling content nodes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.FollowingSiblingIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.FollowingSiblingIterator" />.</summary>
      <param name="context">The node from which you start traversing the child content nodes.</param>
      <param name="filter">Enables you to filter nodes based on the name.  </param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.FollowingSiblingIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.FollowingSiblingIterator.MoveNext">
      <summary>Positions the iterator on the next sibling content node.  </summary>
      <returns>true if the next sibling content node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator">
      <summary>Iterates over child nodes byfollowing the sibling nodes.  </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator.Create(System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator" />.</summary>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.  </returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Position this iterator to the next content or sibling node.  </summary>
      <returns>Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NoMoreNodes" /> if there are no more content or sibling nodes. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NeedInputNode" /> if the next input node needs to be fetched first. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.HaveCurrentNode" /> if, while iterating through the nodes, the <see cref="P:System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator.Current" /> property was set to the next node.</returns>
      <param name="navigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.IdIterator">
      <summary>Tokenizes a string that contains IDREF values and dereferences the values in order to get a list of ID elements.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.IdIterator.Create(System.Xml.XPath.XPathNavigator,System.String)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.IdIterator" />.</summary>
      <param name="context">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains context.</param>
      <param name="value">String to contain the value of the iterator.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.IdIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.IdIterator.MoveNext">
      <summary>Positions the iterator on the next ID element.  </summary>
      <returns>true if the next node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.Int32Aggregator">
      <summary>Computes aggregates over a sequence of Int32 values.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int32Aggregator.Average(System.Int32)">
      <summary>Finds the average of a sequence of Int32 values.</summary>
      <param name="value">A value of type Int32 that identifies a group of items to average, such as a column in a table.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int32Aggregator.AverageResult">
      <summary>Returns the average result of a sequence of Int32 values.</summary>
      <returns>An Int32 value that contains the average result of a sequence of Int32 values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int32Aggregator.Create">
      <summary>Initializes a sequence of Int32 values.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int32Aggregator.IsEmpty">
      <summary>Returns a Boolean value that indicates if the sequence is empty.</summary>
      <returns>true if the sequence is empty, otherwise returns false.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int32Aggregator.Maximum(System.Int32)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is greater than the existing result.</summary>
      <param name="value">A value of type Int32.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int32Aggregator.MaximumResult">
      <summary>Returns the largest value in a sequence of Int32 values.</summary>
      <returns>An Int32 value that contains the maximum value in a sequence of Int32 values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int32Aggregator.Minimum(System.Int32)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is less than the existing result.</summary>
      <param name="value">A value of type Int32</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int32Aggregator.MinimumResult">
      <summary>Returns the smallest value in a sequence of Int32 values.</summary>
      <returns>An Int32 value that contains the minimum value in a sequence of Int32 values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int32Aggregator.Sum(System.Int32)">
      <summary>Adds an Int32  value to the existing result.</summary>
      <param name="value">A value of type Int32.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int32Aggregator.SumResult">
      <summary>Returns the sum of a sequence of Int32 values.</summary>
      <returns>An Int32 value that contains the sum of a sequence of Int32 values.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.Int64Aggregator">
      <summary>Computes aggregates over a sequence of Int64 values.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int64Aggregator.Average(System.Int64)">
      <summary>Finds an average of a sequence of Int64 values.</summary>
      <param name="value">A value of type Int64.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int64Aggregator.AverageResult">
      <summary>Returns an Int64 value that contains the average of a sequence of Int64 values.</summary>
      <returns>An Int64 value that contains the average of a sequence of Int64 values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int64Aggregator.Create">
      <summary>Initializes a sequence of Int64 values.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int64Aggregator.IsEmpty">
      <summary>Returns a Boolean value that indicates whether the sequence of Int64 values is empty.</summary>
      <returns>true if the sequence of Int64 values is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int64Aggregator.Maximum(System.Int64)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is greater than the existing result. </summary>
      <param name="value">A value of type Int64.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int64Aggregator.MaximumResult">
      <summary>Gets the largest Int64 value.</summary>
      <returns>The largest Int64 value.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int64Aggregator.Minimum(System.Int64)">
      <summary>Assigns the <paramref name="value" /> parameter to the existing result if the <paramref name="value" /> parameter is less than the existing result. </summary>
      <param name="value">A value of type Int64.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int64Aggregator.MinimumResult">
      <summary>Gest the smallest Int64 value.</summary>
      <returns>The smallest Int64 value.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.Int64Aggregator.Sum(System.Int64)">
      <summary>Adds an Int64 value to the existing result.</summary>
      <param name="value">A value of type Int64.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.Int64Aggregator.SumResult">
      <summary>Returns an Int64 value that contains the sum of a sequence of Int64 values.</summary>
      <returns>An Int64 value that contains the sum of a sequence of Int64 values.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.IntersectIterator">
      <summary>Positions the iterator to the next node in the intersection of two sets of nodes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.IntersectIterator.Create(System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.IntersectIterator" />.</summary>
      <param name="runtime">
        <see cref="T:System.Xml.Xsl.Runtime.XmlQueryRuntime" /> object.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.IntersectIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator. </returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.IntersectIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Positions this iterator to the next node in the union.</summary>
      <returns>The <see cref="T:System.Xml.Xsl.Runtime.SetIteratorResult" />.</returns>
      <param name="nestedNavigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.IteratorResult">
      <summary>Iterators that use containment to control a nested iterator return one of the values in this enumeration.</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.IteratorResult.NoMoreNodes">
      <summary>Iteration is complete; there are no more nodes</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.IteratorResult.NeedInputNode">
      <summary>The next node must be fetched from the contained iterator before iteration can continue.</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.IteratorResult.HaveCurrentNode">
      <summary>Iteration is complete; there are no more nodes.</summary>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.NamespaceIterator">
      <summary>Iterate over all namespace nodes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.NamespaceIterator.Create(System.Xml.XPath.XPathNavigator)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.NamespaceIterator" />.</summary>
      <param name="context">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> that identifies the <see cref="T:System.Xml.Xsl.XsltContext" />.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.NamespaceIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.NamespaceIterator.MoveNext">
      <summary>Positions the iterator on the next namespace node.  </summary>
      <returns>true if the next namespace node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.NodeKindContentIterator">
      <summary>Iterates over all child content nodes with a matching node kind.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.NodeKindContentIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNodeType)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.NodeKindContentIterator" />.</summary>
      <param name="context">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
      <param name="nodeType">
        <see cref="T:System.Xml.XPath.XPathNodeType" /> object.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.NodeKindContentIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.NodeKindContentIterator.MoveNext">
      <summary>Positions the iterator on the next child content node with a matching node kind.  </summary>
      <returns>true if the next child content node with a matching node kind exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.NodeRangeIterator">
      <summary>Iterates over the singleton node if the starting node is the same node as the ending node. Iterates to the end of the document if the starting node is after the ending node or is in a different document.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.NodeRangeIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter,System.Xml.XPath.XPathNavigator)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.NodeRangeIterator" />. </summary>
      <param name="start">Node at which iteration begins.</param>
      <param name="filter">Test expression that determines whether a node is to be filtered out.</param>
      <param name="end">Node at which iteration ends.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.NodeRangeIterator.Current">
      <summary>Returns the current result navigator.</summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.NodeRangeIterator.MoveNext">
      <summary>Positions the iterator on the next node.  </summary>
      <returns>true if the next node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.ParentIterator">
      <summary>Iterates over the matching parent node according to the <see cref="N:System.Xml.XPath" />, parent axis rules.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ParentIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.ParentIterator" />.</summary>
      <param name="context">The node from which you start traversing the nodes.</param>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.ParentIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.ParentIterator.MoveNext">
      <summary>Positions the iterator on the next matching parent node.  </summary>
      <returns>true if the next matching parent node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.PrecedingIterator">
      <summary>Iterates over all the content-typed nodes which precede the starting node in document order. Returns nodes in reverse document order.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.PrecedingIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.PrecedingIterator" />. The <see cref="T:System.Xml.Xsl.Runtime.PrecedingIterator" /> does not contain duplicates.</summary>
      <param name="context">The node from which you start traversing the nodes.</param>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.PrecedingIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.PrecedingIterator.MoveNext">
      <summary>Positions the iterator on the next preceding node in reverse document order.  </summary>
      <returns>true if the next preceding node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator">
      <summary>Iterates over all preceding sibling content nodes in document order.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator" />.</summary>
      <param name="context">The node from which you start traversing the nodes.</param>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name. For more information, see <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" />.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator.MoveNext">
      <summary>Positions the iterator on the next preceding sibling node.  </summary>
      <returns>true if the next preceding sibling node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.PrecedingSiblingIterator">
      <summary>Iterates over all preceding sibling nodes according to the <see cref="N:System.Xml.XPath" /> preceding sibling axis rules and returns nodes in reverse document order.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.PrecedingSiblingIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.PrecedingSiblingIterator" />.</summary>
      <param name="context">The node from which you start traversing the nodes.</param>
      <param name="filter">Enables you to filter nodes based on the name. </param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.PrecedingSiblingIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.PrecedingSiblingIterator.MoveNext">
      <summary>Positions the iterator on the next preceding sibling node in the reverse document order. </summary>
      <returns>true if the next preceding sibling node exists; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.SetIteratorResult">
      <summary>Sets iterators for combinations of elements by Union, Intersection, or Difference, which use containment to control two nested iterators. This will return one of the enumeration values from <see cref="M:System.Xml.Xsl.Runtime.IdIterator.MoveNext" />.</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.SetIteratorResult.NoMoreNodes">
      <summary>Iteration is complete; there are no more nodes.</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.SetIteratorResult.InitRightIterator">
      <summary>Initialize right-nested iterator.</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.SetIteratorResult.NeedLeftNode">
      <summary>The next node needs to be fetched from the left-nested iterator.</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.SetIteratorResult.NeedRightNode">
      <summary>The next node needs to be fetched from the right-nested iterator.</summary>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.SetIteratorResult.HaveCurrentNode">
      <summary>This iterator's <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> property is set to the next node in the iteration.</summary>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.StringConcat">
      <summary>Concatenates strings when the number of strings is not known beforehand.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.StringConcat.Clear">
      <summary>Clears the result string.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.StringConcat.Concat(System.String)">
      <summary>Concatenates a new string to the result.</summary>
      <param name="value">A string value to be concatenated to the result.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.StringConcat.Delimiter">
      <summary>Gets or sets the string that delimits concatenated strings.</summary>
      <returns>Returns the <see cref="T:System.String" /> delimiter.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.StringConcat.GetResult">
      <summary>Gets the result string.</summary>
      <returns>A string value that contains the result.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.UnionIterator">
      <summary>Manages two sets of nodes that are already in document order with no duplicates, and returns the union of these sets in document order with no duplicates.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.UnionIterator.Create(System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.UnionIterator" />.</summary>
      <param name="runtime">
        <see cref="T:System.Xml.Xsl.Runtime.XmlQueryRuntime" /> object.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.UnionIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator. </returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.UnionIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Positions this iterator to the next node in the union.</summary>
      <returns>The <see cref="T:System.Xml.Xsl.Runtime.SetIteratorResult" />.</returns>
      <param name="nestedNavigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlCollation">
      <summary>Constructs a collation that uses the specified culture and compare options.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlCollation.Equals(System.Object)">
      <summary>Returns true if this XML extension function has the same values as another XML extension function.</summary>
      <returns>Returns true if this XML extension function has the same values as another XML extension function, otherwise false.</returns>
      <param name="obj">
        <see cref="T:System.Object" /> with which to determine equality..</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlCollation.GetHashCode">
      <summary>Returns the object's hash code.</summary>
      <returns>Returns the object's hash code.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlILIndex">
      <summary>Manages nodes from an input document, indexed by key value(s). This class is used as a cache of nodes indexed by xsl:key instructions and allows fast access to these nodes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILIndex.Add(System.String,System.Xml.XPath.XPathNavigator)">
      <summary>Adds a node that is indexed by the specified key value.</summary>
      <param name="key">The specified key.</param>
      <param name="navigator">An instance of <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILIndex.Lookup(System.String)">
      <summary>Looks up a sequence of nodes that are indexed by the specified key value.</summary>
      <returns>A sequence of nodes that are indexed by the specified key value.</returns>
      <param name="key">The specified key.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlILStorageConverter">
      <summary>This internal class contains static helper methods that get a value converter from <see cref="T:System.Xml.Xsl.Runtime.XmlQueryRuntime" /> to convert among several physical common language runtime (CLR) representations for the same logical XML type.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.BooleanToAtomicValue(System.Boolean,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts a Boolean value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">The Boolean value to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.BytesToAtomicValue(System.Byte[],System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts an array of bytes to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">An array of bytes to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.DateTimeToAtomicValue(System.DateTime,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts a DateTime value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type DateTime to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.DecimalToAtomicValue(System.Decimal,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts a decimal value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type decimal to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.DoubleToAtomicValue(System.Double,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts a double value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type double to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.Int32ToAtomicValue(System.Int32,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts an Int32 value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type Int32 to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.Int64ToAtomicValue(System.Int64,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts an Int64 value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type Int64 to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.ItemsToNavigators(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Converts a list or sequence of <see cref="T:System.Xml.XPath.XPathItem" /> objects to a sequence of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects or values.</summary>
      <returns>Returns a generic list of type <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
      <param name="listItems">A sequence of <see cref="System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.NavigatorsToItems(System.Collections.Generic.IList{System.Xml.XPath.XPathNavigator})">
      <summary>Converts a sequence of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects or values to a list or sequence of <see cref="T:System.Xml.XPath.XPathItem" /> objects.</summary>
      <returns>Returns a generic list of type <see cref="T:System.Xml.XPath.XPathItem" />.</returns>
      <param name="listNavigators">A sequence of <see cref="System.Xml.XPath.XPathNavigator" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.SingleToAtomicValue(System.Single,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts a single value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type single to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.StringToAtomicValue(System.String,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts a string value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type string to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.TimeSpanToAtomicValue(System.TimeSpan,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts a <see cref="T:System.TimeSpan" /> value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">A value of type <see cref="T:System.TimeSpan" /> to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlILStorageConverter.XmlQualifiedNameToAtomicValue(System.Xml.XmlQualifiedName,System.Int32,System.Xml.Xsl.Runtime.XmlQueryRuntime)">
      <summary>Converts an <see cref="T:System.Xml.XmlQualifiedName" /> value to an <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</summary>
      <returns>Returns a <see cref="T:System.Xml.Schema.XmlAtomicValue" />.</returns>
      <param name="value">An instance of the <see cref="System.Xml.XmlQualifiedName" /> class to convert.</param>
      <param name="index">A value of type Int32 that provides the index of the item to convert.</param>
      <param name="runtime">An instance of the <see cref="System.Xml.Xsl.Runtime.XmlQueryRuntime" /> class.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter">
      <summary>XmlNavigatorFilter provides a flexible filtering abstraction over <see cref="T:System.Xml.XPath.XPathNavigator" />. Callers do not know what type of filtering will occur; they simply call <see cref="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.MoveToContent(System.Xml.XPath.XPathNavigator)" /> or <see cref="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.MoveToFollowingSibling(System.Xml.XPath.XPathNavigator)" />. The filter implementation invokes the appropriate operation on the <see cref="T:System.Xml.XPath.XPathNavigator" /> in order to skip over filtered nodes.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.#ctor">
      <summary>Provides a flexible filtering abstraction over <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.IsFiltered(System.Xml.XPath.XPathNavigator)">
      <summary>Return true if the navigator's current node matches the filter condition.</summary>
      <returns>true if the current node matches the condition, otherwise returns false.</returns>
      <param name="navigator">An instance of the <see cref="System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.MoveToContent(System.Xml.XPath.XPathNavigator)">
      <summary>Repositions the navigator to the first matching content node or attribute and skips over filtered nodes. If there are no matching nodes, the navigator does not move and the method returns false.</summary>
      <returns>true if the navigator is repositioned on a child element with a matching name, otherwise false.</returns>
      <param name="navigator">An instance of the <see cref="System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.MoveToFollowing(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator)">
      <summary>Repositions the navigator to the following matching content node or attribute and skips over filtered nodes. If there are no matching nodes, the navigator does not move and the method returns false.</summary>
      <returns>true if the navigator is repositioned on the next element with a matching name, otherwise false.</returns>
      <param name="navigator">An instance of the <see cref="System.Xml.XPath.XPathNavigator" /> class that identifies the beginning of the range over which navigation can move.</param>
      <param name="navigatorEnd">An instance of the <see cref="System.Xml.XPath.XPathNavigator" /> class that identifies the end of the range over which navigation can move.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.MoveToFollowingSibling(System.Xml.XPath.XPathNavigator)">
      <summary>Repositions the navigator to the sibling matching content node or descendent and skips over filtered nodes. If there are no matching nodes, the navigator does not move and the method returns false.</summary>
      <returns>true if the navigator is repositioned on the next element sibling with a matching name, otherwise false.</returns>
      <param name="navigator">An instance of the <see cref="System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.MoveToNextContent(System.Xml.XPath.XPathNavigator)">
      <summary>Repositions the navigator to the next matching content node or attribute and skips over filtered nodes. If there are no matching nodes, the navigator does not move and the method returns false.</summary>
      <returns>true if the navigator is repositioned on the next element child with a matching name, otherwise false.</returns>
      <param name="navigator">An instance of the <see cref="System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlNavigatorFilter.MoveToPreviousSibling(System.Xml.XPath.XPathNavigator)">
      <summary>Repositions the navigator to the previous matching sibling node and skips over filtered nodes. If there are no matching nodes, the navigator does not move and the method returns false.</summary>
      <returns>true if the navigator is repositioned on the previous element sibling with a matching name, otherwise false.</returns>
      <param name="navigator">An instance of the <see cref="System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlQueryContext">
      <summary>The context of a query consists of all user-provided information that influences the operation of the query.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryContext.DefaultDataSource">
      <summary>Returns the document that is queried by default if no data source is explicitly selected in the query.</summary>
      <returns>An instance of the <see cref="System.Xml.Xpath.XPathNavigator" /> class.</returns>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryContext.DefaultNameTable">
      <summary>Returns the name table used by the default data source, or null if there is no default data source.</summary>
      <returns>An instance of the <see cref="System.Xml.XmlNameTable" /> class.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryContext.GetDataSource(System.String,System.String)">
      <summary>Gets the data source specified by the <paramref name="uriRelative" /> and <paramref name="uriBase" /> from the T:System.Xml.XmlResolver that the user provided.</summary>
      <returns>An instance of the T:<see cref="System.Xml.Xpath.XPathNavigator" /> class.</returns>
      <param name="uriRelative">A value of type string.</param>
      <param name="uriBase">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryContext.GetLateBoundObject(System.String)">
      <summary>Returns the extension object that is mapped to the specified namespace, or null if no object is mapped.</summary>
      <returns>An extension object.</returns>
      <param name="namespaceUri">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryContext.GetParameter(System.String,System.String)">
      <summary>Gets a named parameter from the external argument list.</summary>
      <returns>null if no argument list was provided, or if there is no parameter by that name; otherwise, a named parameter from the external argument list.</returns>
      <param name="localName">A value of type string.</param>
      <param name="namespaceUri">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryContext.InvokeXsltLateBoundFunction(System.String,System.String,System.Collections.Generic.IList{System.Xml.XPath.XPathItem}[])">
      <summary>Gets a late-bound extension object from the external argument list.</summary>
      <returns>Returns a generic list of type <see cref="T:System.Xml.XPath.XPathItem" />.</returns>
      <param name="name">A value of type string.</param>
      <param name="namespaceUri">A value of type string.</param>
      <param name="args">A sequence of <see cref="System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryContext.LateBoundFunctionExists(System.String,System.String)">
      <summary>Returns true if the late-bound object identified by <paramref name="namespaceUri" /> contains a method that matches <paramref name="name" />.</summary>
      <returns>true if the late bound object matches name; otherwise false.</returns>
      <param name="name">A value of type string.</param>
      <param name="namespaceUri">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryContext.OnXsltMessageEncountered(System.String)">
      <summary>Raises an <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> event.</summary>
      <param name="message">A value of type string.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryContext.QueryNameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> instance.</summary>
      <returns>Returns an instance of the <see cref="T:System.Xml.XmlNameTable" />.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence">
      <summary>A sequence of XML items that dynamically expands and allows random access to items.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryItemSequence.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> class. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryItemSequence.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> class. </summary>
      <param name="capacity">A value of type Int32.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryItemSequence.#ctor(System.Xml.XPath.XPathItem)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> class. </summary>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryItemSequence.AddClone(System.Xml.XPath.XPathItem)">
      <summary>Adds an item to the sequence. If the item is a navigator, this method clones it before adding it to the sequence.</summary>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryItemSequence.CreateOrReuse(System.Xml.Xsl.Runtime.XmlQueryItemSequence)">
      <summary>Clears and reuses an <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> object if it is available. If the <paramref name="seq" /> parameter is null, creates a new <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" />.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> class.</returns>
      <param name="seq">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryItemSequence.CreateOrReuse(System.Xml.Xsl.Runtime.XmlQueryItemSequence,System.Xml.XPath.XPathItem)">
      <summary>Clears and reuses an <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> object if it is available. If the <paramref name="seq" /> parameter is null, creates a new <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" />. This method then adds a new item to reused or new sequence.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> class.</returns>
      <param name="seq">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryItemSequence" /> class.</param>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.XmlQueryItemSequence.Empty">
      <summary>Returns a properly initialized, empty <see cref="T:XmlQueryItemSequence" />.</summary>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence">
      <summary>A sequence of XML nodes that dynamically expands and allows random access to items.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.#ctor(System.Collections.Generic.IList{System.Xml.XPath.XPathNavigator})">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class. </summary>
      <param name="list">A sequence of <see cref="T:System.Xml.XPath.XPathNavigator" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class. </summary>
      <param name="capacity">A value of type Int32.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.#ctor(System.Xml.XPath.XPathNavigator)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class. </summary>
      <param name="navigator">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.#ctor(System.Xml.XPath.XPathNavigator[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class. </summary>
      <param name="array">An array of instances of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
      <param name="size">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.AddClone(System.Xml.XPath.XPathNavigator)">
      <summary>Clone the navigator and then adds a node to the sequence.</summary>
      <param name="navigator">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.CreateOrReuse(System.Xml.Xsl.Runtime.XmlQueryNodeSequence)">
      <summary>Clears and reuses the specified <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> if it is available. If the <paramref name="seq" /> parameter is null, creates a new <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" />.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class.</returns>
      <param name="seq">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.CreateOrReuse(System.Xml.Xsl.Runtime.XmlQueryNodeSequence,System.Xml.XPath.XPathNavigator)">
      <summary>Clears and reuses the specified <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> if it is available. If the <paramref name="seq" /> parameter is null, creates a new <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> and adds <paramref name="navigator" /> to the sequence.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class.</returns>
      <param name="seq">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class.</param>
      <param name="navigator">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.DocOrderDistinct(System.Collections.Generic.IComparer{System.Xml.XPath.XPathNavigator})">
      <summary>Returns a sequence that contains all the distinct nodes in this cache, sorted in document order.</summary>
      <returns>A sequence of <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> class instances.</returns>
      <param name="comparer">A sequence of <see cref="T:System.Xml.XPath.XPathNavigator" /> instances.</param>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.Empty">
      <summary>Gets an empty <see cref="T:System.Xml.Xsl.Runtime.XmlQueryNodeSequence" /> that is properly initialized.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.IsDocOrderDistinct">
      <summary>If this property is true, the nodes in this cache are in document order with no duplicates.</summary>
      <returns>true if the nodes are distinct, otherwise return false.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#ICollection{T}#Add(System.Xml.XPath.XPathItem)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
      <param name="value">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#ICollection{T}#Contains(System.Xml.XPath.XPathItem)">
      <summary>Returns true if the specified value is in the sequence.</summary>
      <returns>true if the value is in the sequence; otherwise, false.</returns>
      <param name="value">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#ICollection{T}#CopyTo(System.Xml.XPath.XPathItem[],System.Int32)">
      <summary>Copies the contents of this sequence to the specified array, starting at the specified index in the target array.</summary>
      <param name="array">An array of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
      <param name="index">A value of type int.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Specifies that items cannot be added, removed, or modified through the <see cref="T:System.Collections.Generic.ICollection`1" /> interface.</summary>
      <returns>true if the collection is read only; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#ICollection{T}#Remove(System.Xml.XPath.XPathItem)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
      <returns>true if the item is removed; otherwise, false.</returns>
      <param name="value">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns the <see cref="T:System.Collections.Generic.IEnumerator" /> of <see cref="T:System.Xml.XPathItem" /> implementation.</summary>
      <returns>The IEnumerator&lt;XPathItem&gt; implementation.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#IList{T}#IndexOf(System.Xml.XPath.XPathItem)">
      <summary>Returns the index of the specified value in the sequence.</summary>
      <returns>The index of the specified value in the sequence.</returns>
      <param name="value">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#IList{T}#Insert(System.Int32,System.Xml.XPath.XPathItem)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
      <param name="index">A value of type int.</param>
      <param name="value">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Returns the item at the specified index.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</returns>
      <param name="index">A value of type Int32.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryNodeSequence.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
      <param name="index">A value of type int.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlQueryOutput">
      <summary>Represents an <see cref="T:System.Xml.XmlWriter" /> that provides additional functionality that is required for outputting the results of XSLT transformations. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.Close">
      <summary>This method is implemented as empty and does nothing.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.EndCopy(System.Xml.XPath.XPathNavigator)">
      <summary>Ends the shallow copy of the navigator's current node. This method should only be called for element and document nodes.</summary>
      <param name="navigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.EndTree">
      <summary>Writes the end of the tree.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.Flush">
      <summary>This method is implemented as empty and does nothing.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.LookupPrefix(System.String)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>A string that contains the prefix.</returns>
      <param name="ns">String that contains namespace name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.StartCopy(System.Xml.XPath.XPathNavigator)">
      <summary>Begins the shallow copy of the navigator's current node to output. </summary>
      <returns>true if EndCopy should be called to complete the copy operation; otherwise, false.</returns>
      <param name="navigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.StartElementContentUnchecked">
      <summary>Called after an element's attributes have been enumerated, but before any children have been enumerated. Well-formedness is assumed, so no additional checks are performed.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.StartTree(System.Xml.XPath.XPathNodeType)">
      <summary>Starts the construction of a new tree.</summary>
      <param name="rootType">
        <see cref="T:System.Xml.XPath.XPathNodeType" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="buffer">
        <see cref="T:System.Byte" /> buffer object that contains data to write.</param>
      <param name="index">
        <see cref="T:System.Int32" /> that contains start index.</param>
      <param name="count">
        <see cref="T:System.Int32" /> that contains count bytes.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteCData(System.String)">
      <summary> Empty implementation that does nothing.</summary>
      <param name="text">String that contains data to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteCharEntity(System.Char)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="ch">
        <see cref="T:System.Char" /> that contains a character to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> array of buffer that contains data to write.</param>
      <param name="index">
        <see cref="T:System.Int32" /> that contains start index.</param>
      <param name="count">
        <see cref="T:System.Int32" /> that contains count of characters to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteComment(System.String)">
      <summary>Writes the comment. The method does not verify well-formedness. Other methods called by this one do the necessary checks.</summary>
      <param name="text">String that contains the comment to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteCommentString(System.String)">
      <summary>Cache the comment's string.</summary>
      <param name="text">String that contains the comment to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>Throws <see cref="T:System.NotSupportedException" />. Should never be called.</summary>
      <param name="name">String that contains document name.</param>
      <param name="pubid">String that contains publication id.</param>
      <param name="sysid">String that contains system id.</param>
      <param name="subset">String that contains subset name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndAttribute">
      <summary>Checks the attribute for well-formedness and writes the end of the attribute.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndAttributeUnchecked">
      <summary>Writes the end of the attribute. There is an assumption of well-formedness, so no additional checks are performed.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndComment">
      <summary>Checks the comment for well-formedness and writes the end of the comment.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndDocument">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndElement">
      <summary>Checks the element for well-formedness and writes the end of the element.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndElementUnchecked(System.String)">
      <summary>Writes the end of the element with local name. Well-formedness is assumed, so no additional checks are performed.</summary>
      <param name="localName">String that contains local name of element.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndElementUnchecked(System.String,System.String,System.String)">
      <summary>Writes the end of the element with prefix, local name, and namespace. No checks are performed.</summary>
      <param name="prefix">String that contains element prefix.</param>
      <param name="localName">String that contains local name of element.</param>
      <param name="ns">String that contains namespace name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndNamespace">
      <summary>Checks the namespace for well-formedness and writes the namespace.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndProcessingInstruction">
      <summary>Checks the processing instruction for well-formedness and writes the processing instruction.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEndRoot">
      <summary>Writes the end of the root of the tree and resets the state.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteEntityRef(System.String)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="name">String that contains name of entity.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteFullEndElement">
      <summary>Checks the element for well-formedness before writing the end of the element.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteItem(System.Xml.XPath.XPathItem)">
      <summary>Write an item to output.  If currently constructing an Xml tree, then the item is always copied. At the top-level, the item's identity is preserved unless it is an atomic value.</summary>
      <param name="item">
        <see cref="T:System.Xml.XPath.XPathItem" /> object to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteNamespaceDeclaration(System.String,System.String)">
      <summary>Checks the namespace declaration for well-formedness and writes the namespace declaration.</summary>
      <param name="prefix">String that contains namespace prefix.</param>
      <param name="ns">String that contains namespace name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteNamespaceDeclarationUnchecked(System.String,System.String)">
      <summary>Adds a new namespace declaration - xmlns:prefix="ns" - to the set of in-scope declarations. This method does not perform any additional checks.</summary>
      <param name="prefix">String that contains namespace prefix.</param>
      <param name="ns">String that contains namespace name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteNamespaceString(System.String)">
      <summary>Caches the namespace's text.</summary>
      <param name="text">String that contains fully qualified namespace.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteProcessingInstruction(System.String,System.String)">
      <summary>Writes the processing instruction. No checks for well-formedness are done by this method; the called methods do checks if needed.</summary>
      <param name="target">String that contains target of instruction.</param>
      <param name="text">String that contains text of instruction.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteProcessingInstructionString(System.String)">
      <summary>Caches the processing instruction's text.</summary>
      <param name="text">String that contains instruction.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> buffer array to be written.</param>
      <param name="index">
        <see cref="T:System.Int32" /> that contains start index.</param>
      <param name="count">
        <see cref="T:System.Int32" /> that contains count characters to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteRaw(System.String)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="data">String that contains raw data.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteRawUnchecked(System.String)">
      <summary>Writes a text block without escaping special characters.</summary>
      <param name="text">String that contains text to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>Checks the attribute for well-formedness before writing the start of the attribute.</summary>
      <param name="prefix">String that contains prefix of attribute.</param>
      <param name="localName">String that contains local name of attribute.</param>
      <param name="ns">String that contains namespace of attribute.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttributeComputed(System.String,System.Int32)">
      <summary>Writes an attribute with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="tagName">String that contains tag name.</param>
      <param name="prefixMappingsIndex">
        <see cref="T:System.Int32" /> that contains prefix mapping index.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttributeComputed(System.String,System.String)">
      <summary>Writes an attribute with a name that is computed from a "prefix:localName" tag name and a set of prefix mappings.</summary>
      <param name="tagName">String that contains tag name of attribute.</param>
      <param name="ns">String that contains namespace of attribute.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttributeComputed(System.Xml.XmlQualifiedName)">
      <summary>Writes an attribute with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="name">String that contains name of attribute.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttributeComputed(System.Xml.XPath.XPathNavigator)">
      <summary>Writes an attribute with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="navigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttributeLocalName(System.String)">
      <summary>Writes the start of the attribute with an empty prefix, namespace, and null schema type.</summary>
      <param name="localName">String that contains local name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttributeUnchecked(System.String)">
      <summary>Writes the start of the attribute with local name.</summary>
      <param name="localName">String that contains the local name of the attribute.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartAttributeUnchecked(System.String,System.String,System.String)">
      <summary>Writes the start of the attribute with prefix, local name and ns without checks for well-formedness.</summary>
      <param name="prefix">String that contains the prefix of the namespace.</param>
      <param name="localName">String that contains the local name of the attribute.</param>
      <param name="ns">String that contains the namespace.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartComment">
      <summary>Checks the start of the comment for well-formedness and writes the start of the comment.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartDocument">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartDocument(System.Boolean)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="standalone">Boolean that indicates whether to write the XML declaration with the version number that appears at the beginning of the document.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElement(System.String,System.String,System.String)">
      <summary>Writes start element after checks that ensure well-formedness.</summary>
      <param name="prefix">String that contains the namespace prefix.</param>
      <param name="localName">String that contains the local name of the element.</param>
      <param name="ns">String that contains the namespace name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElementComputed(System.String,System.Int32)">
      <summary>Writes an element with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="tagName">String that contains the tag name.</param>
      <param name="prefixMappingsIndex">
        <see cref="T:System.Int32" /> that contains the index.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElementComputed(System.String,System.String)">
      <summary>Writes an element with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="tagName">String that contains the tag name.</param>
      <param name="ns">String that contains the namespace name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElementComputed(System.Xml.XmlQualifiedName)">
      <summary>Writes an element with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> that contains the name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElementComputed(System.Xml.XPath.XPathNavigator)">
      <summary>Writes an element with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="navigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElementLocalName(System.String)">
      <summary>Writes the local name with an empty prefix and namespace.</summary>
      <param name="localName">String that contains the local name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElementUnchecked(System.String)">
      <summary>Writes the start of an element. There is an assumption of well-formedness, so no additional checks are performed.</summary>
      <param name="localName">String that contains the local name of the start element.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartElementUnchecked(System.String,System.String,System.String)">
      <summary>Writes an element with a name that is computed from a prefix:localName tag name and a set of prefix mappings.</summary>
      <param name="prefix">String that contains the namespace prefix.</param>
      <param name="localName">String that contains the local name of the start element.</param>
      <param name="ns">String that contains the namespace name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartNamespace(System.String)">
      <summary>Checks for well-formedness and writes the start of the namespace.</summary>
      <param name="prefix">String that contains the namespace prefix.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartProcessingInstruction(System.String)">
      <summary>Checks the comment for well-formedness and writes the start of the processing instruction.</summary>
      <param name="target">String that contains the name of the target of the processing instruction.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStartRoot">
      <summary>Checks the root of the tree for well-formedness and writes the root of the tree.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteState">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>A <see cref="T:System.Xml.WriteState" /> object.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteString(System.String)">
      <summary>Checks the string for well-formedness and writes text.</summary>
      <param name="text">String that contains text to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteStringUnchecked(System.String)">
      <summary>Writes text. Well-formedness is assumed, so no checks are performed.</summary>
      <param name="text">String that contains text to write.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="lowChar">
        <see cref="T:System.Char" /> of the low character.</param>
      <param name="highChar">
        <see cref="T:System.Char" /> of the high character.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.WriteWhitespace(System.String)">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="ws">String that contains the whitespace to write.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryOutput.XmlLang">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>A string that contains the language identifier.</returns>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryOutput.XmlSpace">
      <summary>Throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlSpace" /> object.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryOutput.XsltCopyOf(System.Xml.XPath.XPathNavigator)">
      <summary>Copies a node by value to output according to the following Xslt rules: identity is never preserved, if the item is an Rtf, preserve serialization hints when copying, and if the item is a root node, copy the children of the root.</summary>
      <param name="navigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlQueryRuntime">
      <summary>Provides methods and properties to support the XSLT processor.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.AddNewIndex(System.Xml.XPath.XPathNavigator,System.Int32,System.Xml.Xsl.Runtime.XmlILIndex)">
      <summary>Adds a newly built index over the specified context document to the existing collection of indexes.</summary>
      <param name="context">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
      <param name="indexId">A value of type int.</param>
      <param name="index">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlILIndex" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.ChangeTypeXsltArgument(System.Int32,System.Object,System.Type)">
      <summary>Converts a value from the CLR type of the <paramref name="value" /> parameter to CLR <paramref name="destinationType" /> by using V1 XSLT rules. Converts any result tree fragment values to nodes.</summary>
      <returns>A value of type object.</returns>
      <param name="indexType">A value of type Int32.</param>
      <param name="value">A value of type object.</param>
      <param name="destinationType">A value of type Type.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.ChangeTypeXsltResult(System.Int32,System.Object)">
      <summary>Converts from the CLR type of the <paramref name="value" /> parameter to the default CLR type by which intermediate language generation represents the XML type, based on the conversion rules of the XML type.</summary>
      <returns>A value of type object.</returns>
      <param name="indexType">A value of type int.</param>
      <param name="value">A value of type object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.ComparePosition(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator)">
      <summary>Compares the relative positions of two navigators.</summary>
      <returns>-1 if <paramref name="navigatorThis" /> is before <paramref name="navigatorThat" />; 1 if <paramref name="navigatorThis" /> is after <paramref name="navigatorThat" />; 0 if both navigators are positioned at the same node.</returns>
      <param name="navigatorThis">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
      <param name="navigatorThat">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.CreateCollation(System.String)">
      <summary>Creates a collation from a string.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</returns>
      <param name="collation">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.DebugGetGlobalNames">
      <summary>Returns an array containing the names of all the global variables and parameters used in this query.</summary>
      <returns>An array of string values.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.DebugGetGlobalValue(System.String)">
      <summary>Gets the value of a global value that has the specified name.</summary>
      <returns>A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances, or null if there is no global value that has the specified name.</returns>
      <param name="name">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.DebugGetXsltValue(System.Collections.IList)">
      <summary>Converts a sequence to its appropriate XSLT type.</summary>
      <returns>A value of type object.</returns>
      <param name="seq">An instance of the <see cref="T:System.Collections.IList" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.DebugSetGlobalValue(System.String,System.Object)">
      <summary>Sets the value of a global value that has the specified name.</summary>
      <param name="name">A value of type string.</param>
      <param name="value">A value of type object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.DocOrderDistinct(System.Collections.Generic.IList{System.Xml.XPath.XPathNavigator})">
      <summary>Gets distinct sorted nodes from the specified sequence. </summary>
      <returns>An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</returns>
      <param name="seq">A sequence of <see cref="T:System.Xml.XPath.XPathNavigator" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.EarlyBoundFunctionExists(System.String,System.String)">
      <summary>Determines whether the specified early-bound object contains a method with the specified name.</summary>
      <returns>true if the early-bound object identified by <paramref name="namespaceUri" /> contains a method that matches <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The method name to look for.</param>
      <param name="namespaceUri">Identifies the early-bound object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.EndRtfConstruction(System.Xml.Xsl.Runtime.XmlQueryOutput@)">
      <summary>Finishes constructing an RTF.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</returns>
      <param name="output">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryOutput" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.EndSequenceConstruction(System.Xml.Xsl.Runtime.XmlQueryOutput@)">
      <summary>Finishes constructing a nested sequence of items.</summary>
      <returns>A sequence of instances of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</returns>
      <param name="output">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryOutput" /> class.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryRuntime.ExternalContext">
      <summary>Returns the object that manages external user context information, such as data sources, parameters, extension objects, and so on.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.XmlQueryContext" /> class.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.FindIndex(System.Xml.XPath.XPathNavigator,System.Int32,System.Xml.Xsl.Runtime.XmlILIndex@)">
      <summary>Returns the index with the specified ID if it has already been created over the specified document, and returns true. Otherwise, creates a new, empty index and returns false.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlILIndex" /> class.</returns>
      <param name="context">The context document.</param>
      <param name="indexId">The index ID to look for.</param>
      <param name="index">The returned index.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.GenerateId(System.Xml.XPath.XPathNavigator)">
      <summary>Generate a unique string identifier for the specified node.</summary>
      <returns>A value of type string.</returns>
      <param name="navigator">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.GetAtomizedName(System.Int32)">
      <summary>Gets the atomized name at the specified index in the array of names.</summary>
      <returns>A value of type string.</returns>
      <param name="index">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.GetCollation(System.Int32)">
      <summary>Gets a collation that was statically created.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</returns>
      <param name="index">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.GetEarlyBoundObject(System.Int32)">
      <summary>Gets the specifiied early-bound extension object. If this object does not yet exist, creates an instance using the corresponding <see cref="T:System.Reflection.ConstructorInfo" />.</summary>
      <returns>A value of type object.</returns>
      <param name="index">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.GetGlobalValue(System.Int32)">
      <summary>Returns the value that is bound to the specified global variable. If the value has not yet been computed, computes it and stores it in the global variable.</summary>
      <returns>The value that is bound to the specified global variable. </returns>
      <param name="index">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.GetNameFilter(System.Int32)">
      <summary>Gets the name filter at the specified index in the array of filters.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class.</returns>
      <param name="index">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.GetTypeFilter(System.Xml.XPath.XPathNodeType)">
      <summary>Gets a filter that filters nodes of the specified type.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class.</returns>
      <param name="nodeType">An instance of the <see cref="T:System.Xml.XPath.XPathNodeType" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.IsGlobalComputed(System.Int32)">
      <summary>Returns true if the specified global value has already been computed.</summary>
      <returns>true if the value has been computed; otherwise, false.</returns>
      <param name="index">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.IsQNameEqual(System.Xml.XPath.XPathNavigator,System.Int32,System.Int32)">
      <summary>Determines whether the <see cref="P:System.Xml.Xpath.LocalName" /> and <see cref="P:System.Xml.Xpath.NamespaceURI" /> properties of the specified <see cref="T:System.Xml.XPath.XPathNavigator" /> are equal to the names specified in the parameters.</summary>
      <returns>true if the names are equal; otherwise, false.</returns>
      <param name="navigator">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
      <param name="indexLocalName">A value of type int.</param>
      <param name="indexNamespaceUri">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.IsQNameEqual(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator)">
      <summary>Compares the <see cref="P:System.Xml.Xpath.LocalName" /> and <see cref="P:System.Xml.Xpath.NamespaceURI" /> properties of two <see cref="T:System.Xml.XPath.XPathNavigator" /> instances to check if they are equal.</summary>
      <returns>true if the names are equal; otherwise, false.</returns>
      <param name="n1">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
      <param name="n2">An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.MatchesXmlType(System.Collections.Generic.IList{System.Xml.XPath.XPathItem},System.Int32)">
      <summary>Returns true if the type of every item in the specified sequence matches the XML type that the specified index identifies.</summary>
      <returns>true if the type of <paramref name="seq" /> is a subtype of the <paramref name="indexType" />; otherwise, false.</returns>
      <param name="seq">An <see cref="T:System.Collections.Generic.IList" /> of <see cref="T:System.Xml.XPath.XPathItem" />objects.</param>
      <param name="indexType">The index.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.MatchesXmlType(System.Collections.Generic.IList{System.Xml.XPath.XPathItem},System.Xml.Schema.XmlTypeCode)">
      <summary>Determines whether the type of the specified sequence is a subtype of the specified singleton type.</summary>
      <returns>true if the type of <paramref name="seq" /> is a subtype the type specified by <paramref name="code" />; otherwise, false.</returns>
      <param name="seq">A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
      <param name="code">A singleton type.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.MatchesXmlType(System.Xml.XPath.XPathItem,System.Int32)">
      <summary>Returns true if the type of the specified <see cref="T:System.Xml.XPath.XPathItem" /> object matches the specified XML type.</summary>
      <returns>true if the type of the specified <see cref="T:System.Xml.XPathItem" /> matches the specified XML type; otherwise, false.</returns>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
      <param name="indexType">The index in the array of XML types..</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.MatchesXmlType(System.Xml.XPath.XPathItem,System.Xml.Schema.XmlTypeCode)">
      <summary>Returns true if the type of the <see cref="T:System.Xml.XPath.XPathItem" /> object is a subtype of a type identified by the specified <see cref="T:System.Xml.Schema.XmlTypeCode" />.</summary>
      <returns>Returns true if the type of the <see cref="T:System.Xml.XPath.XPathItem" /> object is a subtype of a type identified by the specified <see cref="T:System.Xml.Schema.XmlTypeCode" />, otherwise, false.</returns>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
      <param name="code">An instance of the <see cref="T:System.Xml.Schema.XmlTypeCode" /> class.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryRuntime.NameTable">
      <summary>Returns the name table used to atomize all names used by the query.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XmlNameTable" /> class.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.OnCurrentNodeChanged(System.Xml.XPath.XPathNavigator)">
      <summary>Used for debugging in Visual Studio. Called after the current node has changed.</summary>
      <returns>An integer that indicates the status of the change. Used for internal testing only.</returns>
      <param name="currentNode">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object that identifies the node.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryRuntime.Output">
      <summary>Gets the output writer object.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryOutput" /> class.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.ParseTagName(System.String,System.Int32)">
      <summary>Parses the specified tag name and resolves the resulting prefix. If the prefix cannot be resolved, an error is thrown. </summary>
      <returns>An instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class.</returns>
      <param name="tagName">The tag name.</param>
      <param name="indexPrefixMappings">The index. </param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.ParseTagName(System.String,System.String)">
      <summary>Parses the specified tag name. Returns an <see cref="T:System.Xml.XmlQualifiedName" /> that consists of the parsed local name and the specified namespace.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class.</returns>
      <param name="tagName">The tag name.</param>
      <param name="ns">The namespace.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.SendMessage(System.String)">
      <summary>Reports query execution information to the event handler.</summary>
      <param name="message">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.SetGlobalValue(System.Int32,System.Object)">
      <summary>Returns the value that is bound to the specified global variable or parameter.</summary>
      <param name="index">A value of type int.</param>
      <param name="value">A value of type object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.StartRtfConstruction(System.String,System.Xml.Xsl.Runtime.XmlQueryOutput@)">
      <summary>Starts constructing an RTF and returns a new <see cref="T:System.Xml.Xsl.Runtime.XmlQueryOutput" /> object that will be used to construct this RTF.</summary>
      <param name="baseUri">A value of type string.</param>
      <param name="output">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryOutput" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.StartSequenceConstruction(System.Xml.Xsl.Runtime.XmlQueryOutput@)">
      <summary>Starts constructing a nested sequence of items. Returns a new <see cref="T:System.Xml.Xsl.Runtime.XmlQueryOutput" /> that will be used to construct this new sequence.</summary>
      <param name="output">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQueryOutput" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.TextRtfConstruction(System.String,System.String)">
      <summary>Constructs a new <see cref="T:System.Xml.XPath.XPathNavigator" /> from the specified text.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</returns>
      <param name="text">A value of type string.</param>
      <param name="baseUri">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQueryRuntime.ThrowException(System.String)">
      <summary>Throws an XML exception that has the specified message text.</summary>
      <param name="text">A value of type string.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQueryRuntime.XsltFunctions">
      <summary>Returns the object that manages the state. The state object is required to implement various XSLT functions.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XsltLibrary" /> class.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1">
      <summary>A sequence of XML values that dynamically expands and allows random access to items.</summary>
      <typeparam name="T">The type of this <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" />.</typeparam>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> class. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> class. </summary>
      <param name="capacity">The size of this collection.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.#ctor(`0)">
      <summary>Constructs a singleton <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> that has <paramref name="value" /> as its only element.</summary>
      <param name="value">The only value in this <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" />.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.#ctor(`0[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> class. </summary>
      <param name="array">An array of <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence" /> instances.</param>
      <param name="size">The size of the array.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.Add(`0)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
      <param name="value">An object to add to the collection.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.Clear">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.Contains(`0)">
      <summary>Returns true if the specified value is in the sequence.</summary>
      <returns>true if the specified value is in the sequence; otherwise, false.</returns>
      <param name="value">The value to find in the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the contents of this sequence to the specified array, starting at the specified index in the array.</summary>
      <param name="array">The array to copy the content of the <see cref="T:System.Collections.Generic.ICollection`1collection" /> to. </param>
      <param name="index">A value of type int.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.Count">
      <summary>Returns the number of items in the sequence.</summary>
      <returns>A value of type int.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.CreateOrReuse(System.Xml.Xsl.Runtime.XmlQuerySequence{`0})">
      <summary>Clears and reuses the specified <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> if it is available. If the <paramref name="seq" /> parameter is null, creates a new <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" />.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence" /> class.</returns>
      <param name="seq">An <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> instance to be reused.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.CreateOrReuse(System.Xml.Xsl.Runtime.XmlQuerySequence{`0},`0)">
      <summary>Clears and reuses the specified <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> it is available. If the <paramref name="seq" /> parameter is null, creates a new <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> and adds <paramref name="item" /> to the collection.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> class.</returns>
      <param name="seq">An <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> instance to be reused.</param>
      <param name="item">An item to add. </param>
    </member>
    <member name="F:System.Xml.Xsl.Runtime.XmlQuerySequence`1.Empty">
      <summary>Creates a new instance of <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.GetEnumerator">
      <summary>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</summary>
      <returns>An instance of the <see cref="T:System.Collections.Generic.IEnumerator`1" /> class.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.IndexOf(`0)">
      <summary>Returns the index of the specified value in the sequence.</summary>
      <returns>The index.</returns>
      <param name="value">The value for which to get the index.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.Item(System.Int32)">
      <summary>Returns the item at the specified index.</summary>
      <returns>The item at the specified index. </returns>
      <param name="index">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.OnItemsChanged">
      <summary>Called when one or more items in the cache have been added or removed. This method can also be called from the <see cref="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.SortByKeys(System.Array)" /> method.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.SortByKeys(System.Array)">
      <summary>Sort the items in the cache using the keys contained in the specified array.</summary>
      <param name="keys">A value of type array.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="value">The sequence value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#Generic#ICollection{T}#Remove(`0)"></member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="index">The sequence index.</param>
      <param name="value">The sequence value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="index">The sequence index.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of this sequence to the specified array, starting at the specified index in the target array.</summary>
      <param name="array">The specified array.</param>
      <param name="index">The specified index.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#ICollection#IsSynchronized">
      <summary>Returns false. The <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> is not thread-safe.</summary>
      <returns>false</returns>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#ICollection#SyncRoot">
      <summary>Returns this instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> class. This instance can be used to synchronize access.</summary>
      <returns>This instance of <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" />.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns the <see cref="T:System.Collections.IEnumerator" />.</summary>
      <returns>Returns the <see cref="T:System.Collections.IEnumerator" /> of the query sequence collection.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#Add(System.Object)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="value">The sequence value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#Clear">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#Contains(System.Object)">
      <summary>Returns true if the specified value is in the sequence.</summary>
      <returns>true if the specified value is in the sequence; otherwise, false.</returns>
      <param name="value">The specified value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Returns the index of the specified value in the sequence.</summary>
      <returns>The index of the specified value in the sequence.</returns>
      <param name="value">The specified value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="index">The specified index.</param>
      <param name="value">The specified value.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#IsFixedSize">
      <summary>Returns true. The items cannot be added, removed, or modified.</summary>
      <returns>Returns true.</returns>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#IsReadOnly">
      <summary>If the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> is read-only, this property returns true.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#Item(System.Int32)">
      <summary>Returns the item at the specified index.</summary>
      <returns>An item at the specified index.</returns>
      <param name="index">The specified index.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#Remove(System.Object)">
      <summary>Not implemented. Throws the <see cref="T:System.NotSupportedException" /> exception. </summary>
      <param name="value">The specified value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlQuerySequence`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Throws the <see cref="T:System.NotSupportedException" /> exception.</summary>
      <param name="index">The specified index.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator">
      <summary>Accumulates a list of sort keys and stores them in an array.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.AddDateTimeSortKey(System.Xml.Xsl.Runtime.XmlCollation,System.DateTime)">
      <summary>Creates a new <see cref="T:System.DateTime" /> sort key and appends it to the current run of sort keys.</summary>
      <param name="collation">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</param>
      <param name="value">A DateTime value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.AddDecimalSortKey(System.Xml.Xsl.Runtime.XmlCollation,System.Decimal)">
      <summary>Creates a new <see cref="T:System.Decimal" /> sort key and appends it to the current run of sort keys.</summary>
      <param name="collation">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</param>
      <param name="value">A decimal value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.AddDoubleSortKey(System.Xml.Xsl.Runtime.XmlCollation,System.Double)">
      <summary>Creates a new <see cref="T:System.Double" /> sort key and appends it to the current run of sort keys.</summary>
      <param name="collation">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</param>
      <param name="value">A double value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.AddEmptySortKey(System.Xml.Xsl.Runtime.XmlCollation)">
      <summary>Creates a new empty sort key and appends it to the current run of sort keys.</summary>
      <param name="collation">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.AddIntegerSortKey(System.Xml.Xsl.Runtime.XmlCollation,System.Int64)">
      <summary>Creates a new <see cref="T:System.Int64" /> sort key and appends it to the current run of sort keys.</summary>
      <param name="collation">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</param>
      <param name="value">A value of type Int64.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.AddIntSortKey(System.Xml.Xsl.Runtime.XmlCollation,System.Int32)">
      <summary>Creates a new <see cref="T:System.Int32" /> sort key and appends it to the current run of sort keys.</summary>
      <param name="collation">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</param>
      <param name="value">A value of type Int32.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.AddStringSortKey(System.Xml.Xsl.Runtime.XmlCollation,System.String)">
      <summary>Creates a new <see cref="T:System.String" /> sort key and appends it to the current run of sort keys.</summary>
      <param name="collation">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlCollation" /> class.</param>
      <param name="value">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.Create">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.FinishSortKeys">
      <summary>Finishes creating the current run of sort keys and begins a new run.</summary>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator.Keys">
      <summary>Gets an array of sort keys that was constructed by the internal <see cref="T:System.Xml.Xsl.Runtime.XmlSortKeyAccumulator" /> class.</summary>
      <returns>An array of sort keys.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XPathFollowingIterator">
      <summary>Iterates over all following nodes according to the XPath following-axis rules.  </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathFollowingIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.XPathFollowingIterator" />. The <see cref="T:System.Xml.Xsl.Runtime.XPathFollowingIterator" /> does not contain duplicates.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
      <param name="filter">
        <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> object.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XPathFollowingIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathFollowingIterator.MoveNext">
      <summary>Positions the iterator to the next following node.</summary>
      <returns>true if the iterator was set to the next following node; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XPathFollowingMergeIterator">
      <summary>Iterates over all following nodes according to the XPath following axis rules. </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathFollowingMergeIterator.Create(System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.XPathFollowingMergeIterator" />.</summary>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on name.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XPathFollowingMergeIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.  </returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathFollowingMergeIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Moves the iterator to the next following node.  </summary>
      <returns>Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NoMoreNodes" /> if there are no more following nodes. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NeedInputNode" /> if the next input node must be fetched first. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.HaveCurrentNode" /> if the <see cref="P:System.Xml.Xsl.Runtime.XPathFollowingMergeIterator.Current" /> property was set to the next node while iterating through the nodes.</returns>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator">
      <summary>Iterates over all preceding nodes according to the XPath preceding axis rules, and returns nodes in document order without duplicates.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator" />.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</param>
      <param name="filter">
        <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> object.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator.MoveNext">
      <summary>Positions the iterator on the next preceding node.</summary>
      <returns>true if the iterator was set to the next preceding node; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XPathPrecedingIterator">
      <summary>Iterates over all preceding nodes according to the XPath preceding axis rules, and returns nodes in reverse document order without duplicates.  </summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathPrecedingIterator.Create(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.XPathPrecedingIterator" />.</summary>
      <param name="context">The node from which you start traversing ancestors.</param>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name. For more information, see <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" />.  </param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XPathPrecedingIterator.Current">
      <summary>Returns the current result navigator. </summary>
      <returns>The current result navigator.</returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathPrecedingIterator.MoveNext">
      <summary>Positions the iterator on the next preceding node in reverse document order.</summary>
      <returns>true if the iterator was set to the next preceding node; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator">
      <summary>Iterates over all preceding nodes according to the XPath preceding axis rules, except that nodes are always returned in document order. Merges multiple sets of preceding nodes in document order and removes duplicates.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator.Create(System.Xml.Xsl.Runtime.XmlNavigatorFilter)">
      <summary>Initializes the <see cref="T:System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator" />.</summary>
      <param name="filter">An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlNavigatorFilter" /> class, which enables you to filter nodes based on the name.</param>
    </member>
    <member name="P:System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator.Current">
      <summary>Returns the current result navigator.  </summary>
      <returns>The current result navigator.  </returns>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator.MoveNext(System.Xml.XPath.XPathNavigator)">
      <summary>Positions this iterator to the next preceding node in document order.  </summary>
      <returns>Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NoMoreNodes" /> if there are no more preceding nodes. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.NeedInputNode" /> if the next input node must be fetched first. Returns <see cref="F:System.Xml.Xsl.Runtime.IteratorResult.HaveCurrentNode" /> if the <see cref="P:System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator.Current" /> property was set to the next node while iterating through the nodes.</returns>
      <param name="input">The input node. </param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XsltConvert">
      <summary>Contains conversion routines used by XSLT.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.EnsureNodeSet(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Ensures that the specified sequence of objects is not a result tree fragment and that it can be converted to a node set.</summary>
      <returns>A sequence of <see cref="T:System.Xml.XPath.XPathNavigator" /> instances.</returns>
      <param name="listItems">A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToBoolean(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Converts a specified value to Boolean.</summary>
      <returns>A value of type bool.</returns>
      <param name="listItems">A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToBoolean(System.Xml.XPath.XPathItem)">
      <summary>Converts the specified value to Boolean.</summary>
      <returns>A value of type bool.</returns>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDateTime(System.String)">
      <summary>Converts a specified value to a DateTime value.</summary>
      <returns>A value of type DateTime.</returns>
      <param name="value">A string value.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDecimal(System.Double)">
      <summary>Converts a specified value to decimal.</summary>
      <returns>A value of type decimal.</returns>
      <param name="value">A value of type double.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDouble(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Converts a specified value to double.</summary>
      <returns>A value of type double.</returns>
      <param name="listItems">A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDouble(System.Decimal)">
      <summary>Converts the specified value to double.</summary>
      <returns>A value of type double.</returns>
      <param name="value">A value of type decimal.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDouble(System.Int32)">
      <summary>Converts the specified value to double.</summary>
      <returns>A value of type double.</returns>
      <param name="value">A value of type int.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDouble(System.Int64)">
      <summary>Converts the specified value to double.</summary>
      <returns>A value of type double.</returns>
      <param name="value">A value of type Int64.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDouble(System.String)">
      <summary>Converts a specified value to double.</summary>
      <returns>A value of type double.</returns>
      <param name="value">A value of type string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToDouble(System.Xml.XPath.XPathItem)">
      <summary>Converts a specified value to double.</summary>
      <returns>A value of type double.</returns>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToInt(System.Double)">
      <summary>Converts the specified value to int.</summary>
      <returns>A value of type int.</returns>
      <param name="value">A value of type double.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToLong(System.Double)">
      <summary>Converts the specified value to long.</summary>
      <returns>A value of type long.</returns>
      <param name="value">A value of type double.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToNode(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Converts a specified value to a node.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</returns>
      <param name="listItems">A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToNode(System.Xml.XPath.XPathItem)">
      <summary>Converts the specified value to a node.</summary>
      <returns>An instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</returns>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToNodeSet(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Converts the items to a sequence of nodes.</summary>
      <returns>A sequence of <see cref="T:System.Xml.XPath.XPathNavigator" /> instances.</returns>
      <param name="listItems">A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToNodeSet(System.Xml.XPath.XPathItem)">
      <summary>Converts the specified value to a node.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Xsl.Runtime.XmlQuerySequence" /> class.</returns>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToString(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Converts the items to a string.</summary>
      <returns>A value of type string.</returns>
      <param name="listItems">A sequence of <see cref="T:System.Xml.XPath.XPathItem" /> instances.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToString(System.DateTime)">
      <summary>Converts the specified value to a string.</summary>
      <returns>A value of type string.</returns>
      <param name="value">A value of type DateTime.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToString(System.Double)">
      <summary>Converts the specified value to a string.</summary>
      <returns>A value of type string.</returns>
      <param name="value">A value of type double.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltConvert.ToString(System.Xml.XPath.XPathItem)">
      <summary>Converts the specified value to a string.</summary>
      <returns>A value of type string.</returns>
      <param name="item">An instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XsltFunctions">
      <summary>XSLT and XPath functions.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.BaseUri(System.Xml.XPath.XPathNavigator)">
      <summary>Returns the value of the base URI of the node of the node passed in by the <paramref name="navigator" /> parameter. Implements baseUri XPath function according to the W3C specification.</summary>
      <returns>The base URI as <see cref="T:System.String" />.</returns>
      <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator" /> instance that contains the node to be identified by URI.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.Contains(System.String,System.String)">
      <summary>Implements contains XPath function according to the W3C specification.</summary>
      <returns>true if the first argument string contains the second argument string; otherwise, false.</returns>
      <param name="s1">The string in which to locate <paramref name="s2" />.</param>
      <param name="s2">The string to locate in s1. </param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.EXslObjectType(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Implements exsl:object-type.</summary>
      <returns>Object type as <see cref="T:System.String" />.</returns>
      <param name="value">The <see cref="T:System.Xml.XPath.XPathItem" /> of which to determine type.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.Lang(System.String,System.Xml.XPath.XPathNavigator)">
      <summary>Implements the lang function according to the W3C XPath specification.</summary>
      <returns>
        <see cref="T:System.Boolean" />.</returns>
      <param name="value">The specified string.</param>
      <param name="context">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains context.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.MSFormatDateTime(System.String,System.String,System.String,System.Boolean)">
      <summary>Implements the ms:format-date and ms-format-timeMicrosoft XPath extension functions.</summary>
      <returns>String that contains formatted date and time.</returns>
      <param name="dateTime">String that contains date/time data.</param>
      <param name="format">String that contains format.</param>
      <param name="lang">String that contains language.</param>
      <param name="isDate">Boolean value that indicates whether date/time contains a date.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.MSLocalName(System.String)">
      <summary>Implements the ms:local-nameMicrosoft XPath extension function. </summary>
      <returns>Name as <see cref="T:System.String" />.</returns>
      <param name="name">The name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.MSNamespaceUri(System.String,System.Xml.XPath.XPathNavigator)">
      <summary>Implements the ms:namespace-uriMicrosoft XPath extension function. </summary>
      <returns>Namespace URI as <see cref="T:System.String" />.</returns>
      <param name="name">The name.</param>
      <param name="currentNode">The <see cref="T:System.Xml.XPath.XPathNavigator" /> instance.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.MSNumber(System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Implements ms:numberMicrosoft XPath extension function.</summary>
      <returns>
        <see cref="T:System.Double" />.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:System.Xml.XPath.XPathItem" />.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.MSStringCompare(System.String,System.String,System.String,System.String)">
      <summary>Implements ms:string-compareMicrosoft XPath extension function. </summary>
      <returns>If <paramref name="s1" /> &lt; <paramref name="s2" /> the method returns -1. If <paramref name="s1" /> == <paramref name="s2" /> the method returns 0. If <paramref name="s1" /> &gt; <paramref name="s2" /> the method returns 1.</returns>
      <param name="s1">The first string to compare.</param>
      <param name="s2">The second string to compare.</param>
      <param name="lang">The language. Optional</param>
      <param name="options">Specifies whether the comparison is case-sensitive.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.MSUtc(System.String)">
      <summary>Implements the ms:utcMicrosoft XPath extension function.</summary>
      <returns>A string that contains date/time information. If a string cannot be interpreted as a valid XSD date/time-related format, it returns an empty string.</returns>
      <param name="dateTime">String that contains date/time data.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.NormalizeSpace(System.String)">
      <summary>Removes leading and trailing spaces from the specified string and returns the result. Implements normalize-space function from the W3C XPath standard.</summary>
      <returns>A normalized string. </returns>
      <param name="value">The specified string.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.OuterXml(System.Xml.XPath.XPathNavigator)">
      <summary>Gets the markup representing the opening and closing tags of the node and all child nodes of the node identified by the <see cref="T:System.Xml.XPath.XPathNavigator" /> argument.</summary>
      <returns>A string that contains the opening and closing tags of the node and all child nodes of the node that is identified by the <paramref name="navigator" /> parameter.</returns>
      <param name="navigator">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> that identifies the node.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.Round(System.Double)">
      <summary>Rounds value by using XPath rounding rules. Rounds towards positive infinity. Values between -0.5 and -0.0 are rounded to -0.0 (negative zero).</summary>
      <returns>The rounded number as <see cref="T:System.Double" />.</returns>
      <param name="value">
        <see cref="T:System.Double" /> number to round.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.StartsWith(System.String,System.String)">
      <summary>Implements starts-with XPath function according to the W3C specification. </summary>
      <returns>true if the first argument string starts with the second argument string; otherwise, false.</returns>
      <param name="s1">A string, the beginning of which is compared to <paramref name="s2" />.</param>
      <param name="s2">The string to compare to the beginning of <paramref name="s1" />. </param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.Substring(System.String,System.Double)">
      <summary>Implements substring XPath function according to the W3C specification.</summary>
      <returns>The substring of the first argument starting at the position specified in the second argument</returns>
      <param name="value">The string from which to retrieve the substring.</param>
      <param name="startIndex">The starting character position of a substring in <paramref name="s" />.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.Substring(System.String,System.Double,System.Double)">
      <summary>Implements substring XPath function according to the W3C specification.</summary>
      <returns>The substring of the first argument, starting at the position specified in the second argument, with the length specified in the third argument.</returns>
      <param name="value">The string from which to retrieve the substring.</param>
      <param name="startIndex">The starting character position of a substring in <paramref name="s" />.</param>
      <param name="length">The number of characters in the substring.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.SubstringAfter(System.String,System.String)">
      <summary>Implements substring-after XPath function according to the W3C specification.</summary>
      <returns>The characters in s1 that occur after s2, or the empty string if s1 does not contain s2.</returns>
      <param name="s1">The string in which to locate s2. </param>
      <param name="s2">The string to locate in <paramref name="s1" />.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.SubstringBefore(System.String,System.String)">
      <summary>Implements substring-before XPath function according to the W3C specification.</summary>
      <returns>The characters in s1 that occur before s2, or the empty string if s1 does not contain s2.</returns>
      <param name="s1">The string in which to locate s2. </param>
      <param name="s2">The string to locate in <paramref name="s1" />.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.SystemProperty(System.Xml.XmlQualifiedName)">
      <summary>Implements system-property XSLT function according to the W3C specification.</summary>
      <returns>The value of the system property specified by the <paramref name="name" />.</returns>
      <param name="name">The name of the system property.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltFunctions.Translate(System.String,System.String,System.String)">
      <summary>Implements translate XPath function according to the W3C specification.</summary>
      <returns>The translated value as <see cref="T:System.String" />.</returns>
      <param name="arg">The original string.</param>
      <param name="mapString">The substring in <paramref name="arg" /> that should be replaced with <paramref name="transString" />.</param>
      <param name="transString">The string to replace <paramref name="mapString" /> with.</param>
    </member>
    <member name="T:System.Xml.Xsl.Runtime.XsltLibrary">
      <summary>Implements different XPath and XSLT functions.</summary>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.CheckScriptNamespace(System.String)">
      <summary>Checks that the extension and script namespaces do not clash.</summary>
      <returns>An integer used for internal infrastructure only.</returns>
      <param name="nsUri">The namespace URI.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.ElementAvailable(System.Xml.XmlQualifiedName)">
      <summary>Evaluates the argument to a string that is an XML qualified name. This method implements the element-available function specified by W3C XSL Transformations (XSLT).</summary>
      <returns>true if the expanded name is the name of an instruction. If the expanded name has a namespace URI equal to the XSLT namespace URI, then it refers to an element defined by XSLT. Otherwise, the expanded-name refers to an extension element. If the expanded name has a null namespace URI, the element-available function will return false.</returns>
      <param name="name">The XML qualified name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.EqualityOperator(System.Double,System.Collections.Generic.IList{System.Xml.XPath.XPathItem},System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Determines equality between collections of type <see cref="T:System.Xml.XPath.XPathItem" />.</summary>
      <returns>Returns true if the collections are equal, otherwise false.</returns>
      <param name="opCode">
        <see cref="T:System.Double" /> that specifies the operation to be performed</param>
      <param name="left">
        <see cref="T:System.Collections.Generic.IList" /> of type <see cref="T:System.Xml.XPath.XPathItem" />.</param>
      <param name="right">
        <see cref="T:System.Collections.Generic.IList" /> of type <see cref="T:System.Xml.XPath.XPathItem" />.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.FormatMessage(System.String,System.Collections.Generic.IList{System.String})">
      <summary>Formats an exception message composed of a format string supplied by the <paramref name="res" /> parameter and arguments contained by the <paramref name="args" /> parameter.</summary>
      <returns>A string that contains the formatted exception message.</returns>
      <param name="res">A string that contains the message resource.</param>
      <param name="args">A list of strings that represent arguments to the method.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.FormatNumberDynamic(System.Double,System.String,System.Xml.XmlQualifiedName,System.String)">
      <summary>Implements the format-number() XSLT function. For more information, see the number formatting section in the W3C Recommendation. </summary>
      <returns>Returns a string that indicates the number format. For more information, see the number formatting section in the W3C Recommendation.</returns>
      <param name="value">
        <see cref="T:System.Double" /> that contains the value to format.</param>
      <param name="formatPicture">String that contains the format picture.</param>
      <param name="decimalFormatName">
        <see cref="T:System.Xml.XmlQualifiedName" /> that contains the format name.</param>
      <param name="errorMessageName">String that contains the error message name.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.FormatNumberStatic(System.Double,System.Double)">
      <summary>Implements the format-number() XSLT function. For more information, see the number formatting section in the W3C Recommendation. </summary>
      <returns>A string that indicates the format. For more information, see the number formatting section in the W3C Recommendation.</returns>
      <param name="value">
        <see cref="T:System.Double" /> that contains value to format.</param>
      <param name="decimalFormatterIndex">
        <see cref="T:System.Double" /> that contains the formatter index.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.FunctionAvailable(System.Xml.XmlQualifiedName)">
      <summary>Implements the function-available() XSLT function. </summary>
      <returns>A Boolean value that is true if the function identified by <paramref name="name" /> is available.</returns>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> name object.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.IsSameNodeSort(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator)">
      <summary>Determines whether two nodes have the same node type and, if nodes of that node type have expanded-names, the same expanded names.</summary>
      <returns>A Boolean value that is true if two nodes have the same node type and, if nodes of that node type have expanded names, the same expanded names.</returns>
      <param name="nav1">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object to compare.</param>
      <param name="nav2">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> object to compare.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.LangToLcid(System.String,System.Boolean)">
      <summary>Converts the language identifier (as specified in the xml:lang attribute) to the culture identifier (LCID).</summary>
      <returns>A string that contains the culture identifier.</returns>
      <param name="lang">String that indicates language.</param>
      <param name="forwardCompatibility">Boolean value that is true if language is forward compatible.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.NumberFormat(System.Collections.Generic.IList{System.Xml.XPath.XPathItem},System.String,System.Double,System.String,System.String,System.Double)">
      <summary>Gets a string that indicates the number format.</summary>
      <returns>A string that indicates the number format. Used for internal infrastructure only.</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.IList" /> of strings that represent arguments to the method.</param>
      <param name="formatString">
        <see cref="T:System.Double" /> that indicates the format string.</param>
      <param name="lang">
        <see cref="T:System.Double" /> that indicates the language.</param>
      <param name="letterValue">String that contains the letter value.</param>
      <param name="groupingSeparator">String that contains the grouping separator.</param>
      <param name="groupingSize">
        <see cref="T:System.Double" /> that contains the grouping size.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.RegisterDecimalFormat(System.Xml.XmlQualifiedName,System.String,System.String,System.String)">
      <summary>Registers a decimal-format with the given expanded name. For more information, see the number formatting section in the W3C Recommendation. </summary>
      <returns>In the current implementation the return value is always 0.</returns>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> object that contains name.</param>
      <param name="infinitySymbol">String containing infinity symbol.</param>
      <param name="nanSymbol">String containing NaN symbol.</param>
      <param name="characters">String containing characters to format.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.RegisterDecimalFormatter(System.String,System.String,System.String,System.String)">
      <summary>Registers a decimal formatter object and returns a unique index assigned to it. The decimal formatter object is used by the format-number() XSLT function. For more information, see the number formatting section in the W3C Recommendation.</summary>
      <returns>Returns a unique index of type <see cref="T:System.Double" /> assigned to a decimal formatter object.</returns>
      <param name="formatPicture">String that contains the format picture.</param>
      <param name="infinitySymbol">String that contains the infinity symbol.</param>
      <param name="nanSymbol">String that contains the NaN symbol.</param>
      <param name="characters">String that contains characters to format.</param>
    </member>
    <member name="M:System.Xml.Xsl.Runtime.XsltLibrary.RelationalOperator(System.Double,System.Collections.Generic.IList{System.Xml.XPath.XPathItem},System.Collections.Generic.IList{System.Xml.XPath.XPathItem})">
      <summary>Evaluates whether the <paramref name="left" /> expression is greater than or equal to, or less than or equal to, the <paramref name="right" /> expression based on the <paramref name="opCode" /> passed.</summary>
      <returns>A Boolean value that is true if the left expression is greater than or equal to the right expression.</returns>
      <param name="opCode">Specifies how to perform the evaluation of two expressions:</param>
      <param name="left">Expression to evaluate.</param>
      <param name="right">Expression to evaluate.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Data.Services.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Services</name>
  </assembly>
  <members>
    <member name="T:System.Data.Services.ChangeInterceptorAttribute">
      <summary>The <see cref="T:System.Data.Services.ChangeInterceptorAttribute" /> on a method is used to process updates on the specified entity set name.</summary>
    </member>
    <member name="M:System.Data.Services.ChangeInterceptorAttribute.#ctor(System.String)">
      <summary>Creates a new change interceptor for an entity set specified by the parameter <paramref name="entitySetName" />.</summary>
      <param name="entitySetName">The name of the entity set that contains the entity to which the interceptor applies.</param>
    </member>
    <member name="P:System.Data.Services.ChangeInterceptorAttribute.EntitySetName">
      <summary>Gets the name of the entity set to which the interceptor applies.</summary>
      <returns>The string value that represents entity set name.</returns>
    </member>
    <member name="T:System.Data.Services.DataService`1">
      <summary>The main entry point for developing an ADO.NET Data Service. </summary>
      <typeparam name="T">Type that defines the data service.</typeparam>
    </member>
    <member name="M:System.Data.Services.DataService`1.#ctor">
      <summary>Creates a new data service that deploys data of the type indicated by the template class.</summary>
    </member>
    <member name="M:System.Data.Services.DataService`1.AttachHost(System.Data.Services.IDataServiceHost2)">
      <summary>Attaches the data service host to the data service identified by the parameter <paramref name="host" />.</summary>
      <param name="host">An instance of <see cref="T:System.Data.Services.IDataServiceHost2" />.</param>
    </member>
    <member name="M:System.Data.Services.DataService`1.CreateDataSource">
      <summary>Creates a data source of the template class that will be used by the data service.</summary>
      <returns>An instance of the data source.</returns>
    </member>
    <member name="P:System.Data.Services.DataService`1.CurrentDataSource">
      <summary>Gets the data source instance currently being used to process the request.</summary>
      <returns>The data source instance for the service.</returns>
    </member>
    <member name="M:System.Data.Services.DataService`1.HandleException(System.Data.Services.HandleExceptionArgs)">
      <summary>Called when an exception is raised while processing a request.</summary>
      <param name="args">Exception arguments.</param>
    </member>
    <member name="M:System.Data.Services.DataService`1.OnStartProcessingRequest(System.Data.Services.ProcessRequestArgs)">
      <summary>Called before processing each request. For batch requests, it is called one time for the top batch request and one time for each operation in the batch.</summary>
      <param name="args">
        <see cref="T:System.Data.Services.ProcessRequestArgs" /> that contains information about the request.</param>
    </member>
    <member name="P:System.Data.Services.DataService`1.ProcessingPipeline">
      <summary>Gets an object that defines the events for the data service processing pipeline.</summary>
      <returns>A <see cref="T:System.Data.Services.DataServiceProcessingPipeline" /> object that is used to define events for the data service processing pipeline.</returns>
    </member>
    <member name="M:System.Data.Services.DataService`1.ProcessRequest">
      <summary>Processes an HTTP request.</summary>
    </member>
    <member name="M:System.Data.Services.DataService`1.ProcessRequestForMessage(System.IO.Stream)">
      <summary>Processes an HTTP request.</summary>
      <returns>Response message.</returns>
      <param name="messageBody">The body of the HTTP request.</param>
    </member>
    <member name="T:System.Data.Services.DataServiceBehavior">
      <summary>Adds settings that define behavior to a custom data service.</summary>
    </member>
    <member name="P:System.Data.Services.DataServiceBehavior.AcceptCountRequests">
      <summary>Gets or sets whether requests with the $count path segment or the $inlinecount query options are accepted.</summary>
      <returns>true if count requests are supported; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceBehavior.AcceptProjectionRequests">
      <summary>Gets or sets whether projection requests should be accepted.</summary>
      <returns>true if projection requests are supported; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceBehavior.InvokeInterceptorsOnLinkDelete">
      <summary>Gets or sets whether to invoke change interceptors when a link is deleted.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when interceptors should be invoked; otherwise false. </returns>
    </member>
    <member name="P:System.Data.Services.DataServiceBehavior.MaxProtocolVersion">
      <summary>Gets or sets the maximum protocol version that is supported by the response sent by the data service.</summary>
      <returns>A <see cref="T:System.Data.Services.Common.DataServiceProtocolVersion" /> that is the maximum version allowed in the response.</returns>
    </member>
    <member name="T:System.Data.Services.DataServiceConfiguration">
      <summary>Manages the configuration of WCF Data Services.</summary>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.DataServiceBehavior">
      <summary>Gets a <see cref="T:System.Data.Services.DataServiceBehavior" /> object that defines additional behaviors of the data service.</summary>
      <returns>A <see cref="T:System.Data.Services.DataServiceBehavior" /> object.</returns>
    </member>
    <member name="M:System.Data.Services.DataServiceConfiguration.EnableTypeAccess(System.String)">
      <summary>Registers a data type with the data service runtime so that it can be used by a custom data service provider.</summary>
      <param name="typeName">The namespace-qualified name of the type that is enabled for use with the custom data service provider.</param>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.EnableTypeConversion">
      <summary>Gets or sets whether the data service runtime should convert the type that is contained in the payload to the actual property type that is specified in the request.</summary>
      <returns>A Boolean value that indicates whether to perform the conversion.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.MaxBatchCount">
      <summary>Gets or sets the maximum number of change sets and query operations that are allowed in a single batch.</summary>
      <returns>A value that is the maximum number of change sets.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.MaxChangesetCount">
      <summary>Gets or set the maximum number of changes that can be included in a single change set.</summary>
      <returns>The maximum number of changes allowed.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.MaxExpandCount">
      <summary>Gets or sets the maximum number of related entities that can be included in a single request by using the $expand operator.</summary>
      <returns>The maximum number of related entities.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.MaxExpandDepth">
      <summary>Get or sets the maximum number of related entities that can be included in an $expand path in a single request.</summary>
      <returns>The maximum depth of an $expand path.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.MaxObjectCountOnInsert">
      <summary>Get or sets the maximum number of objects to insert that can be contained in a single POST request.</summary>
      <returns>The maximum number of objects.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.MaxResultsPerCollection">
      <summary>Get or sets the maximum number of items in each returned collection.</summary>
      <returns>The maximum number of items.</returns>
    </member>
    <member name="M:System.Data.Services.DataServiceConfiguration.RegisterKnownType(System.Type)">
      <summary>Adds a type to the list of types that are recognized by the data service. </summary>
      <param name="type">Type to add to the collection of known types.</param>
    </member>
    <member name="M:System.Data.Services.DataServiceConfiguration.SetEntitySetAccessRule(System.String,System.Data.Services.EntitySetRights)">
      <summary>Sets the permissions for the specified entity set resource.</summary>
      <param name="name">Name of the entity set for which to set permissions.</param>
      <param name="rights">Access rights to be granted to this resource, passed as an <see cref="T:System.Data.Services.EntitySetRights" /> value.</param>
    </member>
    <member name="M:System.Data.Services.DataServiceConfiguration.SetEntitySetPageSize(System.String,System.Int32)">
      <summary>Sets the maximum page size for an entity set resource.</summary>
      <param name="name">Name of entity set resource for which to set the page size.</param>
      <param name="size">Page size for the entity set resource that is specified in <paramref name="name" />.</param>
    </member>
    <member name="M:System.Data.Services.DataServiceConfiguration.SetServiceOperationAccessRule(System.String,System.Data.Services.ServiceOperationRights)">
      <summary>Sets the permissions for the specified service operation.</summary>
      <param name="name">Name of the service operation for which to set permissions.</param>
      <param name="rights">Access rights to be granted to this resource, passed as a <see cref="T:System.Data.Services.ServiceOperationRights" /> value.</param>
    </member>
    <member name="P:System.Data.Services.DataServiceConfiguration.UseVerboseErrors">
      <summary>Gets or sets whether verbose errors should be returned by the data service.</summary>
      <returns>Whether verbose errors are returned.</returns>
    </member>
    <member name="T:System.Data.Services.DataServiceException">
      <summary>Represents an instance of the <see cref="T:System.Data.Services.DataServiceException" /> class with a specified message that describes the error. </summary>
    </member>
    <member name="M:System.Data.Services.DataServiceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.DataServiceException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Data.Services.DataServiceException.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.DataServiceException" /> class. </summary>
      <param name="statusCode">The HTTP status code returned by the exception.</param>
      <param name="message">The error message for the exception.</param>
    </member>
    <member name="M:System.Data.Services.DataServiceException.#ctor(System.Int32,System.String,System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.DataServiceException" /> class. </summary>
      <param name="statusCode">The HTTP status code of the exception.</param>
      <param name="errorCode">The string value that contains the error code.</param>
      <param name="message">The string value that contains the error message.</param>
      <param name="messageXmlLang">The string value that indicates the language of the error message.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:System.Data.Services.DataServiceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.DataServiceException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Data.Services.DataServiceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.DataServiceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. </param>
    </member>
    <member name="P:System.Data.Services.DataServiceException.ErrorCode">
      <summary>Gets the error code.</summary>
      <returns>The integer value that represents the error code.</returns>
    </member>
    <member name="M:System.Data.Services.DataServiceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets data on the object that caused the exception.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
    </member>
    <member name="P:System.Data.Services.DataServiceException.MessageLanguage">
      <summary>Gets the error message language.</summary>
      <returns>The string value that represents the message language.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceException.StatusCode">
      <summary>Gets the HTTP status code returned by the exception.</summary>
      <returns>HTTP status code for the exception.</returns>
    </member>
    <member name="T:System.Data.Services.DataServiceHost">
      <summary>The WCF Data Services class derived from <see cref="T:System.ServiceModel.Web.WebServiceHost" /> used to instantiate data services.</summary>
    </member>
    <member name="M:System.Data.Services.DataServiceHost.#ctor(System.Type,System.Uri[])">
      <summary>Instantiates <see cref="T:System.Data.Services.DataServiceHost" /> for ADOWCF Data Services.</summary>
      <param name="serviceType">Identifies the WCF Data Services to the host.</param>
      <param name="baseAddresses">The URI of the host.</param>
    </member>
    <member name="T:System.Data.Services.DataServiceHostFactory">
      <summary>The class used by the infrastructure of WCF Data Services to connect to Windows Communication Foundation (WCF). </summary>
    </member>
    <member name="M:System.Data.Services.DataServiceHostFactory.#ctor">
      <summary>Creates a new instance of DataServiceHostFactory.</summary>
    </member>
    <member name="M:System.Data.Services.DataServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
      <summary>Creates a new <see cref="T:System.Data.Services.DataServiceHost" /> from the URI.</summary>
      <returns>New <see cref="T:System.Data.Services.DataServiceHost" />.</returns>
      <param name="serviceType">Specifies the type of WCF service to host.</param>
      <param name="baseAddresses">An array of base addresses for the service. </param>
    </member>
    <member name="T:System.Data.Services.DataServiceOperationContext">
      <summary>Represents the current operation being processed.</summary>
    </member>
    <member name="P:System.Data.Services.DataServiceOperationContext.AbsoluteRequestUri">
      <summary>Get the request URI for the current operation.</summary>
      <returns>The <see cref="T:System.Uri" /> of the operation.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceOperationContext.AbsoluteServiceUri">
      <summary>Gets the base service URI for the request.</summary>
      <returns>The base <see cref="T:System.Uri" /> of the operation.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceOperationContext.IsBatchRequest">
      <summary>Gets a value that indicates whether the current operation is part of a batch request.</summary>
      <returns>true when the operation is part of a batch request; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceOperationContext.RequestHeaders">
      <summary>Gets the request headers for the current operation.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> object that contains the request headers.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceOperationContext.RequestMethod">
      <summary>Gets the HTTP request method for the operation</summary>
      <returns>The HTTP request method.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceOperationContext.ResponseHeaders">
      <summary>Gets the response headers for the current operation.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> object that contains the response headers.</returns>
    </member>
    <member name="P:System.Data.Services.DataServiceOperationContext.ResponseStatusCode">
      <summary>Gets or sets the status code of the response.</summary>
      <returns>The status code of the operation response. </returns>
    </member>
    <member name="T:System.Data.Services.DataServiceProcessingPipeline">
      <summary>Defines the events for the data service processing pipeline.</summary>
    </member>
    <member name="M:System.Data.Services.DataServiceProcessingPipeline.#ctor">
      <summary>Creates a new <see cref="T:System.Data.Services.DataServiceProcessingPipeline" /> instance. </summary>
    </member>
    <member name="E:System.Data.Services.DataServiceProcessingPipeline.ProcessedChangeset">
      <summary>Occurs after the change set has been processed.</summary>
    </member>
    <member name="E:System.Data.Services.DataServiceProcessingPipeline.ProcessedRequest">
      <summary>Occurs after the request has been processed.</summary>
    </member>
    <member name="E:System.Data.Services.DataServiceProcessingPipeline.ProcessingChangeset">
      <summary>Occurs before the change set is processed.</summary>
    </member>
    <member name="E:System.Data.Services.DataServiceProcessingPipeline.ProcessingRequest">
      <summary>Occurs before the request is processed. </summary>
    </member>
    <member name="T:System.Data.Services.DataServiceProcessingPipelineEventArgs">
      <summary>Event argument class for <see cref="T:System.Data.Services.DataServiceProcessingPipeline" /> events.</summary>
    </member>
    <member name="P:System.Data.Services.DataServiceProcessingPipelineEventArgs.OperationContext">
      <summary>Gets the context of the operation that raised the event.</summary>
      <returns>A <see cref="T:System.Data.Services.DataServiceOperationContext" /> that is the operation context. </returns>
    </member>
    <member name="T:System.Data.Services.EntitySetRights">
      <summary>An enumeration used to define access rights to data that is deployed by WCF Data Services.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.None">
      <summary>Denies all rights to access data.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.ReadSingle">
      <summary>Authorization to read single data items.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.ReadMultiple">
      <summary>Authorization to read sets of data.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.WriteAppend">
      <summary>Authorization to create new data items in data sets.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.WriteReplace">
      <summary>Authorization to replace data.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.WriteDelete">
      <summary>Authorization to delete data items from data sets.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.WriteMerge">
      <summary>Authorization to merge data.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.AllRead">
      <summary>Authorization to read data.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.AllWrite">
      <summary>Authorization to write data.</summary>
    </member>
    <member name="F:System.Data.Services.EntitySetRights.All">
      <summary>Authorization to create, read, update, and delete data.</summary>
    </member>
    <member name="T:System.Data.Services.ETagAttribute">
      <summary>This attribute on an entity type is used to specify the properties that determine changes in content.</summary>
    </member>
    <member name="M:System.Data.Services.ETagAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.ETagAttribute" /> class. </summary>
      <param name="propertyName">The string value containing properties used in eTag value.</param>
    </member>
    <member name="M:System.Data.Services.ETagAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.ETagAttribute" /> class.</summary>
      <param name="propertyNames">String value containing properties used in eTag value.</param>
    </member>
    <member name="P:System.Data.Services.ETagAttribute.PropertyNames">
      <summary>Gets the names of properties used in the <see cref="T:System.Data.Services.ETagAttribute" />.</summary>
      <returns>String value containing property names.</returns>
    </member>
    <member name="T:System.Data.Services.ExpandSegment">
      <summary>The segment of a query that indicates whether data should be returned inline instead of as deferred content.</summary>
    </member>
    <member name="M:System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)">
      <summary>Initializes an <see cref="T:System.Data.Services.ExpandSegment" /> object with the specified property name and a filtering expression, possibly null.</summary>
      <param name="name">The name of the property to be expanded.</param>
      <param name="filter">The filter option in the query to which the expand segment applies.</param>
    </member>
    <member name="P:System.Data.Services.ExpandSegment.ExpandedProperty">
      <summary>Gets the property to be expanded.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.ExpandSegment.Filter">
      <summary>The filter option in the query to which the expand segment applies.</summary>
      <returns>An expression that specifies the filter on target data.</returns>
    </member>
    <member name="P:System.Data.Services.ExpandSegment.HasFilter">
      <summary>A Boolean value that indicates whether the expand statement is used with a filter expression.</summary>
      <returns>True or false.</returns>
    </member>
    <member name="P:System.Data.Services.ExpandSegment.MaxResultsExpected">
      <summary>Gets the maximum number of results expected.</summary>
      <returns>The integer value that indicates maximum number of results.</returns>
    </member>
    <member name="P:System.Data.Services.ExpandSegment.Name">
      <summary>The name of the property to be expanded.</summary>
      <returns>A string value containing the name of the property.</returns>
    </member>
    <member name="M:System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})">
      <summary>A Boolean value that indicates whether the path includes a filter option on target data.</summary>
      <returns>True if any of the segments in the path has a filter; false otherwise.</returns>
      <param name="path">The enumeration of segments to check for filters.</param>
    </member>
    <member name="T:System.Data.Services.ExpandSegmentCollection">
      <summary>The segments of a query that can be expanded by the $expand clause that follows a query.</summary>
    </member>
    <member name="M:System.Data.Services.ExpandSegmentCollection.#ctor">
      <summary>Creates a collection of expand segments for a query.</summary>
    </member>
    <member name="M:System.Data.Services.ExpandSegmentCollection.#ctor(System.Int32)">
      <summary>Initializes a new collection of expand segments that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The number of expand segments that the new collection can initially store.</param>
    </member>
    <member name="P:System.Data.Services.ExpandSegmentCollection.HasFilter">
      <summary>Boolean value that indicates whether segments to be expanded include a filter clause.</summary>
      <returns>Boolean value that indicates whether segments to be expanded include a filter clause. </returns>
    </member>
    <member name="T:System.Data.Services.HandleExceptionArgs">
      <summary>Specifies details of an exception that has occurred and the details of the associated HTTP response.</summary>
    </member>
    <member name="P:System.Data.Services.HandleExceptionArgs.Exception">
      <summary>Gets or sets the exception that will be processed and returned in the response.</summary>
      <returns>The exception that will be processed and returned in the response.</returns>
    </member>
    <member name="P:System.Data.Services.HandleExceptionArgs.ResponseContentType">
      <summary>Gets the response content type.</summary>
      <returns>The string value that indicates the response format.</returns>
    </member>
    <member name="P:System.Data.Services.HandleExceptionArgs.ResponseStatusCode">
      <summary>Gets the status code that will be sent back in the HTTP header section of the response when an error occurs on the data service.</summary>
      <returns>An integer value of the HTTP response status code. </returns>
    </member>
    <member name="P:System.Data.Services.HandleExceptionArgs.ResponseWritten">
      <summary>Gets a value indicating whether the response has been written. </summary>
      <returns>Boolean value that indicates whether response has been written.</returns>
    </member>
    <member name="P:System.Data.Services.HandleExceptionArgs.UseVerboseErrors">
      <summary>Gets or sets a Boolean value that indicates whether verbose errors will be returned.</summary>
      <returns>The Boolean value that indicates whether verbose errors will be returned.</returns>
    </member>
    <member name="T:System.Data.Services.IDataServiceConfiguration">
      <summary>The <see cref="T:System.Data.Services.IDataServiceConfiguration" /> is used by WCF Data Services to set up the behavior of the service, including rights on entity sets and service operations, limits on the allowed requests, registering types not discoverable by default, and the default verbosity on error handling.</summary>
    </member>
    <member name="P:System.Data.Services.IDataServiceConfiguration.MaxBatchCount">
      <summary>Gets the maximum number of requests that can be handled in a batch.</summary>
      <returns>Integer value that indicates the maximum number of requests that can be handled in a batch.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceConfiguration.MaxChangesetCount">
      <summary>Gets the maximum number of change sets that can be handled in a batch.</summary>
      <returns>Integer value that indicates the maximum number of change sets that can be handled in a batch.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceConfiguration.MaxExpandCount">
      <summary>Gets or sets the maximum number of segments that can be expanded by the $expand query option for all requests to the data service.  </summary>
      <returns>The maximum number of segments to expand.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceConfiguration.MaxExpandDepth">
      <summary>Gets or sets a maximum number of segments supported in a single $expand path for all requests to the data service.</summary>
      <returns>Integer representing the maximum number of supported segments in $expand path.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceConfiguration.MaxObjectCountOnInsert">
      <summary>Gets or sets the maximum number of objects that can be inserted in a single request. </summary>
      <returns>The integer value that contains the maximum number of objects that can be inserted in a single request.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceConfiguration.MaxResultsPerCollection">
      <summary>Gets the maximum number of results per collection.</summary>
      <returns>The integer value that indicates the maximum number of results per collection.</returns>
    </member>
    <member name="M:System.Data.Services.IDataServiceConfiguration.RegisterKnownType(System.Type)">
      <summary>Registers a resource type for use by the data service.</summary>
      <param name="type">The resource type to register.</param>
    </member>
    <member name="M:System.Data.Services.IDataServiceConfiguration.SetEntitySetAccessRule(System.String,System.Data.Services.EntitySetRights)">
      <summary>Sets the access rules for the specified entity set.</summary>
      <param name="name">The name of the entity set for configured access.</param>
      <param name="rights">The rights allowed for the entity set.</param>
    </member>
    <member name="M:System.Data.Services.IDataServiceConfiguration.SetServiceOperationAccessRule(System.String,System.Data.Services.ServiceOperationRights)">
      <summary>Sets the access rules for the specified service operation.</summary>
      <param name="name">The name of the service operation on which to set access rights.</param>
      <param name="rights">The rights allowed according to <see cref="T:System.Data.Services.ServiceOperationRights" /> enumeration. </param>
    </member>
    <member name="P:System.Data.Services.IDataServiceConfiguration.UseVerboseErrors">
      <summary>Gets or sets whether verbose errors are used by default for all responses from the data service.  </summary>
      <returns>A Boolean value that indicates whether verbose errors are returned.</returns>
    </member>
    <member name="T:System.Data.Services.IDataServiceHost">
      <summary>Interface that specifies interactions between WCF Data Services and its hosting environment.</summary>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.AbsoluteRequestUri">
      <summary>Gets an absolute URI that is the URI as sent by the client.</summary>
      <returns>A string that is the absolute URI of the request.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.AbsoluteServiceUri">
      <summary>Gets an absolute URI that is the root URI of the data service.</summary>
      <returns>A string that is the absolute root URI of the data service.</returns>
    </member>
    <member name="M:System.Data.Services.IDataServiceHost.GetQueryStringItem(System.String)">
      <summary>Gets a data item identified by the identity key contained by the parameter of the method.</summary>
      <returns>The data item requested by the query serialized as a string.</returns>
      <param name="item">String value containing identity key of item requested.</param>
    </member>
    <member name="M:System.Data.Services.IDataServiceHost.ProcessException(System.Data.Services.HandleExceptionArgs)">
      <summary>Handles a data service exception using information in  the <paramref name="args" /> parameter.</summary>
      <param name="args">
        <see cref="T:System.Data.Services.HandleExceptionArgs" />  that contains information on the exception object.</param>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestAccept">
      <summary>The transport protocol specified by the request accept header.</summary>
      <returns>String that indicates the transport protocol required by the request.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestAcceptCharSet">
      <summary>Gets a string representing the value of the Accept-Charset HTTP header.</summary>
      <returns>String representing the value of the Accept-Charset HTTP header.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestContentType">
      <summary>Gets the transport protocol specified by the content type header.</summary>
      <returns>String value that indicates content type.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestHttpMethod">
      <summary>Gets the request method of GET, PUT, POST, or DELETE.</summary>
      <returns>String value that indicates request method.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestIfMatch">
      <summary>Gets the value for the If-Match header on the current request.</summary>
      <returns>String value for the If-Match header on the current request.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestIfNoneMatch">
      <summary>Gets the value for the If-None-Match header on the current request.</summary>
      <returns>String value for the If-None-Match header on the current request.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestMaxVersion">
      <summary>Gets the value that identifies the highest version that the request client is able to process.</summary>
      <returns>A string that contains the highest version that the request client is able to process, possibly null.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestStream">
      <summary>Gets the stream that contains the HTTP request body.</summary>
      <returns>
        <see cref="T:System.IO.Stream" /> object that contains the request body.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.RequestVersion">
      <summary>Gets the value that identifies the version of the request that the client submitted, possibly null.</summary>
      <returns>A string that identifies the version of the request that the client submitted, possibly null.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.ResponseCacheControl">
      <summary>Gets a string value that represents cache control information.</summary>
      <returns>A string value that represents cache control information.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.ResponseContentType">
      <summary>Gets the transport protocol of the response.</summary>
      <returns>String value containing the content type.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.ResponseETag">
      <summary>Gets an eTag value that represents the state of data in response.</summary>
      <returns>A string value that represents the eTag state value.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.ResponseLocation">
      <summary>Gets or sets the service location.</summary>
      <returns>String that contains the service location.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.ResponseStatusCode">
      <summary>Gets or sets the response code that indicates results of query.</summary>
      <returns>Integer value that contains the response code.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.ResponseStream">
      <summary>Gets the response stream to which the HTTP response body will be written.</summary>
      <returns>
        <see cref="T:System.IO.Stream" /> object to which the response body will be written.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost.ResponseVersion">
      <summary>Gets the version used by the host in the response.</summary>
      <returns>A string value that contains the host version.</returns>
    </member>
    <member name="T:System.Data.Services.IDataServiceHost2">
      <summary>Defines extensions to <see cref="T:System.Data.Services.IDataServiceHost" /> needed for request and response headers in HTTP.</summary>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost2.RequestHeaders">
      <summary>Request header for an HTTP request.</summary>
      <returns>String value of header.</returns>
    </member>
    <member name="P:System.Data.Services.IDataServiceHost2.ResponseHeaders">
      <summary>Response header for an HTTP response. </summary>
      <returns>String value of header.</returns>
    </member>
    <member name="T:System.Data.Services.IExpandedResult">
      <summary>Declares the members required to support enumerators for results and associated segments on an WCF Data Services $expand query option.  </summary>
    </member>
    <member name="P:System.Data.Services.IExpandedResult.ExpandedElement">
      <summary>Gets the element with expanded properties.</summary>
      <returns>The object in a property expanded by <see cref="T:System.Data.Services.IExpandedResult" />.</returns>
    </member>
    <member name="M:System.Data.Services.IExpandedResult.GetExpandedPropertyValue(System.String)">
      <summary>Gets the value for a named property of the result.</summary>
      <returns>The value of the property.</returns>
      <param name="name">The name of the property for which to get enumerable results.</param>
    </member>
    <member name="T:System.Data.Services.IExpandProvider">
      <summary>This interface declares the methods required to support the $expand query option for an WCF Data Services.</summary>
    </member>
    <member name="M:System.Data.Services.IExpandProvider.ApplyExpansions(System.Linq.IQueryable,System.Collections.Generic.ICollection{System.Data.Services.ExpandSegmentCollection})">
      <summary>Applies expansions to the specified <paramref name="queryable" /> parameter.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> object of the same type as the supplied <paramref name="queryable" /> object that includes the specified <paramref name="expandPaths" />.</returns>
      <param name="queryable">The <see cref="T:System.Linq.IQueryable`1" /> object to expand.</param>
      <param name="expandPaths">A collection of <see cref="T:System.Data.Services.ExpandSegmentCollection" /> paths to expand. </param>
    </member>
    <member name="T:System.Data.Services.IgnorePropertiesAttribute">
      <summary>Controls the visibility of a property or properties by WCF Data Services.</summary>
    </member>
    <member name="M:System.Data.Services.IgnorePropertiesAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.IgnorePropertiesAttribute" /> class. </summary>
      <param name="propertyName">A string value that contains the property or properties to be attributed.</param>
    </member>
    <member name="M:System.Data.Services.IgnorePropertiesAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.IgnorePropertiesAttribute" /> class. </summary>
      <param name="propertyNames">A string value that contains the property or properties to be attributed.</param>
    </member>
    <member name="P:System.Data.Services.IgnorePropertiesAttribute.PropertyNames">
      <summary>Gets or sets the property name or names to controlled by the <see cref="T:System.Data.Services.IgnorePropertiesAttribute" /> attribute.</summary>
    </member>
    <member name="T:System.Data.Services.IRequestHandler">
      <summary>Provides access to members that control handing of request messages. </summary>
    </member>
    <member name="M:System.Data.Services.IRequestHandler.ProcessRequestForMessage(System.IO.Stream)">
      <summary>Provides an entry point for the request. </summary>
      <returns>The resulting message for the supplied request.</returns>
      <param name="messageBody">The <see cref="T:System.IO.Stream" /> object that contains the request.</param>
    </member>
    <member name="T:System.Data.Services.IUpdatable">
      <summary>An interface used to insert or update a resource by the HTTP POST method.</summary>
    </member>
    <member name="M:System.Data.Services.IUpdatable.AddReferenceToCollection(System.Object,System.String,System.Object)">
      <summary>Adds the specified value to the collection.</summary>
      <param name="targetResource">Target object that defines the property.</param>
      <param name="propertyName">The name of the collection property to which the resource should be added..</param>
      <param name="resourceToBeAdded">The opaque object representing the resource to be added.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.ClearChanges">
      <summary>Cancels a change to the data.</summary>
    </member>
    <member name="M:System.Data.Services.IUpdatable.CreateResource(System.String,System.String)">
      <summary>Creates the resource of the specified type and that belongs to the specified container.</summary>
      <returns>The object representing a resource of specified type and belonging to the specified container.</returns>
      <param name="containerName">The name of the entity set to which the resource belongs.</param>
      <param name="fullTypeName">The full namespace-qualified type name of the resource.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.DeleteResource(System.Object)">
      <summary>Deletes the specified resource.</summary>
      <param name="targetResource">The resource to be deleted.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.GetResource(System.Linq.IQueryable,System.String)">
      <summary>Gets the resource of the specified type identified by a query and type name. </summary>
      <returns>An opaque object representing a resource of the specified type, referenced by the specified query.</returns>
      <param name="query">Language integrated query (LINQ) pointing to a particular resource.</param>
      <param name="fullTypeName">The fully qualified type name of resource.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.GetValue(System.Object,System.String)">
      <summary>Gets the value of the specified property on the target object.</summary>
      <returns>The value of the object.</returns>
      <param name="targetResource">An opaque object that represents a resource.</param>
      <param name="propertyName">The name of the property whose value needs to be retrieved.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.RemoveReferenceFromCollection(System.Object,System.String,System.Object)">
      <summary>Removes the specified value from the collection.</summary>
      <param name="targetResource">The target object that defines the property.</param>
      <param name="propertyName">The name of the property whose value needs to be updated.</param>
      <param name="resourceToBeRemoved">The property value that needs to be removed.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.ResetResource(System.Object)">
      <summary>Resets the resource identified by the parameter <paramref name="resource " />to its default value.</summary>
      <returns>The resource with its value reset to the default value.</returns>
      <param name="resource">The resource to be updated.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.ResolveResource(System.Object)">
      <summary>Returns the instance of the resource represented by the specified resource object.</summary>
      <returns>Returns the instance of the resource represented by the specified resource object.</returns>
      <param name="resource">The object representing the resource whose instance needs to be retrieved.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.SaveChanges">
      <summary>Saves all the changes that have been made by using the <see cref="T:System.Data.Services.IUpdatable" /> APIs.</summary>
    </member>
    <member name="M:System.Data.Services.IUpdatable.SetReference(System.Object,System.String,System.Object)">
      <summary>Sets the value of the specified reference property on the target object.</summary>
      <param name="targetResource">The target object that defines the property.</param>
      <param name="propertyName">The name of the property whose value needs to be updated.</param>
      <param name="propertyValue">The property value to be updated.</param>
    </member>
    <member name="M:System.Data.Services.IUpdatable.SetValue(System.Object,System.String,System.Object)">
      <summary>Sets the value of the property with the specified name on the target resource to the specified property value.</summary>
      <param name="targetResource">The target object that defines the property.</param>
      <param name="propertyName">The name of the property whose value needs to be updated.</param>
      <param name="propertyValue">The property value for update.</param>
    </member>
    <member name="T:System.Data.Services.MimeTypeAttribute">
      <summary>Indicates the MIME type of HTTP request.</summary>
    </member>
    <member name="M:System.Data.Services.MimeTypeAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.MimeTypeAttribute" /> class. </summary>
      <param name="memberName">The name of the attribute.</param>
      <param name="mimeType">The MIME type of the attribute.</param>
    </member>
    <member name="P:System.Data.Services.MimeTypeAttribute.MemberName">
      <summary>Gets the name of the attribute.</summary>
      <returns>A string value that contains the name of the attribute. </returns>
    </member>
    <member name="P:System.Data.Services.MimeTypeAttribute.MimeType">
      <summary>Gets the MIME type of a request.</summary>
      <returns>A string that contains the MIME type.</returns>
    </member>
    <member name="T:System.Data.Services.ProcessRequestArgs">
      <summary>Represents arguments used by an HTTP request to the data service. </summary>
    </member>
    <member name="P:System.Data.Services.ProcessRequestArgs.IsBatchOperation">
      <summary>Gets a Boolean value that indicates whether the HTTP request to the data service is a batch operation.</summary>
      <returns>The Boolean value that indicates whether the HTTP request to the data service is a batch operation. </returns>
    </member>
    <member name="P:System.Data.Services.ProcessRequestArgs.OperationContext">
      <summary>Gets the context that contains information about the current operation being processed.</summary>
      <returns>An <see cref="T:System.Data.Services.DataServiceOperationContext" /> object that contains information about the current operation. </returns>
    </member>
    <member name="P:System.Data.Services.ProcessRequestArgs.RequestUri">
      <summary>Gets the URI of an HTTP request to be process.</summary>
      <returns>A <see cref="T:System.Uri" /> that contains the URI of the request to be processed.</returns>
    </member>
    <member name="T:System.Data.Services.QueryInterceptorAttribute">
      <summary>The <see cref="T:System.Data.Services.QueryInterceptorAttribute" /> on a method annotates it as a query interceptor on the specified entity set.</summary>
    </member>
    <member name="M:System.Data.Services.QueryInterceptorAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.QueryInterceptorAttribute" /> class for the entity set specified by the <paramref name="entitySetName" /> parameter.</summary>
      <param name="entitySetName">The name of the entity set that contains the entity to which the interceptor applies.</param>
    </member>
    <member name="P:System.Data.Services.QueryInterceptorAttribute.EntitySetName">
      <summary>Gets the name of the entity set that contains the entity to which the interceptor applies.</summary>
      <returns>A string that indicates the name of the entity set that contains the entity to which the interceptor applies.</returns>
    </member>
    <member name="T:System.Data.Services.ServiceOperationRights">
      <summary>An enumeration used to define access rights to service operations deployed by WCF Data Services.</summary>
    </member>
    <member name="F:System.Data.Services.ServiceOperationRights.None">
      <summary>No authorization to access the service operation.</summary>
    </member>
    <member name="F:System.Data.Services.ServiceOperationRights.ReadSingle">
      <summary>Authorization to read a single data item by using the service operation.</summary>
    </member>
    <member name="F:System.Data.Services.ServiceOperationRights.ReadMultiple">
      <summary>Authorization to read multiple data items by using the service operation.</summary>
    </member>
    <member name="F:System.Data.Services.ServiceOperationRights.AllRead">
      <summary>Authorization to read single or multiple data items deployed by the service operation.</summary>
    </member>
    <member name="F:System.Data.Services.ServiceOperationRights.All">
      <summary>All rights assigned to the service operation..</summary>
    </member>
    <member name="F:System.Data.Services.ServiceOperationRights.OverrideEntitySetRights">
      <summary>Overrides entity set rights that are explicitly defined in the data service with the service operation rights.</summary>
    </member>
    <member name="T:System.Data.Services.SingleResultAttribute">
      <summary>Attribute used on service operations to specify that they return a single instance of their return element. </summary>
    </member>
    <member name="M:System.Data.Services.SingleResultAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.SingleResultAttribute" /> class. </summary>
    </member>
    <member name="T:System.Data.Services.UpdateOperations">
      <summary>An enumeration used to specify the update operations that were performed on an entity. </summary>
    </member>
    <member name="F:System.Data.Services.UpdateOperations.None">
      <summary>No operations were performed on the resource.</summary>
    </member>
    <member name="F:System.Data.Services.UpdateOperations.Add">
      <summary>The entity was added.</summary>
    </member>
    <member name="F:System.Data.Services.UpdateOperations.Change">
      <summary>The entity was modified.</summary>
    </member>
    <member name="F:System.Data.Services.UpdateOperations.Delete">
      <summary>The entity was deleted.</summary>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`1">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">Type of the expanded element.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`1.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`1" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`1.Description">
      <summary>Gets or sets the description for the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`1" />.</summary>
      <returns>The description of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`1" />.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`1.ExpandedElement">
      <summary>Gets or sets the element with expanded properties.</summary>
      <returns>The object in a property expanded by <see cref="T:System.Data.Services.IExpandedResult" />.</returns>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`1.GetExpandedPropertyValue(System.String)">
      <summary>Returns the value of the expanded property.</summary>
      <returns>The value of the property.</returns>
      <param name="name">The name of the property. </param>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`1.InternalGetExpandedPropertyValue(System.Int32)">
      <summary>Returns a property object of the expanded property.</summary>
      <returns>The property value.</returns>
      <param name="nameIndex">The index of the property. </param>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`1.System#Data#Services#IExpandedResult#ExpandedElement">
      <summary>Gets or sets the element with expanded properties.</summary>
      <returns>The object in a property expanded by <see cref="T:System.Data.Services.IExpandedResult" />.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`10">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
      <typeparam name="TProperty5">The type of the property to expand.</typeparam>
      <typeparam name="TProperty6">The type of the property to expand.</typeparam>
      <typeparam name="TProperty7">The type of the property to expand.</typeparam>
      <typeparam name="TProperty8">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`10.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`10" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty5">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty6">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty7">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`10.ProjectedProperty8">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`11">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
      <typeparam name="TProperty5">The type of the property to expand.</typeparam>
      <typeparam name="TProperty6">The type of the property to expand.</typeparam>
      <typeparam name="TProperty7">The type of the property to expand.</typeparam>
      <typeparam name="TProperty8">The type of the property to expand.</typeparam>
      <typeparam name="TProperty9">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`11.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`11" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty5">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty6">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty7">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty8">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`11.ProjectedProperty9">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`12">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
      <typeparam name="TProperty5">The type of the property to expand.</typeparam>
      <typeparam name="TProperty6">The type of the property to expand.</typeparam>
      <typeparam name="TProperty7">The type of the property to expand.</typeparam>
      <typeparam name="TProperty8">The type of the property to expand.</typeparam>
      <typeparam name="TProperty9">The type of the property to expand.</typeparam>
      <typeparam name="TProperty10">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`12.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`12" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty10">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty5">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty6">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty7">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty8">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`12.ProjectedProperty9">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`13">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
      <typeparam name="TProperty5">The type of the property to expand.</typeparam>
      <typeparam name="TProperty6">The type of the property to expand.</typeparam>
      <typeparam name="TProperty7">The type of the property to expand.</typeparam>
      <typeparam name="TProperty8">The type of the property to expand.</typeparam>
      <typeparam name="TProperty9">The type of the property to expand.</typeparam>
      <typeparam name="TProperty10">The type of the property to expand.</typeparam>
      <typeparam name="TProperty11">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`13.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`13" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty10">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty11">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty5">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty6">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty7">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty8">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`13.ProjectedProperty9">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`2">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`2.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`2" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`2.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`3">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`3.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`3" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`3.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`3.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`4">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`4.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`4" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`4.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`4.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`4.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`5">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`5.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`4" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`5.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`5.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`5.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`5.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`6">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`6.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`6" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`6.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`6.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`6.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`6.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`6.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`7">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
      <typeparam name="TProperty5">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`7.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`7" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`7.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`7.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`7.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`7.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`7.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`7.ProjectedProperty5">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`8">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
      <typeparam name="TProperty5">The type of the property to expand.</typeparam>
      <typeparam name="TProperty6">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`8.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`8" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`8.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`8.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`8.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`8.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`8.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`8.ProjectedProperty5">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`8.ProjectedProperty6">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ExpandedWrapper`9">
      <summary>This class is used internally by the system to implement support for queries with eager loading of related entities.</summary>
      <typeparam name="TExpandedElement">The type of the expanded element.</typeparam>
      <typeparam name="TProperty0">The type of the property to expand.</typeparam>
      <typeparam name="TProperty1">The type of the property to expand.</typeparam>
      <typeparam name="TProperty2">The type of the property to expand.</typeparam>
      <typeparam name="TProperty3">The type of the property to expand.</typeparam>
      <typeparam name="TProperty4">The type of the property to expand.</typeparam>
      <typeparam name="TProperty5">The type of the property to expand.</typeparam>
      <typeparam name="TProperty6">The type of the property to expand.</typeparam>
      <typeparam name="TProperty7">The type of the property to expand.</typeparam>
    </member>
    <member name="M:System.Data.Services.Internal.ExpandedWrapper`9.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Data.Services.Internal.ExpandedWrapper`9" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty0">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty1">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty2">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty3">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty4">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty5">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty6">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ExpandedWrapper`9.ProjectedProperty7">
      <summary>Get or sets the property to expand.</summary>
      <returns>The property to expand.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper">
      <summary>Provides a wrapper over the result element with the ability to project a subset of properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper" /> class.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper.GetProjectedPropertyValue(System.String)">
      <summary>Gets the value of the named property for the result.</summary>
      <returns>The value for the named property of the result.</returns>
      <param name="propertyName">Name of property for which to get the value.</param>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper.InternalGetProjectedPropertyValue(System.Int32)">
      <summary>Gets the value for the specified property by its index.</summary>
      <returns>The value for the property.</returns>
      <param name="propertyIndex">Index of the property for which to get the value.</param>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper.PropertyNameList">
      <summary>Gets a list of property names as text in a comma-separated format.</summary>
      <returns>List of comma-separated names.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper.ResourceTypeName">
      <summary>Gets the full name of the <see cref="T:System.Data.Services.Providers.ResourceType" /> that represents the type of this result.</summary>
      <returns>The full name of the type.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper0">
      <summary>Provides a wrapper over the result element with the ability to project a subset of properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper0.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper0" /> class.</summary>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper1">
      <summary>Provides a wrapper over the result element with the ability to project a subset of properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper1" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper1.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper2">
      <summary>Provides a wrapper over the result element with the ability to project a subset of properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper2.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper2" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper2.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper2.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper3">
      <summary>Provides a wrapper over the result element and provides the ability to project a subset of properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper3.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper3" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper3.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper3.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper3.ProjectedProperty2">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper4">
      <summary>Provides a wrapper over the result element with the ability to project a subset of properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper4.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper4" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper4.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper4.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper4.ProjectedProperty2">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper4.ProjectedProperty3">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper5">
      <summary>Provides a wrapper over the result elements and provides the ability to project a subset of the properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper5.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper5" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper5.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper5.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper5.ProjectedProperty2">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper5.ProjectedProperty3">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper5.ProjectedProperty4">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper6">
      <summary>Provides a wrapper over the result elements with the ability to project a subset of the properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper6.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper6" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper6.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper6.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper6.ProjectedProperty2">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper6.ProjectedProperty3">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper6.ProjectedProperty4">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper6.ProjectedProperty5">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper7">
      <summary>Provides a wrapper over the result elements with the ability to project a subset of the properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper7.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper7" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper7.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper7.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper7.ProjectedProperty2">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper7.ProjectedProperty3">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper7.ProjectedProperty4">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper7.ProjectedProperty5">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper7.ProjectedProperty6">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapper8">
      <summary>Provides a wrapper over the result elements with the ability to project a subset of the properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapper8.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapper8" /> class.</summary>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty2">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty3">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty4">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty5">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty6">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapper8.ProjectedProperty7">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapperMany">
      <summary>Provides a wrapper over the result elements with the ability to project a subset of the properties.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapperMany.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapperMany" /> class.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapperMany.InternalGetProjectedPropertyValue(System.Int32)">
      <summary>Gets the value for the specified property by its index.</summary>
      <returns>The value for the property.</returns>
      <param name="propertyIndex">Index of the property for which to get the value.</param>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.Next">
      <summary>Gets or sets another instance of <see cref="T:System.Data.Services.Internal.ProjectedWrapperMany" /> which contains the set of the next eight projected properties, and possibly another link.</summary>
      <returns>The next set of properties.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty0">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty1">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty2">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty3">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty4">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty5">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty6">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="P:System.Data.Services.Internal.ProjectedWrapperMany.ProjectedProperty7">
      <summary>Gets or sets the property to project.</summary>
      <returns>The property to project.</returns>
    </member>
    <member name="T:System.Data.Services.Internal.ProjectedWrapperManyEnd">
      <summary>an instance of this class is assigned to the last <see cref="P:System.Data.Services.Internal.ProjectedWrapperMany.Next" /> in the list.</summary>
    </member>
    <member name="M:System.Data.Services.Internal.ProjectedWrapperManyEnd.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Internal.ProjectedWrapperManyEnd" /> class.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.DataServiceProviderMethods">
      <summary>Performs late-bound operations on resource sets with a custom data service provider.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.DataServiceProviderMethods.Convert(System.Object,System.Data.Services.Providers.ResourceType)">
      <summary>Casts a value to a specified type.</summary>
      <returns>The <paramref name="value" /> cast to the requested <paramref name="type" />.</returns>
      <param name="value"></param>
      <param name="type"></param>
    </member>
    <member name="M:System.Data.Services.Providers.DataServiceProviderMethods.GetSequenceValue``1(System.Object,System.Data.Services.Providers.ResourceProperty)">
      <summary>Gets a named value from the specified object as a sequence.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance that contains the requested value as a sequence.</returns>
      <param name="value">Object that contains the value.</param>
      <param name="property">
        <see cref="T:System.Data.Services.Providers.ResourceProperty" /> that is the property the value of which must be returned.</param>
      <typeparam name="T">Type of the resulting sequence.</typeparam>
    </member>
    <member name="M:System.Data.Services.Providers.DataServiceProviderMethods.GetValue(System.Object,System.Data.Services.Providers.ResourceProperty)">
      <summary>Gets a named value from the specified object.</summary>
      <returns>An object that is the requested value.</returns>
      <param name="value">Object that contains the value.</param>
      <param name="property">
        <see cref="T:System.Data.Services.Providers.ResourceProperty" /> that is the property the value of which must be returned.</param>
    </member>
    <member name="M:System.Data.Services.Providers.DataServiceProviderMethods.TypeIs(System.Object,System.Data.Services.Providers.ResourceType)">
      <summary>Determines if the value is of a specified type.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true if the value is of the specified type; otherwise false.</returns>
      <param name="value">The value to check.</param>
      <param name="type">
        <see cref="T:System.Data.Services.Providers.ResourceType" /> to compare with.</param>
    </member>
    <member name="T:System.Data.Services.Providers.IDataServiceMetadataProvider">
      <summary>Maintains metadata about a custom data service provider. </summary>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceMetadataProvider.ContainerName">
      <summary>Container name for the data source.</summary>
      <returns>String that contains the name of the container.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceMetadataProvider.ContainerNamespace">
      <summary>Namespace name for the data source.</summary>
      <returns>String that contains the namespace name.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceMetadataProvider.GetDerivedTypes(System.Data.Services.Providers.ResourceType)">
      <summary>Attempts to return all types that derive from the specified resource type.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of derived <see cref="T:System.Data.Services.Providers.ResourceType" /> objects.</returns>
      <param name="resourceType">The base <see cref="T:System.Data.Services.Providers.ResourceType" />.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceMetadataProvider.GetResourceAssociationSet(System.Data.Services.Providers.ResourceSet,System.Data.Services.Providers.ResourceType,System.Data.Services.Providers.ResourceProperty)">
      <summary>Gets the <see cref="T:System.Data.Services.Providers.ResourceAssociationSet" /> instance when given the source association end.</summary>
      <returns>A <see cref="T:System.Data.Services.Providers.ResourceAssociationSet" /> instance.</returns>
      <param name="resourceSet">Resource set of the source association end.</param>
      <param name="resourceType">Resource type of the source association end.</param>
      <param name="resourceProperty">Resource property of the source association end.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceMetadataProvider.HasDerivedTypes(System.Data.Services.Providers.ResourceType)">
      <summary>Determines whether a resource type has derived types.</summary>
      <returns>true when <paramref name="resourceType" /> represents an entity that has derived types; otherwise false.</returns>
      <param name="resourceType">A <see cref="T:System.Data.Services.Providers.ResourceType" /> object to evaluate.</param>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceMetadataProvider.ResourceSets">
      <summary>Gets all available containers.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.Services.Providers.ResourceSet" /> objects.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceMetadataProvider.ServiceOperations">
      <summary>Returns all the service operations in this data source.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.Services.Providers.ServiceOperation" /> objects.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceMetadataProvider.TryResolveResourceSet(System.String,System.Data.Services.Providers.ResourceSet@)">
      <summary>Tries to get a resource set based on the specified name.</summary>
      <returns>true when resource set with the given <paramref name="name" /> is found; otherwise false.</returns>
      <param name="name">Name of the <see cref="T:System.Data.Services.Providers.ResourceSet" /> to resolve.</param>
      <param name="resourceSet">Returns the resource set or a null value if a resource set with the given <paramref name="name" /> is not found.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceMetadataProvider.TryResolveResourceType(System.String,System.Data.Services.Providers.ResourceType@)">
      <summary>Tries to get a resource type based on the specified name.</summary>
      <returns>true when resource type with the given <paramref name="name" /> is found; otherwise false.</returns>
      <param name="name">Name of the type to resolve.</param>
      <param name="resourceType">Returns the resource type or a null value if a resource type with the given <paramref name="name" /> is not found.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceMetadataProvider.TryResolveServiceOperation(System.String,System.Data.Services.Providers.ServiceOperation@)">
      <summary>Tries to get a service operation based on the specified name.</summary>
      <returns>true when service operation with the given <paramref name="name" /> is found; otherwise false.</returns>
      <param name="name">Name of the service operation to resolve.</param>
      <param name="serviceOperation">Returns the service operation or a null value if a service operation with the given <paramref name="name" /> is not found.</param>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceMetadataProvider.Types">
      <summary>Returns all the types in this data source.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.Services.Providers.ResourceType" /> objects.</returns>
    </member>
    <member name="T:System.Data.Services.Providers.IDataServicePagingProvider">
      <summary>Provides paging support for the clients of a custom data service provider.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServicePagingProvider.GetContinuationToken(System.Collections.IEnumerator)">
      <summary>Returns the next-page token to put in the $skiptoken query option.</summary>
      <returns>The next-page token as a collection of primitive types.</returns>
      <param name="enumerator">Enumerator for which the continuation token is being requested.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServicePagingProvider.SetContinuationToken(System.Linq.IQueryable,System.Data.Services.Providers.ResourceType,System.Object[])">
      <summary>Gets the next-page token from the $skiptoken query option in the request URI.</summary>
      <param name="query">Query for which the continuation token is being provided.</param>
      <param name="resourceType">Resource type of the result on which the $skip token is to be applied.</param>
      <param name="continuationToken">Continuation token parsed into primitive type values.</param>
    </member>
    <member name="T:System.Data.Services.Providers.IDataServiceQueryProvider">
      <summary>Defines a metadata and query source implementation for a custom data service provider.</summary>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceQueryProvider.CurrentDataSource">
      <summary>The data source object from which data is provided.</summary>
      <returns>The data source.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceQueryProvider.GetOpenPropertyValue(System.Object,System.String)">
      <summary>Gets the value of the open property.</summary>
      <returns>The value of the open property.</returns>
      <param name="target">Instance of the type that declares the open property.</param>
      <param name="propertyName">Name of the open property.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceQueryProvider.GetOpenPropertyValues(System.Object)">
      <summary>Gets the name and values of all the properties that are defined in the given instance of an open type.</summary>
      <returns>A collection of name and values of all the open properties.</returns>
      <param name="target">Instance of the type that declares the open property.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceQueryProvider.GetPropertyValue(System.Object,System.Data.Services.Providers.ResourceProperty)">
      <summary>Gets the value of the open property.</summary>
      <returns>Value for the property.</returns>
      <param name="target">Instance of the type that declares the open property.</param>
      <param name="resourceProperty">Value for the open property.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceQueryProvider.GetQueryRootForResourceSet(System.Data.Services.Providers.ResourceSet)">
      <summary>Gets the <see cref="T:System.Linq.IQueryable`1" /> that represents the container. </summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the resource set, or a null value if there is no resource set for the specified <paramref name="resourceSet" />.</returns>
      <param name="resourceSet">The resource set.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceQueryProvider.GetResourceType(System.Object)">
      <summary>Gets the resource type for the instance that is specified by the parameter.</summary>
      <returns>The <see cref="T:System.Data.Services.Providers.ResourceType" /> of the supplied object. </returns>
      <param name="target">Instance to extract a resource type from.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceQueryProvider.InvokeServiceOperation(System.Data.Services.Providers.ServiceOperation,System.Object[])">
      <summary>Invokes the given service operation and returns the results.</summary>
      <returns>The result of the service operation, or a null value for a service operation that returns void.</returns>
      <param name="serviceOperation">Service operation to invoke.</param>
      <param name="parameters">Values of parameters to pass to the service operation.</param>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceQueryProvider.IsNullPropagationRequired">
      <summary>Gets a value that indicates whether null propagation is required in expression trees.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that indicates whether null propagation is required.</returns>
    </member>
    <member name="T:System.Data.Services.Providers.IDataServiceStreamProvider">
      <summary>Defines the contract between the data server component and the stream implementation of a data source.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceStreamProvider.DeleteStream(System.Object,System.Data.Services.DataServiceOperationContext)">
      <summary>This method is invoked by the data services framework to obtain metadata about the stream associated with the specified <paramref name="entity" />. </summary>
      <param name="entity">The entity for which the descriptor object should be returned.</param>
      <param name="operationContext">The <see cref="T:System.Data.Services.DataServiceOperationContext" /> instance  that processes the request.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> or <paramref name="operationContext" /> are null.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entity" /> is not an entity that has a binary property to stream.</exception>
      <exception cref="T:System.Data.Services.DataServiceException">When the stream associated with the <paramref name="entity" /> cannot be deleted.</exception>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceStreamProvider.GetReadStream(System.Object,System.String,System.Nullable{System.Boolean},System.Data.Services.DataServiceOperationContext)">
      <summary>Returns the default stream that is associated with an entity that has a binary property.</summary>
      <returns>The data <see cref="T:System.IO.Stream" /> that contains the binary property data of the <paramref name="entity" />.</returns>
      <param name="entity">The entity that has the associated binary stream.</param>
      <param name="etag">The eTag value sent as part of the HTTP request that is sent to the data service.</param>
      <param name="checkETagForEquality">A nullable <see cref="T:System.Boolean" /> value that determines the type of eTag that is used. </param>
      <param name="operationContext">The <see cref="T:System.Data.Services.DataServiceOperationContext" /> instance used by the data service to process the request.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceStreamProvider.GetReadStreamUri(System.Object,System.Data.Services.DataServiceOperationContext)">
      <summary>Returns the URI that is used to request the data stream that is associated with the binary property of an entity.</summary>
      <returns>A <see cref="T:System.Uri" /> value that is used to request the binary data stream.</returns>
      <param name="entity">The entity that has the associated binary data stream.</param>
      <param name="operationContext">The <see cref="T:System.Data.Services.DataServiceOperationContext" /> instance used by the data service to process the request.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceStreamProvider.GetStreamContentType(System.Object,System.Data.Services.DataServiceOperationContext)">
      <summary>Returns the content type of the stream that is associated with the specified entity.</summary>
      <returns>A valid Content-Type of the binary data.</returns>
      <param name="entity">The entity that has the associated binary data stream.</param>
      <param name="operationContext">The <see cref="T:System.Data.Services.DataServiceOperationContext" /> instance used by the data service to process the request.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceStreamProvider.GetStreamETag(System.Object,System.Data.Services.DataServiceOperationContext)">
      <summary>Returns the eTag of the data stream that is associated with the specified entity.</summary>
      <returns>eTag of the stream associated with the <paramref name="entity" />.</returns>
      <param name="entity">The entity that has the associated binary data stream.</param>
      <param name="operationContext">The <see cref="T:System.Data.Services.DataServiceOperationContext" /> instance used by the data service to process the request.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceStreamProvider.GetWriteStream(System.Object,System.String,System.Nullable{System.Boolean},System.Data.Services.DataServiceOperationContext)">
      <summary>Returns the stream that the data service uses to write the contents of a binary property that is associated with an entity.</summary>
      <returns>A valid <see cref="T:System.Stream" /> the data service uses to write the contents of a binary property that is associated with the <paramref name="entity" />.</returns>
      <param name="entity">The entity that has the associated binary stream.</param>
      <param name="etag">The eTag value that is sent as part of the HTTP request that is sent to the data service.</param>
      <param name="checkETagForEquality">A nullable <see cref="T:System.Boolean" /> value that determines the type of eTag is used. </param>
      <param name="operationContext">The <see cref="T:System.Data.Services.DataServiceOperationContext" /> instance that is used by the data service to process the request.</param>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceStreamProvider.ResolveType(System.String,System.Data.Services.DataServiceOperationContext)">
      <summary>Returns a namespace-qualified type name that represents the type that the data service runtime must create for the Media Link Entry that is associated with the data stream for the Media Resource that is being inserted.</summary>
      <returns>A namespace-qualified type name.</returns>
      <param name="entitySetName">Fully-qualified entity set name.</param>
      <param name="operationContext">The <see cref="T:System.Data.Services.DataServiceOperationContext" /> instance that is used by the data service to process the request.</param>
    </member>
    <member name="P:System.Data.Services.Providers.IDataServiceStreamProvider.StreamBufferSize">
      <summary>Gets the size of the stream buffer.</summary>
      <returns>Integer that represents the size of buffer.</returns>
    </member>
    <member name="T:System.Data.Services.Providers.IDataServiceUpdateProvider">
      <summary>Defines the methods that must be implemented to supply eTag values to a custom data service provider.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.IDataServiceUpdateProvider.SetConcurrencyValues(System.Object,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Supplies the eTag value for the given entity resource.</summary>
      <param name="resourceCookie">Cookie that represents the resource.</param>
      <param name="checkForEquality">A <see cref="T:System.Boolean" /> that is true when property values must be compared for equality; false when property values must be compared for inequality.</param>
      <param name="concurrencyValues">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of the eTag property names and corresponding values.</param>
    </member>
    <member name="T:System.Data.Services.Providers.OpenTypeMethods">
      <summary>Used to perform late-bound operations on open properties.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Add(System.Object,System.Object)">
      <summary>Adds two values.</summary>
      <returns>The result of the arithmetic operation.</returns>
      <param name="left">First value to add.</param>
      <param name="right">Second value to add.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.AndAlso(System.Object,System.Object)">
      <summary>Performs a logical and operation between two expressions.</summary>
      <returns>The result of the logical and operation.</returns>
      <param name="left">Left value.</param>
      <param name="right">Right value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Ceiling(System.Object)">
      <summary>Returns the ceiling of the given value.</summary>
      <returns>The ceiling value for the given value.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> or <see cref="T:System.Double" /> object.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Concat(System.Object,System.Object)">
      <summary>Concatenates two string values.</summary>
      <returns>A new instance that is the concatenated string.</returns>
      <param name="first">The first string.</param>
      <param name="second">The second string.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Convert(System.Object,System.Data.Services.Providers.ResourceType)">
      <summary>Converts a value to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="value"></param>
      <param name="type"></param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Day(System.Object)">
      <summary>Returns the day value of the given <see cref="T:System.DateTime" /> instance.</summary>
      <returns>The day value of the given <see cref="T:System.DateTime" /> instance.</returns>
      <param name="dateTime">A <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Divide(System.Object,System.Object)">
      <summary>Divides two values.</summary>
      <returns>The divided value.</returns>
      <param name="left">The first value (dividend).</param>
      <param name="right">The second value (divisor).</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.EndsWith(System.Object,System.Object)">
      <summary>Determines whether the end of one string matches another string.</summary>
      <returns>Returns true when <paramref name="targetString" /> ends with <paramref name="substring" />; otherwise returns false.</returns>
      <param name="targetString">The string being compared.</param>
      <param name="substring">The string to compare to.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Equal(System.Object,System.Object)">
      <summary>Determines whether the specified objects are considered equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> value of true when both objects are equal; otherwise false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Floor(System.Object)">
      <summary>Returns the floor of the given value.</summary>
      <returns>Returns the floor value for the given object.</returns>
      <param name="value">The <see cref="T:System.Decimal" /> or <see cref="T:System.Double" /> object to evaluate.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.GetValue(System.Object,System.String)">
      <summary>Gets a value from the specified property of a specified object.</summary>
      <returns>The requested value; null if the value cannot be determined.</returns>
      <param name="value">Object from which to get the property value.</param>
      <param name="propertyName">Name of property from which to get the value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.GreaterThan(System.Object,System.Object)">
      <summary>Determines whether the value of one object is greater than another object.</summary>
      <returns>Returns true when the value of the first object is greater than that of the second object; otherwise returns false.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.GreaterThanOrEqual(System.Object,System.Object)">
      <summary>Determines whether the value of one object is greater than or equal to another object.</summary>
      <returns>Returns true when the value of the first object is greater than or equal to that of the second object; otherwise returns false.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Hour(System.Object)">
      <summary>Returns the hour value of the given <see cref="T:System.DateTime" /> instance.</summary>
      <returns>The hour value of the given <see cref="T:System.DateTime" /> instance.</returns>
      <param name="dateTime">A <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.IndexOf(System.Object,System.Object)">
      <summary>Returns the index of a substring in the target string.</summary>
      <returns>Returns the index of the location of <paramref name="substring" /> in the <paramref name="targetString" />.</returns>
      <param name="targetString">The target string.</param>
      <param name="substring">The substring to find.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Length(System.Object)">
      <summary>Gets the number of characters in the supplied string object. </summary>
      <returns>The length of the string value.</returns>
      <param name="value">The string to be checked.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.LessThan(System.Object,System.Object)">
      <summary>Determines whether the value of one object is less than another object.</summary>
      <returns>Returns true when the value of the first object is less than that of the second object; otherwise returns false.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.LessThanOrEqual(System.Object,System.Object)">
      <summary>Determines whether the value of one object is less than or equal to another object.</summary>
      <returns>Returns true when the value of the first object is less than or equal to that of the second object; otherwise returns false.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Minute(System.Object)">
      <summary>Returns the minute value of the given <see cref="T:System.DateTime" /> instance.</summary>
      <returns>The minute value of the given <see cref="T:System.DateTime" /> instance.</returns>
      <param name="dateTime">A <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Modulo(System.Object,System.Object)">
      <summary>Calculates the arithmetic remainder of dividing one value by a second value. </summary>
      <returns>The remainder value.</returns>
      <param name="left">The first value (dividend).</param>
      <param name="right">The second value (divisor).</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Month(System.Object)">
      <summary>Returns the month value of the given <see cref="T:System.DateTime" /> instance.</summary>
      <returns>The month value of the given <see cref="T:System.DateTime" /> instance.</returns>
      <param name="dateTime">A <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Multiply(System.Object,System.Object)">
      <summary>Multiplies two values.</summary>
      <returns>The product of the two values.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Negate(System.Object)">
      <summary>Returns the result of multiplying the specified value by negative one.</summary>
      <returns>The product of <paramref name="value" /> multiplied by negative one.</returns>
      <param name="value">The value to negate.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Not(System.Object)">
      <summary>Performs a bitwise (logical) complement operation on the supplied value.</summary>
      <returns>A bitwise complement of the supplied value.</returns>
      <param name="value">Value to logically complement.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.NotEqual(System.Object,System.Object)">
      <summary>Performs a logical comparison of the two values to determine if they are not equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> value of true when both objects are not equal; otherwise returns false.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.OrElse(System.Object,System.Object)">
      <summary>Performs a logical OR operation on two values.</summary>
      <returns>The result of the logical OR operation.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Replace(System.Object,System.Object,System.Object)">
      <summary>Replaces one substring with a second substring in a target string.</summary>
      <returns>A new string with the substring replaced with the new substring.</returns>
      <param name="targetString">The string with the substring to replace.</param>
      <param name="substring">The substring to be replaced.</param>
      <param name="newString">The new substring.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Round(System.Object)">
      <summary>Rounds the supplied value.</summary>
      <returns>The rounded value.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> or <see cref="T:System.Double" /> to round.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Second(System.Object)">
      <summary>Returns the second value of the given <see cref="T:System.DateTime" /> instance.</summary>
      <returns>The second value of the given <see cref="T:System.DateTime" /> instance.</returns>
      <param name="dateTime">A <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.StartsWith(System.Object,System.Object)">
      <summary>Checks whether the target string starts with the substring.</summary>
      <returns>Returns true if the target string starts with the given substring, otherwise returns false.</returns>
      <param name="targetString">The string being compared.</param>
      <param name="substring">The substring that the <paramref name="targetString" /> might start with.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object)">
      <summary>Returns the substring after the specified starting index location.</summary>
      <returns>The substring.</returns>
      <param name="targetString">The string from which to return the substring.</param>
      <param name="startIndex">The starting index for the substring.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Substring(System.Object,System.Object,System.Object)">
      <summary>Returns the substring of a specific length after the specified starting index location.</summary>
      <returns>The substring.</returns>
      <param name="targetString">The string from which to return the substring.</param>
      <param name="startIndex">The starting index for the substring.</param>
      <param name="length">The length of the substring.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.SubstringOf(System.Object,System.Object)">
      <summary>Determines whether a substring occurs in another string.</summary>
      <returns>true when <paramref name="substring" /> occurs in <paramref name="targetString" />, otherwise false.</returns>
      <param name="substring">The substring to locate.</param>
      <param name="targetString">The string to search.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Subtract(System.Object,System.Object)">
      <summary>Subtracts two values.</summary>
      <returns>The result of the arithmetic operation.</returns>
      <param name="left">First value in the subtraction.</param>
      <param name="right">Second value in the subtraction.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.ToLower(System.Object)">
      <summary>Returns a copy of a string converted to lowercase.</summary>
      <returns>A new string value with only lowercase.</returns>
      <param name="targetString">The string to convert.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.ToUpper(System.Object)">
      <summary>Returns a copy of a string converted to uppercase.</summary>
      <returns>A new string value with only uppercase characters.</returns>
      <param name="targetString">The string to convert.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Trim(System.Object)">
      <summary>Removes all leading and trailing white-space characters from a string.</summary>
      <returns>The trimmed string.</returns>
      <param name="targetString">The string to trim.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.TypeIs(System.Object,System.Data.Services.Providers.ResourceType)">
      <summary>Checks the type of a specified value.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when the value is of the specified resource type; otherwise false.</returns>
      <param name="value">The value to check.</param>
      <param name="type">Resource type for which to check.</param>
    </member>
    <member name="M:System.Data.Services.Providers.OpenTypeMethods.Year(System.Object)">
      <summary>Returns the year value of the given <see cref="T:System.DateTime" /> instance.</summary>
      <returns>The year value of the given <see cref="T:System.DateTime" /> instance.</returns>
      <param name="dateTime">A <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="T:System.Data.Services.Providers.ResourceAssociationSet">
      <summary>Describes an association between two resource sets.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceAssociationSet.#ctor(System.String,System.Data.Services.Providers.ResourceAssociationSetEnd,System.Data.Services.Providers.ResourceAssociationSetEnd)">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Providers.ResourceAssociationSet" /> class.</summary>
      <param name="name">Name of the association set.</param>
      <param name="end1">
        <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> that is at the source end of the association set.</param>
      <param name="end2">
        <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> that is at the target end of the association set.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceAssociationSet.End1">
      <summary>Gets the source end of the association set.</summary>
      <returns>
        <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> that is at the source end of the association set.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceAssociationSet.End2">
      <summary>Gets the target end of the association set.</summary>
      <returns>
        <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> that is at the target end of the association set.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceAssociationSet.Name">
      <summary>Gets the name of the association set.</summary>
      <returns>The name of the association set.</returns>
    </member>
    <member name="T:System.Data.Services.Providers.ResourceAssociationSetEnd">
      <summary>Describes an end point of a resource association set.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceAssociationSetEnd.#ctor(System.Data.Services.Providers.ResourceSet,System.Data.Services.Providers.ResourceType,System.Data.Services.Providers.ResourceProperty)">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> class.</summary>
      <param name="resourceSet">Resource set to which the <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> end belongs.</param>
      <param name="resourceType">Resource type to which the <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> end belongs.</param>
      <param name="resourceProperty">Resource property that returns the <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" /> end.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceAssociationSetEnd.ResourceProperty">
      <summary>Gets the resource property that returns the <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" />.</summary>
      <returns>The resource property.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceAssociationSetEnd.ResourceSet">
      <summary>Gets the resource set for the <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" />.</summary>
      <returns>The resource set.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceAssociationSetEnd.ResourceType">
      <summary>Gets the resource type for the <see cref="T:System.Data.Services.Providers.ResourceAssociationSetEnd" />.</summary>
      <returns>The resource type.</returns>
    </member>
    <member name="T:System.Data.Services.Providers.ResourceProperty">
      <summary>Provides a type to describe a property on a resource.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceProperty.#ctor(System.String,System.Data.Services.Providers.ResourcePropertyKind,System.Data.Services.Providers.ResourceType)">
      <summary>Initializes a new <see cref="T:System.Data.Services.Providers.ResourceProperty" /> for an open property.</summary>
      <param name="name">Property name for the property as string.</param>
      <param name="kind">
        <see cref="T:System.Data.Services.Providers.ResourcePropertyKind" />.</param>
      <param name="propertyResourceType">The <see cref="T:System.Data.Services.Providers.ResourceType" /> of the resource to which the property refers.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceProperty.CanReflectOnInstanceTypeProperty">
      <summary>Gets a value that indicates whether this property can be accessed through reflection on the declaring resource instance type.</summary>
      <returns>true when the property can be accessed through reflection; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceProperty.CustomState">
      <summary>Gets or sets custom state information about a resource property that is defined by the developer.</summary>
      <returns>State information.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceProperty.IsReadOnly">
      <summary>Gets a Boolean value that indicates whether the property is read-only.</summary>
      <returns>True if the property is read-only.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceProperty.Kind">
      <summary>Gets the kind of the resource property with regard to the resource.</summary>
      <returns>A <see cref="T:System.Data.Services.Providers.ResourcePropertyKind" /> value.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceProperty.MimeType">
      <summary>Gets or sets MIME type for the property.</summary>
      <returns>String value that indicates MIME type.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceProperty.Name">
      <summary>Gets the name of the resource property.</summary>
      <returns>The name of the resource property as string.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceProperty.ResourceType">
      <summary>Gets the type of the resource property.</summary>
      <returns>The <see cref="T:System.Data.Services.Providers.ResourceType" /> of the resource property.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceProperty.SetReadOnly">
      <summary>Sets the resource property to read-only.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.ResourcePropertyKind">
      <summary>Enumeration for the kinds of properties that a resource can have.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourcePropertyKind.Primitive">
      <summary>A primitive type property.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourcePropertyKind.Key">
      <summary>A property that is part of the key.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourcePropertyKind.ComplexType">
      <summary>Complex or compound property.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourcePropertyKind.ResourceReference">
      <summary>A reference to another resource.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourcePropertyKind.ResourceSetReference">
      <summary>A reference to a resource set.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourcePropertyKind.ETag">
      <summary>An ETag property.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.ResourceSet">
      <summary>Represents a collection of data service primitive, complex, or entity types.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceSet.#ctor(System.String,System.Data.Services.Providers.ResourceType)">
      <summary>Creates a new collection of data service primitive, complex, or entity types.</summary>
      <param name="name">The name of the set of items as string.</param>
      <param name="elementType">The <see cref="T:System.Data.Services.Providers.ResourceType" /> of the items in the set.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceSet.CustomState">
      <summary>Custom state information that is defined by the developer.</summary>
      <returns>State information defined by the developer.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceSet.IsReadOnly">
      <summary>Gets a Boolean value that indicates whether the set is read-only.</summary>
      <returns>Boolean value that indicates whether resource set is read-only.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceSet.Name">
      <summary>Gets the name of the collection.</summary>
      <returns>String value that contains the name of the resource set.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceSet.ResourceType">
      <summary>Gets the type of the collection.</summary>
      <returns>The <see cref="T:System.Data.Services.Providers.ResourceType" />.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceSet.SetReadOnly">
      <summary>Gets or sets the read-only status of the collection.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.ResourceType">
      <summary>Represents a data service primitive, complex, or entity type.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceType.#ctor(System.Type,System.Data.Services.Providers.ResourceTypeKind,System.Data.Services.Providers.ResourceType,System.String,System.String,System.Boolean)">
      <summary>Creates an instance of a data service <see cref="T:System.Data.Services.Providers.ResourceType" />.</summary>
      <param name="instanceType">CLR type that represents the format inside the WCF Data Services runtime.</param>
      <param name="resourceTypeKind">
        <see cref="T:System.Data.Services.Providers.ResourceTypeKind" /> of the resource type.</param>
      <param name="baseType">Base type of the resource type as string.</param>
      <param name="namespaceName">Namespace name of the resource type as string.</param>
      <param name="name">Name of the given resource type as string.</param>
      <param name="isAbstract">Boolean value that indicates whether the resource type is an abstract type.</param>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceType.AddEntityPropertyMappingAttribute(System.Data.Services.Common.EntityPropertyMappingAttribute)">
      <summary>Adds an <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> for the resource type.</summary>
      <param name="attribute">The <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> to add.</param>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceType.AddProperty(System.Data.Services.Providers.ResourceProperty)">
      <summary>Adds the property supplied by the <paramref name="resourceProperty" /> parameter to the type.</summary>
      <param name="property">
        <see cref="T:System.Data.Services.Providers.ResourceProperty" /> property to be added.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.BaseType">
      <summary>Gets a reference to base resource type, if any.</summary>
      <returns>
        <see cref="T:System.Data.Services.Providers.ResourceType" /> of the base type.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.CanReflectOnInstanceType">
      <summary>Get whether the corresponding instance type represents the CLR type of this entity.</summary>
      <returns>true if the instance type represents a CLR type; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.CustomState">
      <summary>Gets or sets a placeholder to hold custom state information about a resource type that is defined by the developer.</summary>
      <returns>Custom state information defined by the developer.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.ETagProperties">
      <summary>Gets the list of properties for this type.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Data.Services.Providers.ResourceType" />.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.FullName">
      <summary>Gets the full name of the resource.</summary>
      <returns>The full name of the resource type as string.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceType.GetPrimitiveResourceType(System.Type)">
      <summary>Gets a resource type that represent a primitive type when given a <see cref="T:System.Type" /> object.</summary>
      <returns>The resource type.</returns>
      <param name="type">
        <see cref="T:System.Type" /> type from which to get the primitive type.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.InstanceType">
      <summary>Reference to the CLR type that this resource represents.</summary>
      <returns>The instance type as a <see cref="T:System.Data.Services.Providers.ResourceType" />.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.IsAbstract">
      <summary>Gets a Boolean value that indicates whether this is an abstract type.</summary>
      <returns>True if <see cref="T:System.Data.Services.Providers.ResourceType" /> is abstract.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.IsMediaLinkEntry">
      <summary>Gets or sets a Boolean value that is true if the resource type includes a default stream.</summary>
      <returns>A Boolean value that is true if the resource type includes a default stream.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.IsOpenType">
      <summary>Gets whether the resource type has open properties.</summary>
      <returns>true if the resource type has open properties defined; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.IsReadOnly">
      <summary>Gets a Boolean value that is true if this resource type has been set to read-only.</summary>
      <returns>True if this resource type has been set to read-only; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.KeyProperties">
      <summary>Gets a list of key properties for this type</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Data.Services.Providers.ResourceProperty" />.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceType.LoadPropertiesDeclaredOnThisType">
      <summary>Returns a list of properties declared by this resource type. </summary>
      <returns>The list of properties declared on this type.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.Name">
      <summary>Gets the name of the resource type.</summary>
      <returns>Name of the resource type as string.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.Namespace">
      <summary>Gets the namespace of the resource type.</summary>
      <returns>Namespace of the resource type as string.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.Properties">
      <summary>Gets a list of properties declared of this type that includes only properties defined on the type, not in the base type.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Data.Services.Providers.ResourceProperty" />.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.PropertiesDeclaredOnThisType">
      <summary>List of properties declared on this type.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Data.Services.Providers.ResourceProperty" />.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ResourceType.ResourceTypeKind">
      <summary>Gets the <see cref="T:System.Data.Services.Providers.ResourceTypeKind" /> for the type.</summary>
      <returns>
        <see cref="T:System.Data.Services.Providers.ResourceTypeKind" />.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.ResourceType.SetReadOnly">
      <summary>Sets the resource type to read-only.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.ResourceTypeKind">
      <summary>Enumeration for the kind of resource key.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourceTypeKind.EntityType">
      <summary>Entity type resource.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourceTypeKind.ComplexType">
      <summary>Complex type resource.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ResourceTypeKind.Primitive">
      <summary>Primitive type resource.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.ServiceOperation">
      <summary>Represents a custom service operation.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.ServiceOperation.#ctor(System.String,System.Data.Services.Providers.ServiceOperationResultKind,System.Data.Services.Providers.ResourceType,System.Data.Services.Providers.ResourceSet,System.String,System.Collections.Generic.IEnumerable{System.Data.Services.Providers.ServiceOperationParameter})">
      <summary>Creates a new instance of the service operation.</summary>
      <param name="name">Name of the service operation.</param>
      <param name="resultKind">
        <see cref="T:System.Data.Services.Providers.ServiceOperationResultKind" /> that is the kind of result expected from this operation.</param>
      <param name="resultType">
        <see cref="T:System.Data.Services.Providers.ResourceType" /> that is the result of the operation.</param>
      <param name="resultSet">
        <see cref="T:System.Data.Services.Providers.ResourceSet" /> that is the result of the operation.</param>
      <param name="method">Protocol method to which the service operation responds.</param>
      <param name="parameters">Ordered collection of <see cref="T:System.Data.Services.Providers.ServiceOperationParameter" /> objects that are parameters for the operation.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.CustomState">
      <summary>Gets or sets custom state information about service operation.</summary>
      <returns>State information.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.IsReadOnly">
      <summary>Indicates whether the service operation is read-only.</summary>
      <returns>Boolean value that indicates whether the service operation is read-only.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.Method">
      <summary>Gets the method of the HTTP protocol to which the service operation responds.</summary>
      <returns>The HTTP method name.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.MimeType">
      <summary>MIME-type specified on primitive results, possibly null.</summary>
      <returns>MIME-type value.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.Name">
      <summary>Name of service operation.</summary>
      <returns>String name.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.Parameters">
      <summary>Collection of in-order parameters for the service operation.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Data.Services.Providers.ServiceOperationParameter" /> objects.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.ResourceSet">
      <summary>Gets the entity set from which entities are read.</summary>
      <returns>The entity set as a <see cref="T:System.Data.Services.Providers.ResourceSet" /> object.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.ResultKind">
      <summary>The kind of result that is expected by this service operation.</summary>
      <returns>
        <see cref="T:System.Data.Services.Providers.ServiceOperationResultKind" /> that is the kind of result expected from this operation.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperation.ResultType">
      <summary>Type of results returned by this service operation.</summary>
      <returns>Type of the results as a <see cref="T:System.Data.Services.Providers.ResourceType" />.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.ServiceOperation.SetReadOnly">
      <summary>Sets whether the service operation is read-only.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.ServiceOperationParameter">
      <summary>Represents parameter information for service operations.</summary>
    </member>
    <member name="M:System.Data.Services.Providers.ServiceOperationParameter.#ctor(System.String,System.Data.Services.Providers.ResourceType)">
      <summary>Creates a new instance of <see cref="T:System.Data.Services.Providers.ServiceOperationParameter" />.</summary>
      <param name="name">Name of parameter.</param>
      <param name="parameterType">Data type of parameter.</param>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperationParameter.CustomState">
      <summary>Custom state information  defined by the developer about a service operation parameter.</summary>
      <returns>Custom state information defined by the developer.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperationParameter.IsReadOnly">
      <summary>Gets a Boolean value that defines whether the parameter is read-only.</summary>
      <returns>Boolean value that defines whether the parameter is read-only.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperationParameter.Name">
      <summary>Gets the name of the service operation parameter.</summary>
      <returns>A string that specifies the name of the service operation parameter.</returns>
    </member>
    <member name="P:System.Data.Services.Providers.ServiceOperationParameter.ParameterType">
      <summary>Gets the data type of the service operation parameter.</summary>
      <returns>The data type of the service operation parameter as <see cref="T:System.Data.Services.Providers.ResourceType" />.</returns>
    </member>
    <member name="M:System.Data.Services.Providers.ServiceOperationParameter.SetReadOnly">
      <summary>Sets the service operation parameter to read-only.</summary>
    </member>
    <member name="T:System.Data.Services.Providers.ServiceOperationResultKind">
      <summary>An enumeration that describes the kind of results that a service operation provides.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ServiceOperationResultKind.DirectValue">
      <summary>A single value that cannot be further composed.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ServiceOperationResultKind.Enumeration">
      <summary>An enumeration of values that cannot be further composed.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ServiceOperationResultKind.QueryWithMultipleResults">
      <summary>A queryable object that returns multiple elements.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ServiceOperationResultKind.QueryWithSingleResult">
      <summary>A query that returns a single item.</summary>
    </member>
    <member name="F:System.Data.Services.Providers.ServiceOperationResultKind.Void">
      <summary>No results.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Device.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Device</name>
  </assembly>
  <members>
    <member name="T:System.Device.Location.CivicAddress">
      <summary>Represents a civic address. A civic address can include fields such as street address, postal code, state/province, and country/region.</summary>
    </member>
    <member name="M:System.Device.Location.CivicAddress.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.CivicAddress" /> class.</summary>
    </member>
    <member name="M:System.Device.Location.CivicAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.CivicAddress" /> class with address information.</summary>
      <param name="addressLine1">A string containing the first line of the street address.</param>
      <param name="addressLine2">A string containing the second line of the street address.</param>
      <param name="building">A string containing the building name or number.</param>
      <param name="city">A string containing the city.</param>
      <param name="countryRegion">A string containing the country or region. </param>
      <param name="floorLevel">A string containing the floor number.</param>
      <param name="postalCode">A string containing the postal code.</param>
      <param name="stateProvince">A string containing the state or province.</param>
      <exception cref="T:System.ArgumentException">At least one parameter must be a non-empty string.</exception>
    </member>
    <member name="P:System.Device.Location.CivicAddress.AddressLine1">
      <summary>Gets or sets the first line of the address.</summary>
      <returns>Returns the first line of the address. If the data is not provided, returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.AddressLine2">
      <summary>Gets or sets the second line of the address.</summary>
      <returns>Returns the second line of the address. If the data is not provided, returns <see cref="F:System.String.Empty." /></returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.Building">
      <summary>Gets or sets the building name or number.</summary>
      <returns>Returns the building name or number. If the data is not provided, returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.City">
      <summary>Gets or sets the name of the city.</summary>
      <returns>Returns the name of the city. If the data is not provided, returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.CountryRegion">
      <summary>Gets or sets the country/region of the location.</summary>
      <returns>Returns the country/region code. If the data is not provided, returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.FloorLevel">
      <summary>Gets or sets the floor level of the location.</summary>
      <returns>Returns a string containing the floor level. If the data is not provided, returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.IsUnknown">
      <summary>Gets a value that indicates whether the <see cref="T:System.Device.Location.CivicAddress" /> contains data.</summary>
      <returns>true if the <see cref="T:System.Device.Location.CivicAddress" /> is unknown. false if the address contains data.</returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.PostalCode">
      <summary>Gets or sets the postal code of the location.</summary>
      <returns>Returns the postal code of the location. If the data is not provided, returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Device.Location.CivicAddress.StateProvince">
      <summary>Gets or sets the state or province of the location.</summary>
      <returns>Returns the state or province of the location. If the data is not provided, returns <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="F:System.Device.Location.CivicAddress.Unknown">
      <summary>Represents a <see cref="T:System.Device.Location.CivicAddress" /> that contains no data. </summary>
    </member>
    <member name="T:System.Device.Location.CivicAddressResolver">
      <summary>Provides functionality for resolving a coordinate-based location to a civic address.</summary>
    </member>
    <member name="M:System.Device.Location.CivicAddressResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.CivicAddressResolver" /> class.</summary>
    </member>
    <member name="M:System.Device.Location.CivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)">
      <summary>Synchronously resolves a civic address from a location based on latitude and longitude. This call will block while the address is being resolved.</summary>
      <returns>The civic address resolved from the <paramref name="coordinate" /> parameter. <see cref="F:System.Device.Location.CivicAddress.Unknown" /> is returned if the address cannot be resolved.</returns>
      <param name="coordinate">The <see cref="T:System.Device.Location.GeoCoordinate" /> containing the location to resolve to a civic address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="coordinate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinate" /> does not contain a valid latitude and longitude.</exception>
    </member>
    <member name="M:System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)">
      <summary>Asynchronously resolves an address from a location based on latitude and longitude. The call will not block while the address is being resolved.</summary>
      <param name="coordinate">The <see cref="T:System.Device.Location.GeoCoordinate" /> containing the location to resolve to a civic address.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="coordinate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinate" /> does not contain a valid latitude and longitude.</exception>
    </member>
    <member name="E:System.Device.Location.CivicAddressResolver.ResolveAddressCompleted">
      <summary>Occurs when the address resolution initiated by a call to <see cref="M:System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)" /> completes.</summary>
    </member>
    <member name="T:System.Device.Location.GeoCoordinate">
      <summary>Represents a geographical location determined by latitude and longitude coordinates. May also include altitude, accuracy, speed and course information.</summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Device.Location.GeoCoordinate" /> with no data fields set.</summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.GeoCoordinate" /> class from latitude and longitude data.</summary>
      <param name="latitude">The latitude of the location. May range from -90.0 to 90.0. </param>
      <param name="longitude">The longitude of the location. May range from -180.0 to 180.0.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Latitude or longitude is out of range.</exception>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.GeoCoordinate" /> class from latitude, longitude and altitude data.</summary>
      <param name="latitude">Latitude. May range from -90.0 to 90.0.</param>
      <param name="longitude">Longitude. May range from -180.0 to 180.0</param>
      <param name="altitude">The altitude in meters. May be negative, 0, positive, or <see cref="F:System.Double.NaN" />, if unknown.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="latitude" />, <paramref name="longitude" />, or <paramref name="altitude" /> is out of range.</exception>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.GeoCoordinate" /> class from latitude, longitude, altitude, horizontal accuracy, vertical accuracy, speed and course.</summary>
      <param name="latitude">The latitude of the location. May range from -90.0 to 90.0.</param>
      <param name="longitude">The longitude of the location. May range from -180.0 to 180.0.</param>
      <param name="altitude">The altitude in meters. May be negative, 0, positive, or <see cref="F:System.Double.NaN" />, if unknown.</param>
      <param name="horizontalAccuracy">The accuracy of the latitude/longitude coordinates, in meters. Must be greater than or equal to 0. If a value of 0 is supplied to this constructor, the <see cref="P:System.Device.Location.GeoCoordinate.HorizontalAccuracy" /> property will be set to <see cref="F:System.Double.NaN" />.</param>
      <param name="verticalAccuracy">The accuracy of the altitude, in meters. Must be greater than or equal to 0. If a value of 0 is supplied to this constructor, the <see cref="P:System.Device.Location.GeoCoordinate.VerticalAccuracy" /> property will be set to <see cref="F:System.Double.NaN" />.</param>
      <param name="speed">The speed measured in meters per second. May be negative, 0, positive, or <see cref="F:System.Double.NaN" />, if unknown.  A negative speed can indicate moving in reverse.</param>
      <param name="course">The direction of travel, rather than orientation. This parameter is measured in degrees relative to true north. Must range from 0 to 360.0, or be <see cref="F:System.Double.NaN" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="latitude" />, <paramref name="longitude" />, <paramref name="horizontalAccuracy" />, <paramref name="verticalAccuracy" /> or <paramref name="course" /> is out of range.</exception>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.Altitude">
      <summary>Gets the altitude of the <see cref="T:System.Device.Location.GeoCoordinate" />, in meters.</summary>
      <returns>The altitude, in meters.</returns>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.Course">
      <summary>Gets or sets the heading in degrees relative to true north.</summary>
      <returns>The heading in degrees relative to true north. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Device.Location.GeoCoordinate.Course" /> is set outside the valid range.</exception>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)">
      <summary>Determines if the <see cref="T:System.Device.Location.GeoCoordinate" /> object is equivalent to the parameter, based solely on latitude and longitude.</summary>
      <returns>true if the <see cref="T:System.Device.Location.GeoCoordinate" /> objects are equal; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Device.Location.GeoCoordinate" /> object to compare to the calling object.</param>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.Equals(System.Object)">
      <summary>Determines if a specified <see cref="T:System.Device.Location.GeoCoordinate" /> is equal to the current <see cref="T:System.Device.Location.GeoCoordinate" />, based solely on latitude and longitude.</summary>
      <returns>true, if the <see cref="T:System.Device.Location.GeoCoordinate" /> objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare the <see cref="T:System.Device.Location.GeoCoordinate" /> to.</param>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)">
      <summary>Returns the distance between the latitude/longitude coordinate specified by this <see cref="T:System.Device.Location.GeoCoordinate" /> and another specified <see cref="T:System.Device.Location.GeoCoordinate" />.</summary>
      <returns>The distance between the two coordinates, in meters.</returns>
      <param name="other">The <see cref="T:System.Device.Location.GeoCoordinate" /> for the location to calculate the distance to.</param>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.GetHashCode">
      <summary>Serves as a hash function for the <see cref="T:System.Device.Location.GeoCoordinate" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Device.Location.GeoCoordinate" />.</returns>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.HorizontalAccuracy">
      <summary>Gets or sets the accuracy of the latitude and longitude given by the <see cref="T:System.Device.Location.GeoCoordinate" />, in meters.</summary>
      <returns>The accuracy of the latitude and longitude, in meters.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Device.Location.GeoCoordinate.HorizontalAccuracy" /> is set outside the valid range.</exception>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.IsUnknown">
      <summary>Gets a value that indicates whether the <see cref="T:System.Device.Location.GeoCoordinate" /> does not contain latitude or longitude data.</summary>
      <returns>true if the <see cref="T:System.Device.Location.GeoCoordinate" /> does not contain latitude or longitude data; otherwise, false.</returns>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.Latitude">
      <summary>Gets or sets the latitude of the <see cref="T:System.Device.Location.GeoCoordinate" />.</summary>
      <returns>Latitude of the location.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Device.Location.GeoCoordinate.Latitude" /> is set outside the valid range.</exception>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.Longitude">
      <summary>Gets or sets the longitude of the <see cref="T:System.Device.Location.GeoCoordinate" />.</summary>
      <returns>The longitude.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Device.Location.GeoCoordinate.Longitude" /> is set outside the valid range.</exception>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)">
      <summary>Determines whether two <see cref="T:System.Device.Location.GeoCoordinate" /> objects refer to the same location.</summary>
      <returns>true, if the <see cref="T:System.Device.Location.GeoCoordinate" /> objects are determined to be equivalent; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Device.Location.GeoCoordinate" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Device.Location.GeoCoordinate" /> to compare.</param>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)">
      <summary>Determines whether two <see cref="T:System.Device.Location.GeoCoordinate" /> objects correspond to different locations.</summary>
      <returns>true, if the <see cref="T:System.Device.Location.GeoCoordinate" /> objects are determined to be different; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.Device.Location.GeoCoordinate" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Device.Location.GeoCoordinate" /> to compare.</param>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.Speed">
      <summary>Gets or sets the speed in meters per second.</summary>
      <returns>The speed in meters per second. The speed must be greater than or equal to zero, or <see cref="F:System.Double.NaN" />. </returns>
      <exception cref="System.ArgumentOutOfRangeException">
        <see cref="P:System.Device.Location.GeoCoordinate.Speed" /> is set outside the valid range.</exception>
    </member>
    <member name="M:System.Device.Location.GeoCoordinate.ToString">
      <summary>Returns a string containing the latitude and longitude.</summary>
      <returns>A string containing the latitude and longitude, separated by a comma.</returns>
    </member>
    <member name="F:System.Device.Location.GeoCoordinate.Unknown">
      <summary>Represents a <see cref="T:System.Device.Location.GeoCoordinate" /> object with unknown latitude and longitude fields.</summary>
    </member>
    <member name="P:System.Device.Location.GeoCoordinate.VerticalAccuracy">
      <summary>Gets or sets the accuracy of the altitude given by the <see cref="T:System.Device.Location.GeoCoordinate" />, in meters.</summary>
      <returns>The accuracy of the altitude, in meters.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Device.Location.GeoCoordinate.VerticalAccuracy" /> is set outside the valid range.</exception>
    </member>
    <member name="T:System.Device.Location.GeoCoordinateWatcher">
      <summary>Supplies location data that is based on latitude and longitude coordinates. </summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Device.Location.GeoCoordinateWatcher" /> with default accuracy settings.</summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.#ctor(System.Device.Location.GeoPositionAccuracy)">
      <summary>Initializes a new instance of <see cref="T:System.Device.Location.GeoCoordinateWatcher" />, given an accuracy level.</summary>
      <param name="desiredAccuracy">
        <see cref="T:System.Device.Location.GeoLocationAccuracy" /> indicating the requested accuracy level of the location provider.An accuracy of <see cref="F:System.Device.Location.GeoPositionAccuracy.High" /> can degrade performance and should be specified only when high accuracy is needed. </param>
    </member>
    <member name="P:System.Device.Location.GeoCoordinateWatcher.DesiredAccuracy">
      <summary>The requested accuracy level for the location data provided by the <see cref="T:System.Device.Location.GeoCoordinateWatcher" />.</summary>
      <returns>
        <see cref="T:System.Device.Location.GeoLocationAccuracy" /> indicating the requested accuracy level of the location provider.</returns>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Device.Location.GeoCoordinateWatcher" /> class.</summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.Dispose(System.Boolean)">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Device.Location.GeoCoordinateWatcher" /> class.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.Finalize">
      <summary>Free resources and perform other cleanup operations before the <see cref="T:System.Device.Location.GeoCoordinateWatcher" /> is reclaimed by garbage collection.</summary>
    </member>
    <member name="P:System.Device.Location.GeoCoordinateWatcher.MovementThreshold">
      <summary>The distance that must be moved, in meters relative to the coordinate from the last <see cref="E:System.Device.Location.GeoCoordinateWatcher.PositionChanged" /> event, before the location provider will raise another <see cref="E:System.Device.Location.GeoCoordinateWatcher.PositionChanged" /> event.</summary>
      <returns>Distance in meters.</returns>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.OnPositionChanged(System.Device.Location.GeoPositionChangedEventArgs{System.Device.Location.GeoCoordinate})">
      <summary>Called when a <see cref="E:System.Device.Location.GeoCoordinateWatcher.System.Device.Location.IGeoPositionWatcher`1.PositionChanged" /> event occurs.</summary>
      <param name="e">A GeoPositionChangedEventArgs object that contains the new location.</param>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.OnPositionStatusChanged(System.Device.Location.GeoPositionStatusChangedEventArgs)">
      <summary>Called when a <see cref="E:System.Device.Location.GeoCoordinateWatcher.System.Device.Location.IGeoPositionWatcher`1.StatusChanged" /> event occurs.</summary>
      <param name="e">A GeoPositionStatusChangedEventArgs object that contains the new status.</param>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.OnPropertyChanged(System.String)">
      <summary>Called when a property of the <see cref="T:System.Device.Location.GeoCoordinateWatcher" /> changes.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="P:System.Device.Location.GeoCoordinateWatcher.Permission">
      <summary>Indicates whether permission to access location data from location providers has been granted or denied.</summary>
      <returns>A value that indicates whether permission has been granted or denied.</returns>
    </member>
    <member name="P:System.Device.Location.GeoCoordinateWatcher.Position">
      <summary>Gets the <see cref="T:System.Device.Location.GeoCoordinate" /> that indicates the current location.</summary>
      <returns>The <see cref="T:System.Device.Location.GeoCoordinate" /> that indicates the current location.</returns>
    </member>
    <member name="E:System.Device.Location.GeoCoordinateWatcher.PositionChanged">
      <summary>Indicates that the latitude or longitude of the location data has changed.</summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.Start">
      <summary>Initiate the acquisition of data from the current location provider. This method enables <see cref="E:System.Device.Location.GeoCoordinateWatcher.PositionChanged" /> events and allows access to the <see cref="P:System.Device.Location.GeoCoordinateWatcher.Position" /> property.</summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.Start(System.Boolean)">
      <summary>Initiate the acquisition of data from the current location provider. This method enables <see cref="E:System.Device.Location.GeoCoordinateWatcher.PositionChanged" /> events and allows access to the <see cref="P:System.Device.Location.GeoCoordinateWatcher.Position" /> property.</summary>
      <param name="suppressPermissionPrompt">true to suppress the permission dialog box; false to optionally show the permission dialog box if permissions have not already been granted.</param>
    </member>
    <member name="P:System.Device.Location.GeoCoordinateWatcher.Status">
      <summary>Gets the current status of the <see cref="T:System.Device.Location.GeoCoordinateWatcher" />.</summary>
      <returns>A <see cref="T:System.Device.Location.GeoPositionStatus" /> that indicates the availability of data from the <see cref="T:System.Device.Location.GeoCoordinateWatcher" />.</returns>
    </member>
    <member name="E:System.Device.Location.GeoCoordinateWatcher.StatusChanged">
      <summary>Indicates that the status of the <see cref="T:System.Device.Location.GeoCoordinateWatcher" /> object has changed.</summary>
    </member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.Stop">
      <summary>Stops the <see cref="T:System.Device.Location.GeoCoordinateWatcher" /> from providing location data and events.</summary>
    </member>
    <member name="E:System.Device.Location.GeoCoordinateWatcher.System#ComponentModel#INotifyPropertyChanged#PropertyChanged"></member>
    <member name="E:System.Device.Location.GeoCoordinateWatcher.System#Device#Location#IGeoPositionWatcher{T}#PositionChanged"></member>
    <member name="E:System.Device.Location.GeoCoordinateWatcher.System#Device#Location#IGeoPositionWatcher{T}#StatusChanged"></member>
    <member name="M:System.Device.Location.GeoCoordinateWatcher.TryStart(System.Boolean,System.TimeSpan)">
      <summary>Initiates the acquisition of data from the current location provider. This method returns synchronously.</summary>
      <returns>true if data acquisition is started within the time period specified by <paramref name="timeout" />; otherwise, false.</returns>
      <param name="suppressPermissionPrompt">true to suppress the permission dialog box; false to display the permission dialog box.</param>
      <param name="timeout">Time in milliseconds to wait for the location provider to start before timing out.</param>
    </member>
    <member name="T:System.Device.Location.GeoPosition`1">
      <summary>Contains location data of a type specified by the type parameter of the <see cref="T:System.Device.Location.GeoPosition`1" /> class.</summary>
      <typeparam name="T">The type of the location data.</typeparam>
    </member>
    <member name="M:System.Device.Location.GeoPosition`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.GeoPosition`1" /> class.</summary>
    </member>
    <member name="M:System.Device.Location.GeoPosition`1.#ctor(System.DateTimeOffset,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.GeoPosition`1" /> class with a timestamp and position.</summary>
      <param name="timestamp">The time the location data was obtained.</param>
      <param name="position">The location data to use to initialize the <see cref="T:System.Device.Location.GeoPosition`1" /> object.</param>
    </member>
    <member name="P:System.Device.Location.GeoPosition`1.Location">
      <summary>Gets or sets the location data for the <see cref="T:System.Device.Location.GeoPosition`1" /> object.</summary>
      <returns>An object of type T that contains the location data for the <see cref="T:System.Device.Location.GeoPosition`1" /> object.</returns>
    </member>
    <member name="P:System.Device.Location.GeoPosition`1.Timestamp">
      <summary>Gets or sets the time when the location data was obtained.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> containing the time the location data was created.</returns>
    </member>
    <member name="T:System.Device.Location.GeoPositionAccuracy">
      <summary>Specifies the requested accuracy level for the location data that the application uses.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionAccuracy.Default">
      <summary>Optimize for power, performance and other cost considerations.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionAccuracy.High">
      <summary>Deliver the most accurate report possible. This includes using services that might charge money, or consuming higher levels of battery power or connection bandwidth.</summary>
    </member>
    <member name="T:System.Device.Location.GeoPositionChangedEventArgs`1">
      <summary>Provides data for the <see cref="E:System.Device.Location.GeoCoordinateWatcher.PositionChanged" /> event.</summary>
      <typeparam name="T">The type of the location data in the <see cref="P:System.Device.Location.GeoPosition`1.Location" /> property of this event's <see cref="P:System.Device.Location.GeoPositionChangedEventArgs`1.Position" /> property</typeparam>
    </member>
    <member name="M:System.Device.Location.GeoPositionChangedEventArgs`1.#ctor(System.Device.Location.GeoPosition{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Device.Location.GeoPositionChangedEventArgs`1" /> class</summary>
      <param name="position">The updated position.</param>
    </member>
    <member name="P:System.Device.Location.GeoPositionChangedEventArgs`1.Position">
      <summary>Gets the location data associated with the event.</summary>
      <returns>A <see cref="T:System.Device.Location.GeoPosition`1" /> object that contains the location data in its <see cref="P:System.Device.Location.GeoPosition`1.Location" /> property.</returns>
    </member>
    <member name="T:System.Device.Location.GeoPositionPermission">
      <summary>Indicates whether the calling application has permission to access location data.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionPermission.Unknown">
      <summary>Location permissions are not known. This status can occur while the provider is being initialized.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionPermission.Granted">
      <summary>Location permissions are granted.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionPermission.Denied">
      <summary>Location permissions are denied.</summary>
    </member>
    <member name="T:System.Device.Location.GeoPositionStatus">
      <summary>Indicates the ability of the location provider to provide location updates.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionStatus.Ready">
      <summary>A location provider is ready to supply new data.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionStatus.Initializing">
      <summary>The location provider is initializing.  For example, a GPS still obtaining a fix has this status.</summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionStatus.NoData">
      <summary>No location data is available from any location provider. </summary>
    </member>
    <member name="F:System.Device.Location.GeoPositionStatus.Disabled">
      <summary>The location provider is disabled. On Windows 7, this is the case when the Sensor and Location platform has been disabled by group policy. </summary>
    </member>
    <member name="T:System.Device.Location.GeoPositionStatusChangedEventArgs">
      <summary>Contains data for a GeoPositionStatusChanged event.</summary>
    </member>
    <member name="M:System.Device.Location.GeoPositionStatusChangedEventArgs.#ctor(System.Device.Location.GeoPositionStatus)">
      <summary>Initializes a new instance of the GeoPositionStatusChangedEventArgs class.</summary>
      <param name="status">The new status.</param>
    </member>
    <member name="P:System.Device.Location.GeoPositionStatusChangedEventArgs.Status">
      <summary>Gets the updated status.</summary>
      <returns>The updated status.</returns>
    </member>
    <member name="T:System.Device.Location.ICivicAddressResolver">
      <summary>Provides a method that when implemented, resolves a latitude/longitude location to a civic address. </summary>
    </member>
    <member name="M:System.Device.Location.ICivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)"></member>
    <member name="M:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)">
      <summary>Initiates a request to resolve a latitude/longitude location to an address.</summary>
      <param name="coordinate">The latitude/longitude location to resolve to an address.</param>
    </member>
    <member name="E:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted">
      <summary>Occurs when an asynchronous request using <see cref="M:System.Device.Location.ICivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)" /> to resolve a latitude/longitude to a civic address is complete.</summary>
    </member>
    <member name="T:System.Device.Location.IGeoPositionWatcher`1">
      <summary>Interface that can be implemented for providing accessing location data and receiving location updates.</summary>
      <typeparam name="T">The type of the object that contains the location data.</typeparam>
    </member>
    <member name="P:System.Device.Location.IGeoPositionWatcher`1.Position">
      <summary>Gets the location data. </summary>
      <returns>The <see cref="T:System.Device.Location.GeoPosition`1" /> containing the location data.</returns>
    </member>
    <member name="E:System.Device.Location.IGeoPositionWatcher`1.PositionChanged"></member>
    <member name="M:System.Device.Location.IGeoPositionWatcher`1.Start">
      <summary>Initiate the acquisition of location data.</summary>
    </member>
    <member name="M:System.Device.Location.IGeoPositionWatcher`1.Start(System.Boolean)">
      <summary>Start acquiring location data, specifying whether or not to suppress prompting for permissions. This method returns synchronously.</summary>
      <param name="suppressPermissionPrompt">If true, do not prompt the user to enable location providers and only start if location data is already enabled. If false, a dialog box may be displayed to prompt the user to enable location sensors that are disabled.</param>
    </member>
    <member name="P:System.Device.Location.IGeoPositionWatcher`1.Status">
      <summary>Gets the status of location data.</summary>
      <returns>The status of location data.</returns>
    </member>
    <member name="E:System.Device.Location.IGeoPositionWatcher`1.StatusChanged"></member>
    <member name="M:System.Device.Location.IGeoPositionWatcher`1.Stop">
      <summary>Stop acquiring location data.</summary>
    </member>
    <member name="M:System.Device.Location.IGeoPositionWatcher`1.TryStart(System.Boolean,System.TimeSpan)">
      <summary>Start acquiring location data, specifying an initialization timeout. This method returns synchronously.</summary>
      <returns>true if succeeded, false if timed out.</returns>
      <param name="suppressPermissionPrompt">If true, do not prompt the user to enable location providers and only start if location data is already enabled. If false, a dialog box may be displayed to prompt the user to enable location sensors that are disabled.</param>
      <param name="timeout">Time in milliseconds to wait for initialization to complete.</param>
    </member>
    <member name="T:System.Device.Location.ResolveAddressCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted" /> event.</summary>
    </member>
    <member name="M:System.Device.Location.ResolveAddressCompletedEventArgs.#ctor(System.Device.Location.CivicAddress,System.Exception,System.Boolean,System.Object)">
      <summary>Initializes a new instance of <see cref="T:System.Device.Location.ResolveAddressCompletedEventArgs" />.</summary>
      <param name="address">The <see cref="T:System.Device.Location.CivicAddress" /> containing the address resolved from the latitude/longitude location, if successful. </param>
      <param name="error"></param>
      <param name="cancelled">true if the operation was cancelled; otherwise, false.</param>
      <param name="userState"></param>
    </member>
    <member name="P:System.Device.Location.ResolveAddressCompletedEventArgs.Address">
      <summary>Gets the <see cref="T:System.Device.Location.CivicAddress" /> associated with the <see cref="E:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted" /> event.</summary>
      <returns>The <see cref="T:System.Device.Location.CivicAddress" /> associated with the <see cref="E:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted" /> event. If the address could not be resolved, this property returns <see cref="F:System.Device.Location.CivicAddress.Unknown" />.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Deployment.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Deployment</name>
  </assembly>
  <members>
    <member name="T:System.Deployment.Application.ApplicationDeployment">
      <summary>Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.ActivationUri">
      <summary>Gets the URL used to launch the deployment manifest of the application. </summary>
      <returns>A zero-length string if the TrustUrlParameters property in the deployment manifest is false, or if the user has supplied a UNC to open the deployment or has opened it locally. Otherwise, the return value is the full URL used to launch the application, including any parameters.</returns>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate">
      <summary>Performs the same operation as <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdate" />, but returns extended information about the available update.</summary>
      <returns>An <see cref="T:System.Deployment.Application.UpdateCheckInfo" /> for the available update.</returns>
      <exception cref="T:System.InvalidOperationException">The current application is either not configured to support updates, or there is another update check operation already in progress.</exception>
      <exception cref="T:System.Deployment.Application.DeploymentDownloadException">The deployment manifest cannot be downloaded. This exception will appear in the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property of the <see cref="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted" /> event.</exception>
      <exception cref="T:System.Deployment.Application.InvalidDeploymentException">The deployment manifest is corrupted. Regenerate the application's manifest before you attempt to deploy this application to users. This exception will appear in the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property of the <see cref="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted" /> event.</exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)">
      <summary>Performs the same operation as <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdate" />, but returns extended information about the available update.</summary>
      <returns>An <see cref="T:System.Deployment.Application.UpdateCheckInfo" /> for the available update.</returns>
      <param name="persistUpdateCheckResult">If false, the update will be applied silently and no dialog box will be displayed.</param>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdate">
      <summary>Checks <see cref="P:System.Deployment.Application.ApplicationDeployment.UpdateLocation" /> to determine whether a new update is available.</summary>
      <returns>true if a new update is available; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">
                ClickOnce throws this exception immediately if you call the <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdate" />  method while an update is already in progress.</exception>
      <exception cref="T:System.Deployment.Application.DeploymentDownloadException">The deployment manifest cannot be downloaded. </exception>
      <exception cref="T:System.Deployment.Application.InvalidDeploymentException">The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem. </exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)">
      <summary>Checks <see cref="P:System.Deployment.Application.ApplicationDeployment.UpdateLocation" /> to determine whether a new update is available.</summary>
      <returns>true if a new update is available; otherwise, false.</returns>
      <param name="persistUpdateCheckResult">If false, the update will be applied silently and no dialog box will be displayed.</param>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync">
      <summary>Checks <see cref="P:System.Deployment.Application.ApplicationDeployment.UpdateLocation" /> asynchronously to determine whether a new update is available.</summary>
      <exception cref="T:System.InvalidOperationException">
                ClickOnce throws this exception immediately if you call the <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync" />  method while an update is already in progress.</exception>
      <exception cref="T:System.Deployment.Application.DeploymentDownloadException">The deployment manifest cannot be downloaded. This exception appears in the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property of the <see cref="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted" /> event.</exception>
      <exception cref="T:System.Deployment.Application.InvalidDeploymentException">The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem. This exception appears in the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property of the <see cref="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted" /> event.</exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel">
      <summary>Cancels the asynchronous update check.</summary>
    </member>
    <member name="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted">
      <summary>Occurs when <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync" /> has completed.</summary>
    </member>
    <member name="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged">
      <summary>Occurs when a progress update is available on a <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync" /> call.</summary>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.CurrentDeployment">
      <summary>Returns the current <see cref="T:System.Deployment.Application.ApplicationDeployment" /> for this deployment.</summary>
      <returns>The current deployment.</returns>
      <exception cref="T:System.Deployment.Application.InvalidDeploymentException">You attempted to call this static property from a non-ClickOnce application. </exception>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.CurrentVersion">
      <summary>Gets the version of the deployment for the current running instance of the application.</summary>
      <returns>The current deployment version.</returns>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.DataDirectory">
      <summary>Gets the path to the ClickOnce data directory.</summary>
      <returns>A string containing the path to the application's data directory on the local disk.</returns>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)">
      <summary>Downloads a set of optional files on demand.</summary>
      <param name="groupName">The named group of files to download. All files marked "optional" in a ClickOnce application require a group name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="groupName" /> parameter is null or zero-length.</exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)">
      <summary>Downloads, on demand, a set of optional files in the background.</summary>
      <param name="groupName">The named group of files to download. All files marked "optional" in a ClickOnce application require a group name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="groupName" /> parameter is null or zero-length.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot initiate more than one download of <paramref name="groupName" /> at a time.</exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)">
      <summary>Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.</summary>
      <param name="groupName">The named group of files to download. All files marked "optional" in a ClickOnce application require a group name.</param>
      <param name="userState">An arbitrary object containing state information for the asynchronous operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="groupName" /> parameter is null or zero-length.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot initiate more than one download of <paramref name="groupName" /> at a time.</exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)">
      <summary>Cancels an asynchronous file download.</summary>
      <param name="groupName">The named group of files to download. All files marked "optional" in a ClickOnce application require a group name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="groupName" /> cannot be null.</exception>
    </member>
    <member name="E:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted">
      <summary>Occurs on the main application thread when a file download is complete.</summary>
    </member>
    <member name="E:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged">
      <summary>Occurs when status information is available on a file download operation initiated by a call to <see cref="Overload:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync" />.</summary>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)">
      <summary>Checks whether the named file group has already been downloaded to the client computer.</summary>
      <returns>true if the file group has already been downloaded for the current version of this application; otherwise, false. If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, <see cref="M:System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)" /> returns true.</returns>
      <param name="groupName">The named group of files to download. All files marked "optional" in a ClickOnce application require a group name.</param>
      <exception cref="T:System.Deployment.Application.InvalidDeploymentException">
        <paramref name="groupName" /> is not a file group defined in the application manifest.</exception>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.IsFirstRun">
      <summary>Gets a value indicating whether this is the first time this application has run on the client computer. </summary>
      <returns>true if this version of the application has never run on the client computer before; otherwise, false.</returns>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed">
      <summary>Gets a value indicating whether the current application is a ClickOnce application.</summary>
      <returns>true if this is a ClickOnce application; otherwise, false.</returns>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck">
      <summary>Gets the date and the time ClickOnce last checked for an application update.</summary>
      <returns>The <see cref="T:System.DateTime" /> of the last update check.</returns>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.Update">
      <summary>Starts a synchronous download and installation of the latest version of this application. </summary>
      <returns>true if an application has been updated; otherwise, false.</returns>
      <exception cref="T:System.Deployment.Application.TrustNotGrantedException">The local computer did not grant the application the permission level it requested to execute.</exception>
      <exception cref="T:System.Deployment.Application.InvalidDeploymentException">Your ClickOnce deployment is corrupted. For tips on how to diagnose and correct the problem, see Troubleshooting ClickOnce Deployments.</exception>
      <exception cref="T:System.Deployment.Application.DeploymentDownloadException">The new deployment could not be downloaded from its location on the network.</exception>
      <exception cref="T:System.InvalidOperationException">The application is currently being updated.</exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.UpdateAsync">
      <summary>Starts an asynchronous download and installation of the latest version of this application.</summary>
      <exception cref="T:System.Deployment.Application.TrustNotGrantedException">The local computer did not grant this application the permission level it requested to execute.</exception>
      <exception cref="T:System.Deployment.Application.InvalidDeploymentException">Your ClickOnce deployment is corrupted. For tips on how to diagnose and correct the problem, see Troubleshooting ClickOnce Deployments.</exception>
      <exception cref="T:System.Deployment.Application.DeploymentDownloadException">The new deployment could not be downloaded from its location on the network.</exception>
    </member>
    <member name="M:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel">
      <summary>Cancels an asynchronous update initiated by <see cref="M:System.Deployment.Application.ApplicationDeployment.UpdateAsync" />.</summary>
    </member>
    <member name="E:System.Deployment.Application.ApplicationDeployment.UpdateCompleted">
      <summary>Occurs when ClickOnce has finished upgrading the application as the result of a call to <see cref="M:System.Deployment.Application.ApplicationDeployment.UpdateAsync" />.</summary>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName">
      <summary>Gets the full name of the application after it has been updated.</summary>
      <returns>A <see cref="T:System.String" /> that contains the full name of the application.</returns>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.UpdatedVersion">
      <summary>Gets the version of the update that was recently downloaded.</summary>
      <returns>The <see cref="T:System.Version" /> describing the version of the update.</returns>
    </member>
    <member name="P:System.Deployment.Application.ApplicationDeployment.UpdateLocation">
      <summary>Gets the Web site or file share from which this application updates itself.</summary>
      <returns>The update path, expressed as an HTTP, HTTPS, or file URL; or as a Windows network file path (UNC).</returns>
    </member>
    <member name="E:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged">
      <summary>Occurs when ClickOnce has new status information for an update operation initiated by calling the <see cref="M:System.Deployment.Application.ApplicationDeployment.UpdateAsync" /> method.</summary>
    </member>
    <member name="T:System.Deployment.Application.CheckForUpdateCompletedEventArgs">
      <summary>Represents detailed update information obtained through a call to <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync" />.</summary>
    </member>
    <member name="P:System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion">
      <summary>Gets the version number of the latest uninstalled version.</summary>
      <returns>The <see cref="T:System.Version" /> expressing the major, minor, build and revision numbers of the latest version.</returns>
    </member>
    <member name="P:System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired">
      <summary>Gets a value indicating whether the update must be installed. </summary>
      <returns>true if the update is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion">
      <summary>Gets the minimum version that the user must have installed on the computer. </summary>
      <returns>A <see cref="T:System.Version" /> object expressing the earliest version that all users must install.</returns>
    </member>
    <member name="P:System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable">
      <summary>Gets whether an uninstalled update is available.</summary>
      <returns>true if new version of the application is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes">
      <summary>Gets the size of the available update.</summary>
      <returns>An <see cref="T:System.Int64" /> describing the size, in bytes, of the available update. If no update is available, returns 0. </returns>
    </member>
    <member name="T:System.Deployment.Application.CheckForUpdateCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted" /> event of an <see cref="T:System.Deployment.Application.ApplicationDeployment" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Deployment.Application.CheckForUpdateCompletedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Deployment.Application.CompatibleFramework">
      <summary>Represents a version of the .NET Framework where an application can install and run.</summary>
    </member>
    <member name="P:System.Deployment.Application.CompatibleFramework.Profile">
      <summary>Specifies the profile of the .NET Framework version where an application can install and run.</summary>
      <returns>A string that represents the profile.</returns>
    </member>
    <member name="P:System.Deployment.Application.CompatibleFramework.SupportedRuntime">
      <summary>Specifies the runtime version number of the .NET Framework where an application can install and run.</summary>
      <returns>A string that represents the runtime version.</returns>
    </member>
    <member name="P:System.Deployment.Application.CompatibleFramework.TargetVersion">
      <summary>Specifies the version of the .NET Framework where an application can install and run.</summary>
      <returns>A string that represents the version.</returns>
    </member>
    <member name="T:System.Deployment.Application.CompatibleFrameworkMissingException">
      <summary>This exception is thrown when a version of the .NET Framework that is compatible with this application cannot be found.</summary>
    </member>
    <member name="M:System.Deployment.Application.CompatibleFrameworkMissingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.CompatibleFrameworkMissingException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Deployment.Application.CompatibleFrameworkMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.CompatibleFrameworkMissingException" /> class with serialized data.</summary>
      <param name="serializationInfo">The object that holds the serialized object data. </param>
      <param name="streamingContext">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Deployment.Application.CompatibleFrameworkMissingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.CompatibleFrameworkMissingException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Deployment.Application.CompatibleFrameworkMissingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.CompatibleFrameworkMissingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.Deployment.Application.CompatibleFrameworkMissingException.CompatibleFrameworks">
      <summary>Gets a list of .NET Framework versions where this application can install and run.</summary>
      <returns>A list of .NET Framework versions where this application can install and run.</returns>
    </member>
    <member name="M:System.Deployment.Application.CompatibleFrameworkMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.CompatibleFrameworkMissingException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="T:System.Deployment.Application.CompatibleFrameworks">
      <summary>Provides details about versions of the .NET Framework on which this application can install and run.</summary>
    </member>
    <member name="P:System.Deployment.Application.CompatibleFrameworks.Frameworks">
      <summary>Gets a list of .NET Framework versions on which this application can install and run.</summary>
      <returns>A list of <see cref="T:System.Deployment.Application.CompatibleFramework" /> objects that specify the .NET Framework versions on which this application can install and run.</returns>
    </member>
    <member name="P:System.Deployment.Application.CompatibleFrameworks.SupportUrl">
      <summary>Gets a <see cref="T:System.Uri" /> that provides the user with instructions for installing a version of the .NET Framework on which this application can install and run.</summary>
      <returns>A <see cref="T:System.Uri" /> that provides the user with instructions for installing a version of the .NET Framework on which this application can install and run.</returns>
    </member>
    <member name="T:System.Deployment.Application.DependentPlatformMissingException">
      <summary>The exception that is thrown when the platform dependency is not found during activation of the ClickOnce deployment and the deployment will not run.</summary>
    </member>
    <member name="M:System.Deployment.Application.DependentPlatformMissingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DependentPlatformMissingException" /> class. </summary>
    </member>
    <member name="M:System.Deployment.Application.DependentPlatformMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DependentPlatformMissingException" /> class. </summary>
      <param name="serializationInfo">The object that holds the serialized object data. </param>
      <param name="streamingContext">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Deployment.Application.DependentPlatformMissingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DependentPlatformMissingException" /> class with a specified message that describes the error. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Deployment.Application.DependentPlatformMissingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DependentPlatformMissingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Deployment.Application.DependentPlatformMissingException.#ctor(System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DependentPlatformMissingException" /> class. </summary>
      <param name="message">The exception message.</param>
      <param name="supportUrl">The URL to visit for product support information.</param>
    </member>
    <member name="M:System.Deployment.Application.DependentPlatformMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the object data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Deployment.Application.DependentPlatformMissingException.SupportUrl">
      <summary>Gets a URI that indicates where support can be found for the problem encountered.</summary>
      <returns>A URI that indicates where support can be found for the problem encountered.</returns>
    </member>
    <member name="T:System.Deployment.Application.DeploymentDownloadException">
      <summary>Indicates that there was an error downloading either the ClickOnce manifests or the deployment's files to the client computer. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentDownloadException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentDownloadException" /> class. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentDownloadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentDownloadException" /> class. </summary>
      <param name="serializationInfo">The object that holds the serialized object data. </param>
      <param name="streamingContext">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Deployment.Application.DeploymentDownloadException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentDownloadException" /> class with a message that describes the exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Deployment.Application.DeploymentDownloadException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentDownloadException" /> class. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Deployment.Application.DeploymentException">
      <summary>Defines a base class for all deployment-related exceptions.</summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentException" /> class. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentException" /> class. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentException" /> class. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.DeploymentException" /> class. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:System.Deployment.Application.DeploymentProgressChangedEventArgs">
      <summary>Represents progress data reported in an asynchronous operation.</summary>
    </member>
    <member name="P:System.Deployment.Application.DeploymentProgressChangedEventArgs.BytesCompleted">
      <summary>Gets the number of bytes already downloaded by this operation.</summary>
      <returns>An <see cref="T:System.Int64" /> representing the data already transferred, in bytes. </returns>
    </member>
    <member name="P:System.Deployment.Application.DeploymentProgressChangedEventArgs.BytesTotal">
      <summary>Gets the total number of bytes in the download operation.</summary>
      <returns>An <see cref="T:System.Int64" /> representing the total size of the download, in bytes.</returns>
    </member>
    <member name="P:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group">
      <summary>Gets the name of the file group being downloaded.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of the file group, if the event occurred as the result of a call to <see cref="Overload:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync" />; otherwise, a zero-length string. </returns>
    </member>
    <member name="P:System.Deployment.Application.DeploymentProgressChangedEventArgs.State">
      <summary>Gets the action that the process is currently executing.</summary>
      <returns>A <see cref="T:System.Deployment.Application.DeploymentProgressState" /> value, stating what element or elements the operation is currently downloading. </returns>
    </member>
    <member name="T:System.Deployment.Application.DeploymentProgressChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged" /> event, <see cref="E:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged" /> event, or <see cref="E:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged" /> event of an <see cref="T:System.Deployment.Application.ApplicationDeployment" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Deployment.Application.DeploymentProgressChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Deployment.Application.DeploymentProgressState">
      <summary>Specifies the current stage of a ClickOnce download operation.</summary>
    </member>
    <member name="F:System.Deployment.Application.DeploymentProgressState.DownloadingDeploymentInformation">
      <summary>
            ClickOnce is downloading the deployment manifest.</summary>
    </member>
    <member name="F:System.Deployment.Application.DeploymentProgressState.DownloadingApplicationInformation">
      <summary>
            ClickOnce is downloading the application manifest.</summary>
    </member>
    <member name="F:System.Deployment.Application.DeploymentProgressState.DownloadingApplicationFiles">
      <summary>
            ClickOnce is downloading the DLLs and data files that comprised the application.</summary>
    </member>
    <member name="T:System.Deployment.Application.DeploymentServiceCom">
      <summary>Provides internal services for the ClickOnce deployment API. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.#ctor">
      <summary>Creates a new instance of <see cref="T:System.Deployment.Application.DeploymentServiceCom" />.</summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.ActivateApplicationExtension(System.String,System.String,System.String)">
      <summary>Activates an application extension.</summary>
      <param name="textualSubId">The internal ID of the deployment.</param>
      <param name="deploymentProviderUrl">The URL of the deployment.</param>
      <param name="targetAssociatedFile">The target file.</param>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.ActivateDeployment(System.String,System.Boolean)">
      <summary>Starts the deployment on the client computer. </summary>
      <param name="deploymentLocation">The location of the deployment manifest on disk.</param>
      <param name="isShortcut">Whether <paramref name="deploymentLocation" /> is a shortcut, or the actual file.</param>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.ActivateDeploymentEx(System.String,System.Int32,System.Int32)">
      <summary>Starts the deployment on the client computer.</summary>
      <param name="deploymentLocation">The location of the deployment manifest.</param>
      <param name="unsignedPolicy">The policy to use for unsigned applications.</param>
      <param name="signedPolicy">The policy to use for signed applications.</param>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.CheckForDeploymentUpdate(System.String)">
      <summary>Checks the update location to determine whether an updated version of this deployment exists.</summary>
      <param name="textualSubId">An internal identifier for the deployment.</param>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.CleanOnlineAppCache">
      <summary>Removes all online-only ClickOnce applications that are installed on a computer.</summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.EndServiceRightNow">
      <summary>Stops a deployment update immediately. </summary>
    </member>
    <member name="M:System.Deployment.Application.DeploymentServiceCom.MaintainSubscription(System.String)">
      <summary>Maintains the update subscription. </summary>
      <param name="textualSubId">The internal ID of the deployment.</param>
    </member>
    <member name="T:System.Deployment.Application.DownloadApplicationCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationCompleted" /> event. </summary>
    </member>
    <member name="P:System.Deployment.Application.DownloadApplicationCompletedEventArgs.LogFilePath">
      <summary>Gets the path of the ClickOnce log file. </summary>
      <returns>The path of the ClickOnce log file.</returns>
    </member>
    <member name="P:System.Deployment.Application.DownloadApplicationCompletedEventArgs.ShortcutAppId">
      <summary>Gets the contents of an .appref-ms file that can launch this ClickOnce application.</summary>
      <returns>The contents of an .appref-ms file.</returns>
    </member>
    <member name="T:System.Deployment.Application.DownloadFileGroupCompletedEventArgs">
      <summary>Describes a file download that has recently completed. </summary>
    </member>
    <member name="P:System.Deployment.Application.DownloadFileGroupCompletedEventArgs.Group">
      <summary>Gets the name of the file group being downloaded.</summary>
      <returns>A <see cref="T:System.String" /> representing the name of the file group.</returns>
    </member>
    <member name="T:System.Deployment.Application.DownloadFileGroupCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted" /> event of an <see cref="T:System.Deployment.Application.ApplicationDeployment" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Deployment.Application.DownloadFileGroupCompletedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Deployment.Application.DownloadProgressChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Deployment.Application.InPlaceHostingManager.DownloadProgressChanged" /> event. </summary>
    </member>
    <member name="P:System.Deployment.Application.DownloadProgressChangedEventArgs.BytesDownloaded">
      <summary>Gets the number of bytes downloaded to the local computer.</summary>
      <returns>An <see cref="T:System.Int64" /> representing the number of downloaded bytes. </returns>
    </member>
    <member name="P:System.Deployment.Application.DownloadProgressChangedEventArgs.State">
      <summary>Gets the progress state of the download.</summary>
      <returns>A <see cref="T:System.Deployment.Application.DeploymentProgressState" /> value describing which portion of the ClickOnce application is being downloaded.</returns>
    </member>
    <member name="P:System.Deployment.Application.DownloadProgressChangedEventArgs.TotalBytesToDownload">
      <summary>Gets the total number of bytes for the download operation. </summary>
      <returns>An <see cref="T:System.Int64" /> representing the total size of the download, in bytes.</returns>
    </member>
    <member name="T:System.Deployment.Application.GetManifestCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted" /> event of <see cref="T:System.Deployment.Application.InPlaceHostingManager" />.</summary>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.ActivationContext">
      <summary>Gets the context for the current ClickOnce application.</summary>
      <returns>An <see cref="T:System.ActivationContext" /> object representing the context for the current application.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.ApplicationIdentity">
      <summary>Gets a description of the ClickOnce application. </summary>
      <returns>An <see cref="T:System.ApplicationIdentity" /> object.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.ApplicationManifest">
      <summary>Gets the ClickOnce application manifest for this deployment.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> representing the application manifest.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.DeploymentManifest">
      <summary>Gets the ClickOnce deployment manifest for this deployment.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> representing the deployment manifest.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.IsCached">
      <summary>Gets a value indicating whether this ClickOnce application is cached.</summary>
      <returns>true if the application is cached; otherwise, false.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.LogFilePath">
      <summary>Gets the location of the ClickOnce error log.</summary>
      <returns>A <see cref="T:System.String" /> containing the location of the ClickOnce error log.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.ProductName">
      <summary>Gets the name of the ClickOnce application.</summary>
      <returns>A <see cref="T:System.String" /> representing the product name of the ClickOnce application, as stored in the assembly metadata of the application's main executable file.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.SubscriptionIdentity">
      <summary>Gets a string identifying the subscription.</summary>
      <returns>A string with information identifying the subscription.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.SupportUri">
      <summary>Gets the location of a Web page users can visit to obtain product support for the ClickOnce application.</summary>
      <returns>A <see cref="T:System.Uri" /> containing the value found in the supportUrl attribute of the deployment manifest's &lt;description&gt; tag. For more information, see ClickOnce Deployment Manifest.</returns>
    </member>
    <member name="P:System.Deployment.Application.GetManifestCompletedEventArgs.Version">
      <summary>Gets the version of the update for the ClickOnce application.</summary>
      <returns>A <see cref="T:System.Version" /> representing the version number contained within the downloaded manifest.</returns>
    </member>
    <member name="T:System.Deployment.Application.InPlaceHostingManager">
      <summary>Install or update a ClickOnce deployment on a computer.</summary>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.#ctor(System.Uri)">
      <summary>Creates a new instance of <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> to download and install the specified browser-hosted application.</summary>
      <param name="deploymentManifest">A Uniform Resource Identifier (<see cref="T:System.Uri" />) to a ClickOnce application's deployment manifest.</param>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> can be used only in Windows XP or in later versions of the Windows operating system.</exception>
      <exception cref="T:System.ArgumentNullException">Cannot pass null for the <paramref name="deploymentManifest" /> argument.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="deploymentManifest" /> uses a URI scheme that is not supported by ClickOnce.</exception>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.#ctor(System.Uri,System.Boolean)">
      <summary>Creates a new instance of <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> to download and install the specified application, which can be either a stand-alone Windows Forms-based application or an application hosted in a Web browser.</summary>
      <param name="deploymentManifest">The Uniform Resource Identifier (URI) to the deployment manifest of the application that will be installed.</param>
      <param name="launchInHostProcess">Whether this application will be run in a host, such as a Web browser. For a stand-alone application, set this value to false.</param>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> can be used only in Windows XP or in later versions of the Windows operating system.</exception>
      <exception cref="T:System.ArgumentNullException">Cannot pass null for the <paramref name="deploymentManifest" /> argument.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="deploymentManifest" /> uses a URI scheme that is not supported by ClickOnce.</exception>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements">
      <summary>Determines whether the ClickOnce application has the appropriate permissions and platform dependencies to run on the local computer.</summary>
      <exception cref="T:System.InvalidOperationException">Raised if this method is called before the <see cref="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" /> method.</exception>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements(System.Boolean)">
      <summary>Determines whether the ClickOnce application has the appropriate permissions and platform dependencies to run on the local computer.</summary>
      <param name="grantApplicationTrust">If true, the application will attempt to elevate its permissions to the required level.</param>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.CancelAsync">
      <summary>Cancels an asynchronous download operation.</summary>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Deployment.Application.InPlaceHostingManager" />. </summary>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync">
      <summary>Downloads an application update in the background.</summary>
      <exception cref="T:System.InvalidOperationException">Raised if this method is called before the <see cref="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" /> and <see cref="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements" /> methods.</exception>
    </member>
    <member name="E:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationCompleted">
      <summary>Occurs when the application has finished downloading to the local computer.</summary>
    </member>
    <member name="E:System.Deployment.Application.InPlaceHostingManager.DownloadProgressChanged">
      <summary>Occurs when there is a change in the status of an application or manifest download.</summary>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.Execute">
      <summary>Launches the ClickOnce application, if and only if it is a Windows Presentation Foundation-based application running in a Web browser.</summary>
      <returns>An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> corresponding to the launched application.</returns>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync">
      <summary>Downloads the deployment manifest of the ClickOnce application in the background, and raises an event when the operation has either completed or encountered an error.</summary>
    </member>
    <member name="E:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted">
      <summary>Occurs when the deployment manifest has been downloaded to the local computer.</summary>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.UninstallCustomAddIn(System.String)">
      <summary>Removes a previously installed user-defined component of an application.</summary>
      <param name="subscriptionId">A string that contains a subscription identifier, which indicates the add-in to remove.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="subscriptionId" /> is not a valid subscription identity, or does not include a name, public key token, processor architecture, and version number.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscriptionId" /> is null.</exception>
    </member>
    <member name="M:System.Deployment.Application.InPlaceHostingManager.UninstallCustomUXApplication(System.String)">
      <summary>Removes a ClickOnce application that includes the &lt;customUX&gt; element.</summary>
      <param name="subscriptionId">A string that contains a subscription identifier, which indicates the ClickOnce application to remove.</param>
    </member>
    <member name="T:System.Deployment.Application.InvalidDeploymentException">
      <summary>Indicates that ClickOnce could not read either the deployment or application manifests.</summary>
    </member>
    <member name="M:System.Deployment.Application.InvalidDeploymentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.InvalidDeploymentException" /> class. </summary>
    </member>
    <member name="M:System.Deployment.Application.InvalidDeploymentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.InvalidDeploymentException" /> class. </summary>
      <param name="serializationInfo">The object that holds the serialized object data. </param>
      <param name="streamingContext">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Deployment.Application.InvalidDeploymentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.InvalidDeploymentException" /> class with the specified message that describes the exception. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Deployment.Application.InvalidDeploymentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.InvalidDeploymentException" /> class. </summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Deployment.Application.SupportedRuntimeMissingException">
      <summary>This exception is thrown when a runtime version that is compatible with this application cannot be found.</summary>
    </member>
    <member name="M:System.Deployment.Application.SupportedRuntimeMissingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.SupportedRuntimeMissingException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Deployment.Application.SupportedRuntimeMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.SupportedRuntimeMissingException" /> class with serialized data.</summary>
      <param name="serializationInfo">The object that holds the serialized object data. </param>
      <param name="streamingContext">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Deployment.Application.SupportedRuntimeMissingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.SupportedRuntimeMissingException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Deployment.Application.SupportedRuntimeMissingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.SupportedRuntimeMissingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Deployment.Application.SupportedRuntimeMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.SupportedRuntimeMissingException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="P:System.Deployment.Application.SupportedRuntimeMissingException.SupportedRuntimeVersion">
      <summary>Gets the version of the runtime where this application can install and run.</summary>
      <returns>A string that contains the runtime version number.</returns>
    </member>
    <member name="T:System.Deployment.Application.TrustNotGrantedException">
      <summary>Indicates that the application does not have the appropriate level of trust to run on the local computer.</summary>
    </member>
    <member name="M:System.Deployment.Application.TrustNotGrantedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.TrustNotGrantedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Deployment.Application.TrustNotGrantedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.TrustNotGrantedException" /> class with serialized data.</summary>
      <param name="serializationInfo">The object that holds the serialized object data. </param>
      <param name="streamingContext">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Deployment.Application.TrustNotGrantedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.TrustNotGrantedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Deployment.Application.TrustNotGrantedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Deployment.Application.TrustNotGrantedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Deployment.Application.UpdateCheckInfo">
      <summary>Represents detailed update information obtained through a call to <see cref="M:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate" />.</summary>
    </member>
    <member name="P:System.Deployment.Application.UpdateCheckInfo.AvailableVersion">
      <summary>Gets the version number of the latest uninstalled version.</summary>
      <returns>The <see cref="T:System.Version" /> expressing the major and minor build and revision numbers of the latest version.</returns>
    </member>
    <member name="P:System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired">
      <summary>Gets a value indicating whether the update must be installed. </summary>
      <returns>true if the update is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Deployment.Application.UpdateCheckInfo.MinimumRequiredVersion">
      <summary>Gets the minimum version that the user must have installed on the computer.</summary>
      <returns>A <see cref="T:System.Version" /> expressing the least version that the user must install.</returns>
      <exception cref="T:System.InvalidOperationException">There is no new version available to install.</exception>
    </member>
    <member name="P:System.Deployment.Application.UpdateCheckInfo.UpdateAvailable">
      <summary>Gets whether an uninstalled update is available.</summary>
      <returns>true if new version of the application is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Deployment.Application.UpdateCheckInfo.UpdateSizeBytes">
      <summary>Gets the size of the available update.</summary>
      <returns>An <see cref="T:System.Int64" /> describing the size, in bytes, of the available update. If no update is available, returns 0. </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.DirectoryServices.AccountManagement.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.DirectoryServices.AccountManagement</name>
  </assembly>
  <members>
    <member name="T:System.DirectoryServices.AccountManagement.AdvancedFilters">
      <summary>This class provides writable access to certain attributes so that users can modify read-only properties of the "dummy" principal object that is passed to a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" /> object when using Query By Example</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.#ctor(System.DirectoryServices.AccountManagement.Principal)">
      <summary>Instantiates a new <see cref="M:System.DirectoryServices.AccountManagement.AdvancedFilters" /> object.  Not intended to be called directly.</summary>
      <param name="p"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.AccountExpirationDate(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Sets the query filter for the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrinciple.AccountExpirationDate" /> attribute to the specified time and comparison type.</summary>
      <param name="expirationTime">A <see cref="T:System.DateTime" /> object.</param>
      <param name="match"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.AccountLockoutTime(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Sets the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrinciple.AccountLockoutTime" /> query filter to the specified time and comparison type.</summary>
      <param name="lockoutTime">A <see cref="T:System.DateTime" /> object.</param>
      <param name="match"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.AdvancedFilterSet(System.String,System.Object,System.Type,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Creates a query filter for a property in an extended class.</summary>
      <param name="attribute">The name of the attribute</param>
      <param name="value"></param>
      <param name="objectType">The object type of <paramref name="value" />.</param>
      <param name="mt"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.BadLogonCount(System.Int32,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Sets the query filter for the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrinciple.BadLogonCount" /> attribute to the specified value and comparison type.</summary>
      <param name="badLogonCount">An integer.</param>
      <param name="match"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.LastBadPasswordAttempt(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Sets the query filter for the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrinciple.LastBadPasswordAttempt" /> attribute to the specified <see cref="T:System.DateTime" /> and the specified comparison value.</summary>
      <param name="lastAttempt">A <see cref="T:System.DateTime" /> object.</param>
      <param name="match"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.LastLogonTime(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Sets the query filter for the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrinciple.LastLogon" /> attribute to the specified <see cref="T:System.DateTime" /> and the specified comparison value.</summary>
      <param name="logonTime">A <see cref="T:System.DateTime" /> object.</param>
      <param name="match"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AdvancedFilters.LastPasswordSetTime(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Sets the query filter for the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrinciple.LastPasswordSet" /> attribute to the specified <see cref="T:System.DateTime" /> and the specified comparison value.</summary>
      <param name="passwordSetTime">A <see cref="T:System.DateTime" /> object.</param>
      <param name="match"></param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal">
      <summary>Encapsulates the account and contact data common to principals that can be authenticated.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal" /> class by using the specified context. This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.</summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed. </param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal" /> class by using the specified context, SAM account name, password, and enabled value. This constructor is called by derived-class constructors to initialize the base class and is not intended for use directly from your code.</summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="samAccountName">The SAM account name for this principal. </param>
      <param name="password">The password for this account.</param>
      <param name="enabled">A Boolean value that specifies whether the account is enabled. </param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate">
      <summary>Gets or sets a Nullable <see cref="T:System.DateTime" /> that specifies the date and time that the account expires. </summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the date and time that the account expires, or null if the account never expires. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime">
      <summary>Gets the Nullable <see cref="T:System.DateTime" /> that specifies the date and time that the account was locked out.  </summary>
      <returns> A <see cref="T:System.DateTime" /> that specifies the date and time that the account was locked out, or null if no lockout time is set on the account. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AdvancedSearchFilter">
      <summary>Returns an <see cref="T:System.DirectoryServices.AccountManagement.AdvancedSearchFilter" /> object, for use with Query By Example to set read-only properties before passing the object to the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />.</summary>
      <returns>An <see cref="T:System.DirectoryServices.AccountManagement.AdvancedSearchFilter" /> object.</returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AllowReversiblePasswordEncryption">
      <summary>Gets or sets a Boolean value that specifies whether reversible password encryption is enabled for this account. </summary>
      <returns>true if reversible password encryption is enabled for this account; otherwise false.  </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount">
      <summary>Gets the number of logon attempts using incorrect credentials for this account. </summary>
      <returns>The number of logon attempts using incorrect credentials for this account.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Certificates">
      <summary>Gets a <see cref="T:System.X509Certificate2Collection" /> that contains the X509 certificates for this account. </summary>
      <returns>A <see cref="T:System.X509Certificate2Collection" /> that contains the X509 certificates for this account.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ChangePassword(System.String,System.String)">
      <summary>Changes the account password from the old password to the new password. Do not use this with a <see cref="T:System.DirecoryServices.AccountManagement.ComputerPrincipal" />.</summary>
      <param name="oldPassword">The password that is changed. </param>
      <param name="newPassword">The new password. </param>
      <exception cref="T:System.InvalidOperationException">The principal has not been persisted.</exception>
      <exception cref="T:System.DiectoryServices.AccountManagement.PasswordException">The new password does not meet the complexity requirements.</exception>
      <exception cref="T:System.NotSupportedException">The principal is not a user.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.DelegationPermitted">
      <summary>Gets or sets a Nullable Boolean value that specifies whether the account may be delegated. </summary>
      <returns>true if the account may be delegated; otherwise false. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.Enabled">
      <summary>Gets or sets a Nullable Boolean value that specifies whether this account is enabled for authentication.  </summary>
      <returns>true if the principal is enabled, or null if the account has not been persisted; otherwise false.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
      <exception cref="T:System.ArgumentNullException">The application tried to set a null value for this property. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ExpirePasswordNow">
      <summary>Expires the password for this account. This will force the user to change his/her password at the next logon.</summary>
      <exception cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">An exception occurred when saving the changes to the store. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of authentication principal objects that have an incorrect password try recorded in the specified date and time range. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal" /> objects, or an empty collection if no results are found. </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the incorrect password try. This parameter is used with the type parameter to determine the range of time in which the returned objects have an incorrect logon try recorded. </param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.  </param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByBadPasswordAttempt``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> collection of objects that have a bad password attempt within the specified date and time range.  This is the template function for extended classes that wish to implement this functionality.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more objects of the appropriate principal type, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.  </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of authentication principal objects that have an account expiration time recorded in the specified date and time range. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal" /> objects. </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the account expiration. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account expiration recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.  </param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByExpirationTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> collection of objects that have an expiration time within the specified date and time range.  This is the template function for extended classes that wish to implement this functionality.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more objects of the appropriate principal type, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.  </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> collection of objects that have a lockout time within the specified date and time range.  This is the template function for extended classes that wish to implement this functionality.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more objects of the appropriate principal type, or an empty collection if no matches are found.</returns>
      <param name="context"></param>
      <param name="time"></param>
      <param name="type"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLockoutTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of authentication principal objects that have an account lockout time recorded in the specified date and time range. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal" /> objects. </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the account lockout. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account lockout recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of authentication principal objects that have an account logon recorded in the specified date and time range. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal" /> objects. </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the logon record. This parameter is used with the type parameter to determine the range of time in which the returned objects have an account logon recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByLogonTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> collection of objects that have a logon time within the specified date and time range.  This is the template function for extended classes that wish to implement this functionality.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more objects of the appropriate principal type, or an empty collection if no matches are found.</returns>
      <param name="context"></param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.  </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime``1(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> collection of objects that have a password set time within the specified date and time range.  This is the template function for extended classes that wish to implement this functionality.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more objects of the appropriate principal type, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.  </param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.FindByPasswordSetTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of authentication principal objects that have an account password set recorded in the specified date and time range. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.AuthenticablePrincipal" /> objects. </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> object that identifies the date and time of the password set. This parameter is used with the type parameter to determine the range of time in which the returned objects have a password set recorded.</param>
      <param name="type">A <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration value that specifies the type of match that is applied to the <paramref name="time" /> parameter.  </param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDirectory">
      <summary>Gets or sets the home directory for this account. </summary>
      <returns>The home directory for this account, or null if no home directory exists. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.HomeDrive">
      <summary>Gets or sets the home drive for this account. </summary>
      <returns>The home drive for the account, or null if no home drive exists. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.IsAccountLockedOut">
      <summary>Returns a Boolean value that specifies whether the account is currently locked out. </summary>
      <returns>true if the account is locked out; otherwise false. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt">
      <summary>Gets the Nullable <see cref="T:System.DateTime" /> that specifies the date and time of the last incorrect password attempt on this account. </summary>
      <returns>A Nullable <see cref="T:System.DateTime" /> that specifies the date and time of the last incorrect password attempt on this account, or null if no incorrect password tries are recorded. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon">
      <summary>Gets the Nullable <see cref="T:System.DateTime" /> that specifies the date and time of the last logon for this account. </summary>
      <returns>A Nullable <see cref="T:System.DateTime" /> that specifies the date and time of the last logon for this account. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet">
      <summary>Gets the Nullable <see cref="T:System.DateTime" /> that specifies the last date and time that the password was set for this account. </summary>
      <returns>A Nullable <see cref="T:System.DateTime" /> that specifies the last date and time that the password was set for this account.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNeverExpires">
      <summary>Gets or sets a Boolean value that specifies whether the password expires for this account. </summary>
      <returns>true if the password expires for this account; otherwise false.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PasswordNotRequired">
      <summary>Gets or sets a Boolean value that specifies whether a password is required for this account. </summary>
      <returns>true if a password is required for this account; otherwise false. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedLogonTimes">
      <summary>Gets or sets the times when the principal can logon. </summary>
      <returns>The permitted logon times for this account.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations">
      <summary>Gets the list of workstations that this principal is permitted to log into. </summary>
      <returns>The mutable list of workstations that this principal is permitted to log into. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.RefreshExpiredPassword">
      <summary>Refreshes an expired password. </summary>
      <exception cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">An exception occurred when saving the changes to the store. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.ScriptPath">
      <summary>Gets or sets the script path for this account. </summary>
      <returns>A path of the script for this account, or null if there is no script path. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SetPassword(System.String)">
      <summary>Sets the account password to the specified value. </summary>
      <param name="newPassword">The new password. </param>
      <exception cref="T:System.DirectoryServices.AccountManagement.PasswordException">Throws an exception if the caller does not have appropriate rights, the new password does not meet password complexity requirements, or for any other reason that the underlying stores reject the password change.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.SmartcardLogonRequired">
      <summary>Gets or sets a Boolean value that specifies whether a smartcard is required to log on to the account. </summary>
      <returns>true if a smartcard is required to log on to this account; otherwise false. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UnlockAccount">
      <summary>Unlocks the account if it is currently locked out. </summary>
      <exception cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">Throws an exception if the caller does not have appropriate rights.</exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">An exception occurred when saving the changes to the store.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.UserCannotChangePassword">
      <summary>Gets or sets a Boolean value that specifies whether the user can change the password for this account. Do not use this with a <see cref="T:System.DirecoryServices.AccountManagement.ComputerPrincipal" />.</summary>
      <returns>true if the user is not permitted to change the password; otherwise false.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
      <exception cref="T:System.NotSupportedException">This principal object is not a user.</exception>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.ComputerPrincipal">
      <summary>Encapsulates principals that are computer accounts.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> class and assigns it to the specified context. </summary>
      <param name="context"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> class by using the specified context, SAM account name, password, and enabled value.  </summary>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="samAccountName">The SAM account name for this computer principal. </param>
      <param name="password">The password for this account.</param>
      <param name="enabled">A Boolean value that specifies whether the account is enabled. </param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByBadPasswordAttempt(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> collection of <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that have had bad password attempts within the parameters specified.</summary>
      <returns>A <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that match the search parameters, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> structure that is used in conjunction with the <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> to find computers with bad password attempts.</param>
      <param name="type">The <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> that specifies the type of comparison to use in the search.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByExpirationTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> collection of <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that have an expiration time within the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that match the search parameters, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> structure that is used in conjunction with the <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> to filter search results.</param>
      <param name="type">The <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> that specifies the type of comparison to use in the search.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Returns a computer principal object that matches the specified identity type and value. This version of the <see cref="Overload:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByIdentity" /> method determines the format of the identity value. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> object that matches the specified identity value and type, or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityType">A <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value that specifies the format of the <paramref name="identityValue" /> parameter.  </param>
      <param name="identityValue">The identity of the computer. This parameter can be any format that is contained in the <see cref="T:System.DirectoryService.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple computer principal objects matching the current computer object were found.</exception>
      <exception cref="T:System.ComponenetModel.InvalidEnumerationOperatorException">The identity value is not a valid <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)">
      <summary>Returns a computer principal object that matches the specified identity value. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> object that matches the specified identity value, or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityValue">The identity of the computer. This parameter can be any format that is contained in the <see cref="T:System.DirectoryService.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple computer principal objects matching the current computer object were found.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByLockoutTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> collection of <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that have a lockout time within the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that match the search parameters, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> structure that is used in conjunction with the <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> to filter search results.</param>
      <param name="type">The <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> that specifies the type of comparison to use in the search.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByLogonTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> collection of <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that have a logon time within the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that match the search parameters, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> structure that is used in conjunction with the <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> to filter search results.</param>
      <param name="type">The <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> that specifies the type of comparison to use in the search.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.ComputerPrincipal.FindByPasswordSetTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> collection of <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that have a password set time within the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryService.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryService.AccountManagement.ComputerPincipal" /> objects that match the search parameters, or an empty collection if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryService.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="time">A <see cref="T:System.DateTime" /> structure that is used in conjunction with the <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> to filter search results.</param>
      <param name="type">The <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> that specifies the type of comparison to use in the search.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.ComputerPrincipal.ServicePrincipalNames">
      <summary>Gets a collection of the Service Principal Names (SPN) for the computer account.  </summary>
      <returns>A collection of SPNs that specify the names of the accounts registered for this computer. The syntax for the SPN depends on the underlying store. </returns>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.ContextOptions">
      <summary>Specifies the options that are used for binding to the server. The application can set multiple options that are linked with a bitwise OR operation.  </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextOptions.Negotiate">
      <summary>The client is authenticated by using either Kerberos or NTLM. When the user name and password are not provided, the Account Management API binds to the object by using the security context of the calling thread, which is either the security context of the user account under which the application is running or of the client user account that the calling thread represents.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextOptions.SimpleBind">
      <summary>The client is authenticated by using the Basic authentication.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextOptions.SecureSocketLayer">
      <summary>The channel is encrypted by using the Secure Sockets Layer (SSL). Active Directory requires that the Certificate Services be installed to support SSL. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextOptions.Signing">
      <summary>The integrity of the data is verified. This flag can only be used with the Negotiate context option and is not available with the simple bind option. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextOptions.Sealing">
      <summary>The data is encrypted by using Kerberos.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextOptions.ServerBind">
      <summary>Specify this flag when you use the domain context type if the application is binding to a specific server name. </summary>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.ContextType">
      <summary>Specifies the type of store to which the principal belongs. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextType.Machine">
      <summary>The computer store. This represents the SAM store.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextType.Domain">
      <summary>The domain store. This represents the AD DS store. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory">
      <summary>The application directory store. This represents the AD LDS store.</summary>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute">
      <summary>Represents the schema object that is used to create an object of this type in the directory. This attribute is required for principal extensions and can only be set on classes. </summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute" /> class with the specified object class value. The object created in the directory will be created with this object class type.    </summary>
      <param name="objectClass">The string that contains the object class value. The <see cref="P:System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute.ObjectClass" /> property is initialized to this value. The object class string represents the objectClass attribute for the application directory and domain directories. </param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute.Context">
      <summary>This property is not implemented and always returns null. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value that specifies the type of store to which the attribute applies, or null if no context is set. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute.ObjectClass">
      <summary>Returns the object class value for the extended class.</summary>
      <returns>The object class value for the extended class. </returns>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute">
      <summary>Contains the data required by the store to map a principal property to a directory attribute. This attribute is required for principal extensions and can only be set on a property. It must be specified on every property that represents a directory attribute in the extended class. </summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute" /> class with the schema attribute name.  </summary>
      <param name="schemaAttributeName">The name of the attribute that is set in the directory. The <see cref="P:System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute.SchemaAttributeName" /> property is initialized to this value. This property represents the ldapDisplayName for application directory and domain directories. </param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute.Context">
      <summary>This property is not implemented and always returns null. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value that specifies the type of store to which this attribute applies, or null if no context is set. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute.SchemaAttributeName">
      <summary>Returns the string that represents the attribute name in the directory. </summary>
      <returns>The string that represents the attribute name in the directory. </returns>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute">
      <summary>The RDN prefix used to construct the RDN for the new object that is inserted into the store. The default RDN prefix of "CN" is used by the Account Management API if this attribute is not set. This attribute is optional and can only be set on principal extension classes. </summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute" /> class with the RDN prefix.  </summary>
      <param name="rdnPrefix">The RDN prefix. The <see cref="P:System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute.RdnPrefix" /> property is initialized to this value. </param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute.Context">
      <summary>This property is not implemented and always returns null.  </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value that specifies the type of store to which this attribute applies, or null is no context is set. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute.RdnPrefix">
      <summary>Returns the RDN prefix used to construct the RDN. </summary>
      <returns>The RDN prefix used to construct the RDN.  </returns>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.GroupPrincipal">
      <summary>Encapsulates group accounts. Group accounts can be arbitrary collections of principal objects or accounts created for administrative purposes.  </summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.GroupPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> class by using the specified context. </summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.GroupPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> class and assigns it to the specified context and SAM account name. </summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="samAccountName">The SAM account name for this principal.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.GroupPrincipal.Dispose">
      <summary>Disposes the current instance of the <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.GroupPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Returns a group principal object that matches the specified identity type, and value. This version of the <see cref="Overlaod:System.DirectoryServices.AccountManagement.GroupPrincipal.FindByIdentity" /> method determines the format of the identity value.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> that matches the specified identity value and type, or null if no matches are found. </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityType">A <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value that specifies the format of the <paramref name="identityValue" /> parameter.  </param>
      <param name="identityValue">The identity of the group principal. This parameter can be any format that is contained in the <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple group principal objects matching the current group object were found.</exception>
      <exception cref="T:System.ComponenetModel.InvalidEnumerationOperatorException">The identity value is not a valid <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.GroupPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)">
      <summary>Returns a group principal object that matches the specified identity value.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object that matches the specified identity value and type, or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityValue">The identity of the group principal. This parameter can be any format that is contained in the <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple group principal objects matching the current group object were found.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.GroupPrincipal.GetMembers">
      <summary>Returns a collection of the principal objects that is contained in the group.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> object that contains the principal objects that are members of the group, or an empty collection if the group has no members. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.GroupPrincipal.GetMembers(System.Boolean)">
      <summary>Returns a collection of the principal objects that is contained in the group. When the recursive flag is set to true, this method searches the current group recursively and returns all nested group members. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> object that contains the principal objects that are members of the group, or an empty collection if the group has no members.  </returns>
      <param name="recursive">A Boolean value that specifies whether the group is searched recursively. </param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.GroupPrincipal.GroupScope">
      <summary>Gets or sets a Nullable <see cref="T:System.DirectoryServices.AccountManagement.GroupScope" /> enumeration that specifies the scope for this group principal. </summary>
      <returns>A nullable <see cref="T:System.DirectoryServices.AccountManagement.GroupScope" /> enumeration value that specifies the scope of this group or null if no scope has been set. </returns>
      <exception cref="T:System.ArgumentNullException">The application may not set this property to null. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.GroupPrincipal.IsSecurityGroup">
      <summary>Gets or sets a Nullable Boolean value that indicates whether the group is security-enabled.  </summary>
      <returns>true if the group is security enabled, or null if the group has not been persisted; otherwise false. </returns>
      <exception cref="T:System.ArgumentNullException">The application may not set this property to null. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.GroupPrincipal.Members">
      <summary>Gets a collection of principal objects that represent the members of the group. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" /> object that contains the principal objects that represent the members of the group. </returns>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.GroupScope">
      <summary>Specifies the scope of the group principal.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.GroupScope.Local">
      <summary>The scope of the group is local. This group type is supported on AD DS and AD LDS.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.GroupScope.Global">
      <summary>The group's scope is global. This group type is supported on AD DS. When a global group is specified with an AD LDS directory, a <see cref="F:System.DirectoryServices.AccountManagement.GroupScope.Local" /> group is created instead. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.GroupScope.Universal">
      <summary>The scope of the group is universal. This group type is supported on AD DS and AD LDS. </summary>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.IdentityType">
      <summary>Specifies the format of the identity.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.IdentityType.SamAccountName">
      <summary>The identity is a Security Account Manager (SAM) name. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.IdentityType.Name">
      <summary>The identity is a name. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.IdentityType.UserPrincipalName">
      <summary>The identity is a User Principal Name (UPN). </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.IdentityType.DistinguishedName">
      <summary>The identity is a Distinguished Name (DN).</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.IdentityType.Sid">
      <summary>The identity is a Security Identifier (SID) in Security Descriptor Definition Language (SDDL) format. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.IdentityType.Guid">
      <summary>The identity is a Globally Unique Identifier (GUID). </summary>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.MatchType">
      <summary>The <see cref="T:System.DirectoryServices.AccountManagement.MatchType" /> enumeration specifies the type of comparison used in a search.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.MatchType.Equals">
      <summary>The search results include values that equal the supplied value. If the supplied value specifies a date and time, the returned collection includes objects that have the same date and time. </summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.MatchType.NotEquals">
      <summary>The search results include values that are not equal to the supplied value. If the supplied value specifies a date and time, the returned collection includes objects that do not include the specified date and time.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.MatchType.GreaterThan">
      <summary>The search results include values that are greater than the supplied value. If the supplied value specifies a date and time, the returned collection includes objects that are dated after the specified date and time.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.MatchType.GreaterThanOrEquals">
      <summary>The search results include values that are greater than or equal to the supplied value. If the supplied value specifies a date and time, the returned collection includes objects that are dated on or after the specified date and time.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.MatchType.LessThan">
      <summary>The search results include values that are less than the supplied value. If the supplied value specifies a date and time, the returned collection includes objects that are dated prior to the specified date and time.</summary>
    </member>
    <member name="F:System.DirectoryServices.AccountManagement.MatchType.LessThanOrEquals">
      <summary>The search results include values that are less than or equal to the supplied value. If the supplied value specifies a date and time, the returned collection includes objects that are dated prior to or on the specified date and time.</summary>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.MultipleMatchesException">
      <summary>This exception is thrown by methods that expect to match a single principal object when there are multiple matches to the search query.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.MultipleMatchesException.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.MultipleMatchesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information required to serialize the new <see cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException" /></param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream that is associated with the new <see cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.MultipleMatchesException.#ctor(System.String)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException" /> class with the specified error message.</summary>
      <param name="message">The text of the error message.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.MultipleMatchesException.#ctor(System.String,System.Exception)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException" /> class with the specified error message and specified nested exception.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException">
      <summary>This exception is thrown when no matching principal object could be found with the specified parameters.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information required to serialize the new <see cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException" /></param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream that is associated with the new <see cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException.#ctor(System.String)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException" /> class with the specified error message.</summary>
      <param name="message">The text of the error message.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException.#ctor(System.String,System.Exception)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException" /> class with the specified error message and specified nested exception.</summary>
      <param name="message">The text of the message</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PasswordException">
      <summary>This exception is thrown when a password does not meet complexity requirements.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PasswordException.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PasswordException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PasswordException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information required to serialize the new <see cref="T:System.DirectoryServices.AccountManagement.PasswordException" /></param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream that is associated with the new <see cref="T:System.DirectoryServices.AccountManagement.PasswordException" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PasswordException.#ctor(System.String)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PasswordException" /> class with the specified error message.</summary>
      <param name="message"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PasswordException.#ctor(System.String,System.Exception)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PasswordException" /> class with the specified error message and specified nested exception.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.Principal">
      <summary>Encapsulates the account data and operations common to all security principals. This is the abstract base class from which all security principals are derived.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> class. This constructor is called by derived-class constructors to initialize the base class and is not intended to be called directly from your code. </summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.CheckDisposedOrDeleted">
      <summary>Determines whether the <see cref="M:System.DirectoryServices.AccountManagement.Principal.Dispose" /> or <see cref="M:System.DirectoryServices.AccountManagement.Principal.Delete" /> methods have been called on this class. This method is called by classes that derive from this principal class. </summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="M:System.DirectoryServices.AccountManagement.Principal.Dispose" /> method has been called on this principal object.</exception>
      <exception cref="T:System.InvalidOperationsException">The <see cref="M:System.DirectoryServices.AccountManagement.Principal.Delete" /> method has been called on this principal object.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.Context">
      <summary>Gets a principal context that is associated with the principal. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object that contains the context associated with this principal. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.ContextRaw">
      <summary>Gets a principal context that is associated with this principal. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object that contains the context associated with this principal. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.ContextType">
      <summary>Gets the context type enumeraton value that specifies the type of principal context associated with this principal. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value that specifies the context type. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.Delete">
      <summary>Deletes the principal object from the store. </summary>
      <exception cref="T:System.InvalidOperationsException">The object that is not persisted in the store.The object has already been deleted. The target context type must match the context type of the current principal.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.Description">
      <summary>Gets or sets the description of the principal. </summary>
      <returns>The description text for this principal or null if there is no description. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.DisplayName">
      <summary>Gets or sets the display name for this principal.</summary>
      <returns>The display name for this principal or null if there is no display name. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.Dispose">
      <summary>Disposes the current instance of the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object.</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.DistinguishedName">
      <summary>Gets the distinguished name (DN) for this principal.</summary>
      <returns>The DN for this principal or null if there is no DN.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.Equals(System.Object)">
      <summary>Returns a Boolean value that specifies whether the supplied object is equal to the current object. </summary>
      <returns>true if the supplied object and current principal objects represent the same underlying principal in the store; otherwise false. </returns>
      <param name="o">The <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that is compared to the current instance. </param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.ExtensionGet(System.String)">
      <summary>Retrieves an attribute of an extended class object.</summary>
      <returns>Returns an array of objects, or null if no attribute exists with that name.  See System.DirectoryServices.AccountManagement Principle Extensions for an example on using this function.</returns>
      <param name="attribute">The name of the attribute to retrieve.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.ExtensionSet(System.String,System.Object)">
      <summary>Sets the value of an attribute in an extended class.</summary>
      <param name="attribute">The name of the attribute.</param>
      <param name="value">The object that contains the value of the attribute.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Returns a principal object that matches the specified identity type, and value. This version of the <see cref="M:System.DirectoryServices.AccountManagement.Principal.FindByIdentity" /> method determines the format of the identity value.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that matches the specified identity value and type or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityType">An <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value that specifies the format of the <paramref name="identityValue" /> parameter.  </param>
      <param name="identityValue">The identity of the principal. This parameter can be any format that is contained in the <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple principal objects matching the current object were found.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The identity type is not a valid <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)">
      <summary>Returns a principal object that matches the specified identity value.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that matches the specified identity value and type, or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityValue">The identity of the principal. This parameter can be any format that is contained in the <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple principal objects matching the current object were found.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.FindByIdentityWithType(System.DirectoryServices.AccountManagement.PrincipalContext,System.Type,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Returns a principal object that matches the specified identity type, and value. This method is called by the implementation of the derived-class FindByIdentity method to restrict the search to the derived class type and is not intended to be called directly from your code.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that matches the specified identity value and type or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="principalType">The type of object for which results are returned. This must of type <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> or a type derived from the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> class. </param>
      <param name="identityType">An <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value that specifies the type of the identity value.</param>
      <param name="identityValue">The identity of the principal.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.FindByIdentityWithType(System.DirectoryServices.AccountManagement.PrincipalContext,System.Type,System.String)">
      <summary>Returns a principal object that matches the specified identity type, and value. This method is called by the implementation of the derived-class FindByIdentity method to restrict the search to the derived class type and is not intended to be called directly from your code.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that matches the specified identity value and type, or null if no matches are found. </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="principalType">The type of object for which results are returned. This must of type <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> or a type derived from the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> class.</param>
      <param name="identityValue">The identity of the principal.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.GetGroups">
      <summary>Returns a collection of group objects that specify the groups of which the current principal is a member.  See the Knowledge Base article here for important information regarding the functionality of <see cref="M:System.DirectoryServices.AccountManagement.Principal.GetGroups" />. </summary>
      <returns>A collection of <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> objects that specify the groups of which the current principal is a member. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.GetGroups(System.DirectoryServices.AccountManagement.PrincipalContext)">
      <summary>Returns a collection of group objects that the principal is a member of and that exist in the store provided by the specified context parameter.  See the Knowledge Base article here for important information regarding the functionality of <see cref="M:System.DirectoryServices.AccountManagement.Principal.GetGroups" />.</summary>
      <returns>A collection of <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> objects that specify the groups of which the current principal is a member. </returns>
      <param name="contextToQuery">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object that specifies the context against which the query is performed. When the context is located in another domain, the query is performed against the principal objects' representation in the specified context. </param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.GetHashCode">
      <summary>Retrieves the hash created from the contents of the principal object, suited for use in hashing algorithms and data structures like a hash table.</summary>
      <returns>A hash code for the current principal. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.GetUnderlyingObject">
      <summary>Returns the underlying <see cref="T:System.DirectoryServices.DirectoryEntry" /> object that provides the contact data for the principal object. </summary>
      <returns>The underlying <see cref="T:System.DirectoryServices.DirectoryEntry" /> object. </returns>
      <exception cref="T:system.InvalidOperationExtension">The current principal has not been persisted and does not have an associated <see cref="T:System.DirectoryServices.DirectoryEntry" /> object. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.GetUnderlyingObjectType">
      <summary>Returns the underlying object type.  </summary>
      <returns>The underlying object type. For AD DS, AD LDS, and SAM the type is <see cref="T:System.DirectoryServices.DirectoryEntry" />. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.Guid">
      <summary>Gets the GUID associated with this principal. </summary>
      <returns>The Nullable <see cref="T:System.Guid" /> associated with this principal or null if there is no GUID. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.IsMemberOf(System.DirectoryServices.AccountManagement.GroupPrincipal)">
      <summary>Returns a Boolean value that specifies whether the principal is a member of the specified group.  </summary>
      <returns>true if the principal is a member of the specified group; otherwise false.  </returns>
      <param name="group">The <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object for which principal membership is determined. </param>
      <exception cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException">The <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> specified in the group parameter could not be found. </exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException">More than one matching <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> was found. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.IsMemberOf(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Returns a Boolean value that specifies whether the principal is a member of the group specified by identity type and value. </summary>
      <returns>true if the principal is a member of the specified group; otherwise false.  </returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityType">A <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value that specifies the type of the identity value.  </param>
      <param name="identityValue">The identity of the group. </param>
      <exception cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException">The identity type or value does not correspond to a <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" />.</exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.MultipleMatchesException">More than one matching <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> was found. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.Name">
      <summary>Gets or sets the name of this principal. </summary>
      <returns>The name of the principal or null if the name attribute is not set. </returns>
      <exception cref="T:System.ArgumentNullException">The application tried to set the name to null.</exception>
      <exception cref="T:System.InvlaidOperationException">The underlying store does not support this property. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.SamAccountName">
      <summary>Gets or sets the SAM account name for this principal. </summary>
      <returns>The SAM account name for this principal or null if no name has been set. </returns>
      <exception cref="T:System.ArgumentNullException">The application tried to set the SAM account name to null.</exception>
      <exception cref="T:System.InvlaidOperationException">The application tried to set the SAM account name on a persisted principal. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.Save">
      <summary>Saves the changes that were made on the principal object to the store. If this is a new principal object, this method inserts it into the store.</summary>
      <exception cref="T:System.InvalidOperationException">The principal has not yet been associated with a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object.This type of principal cannot be inserted in the store. </exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">An exception occurred when saving changes to the store, or updating the group membership in the store. </exception>
      <exception cref="T:System&gt;DirectoryServices.AccountManagement.PrincipalExistsException">The principal already occurs in the store. </exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.PasswordException">The password does not meet complexity requirements. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.Save(System.DirectoryServices.AccountManagement.PrincipalContext)">
      <summary>Saves the changes that were made on the principal object to the store. If this is a new principal object, this method inserts it into the specified context. If the principal has already been persisted, it is moved from the original context to the specified context. </summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <exception cref="T:System.InvalidOperationException">The principal has not yet been associated with a <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object.  This type of principal cannot be inserted in the store. </exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">An exception occurred when saving changes to the store, or updating the group membership in the store. </exception>
      <exception cref="T:System&gt;DirectoryServices.AccountManagement.PrincipalExistsException">The principal already occurs in the store. </exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.PasswordException">The password does not meet complexity requirements. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.Sid">
      <summary>Gets the Security ID (SID) of the principal. </summary>
      <returns>The <see cref="T:System.Security.Principal.SecurityIdentifier" /> for this principal or null if there is no SID. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.StructuralObjectClass">
      <summary>Gets the structural object class directory attribute.</summary>
      <returns>The structural object class directory attribute.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.Principal.ToString">
      <summary>Returns a user friendly string representation of the current principal object.</summary>
      <returns>A string representation of the current <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.Principal.UserPrincipalName">
      <summary>Gets or sets the user principal name (UPN) associated with this principal. </summary>
      <returns>The UPN associated with this principal or null if no if the UPN has not been set. </returns>
      <exception cref="T:System.InvlaidOperationException">The underlying store does not support this property. </exception>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalCollection">
      <summary>A mutable collection of objects derived from the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> class.  This class is designed to be used for multi-valued properties that contain Principals.  Manipulating the contents of this collection changes the contents of the corresponding store property, which is made permanent when <see cref="M:System.DirectoryServices.AccountManagement.Principal.Save" /> is called on the corresponding principal object.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Add(System.DirectoryServices.AccountManagement.ComputerPrincipal)">
      <summary>Adds the specified <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> object to the end of the collection</summary>
      <param name="computer"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Add(System.DirectoryServices.AccountManagement.GroupPrincipal)">
      <summary>Adds the specified <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object to the end of the collection</summary>
      <param name="group"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Add(System.DirectoryServices.AccountManagement.Principal)">
      <summary>Adds the specified <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object to the end of the collection</summary>
      <param name="principal">A <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Add(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Searches for a <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that matches the parameters, and adds it to the end of the collection.</summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object for the principal to be added to the collection.</param>
      <param name="identityType">An <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> object that specifies the format of <paramref name="identityValue" /></param>
      <param name="identityValue">A string that identifies the principal, in the format specified by <paramref name="identityType" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Add(System.DirectoryServices.AccountManagement.UserPrincipal)">
      <summary>Adds the specified <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object to the end of the collection</summary>
      <param name="user">A <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Clear">
      <summary>Removes all Principals from the collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Contains(System.DirectoryServices.AccountManagement.ComputerPrincipal)">
      <summary>Returns true if the collection contains the specified <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> object.</summary>
      <returns>Returns a bool.</returns>
      <param name="computer">A <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Contains(System.DirectoryServices.AccountManagement.GroupPrincipal)">
      <summary>Returns true if the collection contains the specified <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object.</summary>
      <returns>Returns a bool.</returns>
      <param name="group">A <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Contains(System.DirectoryServices.AccountManagement.Principal)">
      <summary>Returns true if the collection contains the specified <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object.</summary>
      <returns>Returns a bool.</returns>
      <param name="principal">A <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Contains(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Returns true if the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object matching the <paramref name="indentityType" />/<paramref name="idendityValue" /> pair is in the collection</summary>
      <returns>Returns a bool.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object of the principal.</param>
      <param name="identityType">An <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> object that specifies the format of <paramref name="identityValue" /></param>
      <param name="identityValue">A string that identifies the principal, in the format specified by <paramref name="identityType" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Contains(System.DirectoryServices.AccountManagement.UserPrincipal)">
      <summary>Returns true if the collection contains the specified <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object.</summary>
      <returns>Returns a bool.</returns>
      <param name="user">A <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.CopyTo(System.DirectoryServices.AccountManagement.Principal[],System.Int32)">
      <summary>Copies the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> objects from this <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" /> into the specified array, starting at the specified position index in array.</summary>
      <param name="array">The <see cref="T:System.Array" /> that should be populated with <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> objects.</param>
      <param name="index">The position in <paramref name="array" /> into which the first principal object in the collection should be copied.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalCollection.Count">
      <summary>Returns the count of Principal objects in this collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.GetEnumerator">
      <summary>Returns an enumerator to iterate through the principals in the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> containing the principals in the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />.</returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalCollection.IsReadOnly">
      <summary>Returns false.  This is not a read-only collection.</summary>
      <returns>Returns a bool.</returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalCollection.IsSynchronized">
      <summary>Returns false.  It is up to the application to serialize access to this collection.</summary>
      <returns>Returns a bool.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Remove(System.DirectoryServices.AccountManagement.ComputerPrincipal)">
      <summary>Removes the specified <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> object from the collection, and returns true if the <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> was a member of this <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />, and false otherwise (in which case the method performs no operation).</summary>
      <returns>Returns a bool.</returns>
      <param name="computer">A <see cref="T:System.DirectoryServices.AccountManagement.ComputerPrincipal" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Remove(System.DirectoryServices.AccountManagement.GroupPrincipal)">
      <summary>Removes the specified <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object from the collection, and returns true if the <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> was a member of this <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />, and false otherwise (in which case the method performs no operation).</summary>
      <returns>Returns a bool.</returns>
      <param name="group">A <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Remove(System.DirectoryServices.AccountManagement.Principal)">
      <summary>Removes the specified <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object from the collection, and returns true if the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> was a member of this <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />, and false otherwise (in which case the method performs no operation).</summary>
      <returns>Returns a bool.</returns>
      <param name="principal">A <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Remove(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Finds the <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object specified by the given <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> and <paramref name="identityType" />/<paramref name="identityValue" /> pair from the collection, and returns true if the identified <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> was a member of this <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />, and false otherwise (in which case the method performs no operation).</summary>
      <returns>Returns a bool.</returns>
      <param name="context">A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object.</param>
      <param name="identityType">An <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> that identifies the format of <paramref name="identityValue" />.</param>
      <param name="identityValue">A string.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.Remove(System.DirectoryServices.AccountManagement.UserPrincipal)">
      <summary>Removes the specified <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object from the collection, and returns true if the <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> was a member of this <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />, and false otherwise (in which case the method performs no operation).</summary>
      <returns>Returns a bool.</returns>
      <param name="user">A <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalCollection.SyncRoot">
      <summary>Returns a synchronization object that can be used to synchronize access to this collection.</summary>
      <returns>Returns the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" /> object itself.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> objects from this <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" /> into the specified array, starting at the specified position index in array.</summary>
      <param name="array">The T:System.Array that should be populated with <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> objects.</param>
      <param name="index">The position in <paramref name="array" /> to which the first <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object should be copied to.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalCollection.System#Collections#ICollection#Count">
      <summary>Returns the count of Principal objects in this collection.</summary>
      <returns>Returns an integer.</returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Always returns false.  It is up to the application to synchronize access to this collection.</summary>
      <returns>Returns a bool.</returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalCollection.System#Collections#ICollection#SyncRoot">
      <summary>Returns a synchronization object that can be used to synchronize access to this collection.  Returns the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" /> object itself.</summary>
      <returns>The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" /> object.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator to iterate through the principals in the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> containing the principals in the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" />.</returns>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalContext">
      <summary>Encapsulates the server or domain against which all operations are performed, the container that is used as the base of those operations, and the credentials used to perform the operations.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.#ctor(System.DirectoryServices.AccountManagement.ContextType)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> class with the specified context type.  </summary>
      <param name="contextType">A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of store for the principal context.</param>
      <exception cref="T:System.ArgumentException">A name or container must be specified when using the application directory context.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="contextType" /> parameter does not contain a valid <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.#ctor(System.DirectoryServices.AccountManagement.ContextType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> class with the specified context type and name. </summary>
      <param name="contextType">A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of store for the principal context.</param>
      <param name="name">The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context types, the machine name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, or the name of the server and port hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> instance. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context type this context is a domain controller for the domain of the user principal under which the thread is running. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type, this is the local machine name. This parameter cannot be null for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types.</param>
      <exception cref="T:System.ArgumentException">A name must be specified when <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> is specified in the <paramref name="contextType" /> parameter.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="contextType" /> parameter does not contain a valid <see cref="F:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.#ctor(System.DirectoryServices.AccountManagement.ContextType,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> class with the specified context type, name, and container. </summary>
      <param name="contextType">A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of store for the principal context.</param>
      <param name="name">The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context types, the machine name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, or the name of the server and port hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> instance. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context type this context is a domain controller for the domain of the user principal under which the thread is running. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type, this is the local machine name. This parameter cannot be null for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types.</param>
      <param name="container">The container on the store to use as the root of the context. All queries are performed under this root, and all inserts are performed into this container.For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> and <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types, this parameter is the distinguished name of a container object. For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, this parameter must be set to null.</param>
      <exception cref="T:System.ArgumentException">A container cannot be specified when the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type is specified in the <paramref name="contextType" /> parameter.A name or container must be specified when <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> is specified in the <paramref name="contextType" /> parameter. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="contextType" /> parameter does not contain a valid <see cref="F:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.#ctor(System.DirectoryServices.AccountManagement.ContextType,System.String,System.String,System.DirectoryServices.AccountManagement.ContextOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> class with the specified context type, name, container, and context options. </summary>
      <param name="contextType">A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of store for the principal context.</param>
      <param name="name">The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context types, the machine name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, or the name of the server and port hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> instance. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context type this context is a domain controller for the domain of the user principal under which the thread is running. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type, this is the local machine name. This parameter cannot be null for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types.</param>
      <param name="container">The container on the store to use as the root of the context. All queries are performed under this root, and all inserts are performed into this container.For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> and <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types, this parameter is the distinguished name of a container object. For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, this parameter must be set to null.</param>
      <param name="options">A combination of one or more <see cref="T:System.DirectoryServices.AccountManagement.ContextOptions" /> enumeration values specifying the options used to bind to the server. If this parameter is null, the default options are ContextOptions.Negotiate | ContextOptions.Signing | ContextOptions.Sealing.  </param>
      <exception cref="T:System.ArgumentException">A container cannot be specified when the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type is specified in the <paramref name="contextType" /> parameter.A name or container must be specified when <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> is specified in the <paramref name="contextType" /> parameter. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="contextType" /> parameter does not contain a valid <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value. The <paramref name="options" /> parameter does not contain a combination of valid <see cref="T:System.DirectoryServices.AccountManagement.ContextOptions" /> enumeration values. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.#ctor(System.DirectoryServices.AccountManagement.ContextType,System.String,System.String,System.DirectoryServices.AccountManagement.ContextOptions,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> class with the specified context type, name, container, context options, username, and password. </summary>
      <param name="contextType">A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of store for the principal context. </param>
      <param name="name">The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context types, the machine name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, or the name of the server and port hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> instance. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context type this context is a domain controller for the domain of the user principal under which the thread is running. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type, this is the local machine name. This parameter cannot be null for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types.</param>
      <param name="container">The container on the store to use as the root of the context. All queries are performed under this root, and all inserts are performed into this container.For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> and <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types, this parameter is the distinguished name of a container object. For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, this parameter must be set to null.</param>
      <param name="options">A combination of one or more <see cref="T:System.DirectoryServices.AccountManagement.ContextOptions" /> enumeration values the options used to bind to the server. If this parameter is null, the default options are ContextOptions.Negotiate | ContextOptions.Signing | ContextOptions.Sealing.  </param>
      <param name="userName">The username used to connect to the store. If the <paramref name="username" /> and <paramref name="password" /> parameters are both null, the default credentials of the current principal are used. Otherwise, both <paramref name="username" /> and <paramref name="password" /> must be non-null, and the credentials they specify are used to connect to the store.</param>
      <param name="password">The password used to connect to the store. If the <paramref name="username" /> and <paramref name="password" /> parameters are both null, the default credentials of the current principal are used.  Otherwise, both <paramref name="username" /> and <paramref name="password" /> must be non-null, and the credentials they specify are used to connect to the store.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="username" /> and <paramref name="password" /> parameters must either be null or contain a value. A container cannot be specified when the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type is specified in the <paramref name="contextType" /> parameter.A name or container must be specified when <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> is specified in the <paramref name="contextType" /> parameter.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="contextType" /> parameter does not contain a valid <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value. The <paramref name="options" /> parameter does not contain a combination of valid <see cref="T:System.DirectoryServices.AccountManagement.ContextOptions" /> enumeration values. </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.#ctor(System.DirectoryServices.AccountManagement.ContextType,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> class with the specified context type, name, username, and password. </summary>
      <param name="contextType">A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of store for the principal context.</param>
      <param name="name">The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context types, the machine name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, or the name of the server and port hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> instance. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context type this context is a domain controller for the domain of the user principal under which the thread is running. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type, this is the local machine name. This parameter cannot be null for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types.</param>
      <param name="userName">The username used to connect to the store. If the <paramref name="username" /> and <paramref name="password" /> parameters are both null, the default credentials of the current principal are used. Otherwise, both <paramref name="username" /> and <paramref name="password" /> must be non-null, and the credentials they specify are used to connect to the store.</param>
      <param name="password">The password used to connect to the store. If the <paramref name="username" /> and <paramref name="password" /> parameters are both null, the default credentials of the current principal are used. Otherwise, both <paramref name="username" /> and <paramref name="password" /> must be non-null, and the credentials they specify are used to connect to the store.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="username" /> and <paramref name="password" /> parameters must either be null or contain a value. A name must be specified when <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> is specified in the <paramref name="contextType" /> parameter. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="contextType" /> parameter does not contain a valid <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value.  </exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.#ctor(System.DirectoryServices.AccountManagement.ContextType,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> class with the specified context type, name, container, username, and password. </summary>
      <param name="contextType">A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of store for the principal context. </param>
      <param name="name">The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context types, the machine name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, or the name of the server and port hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> instance. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> context type this context is a domain controller for the domain of the user principal under which the thread is running. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type, this is the local machine name. This parameter cannot be null for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types.</param>
      <param name="container">The container on the store to use as the root of the context. All queries are performed under this root, and all inserts are performed into this container.For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> and <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> context types, this parameter is the distinguished name of a container object. For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, this parameter must be set to null.</param>
      <param name="userName">The username used to connect to the store. If the <paramref name="username" /> and <paramref name="password" /> parameters are both null, the default credentials of the current principal are used.  Otherwise, both <paramref name="username" /> and <paramref name="password" /> must be non-null, and the credentials they specify are used to connect to the store.</param>
      <param name="password">The password used to connect to the store. If the <paramref name="username" /> and <paramref name="password" /> parameters are both null, the default credentials of the current principal are used.  Otherwise, both <paramref name="username" /> and <paramref name="password" /> must be non-null, and the credentials they specify are used to connect to the store. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="username" /> and <paramref name="password" /> parameters must either be null or contain a value. A container cannot be specified when the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context type is specified in the <paramref name="contextType" /> parameter.A <paramref name="name" /> or <paramref name="container" /> must be specified when <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> is specified in the <paramref name="contextType" /> parameter. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="contextType" /> parameter does not contain a valid <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalContext.ConnectedServer">
      <summary>Gets the name of the server to which the principal context is connected. </summary>
      <returns>The name of the server to which the principal context is connected or null if the principal context is not connected to a server. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalContext.Container">
      <summary>Gets the value specified in the container parameter in the constructor.</summary>
      <returns>The container on the store to use as the root of the context or null if the container is not specified. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalContext.ContextType">
      <summary>Gets the context type that specifies the type of store for the principal context. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ContextType" /> enumeration value specifying the type of target to connect to.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.Dispose">
      <summary>Disposes the current instance of the <see cref="T:System.DirectorySerices.AccountManagement.PrincipalContext" /> object. </summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalContext.Name">
      <summary>Gets the value specified as the <paramref name="name" /> parameter in the constructor.</summary>
      <returns>The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain" /> contexts types, the host name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine" /> context types, the name of the server hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory" /> instance, or null if no name is set. </returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalContext.Options">
      <summary>Gets the options specified in the <paramref name="contextOptions" /> parameter of the constructor. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.ContextOptions" /> enumeration value specifying the type of target to connect to.</returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalContext.UserName">
      <summary>Gets the value specified in the username parameter in the constructor.</summary>
      <returns>The username used to connect to the store, or null if no user name exists.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.ValidateCredentials(System.String,System.String)">
      <summary>Creates the connections to the server and returns a Boolean value that specifies whether the specified username and password are valid. </summary>
      <returns>true if the credentials are valid; otherwise false. </returns>
      <param name="userName">The username that is validated on the server.</param>
      <param name="password">The password that is validated on the server.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalContext.ValidateCredentials(System.String,System.String,System.DirectoryServices.AccountManagement.ContextOptions)">
      <summary>Creates the connections to the server and returns a Boolean value that specifies whether the specified user name and password are valid. This method performs fast credential validation of the username and password. </summary>
      <returns>true if the credentials are valid; otherwise false. </returns>
      <param name="userName">The username that is validated on the server.</param>
      <param name="password">The password that is validated on the server.</param>
      <param name="options">A combination of one or more <see cref="T:System.DirectoryServices.AccountManagement.ContextOptions" /> enumeration values the options used to bind to the server. This parameter can only specify Simple bind with or without SSL, or Negotiate bind. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="options" /> parameter must specify Negotiate when the context type is <see cref="T:System.DirectoryServices.AccountManagement.ContextType.Machine." /></exception>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalException">
      <summary>The base class of exceptions thrown by <see cref="N:System.DirectoryServices.AccountManagement" /> objects.</summary>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalExistsException">
      <summary>Thrown by <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection.Add" /> when an attempt is made to insert a principal that already exists in the collection, or by <see cref="N:System.DirectoryServices.AccountManagement.Principal.Save" /> when an attempt is made to save a new principal that already exists in the store.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalExistsException.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalExistsException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalExistsException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information required to serialize the new <see cref="T:System.DirectoryServices.AccountManagement.PrincipalExistsException" /></param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream that is associated with the new <see cref="T:System.DirectoryServices.AccountManagement.PrincipalExistsException" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalExistsException.#ctor(System.String)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalExistsException" /> class with the specified error message.</summary>
      <param name="message">The text of the error message.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalExistsException.#ctor(System.String,System.Exception)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalExistsException" /> class with the specified error message and specified nested exception.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">
      <summary>Thrown when ADSI returns an error during an operation to update the store.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalOperationException.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information required to serialize the new <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /></param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream that is associated with the new <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalOperationException.#ctor(System.String)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /> class with the specified error message.</summary>
      <param name="message">The text of the error message.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalOperationException.#ctor(System.String,System.Exception)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /> class with the specified error message and specified nested exception.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalOperationException.#ctor(System.String,System.Exception,System.Int32)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /> class with the specified error message, the specified nested exception, and the specified error code.</summary>
      <param name="message">The text of the message.</param>
      <param name="innerException">A nested exception.</param>
      <param name="errorCode">An error code.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalOperationException.#ctor(System.String,System.Int32)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /> class with the specified error message and specified error code.</summary>
      <param name="message">The text of the message.</param>
      <param name="errorCode">An error code.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalOperationException.ErrorCode">
      <summary>Returns an integer error code.</summary>
      <returns>Returns an integer.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalSearcher">
      <summary>Encapsulates the methods and search patterns used to execute a query against the underlying principal store.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" /> class. The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> property must be set before the Principal searcher object can be used to perform a search.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.#ctor(System.DirectoryServices.AccountManagement.Principal)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" /> class with the specified query filter.</summary>
      <param name="queryFilter">The <see cref="T:System.DirectoryServices.AccountManagement.Principal" />  object that specifies the filter to use for the search. The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> property is initialized to this value. </param>
      <exception cref="T:System.ArgumentException">Persisted principal objects can not be used as the <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" />. The <paramref name="queryFilter" /> parameter cannot be null or empty.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.Context">
      <summary>Gets that principal context that is used to perform the query. The context specifies the server or domain against which search operations are performed. </summary>
      <returns>The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> object that specifies the server or domain against which operations are performed. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.Dispose">
      <summary>Disposes the current instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" /> object.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.FindAll">
      <summary>Returns a principal search result that contains a collection of all the principal objects that match the principal specified in the query filter property. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> object that matches the query filter or an empty collection if no results are found.  </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> contains referential properties. For more information, see the Query by Example overview topic. The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> is a persisted principal.</exception>
      <exception cref="T:System.ArgumentException">A <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> must first be assigned to the principal searcher before the query can be performed.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.FindOne">
      <summary>Returns a principal search result that contains the first principal object found that matches the principal specified in the <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> property. </summary>
      <returns>A  <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that contains the principal object that matches the query filter or null if no results are found.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> contains referential properties. For more information, see the Query by Example overview topic.The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> is a persisted principal.</exception>
      <exception cref="T:System.ArgumentException">A <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> must first be assigned to the principal searcher before the query can be performed.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.GetUnderlyingSearcher">
      <summary>Returns the underlying search object that is used by the Account Management API to perform the search. </summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectorySearcher" /> object. </returns>
      <exception cref="T:System.InvalidOperationException">A <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> must first be assigned to the principal searcher before the query can be performed.The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> contains referential properties. For more information, see the Query by Example overview topic. The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> is a persisted principal.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.GetUnderlyingSearcherType">
      <summary>Returns the type of the object returned from the <see cref="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.GetUnderlyingSearcher" /> method. </summary>
      <returns>A <see cref="T:System.Type" /> that specifies the type of object returned from the <see cref="M:System.DirectoryServices.AccountManagement.PrincipalSearcher.GetUnderlyingSearcher" /> method. </returns>
      <exception cref="T:System.InvalidOperationException">A <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> must first be assigned to the principal searcher before the query can be performed.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter">
      <summary>Gets or sets the query filter that is used to locate matching principals. </summary>
      <returns>The <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> object that is used for the query or null if no filter is set. </returns>
      <exception cref="T:System.ArgumentException">Persisted Principal objects can not be used as the <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" />.The <see cref="P:System.DirectoryServices.AccountManagement.PrincipalSearcher.QueryFilter" /> cannot be null or empty.</exception>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult`1">
      <summary>Returns a collection of <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> objects that are returned by a search. </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearchResult`1.Dispose">
      <summary>Disposes the current instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult" /> object.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearchResult`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.  </summary>
      <returns>The <see cref="T:SystemCollections.IEnumerator" /> object that is used to iterate through the principal objects. </returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalSearchResult`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate over the objects in this collection.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> containing the principals in the search result collection.</returns>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException">
      <summary>This exception is thrown when the API is unable to connect to the server.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /> class.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the information required to serialize the new <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /></param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source of the serialized stream that is associated with the new <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.#ctor(System.String)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /> class with the specified error message.</summary>
      <param name="message">An error message.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.#ctor(System.String,System.Exception)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /> class with the specified error message and specified nested exception.</summary>
      <param name="message">The text of the message.</param>
      <param name="innerException">A nested exception.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.#ctor(System.String,System.Exception,System.Int32)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /> class with the specified error message, the specified nested exception, and the specified error code.</summary>
      <param name="message">The text of the error message.</param>
      <param name="innerException">A nested exception.</param>
      <param name="errorCode">An error code.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.#ctor(System.String,System.Exception,System.Int32,System.String)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /> class with the specified error message, the specified nested exception, the specified error code, and the specified server name.</summary>
      <param name="message">The text of the message.</param>
      <param name="innerException">A nested exception.</param>
      <param name="errorCode">An error code.</param>
      <param name="serverName">A server name.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.#ctor(System.String,System.Int32)">
      <summary>Instantiates a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalServerDownException" /> class with the specified error message and specified error code.</summary>
      <param name="message">The text of the message.</param>
      <param name="errorCode">An error code.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalServerDownException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the parameter name and additional exception information.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that will hold the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that will hold contextual information about the source or destination.</param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1">
      <summary>Multi-valued properties, such as <see cref="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.PermittedWorkstations" />, have a value of the type <see cref="T:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1" />.  This class provides methods to enumerate and manipulate those values.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.Add(`0)">
      <summary>Adds the specified value to the end of the collection.</summary>
      <param name="value">An object to be added to the collection.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.Clear">
      <summary>Clears the contents of the collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.Contains(`0)">
      <summary>Returns true if the specified object is in the collection, and false otherwise.</summary>
      <returns>Returns a bool.</returns>
      <param name="value">An object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copys the contents of the collection to the specified array, starting at the specified position in the array.</summary>
      <param name="array">An <see cref="T:System.Array" /> of objects.</param>
      <param name="index">An integer representing the position in <paramref name="array" /> to which the first object in the collection should be copied.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.Count">
      <summary>Gets the number of objects in the collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An <see cref="T:SystemCollections.IEnumerator" /> object.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.IndexOf(`0)">
      <summary>Returns the index of the specified object, or -1 if the object is not in the collection.</summary>
      <returns>An integer.</returns>
      <param name="value">The object whose index is required.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts the specified object into the collection at the specified index.</summary>
      <param name="index">The index at which <paramref name="value" /> will be inserted into the collection.</param>
      <param name="value">An object.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.IsFixedSize">
      <summary>Gets a bool that represents whether or not the collection is fixed in size.</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.IsReadOnly">
      <summary>Gets a bool that represents whether or not the collection is read-only.</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.Item(System.Int32)">
      <summary>Gets the object at the specified index in the collection.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.Remove(`0)">
      <summary>Removes the specified object from the collection.</summary>
      <returns>Returns a bool.  Returns true if the object was removed, or false if the object was not in the collection.</returns>
      <param name="value">The object to be removed from the collection.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the object at the specified index from the collection.</summary>
      <param name="index"></param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the contents of the collection to the specified array, starting at the specified index.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#ICollection#Count">
      <summary>Gets the number of objects in the collection.</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator for iterating through the collection.</summary>
      <returns>An <see cref="T:SystemCollections.IEnumerator" /> object.</returns>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds the specified object to the end of the collection.</summary>
      <param name="value">An object to be added to the collection.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#Clear">
      <summary>Deletes the contents of the collection.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Returns a bool indicating whether the specified object is in the collection.</summary>
      <returns>boolean</returns>
      <param name="value"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Returns the index of the specified object in the collection, or -1 if it is not in the collection.</summary>
      <returns>An integer.</returns>
      <param name="value">An object.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts the specified object at the specified position into the collection.</summary>
      <param name="index">The position into which <paramref name="value" /> should be inserted.</param>
      <param name="value">An object</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the collection is fixed-size.</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether access to the collection is read-only.</summary>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the object at the specified index in the collection.</summary>
      <param name="index">An integer.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the specified object from the collection.</summary>
      <param name="value">The object to be removed from the collection.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.PrincipalValueCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the object at the specified index from the collection.</summary>
      <param name="index">The index of the object to be removed from the collection.</param>
    </member>
    <member name="T:System.DirectoryServices.AccountManagement.UserPrincipal">
      <summary>Encapsulates principals that are user accounts.</summary>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> class by using the specified context. </summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> class by using the specified context, SAM account name, password, and enabled value. </summary>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="samAccountName">The SAM account name for this user principal.</param>
      <param name="password">The password for this account. </param>
      <param name="enabled">A Boolean value that specifies whether the account is enabled.</param>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.AdvancedSearchFilter">
      <summary>Returns an <see cref="T:System.DirectoryServices.AccountManagement.AdvancedSearchFilter" /> object, for use with Query By Example to set read-only properties before passing the object to the <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />.</summary>
      <returns>An <see cref="T:System.DirectoryServices.AccountManagement.AdvancedSearchFilter" /> object.</returns>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.Current">
      <summary>Gets a user principal object that represents the current user under which the thread is running.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> representing the current user. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
      <exception cref="T:System.DirectoryServices.AccountManagement.NoMatchingPrincipalException">The user principal object for the current user could not be found. The principal object may contain an access control list to prevent access by unauthorized users.</exception>
      <exception cref="T:System.MultipleMatchesException">Multiple user principal objects matching the current user were found.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.EmailAddress">
      <summary>Gets or sets the e-mail address for this account.</summary>
      <returns>The e-mail address of the user principal. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.EmployeeId">
      <summary>Gets or sets the employee ID for this user principal. </summary>
      <returns>The employee ID of the user principal. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.FindByBadPasswordAttempt(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of <see cref="T:System.DirectoryServices.AccountManagement.PrincipleSearchResult'1" /> objects for users that have an incorrect password attempt recorded in the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> objects, or an empty collection if no results are found.</returns>
      <param name="context"></param>
      <param name="time"></param>
      <param name="type"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.FindByExpirationTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of <see cref="T:System.DirectoryServices.AccountManagement.PrincipleSearchResult'1" /> objects for users that have an account expiration time in the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> objects, or an empty collection if no results are found.</returns>
      <param name="context"></param>
      <param name="time"></param>
      <param name="type"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
      <summary>Returns a user principal object that matches the specified identity type, and value. This version of the <see cref="Overload:System.DirectoryServices.AccountManagement.UserPrincipal.FindByIdentity" /> method determines the format of the identity value. </summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object that matches the specified identity value and type, or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContex" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityType">A <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value that specifies the format of the <paramref name="identityValue" /> parameter.</param>
      <param name="identityValue">The identity of the user principal. This parameter can be any format that is contained in the <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple user principal objects matching the current user object were found.</exception>
      <exception cref="T:System.ComponenetModel.InvalidEnumerationOperatorException">The identity value is not a valid <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration value.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)">
      <summary>Returns a user principal object that matches the specified identity value.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> object that matches the specified identity value, or null if no matches are found.</returns>
      <param name="context">The <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" /> that specifies the server or domain against which operations are performed.</param>
      <param name="identityValue">The identity of the user principal. This parameter can be any format that is contained in the <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> enumeration.</param>
      <exception cref="T:System.MultipleMatchesException">Multiple user principal objects matching the current user object were found.</exception>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.FindByLockoutTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of <see cref="T:System.DirectoryServices.AccountManagement.PrincipleSearchResult'1" /> objects for users that have an account lockout time in the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> objects, or an empty collection if no results are found.</returns>
      <param name="context"></param>
      <param name="time"></param>
      <param name="type"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.FindByLogonTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of <see cref="T:System.DirectoryServices.AccountManagement.PrincipleSearchResult'1" /> objects for users that have account logon recorded in the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> objects, or an empty collection if no results are found.</returns>
      <param name="context"></param>
      <param name="time"></param>
      <param name="type"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.FindByPasswordSetTime(System.DirectoryServices.AccountManagement.PrincipalContext,System.DateTime,System.DirectoryServices.AccountManagement.MatchType)">
      <summary>Returns a collection of <see cref="T:System.DirectoryServices.AccountManagement.PrincipleSearchResult'1" /> objects for users that have set their password within the specified date and time range.</summary>
      <returns>A <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> that contains one or more <see cref="T:System.DirectoryServices.AccountManagement.UserPrincipal" /> objects, or an empty collection if no results are found.</returns>
      <param name="context"></param>
      <param name="time"></param>
      <param name="type"></param>
    </member>
    <member name="M:System.DirectoryServices.AccountManagement.UserPrincipal.GetAuthorizationGroups">
      <summary>Returns a collection of principal objects that contains all the authorization groups of which this user is a member. This function only returns groups that are security groups; distribution groups are not returned. </summary>
      <returns>A collection of <see cref="T:System.DirectoryServices.AccountManagement.Principal" /> objects that contain the groups of which the user is a member, or null if the user does not belong to any groups. </returns>
      <exception cref="T:System.DirectoryServices.AccountManagement.PrincipalOperationException">The attempt to retrieve authorization groups failed. </exception>
      <exception cref="T:System&gt;NotSupportedException">The retrieval of authorization groups is not supported by this operating system. </exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.GivenName">
      <summary>Gets or sets the given name for the user principal.</summary>
      <returns>The given name of the user principal. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.MiddleName">
      <summary>Gets or sets the middle name for the user principal. </summary>
      <returns>The middle name of the user principal. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.Surname">
      <summary>Gets or sets the surname for the user principal. </summary>
      <returns>The surname of the user principal. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
    <member name="P:System.DirectoryServices.AccountManagement.UserPrincipal.VoiceTelephoneNumber">
      <summary>Gets or sets the voice telephone number for the user principal. </summary>
      <returns> The voice telephone number of the user principal. </returns>
      <exception cref="T:System.InvalidOperationException">The underlying store does not support this property.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.EnterpriseServices.Thunk.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<doc>
	This is a stub file.
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.EnterpriseServices.Wrapper.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<doc>
	This is a stub file.
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Drawing.Design.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Drawing.Design</name>
  </assembly>
  <members>
    <member name="T:System.Drawing.Design.BitmapEditor">
      <summary>Provides a user interface for selecting bitmap files in a property browser.</summary>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.BitmapEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.GetExtensions">
      <summary>Gets the extensions for the file list filter that the bitmap editor will initially use to filter the file list.</summary>
      <returns>The default set of file extensions used to filter the file list.</returns>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.GetFileDialogDescription">
      <summary>Gets the description for the default file list filter provided by this editor.</summary>
      <returns>The description for the default type of files to filter the file list for.</returns>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.LoadFromStream(System.IO.Stream)">
      <summary>Loads an image from the specified stream.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> loaded from the stream.</returns>
      <param name="stream">The stream from which to load the image. </param>
    </member>
    <member name="T:System.Drawing.Design.ColorEditor">
      <summary>Provides a <see cref="T:System.Drawing.Design.UITypeEditor" /> for visually picking a color.</summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ColorEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the given object value using the editor style provided by the <see cref="M:System.Drawing.Design.ColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> method.</summary>
      <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained. </param>
      <param name="value">An instance of the value being edited. </param>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets the editing style of the Edit method. If the method is not supported, this will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.</summary>
      <returns>An enum value indicating the provided editing style.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating if this editor supports the painting of a representation of an object's value.</summary>
      <returns>true if <see cref="Overload:System.Drawing.Design.ColorEditor.PaintValue" /> is implemented; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>Paints a representative value of the given object to the provided canvas.</summary>
      <param name="e">What to paint and where to paint it. </param>
    </member>
    <member name="T:System.Drawing.Design.ContentAlignmentEditor">
      <summary>Provides a <see cref="T:System.Drawing.Design.UITypeEditor" /> for visually editing content alignment.</summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ContentAlignmentEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the given object value using the editor style provided by the <see cref="Overload:System.Drawing.Design.ContentAlignmentEditor.GetEditStyle" /> method.</summary>
      <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained. </param>
      <param name="value">An instance of the value being edited. </param>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets the editing style of the <see cref="Overload:System.Drawing.Design.ContentAlignmentEditor.EditValue" /> method.</summary>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value indicating the provided editing style. If the method to retrieve the edit style is not supported, this will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
    </member>
    <member name="T:System.Drawing.Design.CursorEditor">
      <summary>Provides a <see cref="T:System.Drawing.Design.UITypeEditor" /> that can perform default file searching for cursor (.cur) files.</summary>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.CursorEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the given object value using the editor style provided by the <see cref="Overload:System.Drawing.Design.CursorEditor.GetEditStyle" /> method.</summary>
      <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
      <param name="context">A type descriptor context that can be used to provide additional context information. </param>
      <param name="provider">A service provider object through which editing services may be obtained. </param>
      <param name="value">An instance of the value being edited. </param>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retrieves the editing style of the <see cref="Overload:System.Drawing.Design.CursorEditor.EditValue" /> method. </summary>
      <returns>An enum value indicating the provided editing style. If the method is not supported, this will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.</returns>
      <param name="context">A type descriptor context that can be used to provide additional context information. </param>
    </member>
    <member name="P:System.Drawing.Design.CursorEditor.IsDropDownResizable"></member>
    <member name="T:System.Drawing.Design.FontEditor">
      <summary>Provides a user interface to select and configure a <see cref="T:System.Drawing.Font" /> object.</summary>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.FontEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the value of the specified object using the editor style indicated by <see cref="M:System.Drawing.Design.FontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />.</summary>
      <returns>The new value of the object. If the value of the object has not changed, this should return the same object that was passed to it.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services. </param>
      <param name="value">The object to edit. </param>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</summary>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by <see cref="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
    </member>
    <member name="T:System.Drawing.Design.FontNameEditor">
      <summary>Provides a <see cref="T:System.Drawing.Design.UITypeEditor" /> that paints a glyph for the font name.</summary>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.FontNameEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determines if this editor supports the painting of a representation of an object's value.</summary>
      <returns>true if <see cref="Overload:System.Drawing.Design.FontNameEditor.PaintValue" /> is implemented; otherwise, false.</returns>
      <param name="context">A type descriptor context that can be used to provide additional context information. </param>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>Paints a representative value of the given object to the provided canvas. Painting should be done within the boundaries of the provided rectangle.</summary>
      <param name="e">What to paint and where to paint it. </param>
    </member>
    <member name="T:System.Drawing.Design.IconEditor">
      <summary>Provides a <see cref="T:System.Drawing.Design.UITypeEditor" /> for visually choosing an icon.</summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.IconEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.CreateExtensionsString(System.String[],System.String)">
      <summary>Creates a string representing the valid file extensions for icons.</summary>
      <returns>A string containing the icon file extensions, or null if <paramref name="extensions" /> is null or empty.</returns>
      <param name="extensions">An array of strings holding valid file extensions.</param>
      <param name="sep">A string that specifies the separator character.</param>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.CreateFilterEntry(System.Drawing.Design.IconEditor)">
      <summary>Creates a filter string for the file dialog box.</summary>
      <returns>The filter string, created from the string returned by <see cref="M:System.Drawing.Design.IconEditor.CreateExtensionsString(System.String[],System.String)" />.</returns>
      <param name="e">The <see cref="T:System.Drawing.Design.IconEditor" /> for which the filter string will be created.</param>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the given object value using the editor style provided by the <see cref="M:System.Drawing.Design.IconEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> method.</summary>
      <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
      <param name="context">A type descriptor context that can be used to provide additional context information. </param>
      <param name="provider">A service provider object through which editing services may be obtained. </param>
      <param name="value">An instance of the value being edited. </param>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retrieves the editing style of the <see cref="Overload:System.Drawing.Design.IconEditor.EditValue" /> method.</summary>
      <returns>One of the <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> values indicating the provided editing style.</returns>
      <param name="context">A type descriptor context that can be used to provide additional context information. </param>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetExtensions">
      <summary>Retrieves an array of valid file extensions for icons.</summary>
      <returns>An array of valid file extensions for icons.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetFileDialogDescription">
      <summary>Gets the description for the default file list filter provided by this editor.</summary>
      <returns>The description for the default type of files to filter the file list for.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determines if this editor supports the painting of a representation of an object's value.</summary>
      <returns>true if <see cref="Overload:System.Drawing.Design.UITypeEditor.PaintValue" /> is implemented; otherwise, false.</returns>
      <param name="context">A type descriptor context that can be used to provide additional context information. </param>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.LoadFromStream(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Drawing.Icon" /> from the given stream.</summary>
      <returns>The newly created <see cref="T:System.Drawing.Icon" />.</returns>
      <param name="stream">The source stream from which the icon will be created.</param>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>Paints a representative value of the given object to the provided canvas.</summary>
      <param name="e">What to paint and where to paint it. </param>
    </member>
    <member name="T:System.Drawing.Design.ImageEditor">
      <summary>Provides a user interface for selecting an image for a property in a property grid.</summary>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ImageEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.CreateExtensionsString(System.String[],System.String)">
      <summary>Creates a string of file name extensions using the specified array of file extensions and the specified separator.</summary>
      <returns>A string containing the specified file name extensions, each separated by the specified separator.</returns>
      <param name="extensions">The extensions to filter for. </param>
      <param name="sep">The separator to use. </param>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.CreateFilterEntry(System.Drawing.Design.ImageEditor)">
      <summary>Creates a filter entry for a file dialog box's file list.</summary>
      <returns>The new filter entry string.</returns>
      <param name="e">An <see cref="T:System.Drawing.Design.ImageEditor" /> to get the filter entry from.</param>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the specified object value using the edit style provided by the <see cref="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> method.</summary>
      <returns>An <see cref="T:System.Object" /> representing the new value. If the value of the object has not changed, <see cref="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> returns the object that was passed to it.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services can be obtained. </param>
      <param name="value">An <see cref="T:System.Object" /> being edited. </param>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets the editing style of the <see cref="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</summary>
      <returns>One of the <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> values indicating the supported editing style.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetExtensions">
      <summary>Gets the extensions for the file-list filter that this editor initially uses to filter the file list.</summary>
      <returns>A set of file extensions used to filter the file list.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetFileDialogDescription">
      <summary>Gets the description for the default file-list filter provided by this editor.</summary>
      <returns>The description for the default file-list filter.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetImageExtenders">
      <summary>Gets an array of supported image types.</summary>
      <returns>An array of <see cref="T:System.Type" /> representing supported image types.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a value indicating whether this editor supports painting a representation of an object's value.</summary>
      <returns>true if <see cref="M:System.Drawing.Design.ImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)" /> is implemented; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.LoadFromStream(System.IO.Stream)">
      <summary>Loads an image from the specified stream.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> that has been loaded.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the image to load.</param>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>Paints a value indicated by the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs" />.</summary>
      <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs" /> indicating what to paint and where to paint it. </param>
    </member>
    <member name="T:System.Drawing.Design.MetafileEditor">
      <summary>Provides a <see cref="T:System.Drawing.Design.UITypeEditor" /> that can perform default file searching for metafile (.emf) files.</summary>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.MetafileEditor" /> class. </summary>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.GetExtensions">
      <returns>A set of file extensions used to filter the file list.</returns>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.GetFileDialogDescription">
      <returns>The description for the default file-list filter.</returns>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.LoadFromStream(System.IO.Stream)">
      <returns>The <see cref="T:System.Drawing.Image" /> that has been loaded.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the image to load.</param>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItemContainer">
      <summary>Encapsulates a <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.#ctor(System.Drawing.Design.ToolboxItem)">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> class from a <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <param name="item">The <see cref="T:System.Drawing.Design.ToolboxItem" /> for which to create a <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> class from a serialization stream.</summary>
      <param name="info">The serialization information passed in by the serializer when deserializing the <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</param>
      <param name="context">The streaming context passed in by the serializer when deserializing the <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.#ctor(System.Windows.Forms.IDataObject)">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> class from a <see cref="T:System.Windows.Forms.IDataObject" />.</summary>
      <param name="data">A data object that represents a <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> instances are equal.</summary>
      <returns>true if the specified <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> is equal to the current <see cref="T:System.Drawing.Design.ToolboxItemContainer" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> to compare with the current <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.GetFilter(System.Collections.ICollection)">
      <summary>Returns a collection of <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> objects that represent the current filter for the <see cref="T:System.Drawing.Design.ToolboxItem" />.  </summary>
      <returns>A collection of <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> objects. This never returns null.</returns>
      <param name="creators">A collection of <see cref="T:System.Drawing.Design.ToolboxItemCreator" /> objects.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Saves the serialization state for the object.</summary>
      <param name="info">The serialization information passed in by the serializer when serializing this object.</param>
      <param name="context">The streaming context passed in by the serializer when serializing this object.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.GetToolboxItem(System.Collections.ICollection)">
      <summary>Returns the <see cref="T:System.Drawing.Design.ToolboxItem" /> contained in the <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</summary>
      <returns>The <see cref="T:System.Drawing.Design.ToolboxItem" /> contained in the <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</returns>
      <param name="creators">A collection of <see cref="T:System.Drawing.Design.ToolboxItemCreator" /> objects.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItemContainer.IsCreated">
      <summary>Gets a value indicating whether the underlying toolbox item has been deserialized.</summary>
      <returns>true if the underlying toolbox item has been deserialized; otherwise, false.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItemContainer.IsTransient">
      <summary>Gets a value indicating if the <see cref="T:System.Drawing.Design.ToolboxItem" /> contained in the <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> is transient.</summary>
      <returns>true, if the <see cref="T:System.Drawing.Design.ToolboxItem" /> contained in the <see cref="T:System.Drawing.Design.ToolboxItemContainer" /> is marked as transient; otherwise, false.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>For a description of this member, see the <see cref="M:System.Drawing.Design.ToolboxItemContainer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method.</summary>
      <param name="info">The serialization information passed in by the serializer when serializing this object.</param>
      <param name="context">The streaming context passed in by the serializer when serializing this object.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItemContainer.ToolboxData">
      <summary>Gets an <see cref="T:System.Windows.Forms.IDataObject" /> that describes this <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</summary>
      <returns>An <see cref="T:System.Windows.Forms.IDataObject" /> that describes this <see cref="T:System.Drawing.Design.ToolboxItemContainer" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemContainer.UpdateFilter(System.Drawing.Design.ToolboxItem)">
      <summary>Merges the container's filter with the filter from the given item.</summary>
      <param name="item">The source of the filter to merge with the container's filter.</param>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItemCreator">
      <summary>Encapsulates a <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCreator.Create(System.Windows.Forms.IDataObject)">
      <summary>Creates a new <see cref="T:System.Drawing.Design.ToolboxItem" /> from a <see cref="T:System.Windows.Forms.IDataObject" />.</summary>
      <returns>A new instance of the <see cref="T:System.Drawing.Design.ToolboxItem" /> class.</returns>
      <param name="data">A data object that represents a <see cref="T:System.Drawing.Design.ToolboxItem" />.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItemCreator.Format">
      <summary>Gets the Clipboard format that represents the data needed to deserialize a <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>A string representing the Clipboard format.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxService">
      <summary>Provides a default implementation of the <see cref="T:System.Drawing.Design.IToolboxService" /> interface.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxService" /> class. </summary>
    </member>
    <member name="P:System.Drawing.Design.ToolboxService.CategoryNames">
      <summary>Gets a collection of strings depicting available categories of the toolbox.</summary>
      <returns>A collection of category names.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxService.CreateItemContainer(System.Drawing.Design.ToolboxItem,System.ComponentModel.Design.IDesignerHost)">
      <summary>Creates a new toolbox item container from a toolbox item.</summary>
      <returns>A new toolbox item container.</returns>
      <param name="item">The toolbox item for which to create an item container.</param>
      <param name="link">An optional designer host that should be linked to this toolbox item. This parameter can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name=