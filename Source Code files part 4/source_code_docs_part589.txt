 cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child elements of every element and document in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element or document in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains all nodes in the source collection, sorted in document order.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child nodes of every document and element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the child nodes of every document and element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
      <summary>Removes every attribute in the source collection from its parent element.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the source collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Removes every node in the source collection from its parent node.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Linq.LoadOptions">
      <summary>Specifies load options when parsing XML.  </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.None">
      <summary>Does not preserve insignificant white space or load base URI and line information.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.PreserveWhitespace">
      <summary>Preserves insignificant white space while parsing.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetBaseUri">
      <summary>Requests the base URI information from the <see cref="T:System.Xml.XmlReader" />, and makes it available via the <see cref="P:System.Xml.Linq.XObject.BaseUri" /> property.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetLineInfo">
      <summary>Requests the line information from the <see cref="T:System.Xml.XmlReader" /> and makes it available via properties on <see cref="T:System.Xml.Linq.XObject" />.</summary>
    </member>
    <member name="T:System.Xml.Linq.ReaderOptions">
      <summary>Specifies whether to omit duplicate namespaces when loading an <see cref="T:System.Xml.Linq.XDocument" /> with an <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.None">
      <summary>No reader options specified.</summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.OmitDuplicateNamespaces">
      <summary>Omit duplicate namespaces when loading the <see cref="T:System.Xml.Linq.XDocument" />.</summary>
    </member>
    <member name="T:System.Xml.Linq.SaveOptions">
      <summary>Specifies serialization options. </summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.None">
      <summary>Formats (indent) the XML while serializing.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.DisableFormatting">
      <summary>Preserves all insignificant white space while serializing.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces">
      <summary>Removes duplicate namespace declarations. For the duplicate namespace declarations to be removed, both the prefix and the namespace have to match.</summary>
    </member>
    <member name="T:System.Xml.Linq.XAttribute">
      <summary>Represents an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from another <see cref="T:System.Xml.Linq.XAttribute" /> object. </summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XAttribute" /> object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from the specified name and value. </summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the attribute.</param>
      <param name="value">An <see cref="T:System.Object" /> containing the value of the attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> or <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.EmptySequence">
      <summary>Gets an empty collection of attributes.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> containing an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration">
      <summary>Determines if this attribute is a namespace declaration.</summary>
      <returns>true if this attribute is a namespace declaration; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Name">
      <summary>Gets the expanded name of this attribute.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> containing the name of this attribute.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NextAttribute">
      <summary>Gets the next attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> containing the next attribute of the parent element.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XAttribute" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Attribute" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Double" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Double" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.String" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Single" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Single" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.PreviousAttribute">
      <summary>Gets the previous attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> containing the previous attribute of the parent element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.Remove">
      <summary>Removes this attribute from its parent element.</summary>
      <exception cref="T:System.InvalidOperationException">The parent element is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.SetValue(System.Object)">
      <summary>Sets the value of this attribute.</summary>
      <param name="value">The value to assign to this attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.ToString">
      <summary>Converts the current <see cref="T:System.Xml.Linq.XAttribute" /> object to a string representation.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML text representation of an attribute and its value.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Value">
      <summary>Gets or sets the value of this attribute.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of this attribute.</returns>
      <exception cref="T:System.ArgumentNullException">When setting, the <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Linq.XCData">
      <summary>Represents a text node that contains CDATA.  </summary>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. </summary>
      <param name="value">A string that contains the value of the <see cref="T:System.Xml.Linq.XCData" /> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XCData" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XCData.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XCData" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.CDATA" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this CDATA object to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Linq.XComment">
      <summary>Represents an XML comment. </summary>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class with the specified string content. </summary>
      <param name="value">A string that contains the contents of the new <see cref="T:System.Xml.Linq.XComment" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class from an existing comment node. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XComment" /> node to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XComment.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XComment" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Comment" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XComment.Value">
      <summary>Gets or sets the string value of this comment.</summary>
      <returns>A <see cref="T:System.String" /> that contains the string value of this comment.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this comment to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Linq.XContainer">
      <summary>Represents a node that can contain other nodes.</summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object)">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object[])">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object)">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XContainer.CreateWriter">
      <summary>Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.DescendantNodes">
      <summary>Returns a collection of the descendant nodes for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants">
      <summary>Returns a collection of the descendant elements for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)">
      <summary>Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or null.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements">
      <summary>Returns a collection of the child elements of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XContainer.FirstNode">
      <summary>Get the first child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XContainer.LastNode">
      <summary>Get the last child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Nodes">
      <summary>Returns a collection of the child nodes of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.RemoveNodes">
      <summary>Removes the child nodes from this document or element.</summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A content object containing simple content or a collection of content objects that replace the children nodes.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="T:System.Xml.Linq.XDeclaration">
      <summary>Represents an XML declaration. </summary>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class with the specified version, encoding, and standalone status.</summary>
      <param name="version">The version of the XML, usually "1.0".</param>
      <param name="encoding">The encoding for the XML document.</param>
      <param name="standalone">A string containing "yes" or "no" that specifies whether the XML is standalone or requires external entities to be resolved.</param>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class from another <see cref="T:System.Xml.Linq.XDeclaration" /> object. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDeclaration" /> used to initialize this <see cref="T:System.Xml.Linq.XDeclaration" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Encoding">
      <summary>Gets or sets the encoding for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the code page name for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Standalone">
      <summary>Gets or sets the standalone property for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the standalone property for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.ToString">
      <summary>Provides the declaration as a formatted string.</summary>
      <returns>A <see cref="T:System.String" /> that contains the formatted XML string.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Version">
      <summary>Gets or sets the version property for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the version property for this document.</returns>
    </member>
    <member name="T:System.Xml.Linq.XDocument">
      <summary>Represents an XML document. </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified content.</summary>
      <param name="content">A parameter list of content objects to add to this document.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified <see cref="T:System.Xml.Linq.XDeclaration" /> and content.</summary>
      <param name="declaration">An <see cref="T:System.Xml.Linq.XDeclaration" /> for the document.</param>
      <param name="content">The content of the document.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class from an existing <see cref="T:System.Xml.Linq.XDocument" /> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDocument" /> object that will be copied.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Declaration">
      <summary>Gets or sets the XML declaration for this document.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDeclaration" /> that contains the XML declaration for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.DocumentType">
      <summary>Gets the Document Type Definition (DTD) for this document.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XDocumentType" /> that contains the DTD for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> object used to read the data contained in the stream. </returns>
      <param name="stream">The stream containing the XML data.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> object used to read the data contained in the stream.</returns>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file located in the application's XAP package.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XDocument" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file located in the application's XAP package, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XDocument" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies how white space is handled and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />, optionally setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocument" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</returns>
      <param name="text">A string that contains XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</returns>
      <param name="text">A string that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Root">
      <summary>Gets the root element of the XML Tree for this document.</summary>
      <returns>The root <see cref="T:System.Xml.Linq.XElement" /> of the XML tree.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this document to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    </member>
    <member name="T:System.Xml.Linq.XDocumentType">
      <summary>Represents an XML Document Type Definition (DTD).  </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class. </summary>
      <param name="name">A <see cref="T:System.String" /> that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.</param>
      <param name="publicId">A <see cref="T:System.String" /> that contains the public identifier of an external public DTD.</param>
      <param name="systemId">A <see cref="T:System.String" /> that contains the system identifier of an external private DTD.</param>
      <param name="internalSubset">A <see cref="T:System.String" /> that contains the internal subset for an internal DTD.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class from another <see cref="T:System.Xml.Linq.XDocumentType" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XDocumentType" /> object to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.InternalSubset">
      <summary>Gets or sets the internal subset for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the internal subset for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.Name">
      <summary>Gets or sets the name for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the name for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocumentType" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.DocumentType" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.PublicId">
      <summary>Gets or sets the public identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the public identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.SystemId">
      <summary>Gets or sets the system identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the system identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this <see cref="T:System.Xml.Linq.XDocumentType" /> to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    </member>
    <member name="T:System.Xml.Linq.XElement">
      <summary>Represents an XML element.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name. </summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The initial content of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf">
      <summary>Returns a collection of elements that contain this element, and the ancestors of this element. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element. </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
      <summary>Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; null if there is no attribute with the specified name.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes">
      <summary>Returns a collection of attributes of this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
      <summary>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf">
      <summary>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.EmptySequence">
      <summary>Gets an empty collection of elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.FirstAttribute">
      <summary>Gets the first attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetDefaultNamespace">
      <summary>Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
      <summary>Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="prefix">A string that contains the namespace prefix to look up.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
      <summary>Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace prefix.</returns>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasAttributes">
      <summary>Gets a value indicating whether this element as at least one attribute.</summary>
      <returns>true if this element has at least one attribute; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasElements">
      <summary>Gets a value indicating whether this element has at least one child element.</summary>
      <returns>true if this element has at least one child element; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.IsEmpty">
      <summary>Gets a value indicating whether this element contains no content.</summary>
      <returns>true if this element contains no content; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.LastAttribute">
      <summary>Gets the last attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data contained in the stream.</returns>
      <param name="stream">The stream containing the XML data.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data contained in the stream.</returns>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file located in the applications' XAP package.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XElement" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file located in the application's XAP package, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XElement" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Name">
      <summary>Gets the name of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Single" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Double" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Double" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Single" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Guid" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Guid" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
      <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
      <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAll">
      <summary>Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAttributes">
      <summary>Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the child nodes and attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of an attribute, adds an attribute, or removes an attribute. </summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</param>
      <param name="value">The value to assign to the attribute. The attribute is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of a child element, adds a child element, or removes a child element.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</param>
      <param name="value">The value to assign to the child element. The child element is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetValue(System.Object)">
      <summary>Sets the value of this element.</summary>
      <param name="value">The value to assign to this element. The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Gets an XML schema definition that describes the XML representation of this object.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Value">
      <summary>Gets the concatenated text contents of this element.</summary>
      <returns>A <see cref="T:System.String" /> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    </member>
    <member name="T:System.Xml.Linq.XName">
      <summary>Represents a name of an XML element or attribute. </summary>
    </member>
    <member name="M:System.Xml.Linq.XName.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>true if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise false.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</returns>
      <param name="expandedName">A <see cref="T:System.String" /> that contains an expanded XML name in the format {namespace}localname.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String,System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</returns>
      <param name="localName">A local (unqualified) name.</param>
      <param name="namespaceName">An XML namespace.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.LocalName">
      <summary>Gets the local (unqualified) part of the name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.Namespace">
      <summary>Gets the namespace part of the fully qualified name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.NamespaceName">
      <summary>Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
      <summary>Converts a string formatted as an expanded XML name (that is,{namespace}localname) to an <see cref="T:System.Xml.Linq.XName" /> object.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</returns>
      <param name="expandedName">A string that contains an expanded XML name in the format {namespace}localname.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.System#IEquatable{T}#Equals(System.Xml.Linq.XName)">
      <summary>Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>true if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise false.</returns>
      <param name="other">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.ToString">
      <summary>Returns the expanded XML name in the format {namespace}localname.</summary>
      <returns>A <see cref="T:System.String" /> that contains the expanded XML name in the format {namespace}localname.</returns>
    </member>
    <member name="T:System.Xml.Linq.XNamespace">
      <summary>Represents an XML namespace. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</returns>
      <param name="namespaceName">A <see cref="T:System.String" /> that contains a namespace URI.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</returns>
      <param name="localName">A <see cref="T:System.String" /> that contains a local name.</param>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.NamespaceName">
      <summary>Gets the Uniform Resource Identifier (URI) of this namespace.</summary>
      <returns>A <see cref="T:System.String" /> that contains the URI of the namespace.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.None">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
      <summary>Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</returns>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</param>
      <param name="localName">A <see cref="T:System.String" /> that contains the local name.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
      <summary>Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</returns>
      <param name="namespaceName">A <see cref="T:System.String" /> that contains the namespace URI.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.ToString">
      <summary>Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xml">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xmlns">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).</returns>
    </member>
    <member name="T:System.Xml.Linq.XNode">
      <summary>Represents the abstract concept of a node (one of: element, comment, document type, processing instruction, or text node) in the XML tree.  </summary>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors">
      <summary>Returns a collection of the ancestor elements of this node.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.The nodes in the returned collection are in reverse document order.This method uses deferred execution.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative XML document order.</summary>
      <returns>An int containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.</returns>
      <param name="n1">First <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="n2">Second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader">
      <summary>Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)"></member>
    <member name="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes, including the values of all descendant nodes.</summary>
      <returns>true if the nodes are equal; otherwise false.</returns>
      <param name="n1">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="n2">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.DocumentOrderComparer">
      <summary>Gets a comparer that can compare the relative position of two nodes.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> that can compare the relative position of two nodes.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf">
      <summary>Returns a collection of the sibling elements after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf">
      <summary>Returns a collection of the sibling elements before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.EqualityComparer">
      <summary>Gets a comparer that can compare two nodes for value equality.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> that can compare two nodes for value equality.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears after a specified node in terms of document order.</summary>
      <returns>true if this node appears after the specified node; otherwise false.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears before a specified node in terms of document order.</summary>
      <returns>true if this node appears before the specified node; otherwise false.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.NextNode">
      <summary>Gets the next sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode" /> that contains the next sibling node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesAfterSelf">
      <summary>Returns a collection of the sibling nodes after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesBeforeSelf">
      <summary>Returns a collection of the sibling nodes before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.PreviousNode">
      <summary>Gets the previous sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode" /> that contains the previous sibling node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">
      <summary>Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.</exception>
      <exception cref="T:System.Xml.XmlException">The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Remove">
      <summary>Removes this node from its parent.</summary>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">Content that replaces this node.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">A parameter list of the new content.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString">
      <summary>Returns the indented XML for this node.</summary>
      <returns>A <see cref="T:System.String" /> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this node, optionally disabling formatting.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML.</returns>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    </member>
    <member name="T:System.Xml.Linq.XNodeDocumentOrderComparer">
      <summary>Contains functionality to compare nodes for their document order. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative document order.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains 0 if the nodes are equal; -1 if <paramref name="x" /> is before <paramref name="y" />; 1 if <paramref name="x" /> is after <paramref name="y" />.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="T:System.Xml.Linq.XNodeEqualityComparer">
      <summary>Compares nodes to determine whether they are equal. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes.</summary>
      <returns>A <see cref="T:System.Boolean" /> indicating if the nodes are equal.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)">
      <summary>Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNode" /> to hash.</param>
    </member>
    <member name="T:System.Xml.Linq.XObject">
      <summary>Represents a node or an attribute in an XML tree. </summary>
    </member>
    <member name="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
      <summary>Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <param name="annotation">An <see cref="T:System.Object" /> that contains the annotation to add.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation``1">
      <summary>Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />. </summary>
      <returns>The first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
      <typeparam name="T">The type of the annotation to retrieve.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation(System.Type)">
      <summary>Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the annotation to retrieve.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations``1">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <typeparam name="T">The type of the annotations to retrieve.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations(System.Type)">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the annotations to retrieve.</param>
    </member>
    <member name="P:System.Xml.Linq.XObject.BaseUri">
      <summary>Gets the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changed">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants have changed.</summary>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changing">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants are about to change.</summary>
    </member>
    <member name="P:System.Xml.Linq.XObject.Document">
      <summary>Gets the <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />. </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.NodeType">
      <summary>Gets the node type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The node type for this <see cref="T:System.Xml.Linq.XObject" />. </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.Parent">
      <summary>Gets the parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <typeparam name="T">The type of annotations to remove.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> of annotations to remove.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
      <summary>Gets a value indicating whether or not this <see cref="T:System.Xml.Linq.XObject" /> has line information.</summary>
      <returns>true if the <see cref="T:System.Xml.Linq.XObject" /> has line information, otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
      <summary>Gets the line number that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the line number reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
      <summary>Gets the line position that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the line position reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="T:System.Xml.Linq.XObjectChange">
      <summary>Specifies the event type when an event is raised for an <see cref="T:System.Xml.Linq.XObject" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Add">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be added to an <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Remove">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be removed from an <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Name">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be renamed.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Value">
      <summary>The value of an <see cref="T:System.Xml.Linq.XObject" /> has been or will be changed. In addition, a change in the serialization of an empty element (either from an empty tag to start/end tag pair or vice versa) raises this event.</summary>
    </member>
    <member name="T:System.Xml.Linq.XObjectChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Linq.XObject.Changing" /> and <see cref="E:System.Xml.Linq.XObject.Changed" /> events.</summary>
    </member>
    <member name="M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XObjectChangeEventArgs" /> class. </summary>
      <param name="objectChange">An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the event arguments for LINQ to XML events.</param>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Add">
      <summary>Event argument for an <see cref="F:System.Xml.Linq.XObjectChange.Add" /> change event.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Name">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Name" /> change event.</summary>
    </member>
    <member name="P:System.Xml.Linq.XObjectChangeEventArgs.ObjectChange">
      <summary>Gets the type of change.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the type of change.</returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Remove">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Remove" /> change event.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Value">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Value" /> change event.</summary>
    </member>
    <member name="T:System.Xml.Linq.XProcessingInstruction">
      <summary>Represents an XML processing instruction. </summary>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. </summary>
      <param name="target">A <see cref="T:System.String" /> containing the target application for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.</param>
      <param name="data">The string data for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> or <paramref name="data" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target" /> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XProcessingInstruction" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Data">
      <summary>Gets or sets the string value of this processing instruction.</summary>
      <returns>A <see cref="T:System.String" /> that contains the string value of this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XProcessingInstruction" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Target">
      <summary>Gets or sets a string containing the target application for this processing instruction.</summary>
      <returns>A <see cref="T:System.String" /> containing the target application for this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target" /> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this processing instruction to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write this processing instruction to.</param>
    </member>
    <member name="T:System.Xml.Linq.XStreamingElement">
      <summary>Represents elements in an XML tree that supports deferred streaming output.</summary>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="P:System.Xml.Linq.XStreamingElement.Name">
      <summary>Gets or sets the name of this streaming element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this streaming element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XStreamingElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString">
      <summary>Returns the formatted (indented) XML for this streaming element.</summary>
      <returns>A <see cref="T:System.String" /> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this streaming element, optionally disabling formatting.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML.</returns>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    </member>
    <member name="T:System.Xml.Linq.XText">
      <summary>Represents a text node.  </summary>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class. </summary>
      <param name="value">The <see cref="T:System.String" /> that contains the value of the <see cref="T:System.Xml.Linq.XText" /> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class from another <see cref="T:System.Xml.Linq.XText" /> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XText" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XText.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XText" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Text" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XText.Value">
      <summary>Gets or sets the value of this node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Samples\Source\Controls.Samples\SourceAnalysisViolations.xml ===
<SourceAnalysisViolations />
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\SDK Help\en-US\Changes.docx ===
[Content_Types].xml  (7`D, _rels/.rels  word/_rels/document.xml.rels  d|}5z word/document.xml ;)RCR W?H?J= ~'"(1(R")R" 4o3\} N[{{g L,s XBd 7QrOV }e<Eh 1YYYfU=0M (bm'L 9JFv^9 QYD;n ?g#]- &XSaz tZ#z+ P 0qP *rRxQ159 [c?tW %+<gG PO#Xc Ywm>7 hf#T$( ExLAz 9n(o] icJ#o )L{`M AOP&S XES\( u$PL]3 #><T5 p >Ho 9;Hn/ ]a;M! xk0tt hx8UFr({  ?K6.x Y|`>A zC-Kum FF?U3O= \j<p}- Z1G&^ eI'k| %5:k` g,=n~ MK<48; *t!0;'= %dodQ Ak.VSV RzZKFJ }m0u] ^o*-7T Nt}}: a7iE' D~#D( J2mI0( noDt' i*o"fIK#L/Ga %<@F?_ W;%$\-J EWp>Q FRWTR7 MwkZ"P EVUFe lidK. x/pB5 `Oxn1 :3qV\1 !A,5* n*K7a 5R)(G M %PX Ypu}C t">t*3  ~s A 3$4s- Mh]\y !EbaY7? _$Q5XUV5^UT72 QNVBx$ O^/G/^ gD^]$  b>kL #ylYn :m-s/Z *UU)Oz n4lAw^ L/2k@Zz :h#G"Zu vQ%?U 7[aU? ;;;dq j}3ZY XqOC| oy>J) iawZx 'f>6R ")M3k |BACe -)'_w U^k\8 l]=J)6 (Of`? ~,03; Jp.d%o #s-RS XL;IR66 +A0j) |uTql<- #3?Ipdw 2ZXtVBc{ D5H-i V~2W7 bnLa.1 Z7POP Fy@e0 ;~.42 V7lJEZ n)RQ" &t-R_L."$ 8>;;& 4JN&p Oq'6M jAZv> `PL'G B!$aV? emC]D _gV ):FD0 SohM| Z[! R ;J%dI |:c^H H:#!_s +A +2An c#(0Hv *J{Af E5% w  rv!! ;>>~s goY ( u8xpFv G0E!8 BZ84@ 9&-pL ',r[< /__c: y(Ky\~ Om9+QI J+u@l $-6Qo C!h`[ :h:_@ %sqab t-a-6v `Q4Y[ rueQW ov{P# OJ@=>  e^i& u@Q:+ bdR|* bK=B& S 7Cif8 t}3[7:r 74x|qp! n,9m1 0EH)> 7/6lbD .Nwlc 9~5:; F'6#A 0=o7$n WSY\J5 P~&ZE9 *q!hF 73lm- w6&jC= BJ~g~ U?TbbG F>U N ]7(;z XDXcX- eK4gFc LMO6q vCISui a:lZh y""S"GC ]FiHkm }X`V~ EWOQ~ o$k6!d kIAZS4 mU*4z >QYkQ C4}18 Y2OfXp hi-)+\ UFC<i&A 9McP%%P E$BSFp word/media/image2.png ^IDATx^ MWJyy @T `# |\A'7q* T<IC[ Q@54AR$ :{vjZQ nI5tE D2_g* Y^wp4 +^xDa P0deu@iJ _$V*= $?VBX `Gzl| *p[)vNb y^gKo 4~Zh~ GJKU' ^%?y&3s-  -^"ca !Dw~, IML|1 yLFE/ b@CWU wL=Xs  K1_%f4 TB!Ky  K1'#!K I:<-`S wV]_8 ".U>] c@EvB/%h` word/media/image3.jpeg  $.' ",# (7),01444 '9=82<.342 !22222222222222222222222222222222222222222222222222 %&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz &'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz ys<WE dkQY? 1~OKY EI`r1Y m*tap O@mcP}& i$iV%U b,3.wa Ie<6ZQ DH`H# zCjp. #<f}{E 03^ug BV4.B heF9Y[j kd}7L9 xX,0j JdF"I d~tg' qou0{m y2c>kn"B0:* fF)"n R,WsD Y!VpC -9#i4 -wSxKF r00YI i6Iie 7P][I AKRPR1 <Ecu} [;m~D m|Kqy P+*}SZ ]'Y]c GUw2H kri!_ ;QGj*J {;MRx ?P{;[ J7.[j UPg>Wl) N~aS? ^%M$X lW99` iumhiIq 3lR@$. m!Y06 u+{MDj m-<K= 4uWs$ Z<ggZ ?*oq#{U ^Gk<q hW0H#i DyRkY D$dnHY O7Y=,, 5ZtQp word/media/image1.png IDATx^ T*B0a ~,Es=l@ c)Qg| bq==gP :iokg A,%QnI9 /.U$w +J~J >MwTU t.3;ep R\{nw mkguM F~*OQ fyOfg n#?], `5da(dd) y|~f6 J!/u: T*rHE7 ?-*<J w 01p word/media/image4.gifGIF89a        $$$$$$($(((((,,,,0000044444848888888<8<<<<<<<@@@@@@D@DDDDDDDHHHLHLLLLLLLPPPUPUUPUYUUUUUYUY]YY]Y]a]]]]]a]aeaaaaaeeeieimimqmmmmmqmquqqqqquqqyuuyuu}uy}yyyy} }}}}} B"N/CX& \atoj ]!<c7 4t$84Sk Sc534 c[l#8_pC8C C~SLk M>'o$ XHiCz ^rr6D F_~A33UerBi Vf5CHU aMe>> Fg3'>0Vh Q\KpX hB2&i :<H4E8 GPk!R VW$I)ru aJ3P0U V_4$' +R5#a gl i` <m-Pp ]P\5@ <PHcGK ^EYFB ey.I!V Lc Le -$0I? G)pNQ( Tic;| |be&)e }BHEJR _$u(. -QW5,yM |J#e3 (#Fv[ |4{+ c yMhTx8a \8odE flLmJ )XJ>2 ~d,!` word/theme/theme1.xml w toc'v 3Vq%'#q :\TZaG IqbJ#x T[XF64 word/settings.xml nt'[` p1]n# s\6f3he O QeU[ customXml/itemProps2.xml  HF*%!CR dhom= docProps/custom.xml  customXml/item2.xml  R. +7n *Bnb+f customXml/itemProps1.xml  PB3wK customXml/_rels/item1.xml.rels  customXml/_rels/item2.xml.rels  customXml/_rels/item3.xml.rels  :]rM~l docProps/app.xml  bP8(rh Cum{' customXml/item1.xml  53<<sf8 Js)fA >]_13eR {%gJj *I`fr 86j%ha G6)4O word/fontTable.xml +"RRHA XO2)* UUN|_'9 4yFGWA customXml/item3.xml  customXml/itemProps3.xml  {{}N%K word/numbering.xml I(b6fm e'/<!^ 6m0g\P nP14x 58QP)d &Yr\h5.Xs gSEY/ !lqm,S S}e)+n W:qFS word/styles.xml _o>g1 i0YqG 4/n{ o :I%`y+ -2G+k h*8[^ qUeu5 NN.U6 gbO}:XVf U1Rw_! word/webSettings.xml ^0M!5 *gH0" !X~(ty )X]:X docProps/core.xml  -ts:I phQ\^d ]q@E&8 [Content_Types].xmlPK _rels/.relsPK word/_rels/document.xml.relsPK word/document.xmlPK word/media/image2.pngPK word/media/image3.jpegPK word/media/image1.pngPK word/media/image4.gifPK word/theme/theme1.xmlPK word/settings.xmlPK customXml/itemProps2.xmlPK docProps/custom.xmlPK customXml/item2.xmlPK customXml/itemProps1.xmlPK customXml/_rels/item1.xml.relsPK customXml/_rels/item2.xml.relsPK customXml/_rels/item3.xml.relsPK docProps/app.xmlPK customXml/item1.xmlPK word/fontTable.xmlPK customXml/item3.xmlPK customXml/itemProps3.xmlPK word/numbering.xmlPK word/styles.xmlPK word/webSettings.xmlPK docProps/core.xmlPK
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Samples\Source\Controls.Samples\My Project\AppManifest.xml ===
﻿<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->
<Deployment
  xmlns="http://schemas.microsoft.com/client/2007/deployment"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Deployment.Parts />
</Deployment>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Samples\Source\Controls.Samples\Properties\AppManifest.xml ===
﻿<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->
<Deployment
  xmlns="http://schemas.microsoft.com/client/2007/deployment"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Deployment.Parts />
</Deployment>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Samples\Source\Controls.Samples\TreeMap\Data\NHLData.xml ===
﻿<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
// The statistical data used for this demonstration is (c) Copyright 2008 from http://www.hockeydb.com.
-->

<DataSet>
<NhlNode xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Rank>0</Rank>
  <Name>The NHL</Name>
  <Points>2582</Points>
  <Wins>1078</Wins>
  <Losses>956</Losses>
  <GoalsFor>6782</GoalsFor>
  <GoalsAgainst>6782</GoalsAgainst>
  <PenaltyMinutes>37407</PenaltyMinutes>
  <Children>
    <NhlNode>
      <Rank>1</Rank>
      <Name>Western Conference</Name>
      <Points>1327</Points>
      <Wins>548</Wins>
      <Losses>451</Losses>
      <GoalsFor>3317</GoalsFor>
      <GoalsAgainst>3238</GoalsAgainst>
      <PenaltyMinutes>18274</PenaltyMinutes>
      <Children>
        <NhlNode>
          <Rank>1</Rank>
          <Name>Pacific</Name>
          <Points>449</Points>
          <Wins>186</Wins>
          <Losses>147</Losses>
          <GoalsFor>1112</GoalsFor>
          <GoalsAgainst>1064</GoalsAgainst>
          <PenaltyMinutes>5964</PenaltyMinutes>
          <Children>
            <NhlNode>
              <Rank>5</Rank>
              <Name>Dallas Stars</Name>
              <Points>106</Points>
              <Wins>48</Wins>
              <Losses>24</Losses>
              <GoalsFor>241</GoalsFor>
              <GoalsAgainst>187</GoalsAgainst>
              <PenaltyMinutes>959</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>11</Rank>
              <Name>San Jose Sharks</Name>
              <Points>95</Points>
              <Wins>40</Wins>
              <Losses>27</Losses>
              <GoalsFor>217</GoalsFor>
              <GoalsAgainst>192</GoalsAgainst>
              <PenaltyMinutes>1249</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>13</Rank>
              <Name>Los Angeles Kings</Name>
              <Points>92</Points>
              <Wins>38</Wins>
              <Losses>28</Losses>
              <GoalsFor>252</GoalsFor>
              <GoalsAgainst>228</GoalsAgainst>
              <PenaltyMinutes>1348</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>16</Rank>
              <Name>Phoenix Coyotes</Name>
              <Points>90</Points>
              <Wins>35</Wins>
              <Losses>27</Losses>
              <GoalsFor>214</GoalsFor>
              <GoalsAgainst>212</GoalsAgainst>
              <PenaltyMinutes>1154</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>26</Rank>
              <Name>Mighty Ducks of Anaheim</Name>
              <Points>66</Points>
              <Wins>25</Wins>
              <Losses>41</Losses>
              <GoalsFor>188</GoalsFor>
              <GoalsAgainst>245</GoalsAgainst>
              <PenaltyMinutes>1254</PenaltyMinutes>
              <Children />
            </NhlNode>
          </Children>
        </NhlNode>
        <NhlNode>
          <Rank>3</Rank>
          <Name>Central</Name>
          <Points>436</Points>
          <Wins>183</Wins>
          <Losses>157</Losses>
          <GoalsFor>1088</GoalsFor>
          <GoalsAgainst>1076</GoalsAgainst>
          <PenaltyMinutes>5899</PenaltyMinutes>
          <Children>
            <NhlNode>
              <Rank>2</Rank>
              <Name>Detroit Red Wings</Name>
              <Points>111</Points>
              <Wins>49</Wins>
              <Losses>20</Losses>
              <GoalsFor>253</GoalsFor>
              <GoalsAgainst>202</GoalsAgainst>
              <PenaltyMinutes>1053</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>6</Rank>
              <Name>St. Louis Blues</Name>
              <Points>103</Points>
              <Wins>43</Wins>
              <Losses>22</Losses>
              <GoalsFor>249</GoalsFor>
              <GoalsAgainst>195</GoalsAgainst>
              <PenaltyMinutes>1343</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>19</Rank>
              <Name>Nashville Predators</Name>
              <Points>80</Points>
              <Wins>34</Wins>
              <Losses>36</Losses>
              <GoalsFor>186</GoalsFor>
              <GoalsAgainst>200</GoalsAgainst>
              <PenaltyMinutes>1071</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>22</Rank>
              <Name>Chicago Blackhawks</Name>
              <Points>71</Points>
              <Wins>29</Wins>
              <Losses>40</Losses>
              <GoalsFor>210</GoalsFor>
              <GoalsAgainst>246</GoalsAgainst>
              <PenaltyMinutes>1234</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>23</Rank>
              <Name>Columbus Blue Jackets</Name>
              <Points>71</Points>
              <Wins>28</Wins>
              <Losses>39</Losses>
              <GoalsFor>190</GoalsFor>
              <GoalsAgainst>233</GoalsAgainst>
              <PenaltyMinutes>1198</PenaltyMinutes>
              <Children />
            </NhlNode>
          </Children>
        </NhlNode>
        <NhlNode>
          <Rank>4</Rank>
          <Name>Northwest</Name>
          <Points>442</Points>
          <Wins>179</Wins>
          <Losses>147</Losses>
          <GoalsFor>1117</GoalsFor>
          <GoalsAgainst>1098</GoalsAgainst>
          <PenaltyMinutes>6411</PenaltyMinutes>
          <Children>
            <NhlNode>
              <Rank>1</Rank>
              <Name>Colorado Avalanche</Name>
              <Points>118</Points>
              <Wins>52</Wins>
              <Losses>16</Losses>
              <GoalsFor>270</GoalsFor>
              <GoalsAgainst>192</GoalsAgainst>
              <PenaltyMinutes>1007</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>12</Rank>
              <Name>Edmonton Oilers</Name>
              <Points>93</Points>
              <Wins>39</Wins>
              <Losses>28</Losses>
              <GoalsFor>243</GoalsFor>
              <GoalsAgainst>222</GoalsAgainst>
              <PenaltyMinutes>1267</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>15</Rank>
              <Name>Vancouver Canucks</Name>
              <Points>90</Points>
              <Wins>36</Wins>
              <Losses>28</Losses>
              <GoalsFor>239</GoalsFor>
              <GoalsAgainst>238</GoalsAgainst>
              <PenaltyMinutes>1342</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>20</Rank>
              <Name>Calgary Flames</Name>
              <Points>73</Points>
              <Wins>27</Wins>
              <Losses>36</Losses>
              <GoalsFor>197</GoalsFor>
              <GoalsAgainst>236</GoalsAgainst>
              <PenaltyMinutes>1586</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>25</Rank>
              <Name>Minnesota Wild</Name>
              <Points>68</Points>
              <Wins>25</Wins>
              <Losses>39</Losses>
              <GoalsFor>168</GoalsFor>
              <GoalsAgainst>210</GoalsAgainst>
              <PenaltyMinutes>1209</PenaltyMinutes>
              <Children />
            </NhlNode>
          </Children>
        </NhlNode>
      </Children>
    </NhlNode>
    <NhlNode>
      <Rank>2</Rank>
      <Name>Eastern Conference</Name>
      <Points>1255</Points>
      <Wins>530</Wins>
      <Losses>505</Losses>
      <GoalsFor>3465</GoalsFor>
      <GoalsAgainst>3544</GoalsAgainst>
      <PenaltyMinutes>19133</PenaltyMinutes>
      <Children>
        <NhlNode>
          <Rank>2</Rank>
          <Name>Atlantic</Name>
          <Points>431</Points>
          <Wins>187</Wins>
          <Losses>166</Losses>
          <GoalsFor>1251</GoalsFor>
          <GoalsAgainst>1216</GoalsAgainst>
          <PenaltyMinutes>6508</PenaltyMinutes>
          <Children>
            <NhlNode>
              <Rank>3</Rank>
              <Name>New Jersey Devils</Name>
              <Points>111</Points>
              <Wins>48</Wins>
              <Losses>19</Losses>
              <GoalsFor>295</GoalsFor>
              <GoalsAgainst>195</GoalsAgainst>
              <PenaltyMinutes>1010</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>7</Rank>
              <Name>Philadelphia Flyers</Name>
              <Points>100</Points>
              <Wins>43</Wins>
              <Losses>25</Losses>
              <GoalsFor>240</GoalsFor>
              <GoalsAgainst>207</GoalsAgainst>
              <PenaltyMinutes>1242</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>9</Rank>
              <Name>Pittsburgh Penguins</Name>
              <Points>96</Points>
              <Wins>42</Wins>
              <Losses>28</Losses>
              <GoalsFor>281</GoalsFor>
              <GoalsAgainst>256</GoalsAgainst>
              <PenaltyMinutes>1248</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>21</Rank>
              <Name>New York Rangers</Name>
              <Points>72</Points>
              <Wins>33</Wins>
              <Losses>43</Losses>
              <GoalsFor>250</GoalsFor>
              <GoalsAgainst>290</GoalsAgainst>
              <PenaltyMinutes>1753</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>30</Rank>
              <Name>New York Islanders</Name>
              <Points>52</Points>
              <Wins>21</Wins>
              <Losses>51</Losses>
              <GoalsFor>185</GoalsFor>
              <GoalsAgainst>268</GoalsAgainst>
              <PenaltyMinutes>1255</PenaltyMinutes>
              <Children />
            </NhlNode>
          </Children>
        </NhlNode>
        <NhlNode>
          <Rank>5</Rank>
          <Name>Northeast</Name>
          <Points>455</Points>
          <Wins>195</Wins>
          <Losses>150</Losses>
          <GoalsFor>1157</GoalsFor>
          <GoalsAgainst>1077</GoalsAgainst>
          <PenaltyMinutes>6204</PenaltyMinutes>
          <Children>
            <NhlNode>
              <Rank>4</Rank>
              <Name>Ottawa Senators</Name>
              <Points>109</Points>
              <Wins>48</Wins>
              <Losses>21</Losses>
              <GoalsFor>274</GoalsFor>
              <GoalsAgainst>205</GoalsAgainst>
              <PenaltyMinutes>1347</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>8</Rank>
              <Name>Buffalo Sabres</Name>
              <Points>98</Points>
              <Wins>46</Wins>
              <Losses>30</Losses>
              <GoalsFor>218</GoalsFor>
              <GoalsAgainst>184</GoalsAgainst>
              <PenaltyMinutes>1217</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>14</Rank>
              <Name>Toronto Maple Leafs</Name>
              <Points>90</Points>
              <Wins>37</Wins>
              <Losses>29</Losses>
              <GoalsFor>232</GoalsFor>
              <GoalsAgainst>207</GoalsAgainst>
              <PenaltyMinutes>1212</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>18</Rank>
              <Name>Boston Bruins</Name>
              <Points>88</Points>
              <Wins>36</Wins>
              <Losses>30</Losses>
              <GoalsFor>227</GoalsFor>
              <GoalsAgainst>249</GoalsAgainst>
              <PenaltyMinutes>1454</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>24</Rank>
              <Name>Montreal Canadiens</Name>
              <Points>70</Points>
              <Wins>28</Wins>
              <Losses>40</Losses>
              <GoalsFor>206</GoalsFor>
              <GoalsAgainst>232</GoalsAgainst>
              <PenaltyMinutes>974</PenaltyMinutes>
              <Children />
            </NhlNode>
          </Children>
        </NhlNode>
        <NhlNode>
          <Rank>6</Rank>
          <Name>Southeast</Name>
          <Points>369</Points>
          <Wins>148</Wins>
          <Losses>189</Losses>
          <GoalsFor>1057</GoalsFor>
          <GoalsAgainst>1251</GoalsAgainst>
          <PenaltyMinutes>6421</PenaltyMinutes>
          <Children>
            <NhlNode>
              <Rank>10</Rank>
              <Name>Washington Capitals</Name>
              <Points>96</Points>
              <Wins>41</Wins>
              <Losses>27</Losses>
              <GoalsFor>233</GoalsFor>
              <GoalsAgainst>211</GoalsAgainst>
              <PenaltyMinutes>1043</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>17</Rank>
              <Name>Carolina Hurricanes</Name>
              <Points>88</Points>
              <Wins>38</Wins>
              <Losses>32</Losses>
              <GoalsFor>212</GoalsFor>
              <GoalsAgainst>225</GoalsAgainst>
              <PenaltyMinutes>1022</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>27</Rank>
              <Name>Florida Panthers</Name>
              <Points>66</Points>
              <Wins>22</Wins>
              <Losses>38</Losses>
              <GoalsFor>200</GoalsFor>
              <GoalsAgainst>246</GoalsAgainst>
              <PenaltyMinutes>1994</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>28</Rank>
              <Name>Atlanta Thrashers</Name>
              <Points>60</Points>
              <Wins>23</Wins>
              <Losses>45</Losses>
              <GoalsFor>211</GoalsFor>
              <GoalsAgainst>289</GoalsAgainst>
              <PenaltyMinutes>1290</PenaltyMinutes>
              <Children />
            </NhlNode>
            <NhlNode>
              <Rank>29</Rank>
              <Name>Tampa Bay Lightning</Name>
              <Points>59</Points>
              <Wins>24</Wins>
              <Losses>47</Losses>
              <GoalsFor>201</GoalsFor>
              <GoalsAgainst>280</GoalsAgainst>
              <PenaltyMinutes>1072</PenaltyMinutes>
              <Children />
            </NhlNode>
          </Children>
        </NhlNode>
      </Children>
    </NhlNode>
  </Children>
</NhlNode>
</DataSet>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Jul09\EULA.rtf ===
{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset0 Calibri;}} {\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\fs36 Microsoft Public License (Ms-PL)\f1\fs22\par \f0 This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.\par \b\fs28 1. Definitions\b0\fs22\par The terms \ldblquote reproduce,\rdblquote  \ldblquote reproduction,\rdblquote  \ldblquote derivative works,\rdblquote  and \ldblquote distribution\rdblquote  have the same meaning here as under U.S. copyright law. A \ldblquote contribution\rdblquote  is the original software, or any additions or changes to the software. A \ldblquote contributor\rdblquote  is any person that distributes its contribution under this license. \ldblquote Licensed patents\rdblquote  are a contributor\rquote s patent claims that read directly on its contribution. \par \b\fs28 2. Grant of Rights\b0\fs22\par (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.\par (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.\par \b\fs28 3. Conditions and Limitations\b0\fs22\par (A) No Trademark License- This license does not grant you rights to use any contributors\rquote  name, logo, or trademarks.\par (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.\par (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.\par (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.\par (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees, or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\f1\par
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Jul09\Bin\System.Windows.Controls.Data.DataForm.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Data.DataForm.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Common.CommonResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Common.CommonResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Common.CommonResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Common.CommonResources.InvalidPropertyName">
            <summary>
              Looks up a localized string similar to The property name &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Common.Extensions">
            <summary>
            Utility class for operations.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Common.TypeHelper">
            <summary>
            Utility class for Type related operations
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Common.TypeHelper.InvokePath(System.Object,System.String)">
            <summary>
            Helper for SortList to handle nested properties (e.g. Address.Street)
            </summary>
            <param name="item">parent object</param>
            <param name="propertyPath">property names path</param>
            <returns>child object</returns>
        </member>
        <member name="M:System.Windows.Controls.Common.TypeHelper.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Returns the PropertyInfo corresponding to the provided propertyPath. The propertyPath can be a dotted
            path where each section is a public property name. Only public instance properties are searched for.
            </summary>
            <param name="type">The root type.</param>
            <param name="propertyPath">The property path.</param>
            <returns>The found PropertyInfo or null otherwise</returns>
        </member>
        <member name="M:System.Windows.Controls.Common.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The type for which to return the name.</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="M:System.Windows.Controls.Common.TypeHelper.IsEditable(System.Type)">
            <summary>
            Gets whether or not a type is editable by default.
            </summary>
            <param name="type">The type in question.</param>
            <returns>Whether or not the type is editable by default.</returns>
        </member>
        <member name="M:System.Windows.Controls.Common.TypeHelper.TypeIsPrimitive(System.Type)">
            <summary>
            Returns whether or not the type is a primitive type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Whether or not the type is a primitive type.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataField">
            <summary>
            Contains a control and generates labels and descriptions for it.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataField.ContentProperty">
            <summary>
            Identifies the Content property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Content property changed handler.
            </summary>
            <param name="d">Field that changed its Content value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.DescriptionProperty">
            <summary>
            Identifies the DescriptionViewerPosition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDescriptionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Description property changed handler.
            </summary>
            <param name="d">Field that changed its Description value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.DescriptionViewerPositionProperty">
            <summary>
            Identifies the DescriptionViewerPosition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDescriptionViewerPositionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DescriptionViewerPosition property changed handler.
            </summary>
            <param name="d">Field that changed its DescriptionViewerPosition value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.DescriptionViewerStyleProperty">
            <summary>
            Identifies the DescriptionViewerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDescriptionViewerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DescriptionViewerStyle property changed handler.
            </summary>
            <param name="d">Field that changed its DescriptionViewerStyle value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.DescriptionViewerVisibilityProperty">
            <summary>
            Identifies the DescriptionViewerVisibility dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnLabelPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Label property changed handler.
            </summary>
            <param name="d">Field that changed its Label value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.LabelPositionProperty">
            <summary>
            Identifies the LabelPosition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnLabelPositionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LabelPosition property changed handler.
            </summary>
            <param name="d">Field that changed its LabelPosition value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.LabelStyleProperty">
            <summary>
            Identifies the LabelStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnLabelStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LabelStyle property changed handler.
            </summary>
            <param name="d">Field that changed its LabelStyle value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.LabelVisibilityProperty">
            <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField.IsFieldGroupProperty">
            <summary>
            Identifies the IsFieldGroup attached property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.GetIsFieldGroup(System.Windows.Controls.Panel)">
            <summary>
            Gets the IsFieldGroup attached property.
            </summary>
            <param name="target">The target panel.</param>
            <returns>Whether the panel is a field group.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataField.SetIsFieldGroup(System.Windows.Controls.Panel,System.Boolean)">
            <summary>
            Sets the IsFieldGroup attached property.
            </summary>
            <param name="target">The target panel.</param>
            <param name="isFieldGroup">Whether or not this panel should be a field group.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnIsReadOnlyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnly property changed handler.
            </summary>
            <param name="d">Field that changed its IsReadOnly value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.IsRequiredProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnIsRequiredPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsRequired property changed handler.
            </summary>
            <param name="d">Field that changed its IsRequired value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.ModeProperty">
            <summary>
            Identifies the Mode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnly property changed handler.
            </summary>
            <param name="d">Field that changed its IsReadOnly value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.PropertyPathProperty">
            <summary>
            Identifies the PropertyPath dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnPropertyPathPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PropertyPath property changed handler.
            </summary>
            <param name="d">Field that changed its PropertyPath value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.GroupedFieldListProperty">
            <summary>
            Identifies the FieldList attached property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField.DataFormDescriptionViewerPositionProperty">
            <summary>
            Identifies the DataFormDescriptionViewerPosition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDataFormDescriptionViewerPositionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DataFormDescriptionViewerPosition property changed handler.
            </summary>
            <param name="d">Field that changed its DataFormDescriptionViewerPosition value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.DataFormLabelPositionProperty">
            <summary>
            Identifies the DataFormLabelPosition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDataFormLabelPositionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DataFormLabelPosition property changed handler.
            </summary>
            <param name="d">Field that changed its DataFormLabelPosition value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField.DataFormModeProperty">
            <summary>
            Identifies the DataFormMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDataFormModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DataFormLabelPosition property changed handler.
            </summary>
            <param name="d">Field that changed its DataFormLabelPosition value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataField._boundProperty">
            <summary>
            Holds the bound property on either the root control in the field or
            via the PropertyPath property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._contentControl">
            <summary>
            Private accessor to the main content control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._ignoreApplyTemplate">
            <summary>
            Holds a value indicating whether or not to ignore a call to ApplyTemplate.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._isReadOnlyOverridden">
            <summary>
            Holds a value indicating whether or not IsReadOnly has been set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._isRequiredOverridden">
            <summary>
            Holds a value indicating whether or not IsRequired has been set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._layoutPanel">
            <summary>
            Holds the layout panel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._parentDataForm">
            <summary>
            Holds the parent DataForm that was found.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._templateApplied">
            <summary>
            Holds a value indicating whether or not the template has been applied.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataField._lostFocusFired">
            <summary>
            Holds whether or not lost focus has been fired since
            TextBox validation on text changed began.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.#ctor">
            <summary>
            Constructs a new instance of Field.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnApplyTemplate">
            <summary>
            Applies the template for this field.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.Validate">
            <summary>
            Validates this field.
            </summary>
            <returns>Whether or not the field is valid.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataField.DetachFieldFromLayoutPanel">
            <summary>
            Detaches the field from its parent layout panel.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.RemoveBindingsFromParentDataForm">
            <summary>
            Removes all references of this DataField from its parent DataForm, if one exists.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.AlignDescriptionColumns">
            <summary>
            Aligns the grouped description columns.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.AlignLabelColumns">
            <summary>
            Aligns the grouped label columns.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.AttachFieldToLayoutPanel">
            <summary>
            Attaches the field to its parent layout panel.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.GenerateUI">
            <summary>
            Generates the UI for this field.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.GetAlignmentGroup">
            <summary>
            Retrieves the list of fields associated with this field's alignment group.
            </summary>
            <returns>The list of fields associated with this field's alignment group.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataField.GetPropertyInfo">
            <summary>
            Gets the property info for the binding.
            </summary>
            <returns>The property info.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataField.GetLayoutPanel">
            <summary>
            Gets the panel to be used for layout.
            </summary>
            <returns>The panel to be used for layout.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataField.GetParentDataForm">
            <summary>
            Gets the parent DataForm for this DataField.
            </summary>
            <returns>The parent DataForm.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnContentLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where an element has loaded.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDataFieldLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where the DataField has loaded.
            </summary>
            <param name="sender">The DataField.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnDescriptionSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the case where the size of a description has changed.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnLabelMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the case where the left mouse button went down with the cursor over a label.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnLabelSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the case where the size of a label has changed.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnTextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where a text box has lost focus.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.OnTextBoxTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the case where a text box's text changed.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.RemoveDescriptionColumnAlignment">
            <summary>
            Removes the alignment of the grouped description columns.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.RemoveLabelColumnAlignment">
            <summary>
            Removes the alignment of the grouped label columns.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.SetContentReadOnlyState(System.Boolean)">
            <summary>
            Sets the read-only state of the content.
            </summary>
            <param name="isReadOnly">Whether the content should be read-only.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.SetDescriptionContent">
            <summary>
            Sets the description content.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.SetIsReadOnlyIfNotOverridden">
            <summary>
            Sets the value of IsReadOnlyProperty if it has not been overridden by the developer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.SetIsRequiredIfNotOverridden">
            <summary>
            Sets the value of IsRequiredProperty if it has not been overridden by the developer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.SetLabelContent">
            <summary>
            Sets the label content.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataField.SetBindingsFromParentDataForm(System.Windows.Controls.DataForm)">
            <summary>
            Sets references on this DataField to its parent DataForm.
            </summary>
            <param name="parentDataForm">The parent DataForm.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.UpdateBindingsOnElement(System.Windows.FrameworkElement)">
            <summary>
            Finds any bindings on an element and updates the ones in which Mode is TwoWay
            to set the two Boolean properties to true.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:System.Windows.Controls.DataField.UpdateStates">
            <summary>
            Updates the states on the DataField.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.Content">
            <summary>
            Gets or sets the content of the field.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.DataField.Description">
            <summary>
            Gets or sets the text displayed in the description viewer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DescriptionViewerPosition">
            <summary>
            Gets or sets a value that indicates the position of descriptions in relation to the field.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DescriptionViewerStyle">
            <summary>
            Gets or sets the developer-specified style for descriptions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DescriptionViewerVisibility">
            <summary>
            Gets or sets a value that indicates whether the description viewer is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.Label">
            <summary>
            Gets or sets the content of the label displayed for this control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.LabelPosition">
            <summary>
            Gets or sets a value that indicates the position of the label in relation to the field.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.LabelStyle">
            <summary>
            Gets or sets the developer-specified style for labels.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.LabelVisibility">
            <summary>
            Gets or sets a value that indicates whether the label is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.IsReadOnly">
            <summary>
            Gets or sets a value that indicates whether the user can edit the values in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.IsRequired">
            <summary>
            Gets or sets a value indicating whether this field is required.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.IsValid">
            <summary>
            Gets a value that indicates whether the input control contains valid data.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.Mode">
            <summary>
            Gets a value that indicates whether the control is in read only, edit, or add new mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.PropertyPath">
            <summary>
            Gets or sets the path to the property that the control is bound to.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DescriptionColumnBesideContent">
            <summary>
            Gets or sets the column definition for the description when
            DescriptionViewerPosition = BesideContent.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DescriptionColumnBesideLabel">
            <summary>
            Gets or sets the column definition for the description when
            DescriptionViewerPosition = BesideLabel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DescriptionColumnBesideLabelSeparator">
            <summary>
            Gets or sets the column definition for the separator column
            by the DescriptionViewer when DescriptionViewerPosition = BesideLabel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DescriptionViewer">
            <summary>
            Description generated from GenerateDescription().
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.InternalLabel">
            <summary>
            Label generated from GenerateLabel().
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.LabelColumn">
            <summary>
            Gets or sets the column definition for the label.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.BoundProperty">
            <summary>
            Gets the property info for the bound property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DataFormDescriptionViewerPosition">
            <summary>
            Gets or sets the desired position of the description viewer on the DataForm.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DataFormLabelPosition">
            <summary>
            Gets or sets the desired position of the label on the DataForm.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.DataFormMode">
            <summary>
            Gets or sets the mode on the DataForm.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.EffectiveDescriptionViewerPosition">
            <summary>
            Gets or sets the effective position of the description viewer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.EffectiveLabelPosition">
            <summary>
            Gets or sets the effective position of the label.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataField.EffectiveMode">
            <summary>
            Gets or sets the effective mode of the DataField.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFieldMode">
            <summary>
            Enumeration denoting a DataField mode.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataFieldMode.Auto">
            <summary>
            Represents the case where the field should inherit its mode
            from the parent DataForm.  Behavior is the same as Edit if
            there is no parent DataForm.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFieldMode.ReadOnly">
            <summary>
            Represents the case where the field is read-only.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFieldMode.Edit">
            <summary>
            Represents the case where the field is in edit mode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFieldMode.AddNew">
            <summary>
            Represents the case where the field is in add-new mode.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataFormAutomationPeer">
            <summary>
            Represents an automation peer for the <see cref="T:System.Windows.Controls.DataForm"/>.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataFormAutomationPeer.#ctor(System.Windows.Controls.DataForm)">
            <summary>
            Constructs a new <see cref="T:System.Windows.Automation.Peers.DataFormAutomationPeer"/>.
            </summary>
            <param name="owner">The <see cref="T:System.Windows.Controls.DataForm"/>.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataFormAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the automation control type.
            </summary>
            <returns>The group automation control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataFormAutomationPeer.GetClassNameCore">
            <summary>
            Returns the class name.
            </summary>
            <returns>The string "DataForm".</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataFormAutomationPeer.GetNameCore">
            <summary>
            Returns the name.
            </summary>
            <returns>The <see cref="T:System.Windows.Controls.DataForm"/> header content, if it is a string.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataFormAutomationPeer.OwningDataForm">
            <summary>
            Gets the owning <see cref="T:System.Windows.Controls.DataForm"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataForm">
            <summary>
            Displays data in a customizable form.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataForm.UnspecifiedOrder">
            <summary>
            The default order to use when there is no <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/>
            value available for the property.
            </summary>
            <remarks>
            The value of 10000 is a standard default value, allowing
            some properties to be ordered at the beginning and some at the end.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DataForm.AutoCommitProperty">
            <summary>
            Identifies the AutoCommit dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnAutoCommitPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AutoCommit property changed handler.
            </summary>
            <param name="d">DataForm that changed its AutoCommit value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.AutoEditProperty">
            <summary>
            Identifies the AutoEdit dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnAutoEditPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AutoEdit property changed handler.
            </summary>
            <param name="d">DataForm that changed its AutoEdit value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.AutoGenerateFieldsProperty">
            <summary>
            Identifies the AutoGenerateFields dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnAutoGenerateFieldsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AutoGenerateFields property changed handler.
            </summary>
            <param name="d">DataForm that changed its AutoGenerateFields value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.CancelButtonContentProperty">
            <summary>
            Identifies the CancelButtonContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCancelButtonContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CancelButtonContent property changed handler.
            </summary>
            <param name="d">DataForm that changed its CancelButtonContent value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.CancelButtonStyleProperty">
            <summary>
            Identifies the CancelButtonContent dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm.CommandButtonsVisibilityProperty">
            <summary>
            Identifies the CommandButtonsVisibility dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCommandButtonsVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CommandButtonsVisibility property changed handler.
            </summary>
            <param name="d">DataForm that changed its CommandButtonsVisibility value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.CommitButtonContentProperty">
            <summary>
            Identifies the CommitButtonContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCommitButtonContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CommitButtonContent property changed handler.
            </summary>
            <param name="d">DataForm that changed its CommitButtonContent value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.CommitButtonStyleProperty">
            <summary>
            Identifies the CommitButtonStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm.CurrentIndexProperty">
            <summary>
            Identifies the CurrentIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCurrentIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CurrentIndex property changed handler.
            </summary>
            <param name="d">DataForm that changed its CurrentItem value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.CurrentItemProperty">
            <summary>
            Identifies the CurrentItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCurrentItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CurrentItem property changed handler.
            </summary>
            <param name="d">DataForm that changed its CurrentItem value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.DataFieldStyleProperty">
            <summary>
            Identifies the DataFieldStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm.DescriptionViewerPositionProperty">
            <summary>
            Identifies the DescriptionViewerPosition dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm.EditTemplateProperty">
            <summary>
            Identifies the EditTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnEditTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            EditTemplate property changed handler.
            </summary>
            <param name="d">DataForm that changed its EditTemplate value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.ValidationSummaryStyleProperty">
            <summary>
            Identifies the ValidationSummaryStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnValidationSummaryStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidationSummaryStyle property changed handler.
            </summary>
            <param name="d">DataForm that changed its ValidationSummaryStyle value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Header property changed handler.
            </summary>
            <param name="d">DataForm that changed its Header value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnHeaderTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplate property changed handler.
            </summary>
            <param name="d">DataForm that changed its HeaderTemplate value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.HeaderVisibilityProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnHeaderVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderVisibility property changed handler.
            </summary>
            <param name="d">DataForm that changed its HeaderVisibility value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.IsEmptyProperty">
            <summary>
            Identifies the IsEmpty dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnIsEmptyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEmpty property changed handler.
            </summary>
            <param name="d">DataForm that changed its IsEmpty value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.IsItemChangedProperty">
            <summary>
            Identifies the IsItemChanged dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnIsItemChangedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsItemChanged property changed handler.
            </summary>
            <param name="d">DataForm that changed its IsItemChanged value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.IsItemValidProperty">
            <summary>
            Identifies the IsItemValid dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnIsItemValidPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsItemValid property changed handler.
            </summary>
            <param name="d">DataForm that changed its IsItemValid value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnIsReadOnlyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnly property changed handler.
            </summary>
            <param name="d">DataForm that changed its IsReadOnly value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSource property changed handler.
            </summary>
            <param name="d">DataForm that changed its ItemsSource value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.LabelPositionProperty">
            <summary>
            Identifies the LabelPosition dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm.ModeProperty">
            <summary>
            Identifies the Mode dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm.NewItemTemplateProperty">
            <summary>
            Identifies the NewItemTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnNewItemTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            NewItemTemplate property changed handler.
            </summary>
            <param name="d">DataForm that changed its NewItemTemplate value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm.ReadOnlyTemplateProperty">
            <summary>
            Identifies the ReadOnlyTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnReadOnlyTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ReadOnlyTemplate property changed handler.
            </summary>
            <param name="d">DataForm that changed its ReadOnlyTemplate value.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataForm._addNewContentsNew">
            <summary>
            Holds the add-new contents mapped to mode that have been seen before.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._addNewContentsOld">
            <summary>
            Holds the old add-new contents mapped to mode that have been seen before.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._buttonSeparator">
            <summary>
            Private accessor to ButtonSeparator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canAddItems">
            <summary>
            Private accessor to CanAddItems.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._cancelButton">
            <summary>
            Private accessor to CancelButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canBeginEdit">
            <summary>
            Private accessor to CanBeginEdit.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canCancelEdit">
            <summary>
            Private accessor to CanCancelEdit.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canCommitEdit">
            <summary>
            Private accessor to CanCommitEdit.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canDeleteItems">
            <summary>
            Private accessor to CanDeleteItems.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canMoveToFirstItem">
            <summary>
            Private accessor to CanMoveToFirstItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canMoveToLastItem">
            <summary>
            Private accessor to CanMoveToLastItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canMoveToNextItem">
            <summary>
            Private accessor to CanMoveToNextItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canMoveToPreviousItem">
            <summary>
            Private accessor to CanMoveToPreviousItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._collectionView">
            <summary>
            Represents the items source as an ICollectionView.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._commitButton">
            <summary>
            Private accessor to CommitButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._contentPresenter">
            <summary>
            Private accessor to the content presenter.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._currentlyUsedTemplate">
            <summary>
            Holds which template is currently being used for which type.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._deleteItemButton">
            <summary>
            Private accessor to DeleteItemButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._editablePropertiesOriginalValues">
            <summary>
            Holds which properties on the current item can be edited,
            and what their original values were.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._editButton">
            <summary>
            Private accessor to EditButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._editContentsNew">
            <summary>
            Holds the edit contents mapped to mode that have been seen before.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._editContentsOld">
            <summary>
            Holds the old edit contents mapped to mode that have been seen before.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._editedProperties">
            <summary>
            Holds which properties on the current item have been edited
            and not saved locally.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._endingEdit">
            <summary>
            Holds a value indicating whether or not an edit is ending.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._entityLevelErrors">
            <summary>
            Holds the entity-level validation errors.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._validationSummary">
            <summary>
            Private accessor to ValidationSummary.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._fieldLevelErrors">
            <summary>
            Holds the field-level validation errors.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._fields">
            <summary>
            Holds the current list of fields.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._fieldsDictionary">
            <summary>
            Holds the list of fields tied to the contents from which they came.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._firstItemButton">
            <summary>
            Private accessor to FirstItemButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._forcedEndEdit">
            <summary>
            Holds whether an end of an edit has been forced and should override AutoEdit.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._generatedBindingModesByType">
            <summary>
            Private accessor to GeneratedBindingModesByType.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._generatedPropertiesByType">
            <summary>
            Private accessor to GeneratedPropertiesByType.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._headerVisibilityOverridden">
            <summary>
            Holds whether HeaderVisibility has been set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._isAddingNew">
            <summary>
            Private accessor to IsAddingNew.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._isEditing">
            <summary>
            Private accessor to IsEditing.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canAddItemsAfterEdit">
            <summary>
            The value of CanAddItems prior to entering edit mode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._canDeleteItemsAfterEdit">
            <summary>
            The value of CanDeleteItems prior to entering edit mode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._lastCurrentPosition">
            <summary>
            Holds the index of the last value of CurrentPosition on the PagedCollectionView.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._lastItem">
            <summary>
            The last value of CurrentItem, for use when auto-committing an edit.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._lastItemButton">
            <summary>
            Private accessor to LastItemButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._lostFocusFired">
            <summary>
            Holds whether or not lost focus has been fired since
            TextBox validation on text changed began.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._newItemButton">
            <summary>
            Private accessor to NewItemButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._nextItemButton">
            <summary>
            Private accessor to NextItemButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._nextTabIndex">
            <summary>
            Holds the next tab index for generated fields.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._originalItemsSource">
            <summary>
            Represents the original items source prior to wrapping.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._previousItemButton">
            <summary>
            Private accessor to PreviousItemButton.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._readOnlyContentsNew">
            <summary>
            Holds the read-only contents mapped to mode that have been seen before.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._readOnlyContentsOld">
            <summary>
            Holds the old read-only contents mapped to mode that have been seen before.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._shouldMoveFocus">
            <summary>
            Holds a value indicating whether or not focus should be moved when content is loaded.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._templateBindingInfos">
            <summary>
            Holds the template binding information.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._weakEventListenerCollectionChanged">
            <summary>
            Holds the weak event listener for the INotifyCollectionChanged.CollectionChanged event.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._weakEventListenerCurrentChanged">
            <summary>
            Holds the weak event listener for the ICollectionView.CurrentChanged event.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._weakEventListenerCurrentChanging">
            <summary>
            Holds the weak event listener for the ICollectionView.CurrentChanging event.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataForm._weakEventListenerPropertyChanged">
            <summary>
            Holds the weak event listener for the INotifyPropertyChanged.PropertyChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.#ctor">
            <summary>
            Constructs a new instance of DataForm.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.AddNewItem">
            <summary>
            Adds a new item.
            </summary>
            <returns>Whether or not a new item was added.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.BeginEdit">
            <summary>
            Begins the editing of the current item.
            </summary>
            <returns>Whether or not editing was begun.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.CancelEdit">
            <summary>
            Cancels the editing of the current item.
            </summary>
            <returns>Whether or not the cancellation was successful.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.CommitEdit">
            <summary>
            Commits the edit of the current item and exits editing mode.
            </summary>
            <returns>True if the commit succeeds; false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.CommitEdit(System.Boolean)">
            <summary>
            Commits the edit of the current item.
            </summary>
            <param name="exitEditingMode">Whether or not editing mode should be exited after committing the edit.</param>
            <returns>True if the commit succeeds; false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.DeleteItem">
            <summary>
            Deletes the current item.
            </summary>
            <returns>Whether or not the item was deleted.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.FindNameInContent(System.String)">
            <summary>
            Finds an object with a given name in the DataForm's content.
            </summary>
            <param name="name">The name to search by.</param>
            <returns>The object, if found.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnApplyTemplate">
            <summary>
            Applies the template for this control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.ValidateItem">
            <summary>
            Validates the current item.
            </summary>
            <returns>Whether or not the current item is valid.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.CancelAppend">
            <summary>
            Cancels the appending of a new item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.CommitAppend">
            <summary>
            Commits the appending of a new item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.ForceEndEdit">
            <summary>
            Forces the ending of the editing of the current item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GenerateUI">
            <summary>
            Generates the UI for this control and clears all errors.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GenerateUI(System.Boolean)">
            <summary>
            Generates the UI for this control, clears field errors, and optionally clears entity errors.
            </summary>
            <param name="clearEntityErrors">Whether or not to clear entity errors.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GenerateUI(System.Boolean,System.Boolean)">
            <summary>
            Generates the UI for this control, clears field errors, and optionally clears entity errors.
            Also swaps the old and new content if the same mode/type pair has been detected.
            </summary>
            <param name="clearEntityErrors">Whether or not to clear entity errors.</param>
            <param name="swapOldAndNew">Whether to swap the old and new content.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetNextTabIndex">
            <summary>
            Gets the next tab index for generated controls.
            </summary>
            <returns>The next tab index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.MoveToFirstItem">
            <summary>
            Goes to the first item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.MoveToLastItem">
            <summary>
            Goes to the last item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.MoveToNextItem">
            <summary>
            Goes to the next item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.MoveToPreviousItem">
            <summary>
            Goes to the previous item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.UpdateButtons">
            <summary>
            Updates the enabled state of the buttons within the DataForm.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.UpdateAllSources">
            <summary>
            Updates all sources.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.UpdateBindingsOnElement(System.Windows.FrameworkElement)">
            <summary>
            Finds any bindings on an element and updates the ones in which Mode is TwoWay
            to set the two Boolean properties to true.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.UpdateBindingsOnElement(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Finds any bindings on an element and updates the ones in which Mode is TwoWay
            to set the two Boolean properties to true.
            </summary>
            <param name="element">The element.</param>
            <param name="isBeneathDataField">Whether or not a DataField is a parent element.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.UpdateButtonsAndStates">
            <summary>
            Updates the enabled state of the buttons and the visual states within the DataForm.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.UpdateStates">
            <summary>
            Updates the visual states within the DataForm.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnAddingNewItem(System.Windows.Controls.DataFormAddingNewItemEventArgs)">
            <summary>
            Raises the AddingItem event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnAutoGeneratingField(System.Windows.Controls.DataFormAutoGeneratingFieldEventArgs)">
            <summary>
            Raises the AutoGeneratingField event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnBeginningEdit(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeginningEdit event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnContentLoaded(System.Windows.Controls.DataFormContentLoadEventArgs)">
            <summary>
            Raises the ContentLoaded event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnContentLoading(System.Windows.Controls.DataFormContentLoadEventArgs)">
            <summary>
            Raises the ContentLoading event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCreateAutomationPeer">
            <summary>
            Returns an automation peer for this DataForm.
            </summary>
            <returns>The automation peer.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCurrentItemChanged(System.EventArgs)">
            <summary>
            Raises the CurrentItemChanged event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnDeletingItem(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the DeletingItem event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnItemEditEnded(System.Windows.Controls.DataFormEditEndedEventArgs)">
            <summary>
            Raises the ItemEditEnded event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnItemEditEnding(System.Windows.Controls.DataFormEditEndingEventArgs)">
            <summary>
            Raises the ItemEditEnding event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnValidatingItem(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the ValidatingItem event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetBindingPropertyFromType(System.Type)">
            <summary>
            Returns a DependencyProperty for a type corresponding to the property to which
            a binding should be applied.
            </summary>
            <param name="type">The type for which to generate the DependencyProperty.</param>
            <returns>The DependencyProperty.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetControlFromType(System.Type)">
            <summary>
            Returns a control for a type.
            </summary>
            <param name="type">The type for which to generate the control.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetFirstFocusableControl(System.Windows.DependencyObject)">
            <summary>
            Gets the first focusable control (with respect to TabIndex).
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The first focusable control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.IsKeyboardFocusable(System.Windows.FrameworkElement)">
            <summary>
            Returns whether or not a framework element is keyboard focusable.
            </summary>
            <param name="element">The element.</param>
            <returns>Whether or not the element is keyboard focusable.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetFocusToFirstFocusableControl(System.Windows.DependencyObject)">
            <summary>
            Sets focus to the first focusable control (with respect to TabIndex) within the hierarchy of a given dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SortGeneratedFieldPaths(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <summary>
            Sorts the generated field paths in GenerateFields() according to the order specified
            in the DisplayAttributes.
            </summary>
            <param name="generatedFieldPaths">The generated field paths.</param>
            <param name="orders">The orders.</param>
            <returns>The sorted list of generated field paths.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetAllCanPropertiesAndUpdate(System.Windows.Controls.DataForm,System.Boolean)">
            <summary>
            Calls SetAllCanProperties() and either UpdateStates() or UpdateButtonsAndStates()
            on the given DataForm.
            </summary>
            <param name="dataForm">The DataForm.</param>
            <param name="onlyUpdateStates">Whether to call UpdateStates() or UpdateButtonsAndStates()</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.BeginEdit(System.Boolean)">
            <summary>
            Begins the editing of the current item.
            </summary>
            <param name="startingNewEdit">Whether or not this is starting a new edit or continuing an existing edit.</param>
            <returns>Whether or not editing was begun.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.CheckIfPropertyEditedAndUpdate(System.String,System.Object,System.Boolean,System.Type,System.Windows.Data.IValueConverter,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Checks to see if a given value matches a property's original value,
            and updates the ability to commit the edit if not.
            </summary>
            <param name="propertyName">The name of the property to check against.</param>
            <param name="value">The value to check against.</param>
            <param name="doConversion">Whether or not to convert the value to the original type.</param>
            <param name="originalType">The original type.</param>
            <param name="valueConverter">The IValueConverter to use for conversion.</param>
            <param name="converterParameter">The converter parameter.</param>
            <param name="converterCulture">The converter culture.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.ClearEntityErrors">
            <summary>
            Clears all EntityErrors from this DataForm before ValidateForm is performed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.EndEdit">
            <summary>
            Moves out of edit mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.EntityErrorShouldBeAdded(System.Windows.Controls.ValidationSummaryItem)">
            <summary>
            Returns whether or not a new error should be added to the list of errors.
            </summary>
            <param name="newError">The new error.</param>
            <returns>Whether or not the new error should be added to the list of errors.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GenerateFields">
            <summary>
            Generates the DataFormFields from the properties that should participate in auto-generation.
            </summary>
            <returns>The DataFormFields in a containing element.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GenerateField(System.Type,System.String,System.Windows.Data.BindingMode,System.Windows.Controls.Panel)">
            <summary>
            Generates a field based on a property type and a property name.
            </summary>
            <param name="propertyType">The type of the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="bindingMode">The binding mode.</param>
            <param name="panel">The panel to insert the field into.</param>
            <returns>A value indicating whether or not the field was generated.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetAllOriginalPropertyValues">
            <summary>
            Gets all of the original property values for the properties on the current item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetContentFromMode">
            <summary>
            Gets new content from the current mode.
            </summary>
            <returns>The new content.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetEditTemplateContent">
            <summary>
            Gets the generated content from the edit template.
            </summary>
            <returns>The edit template content.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetNewItemTemplateContent">
            <summary>
            Gets the generated content from the new item template.
            </summary>
            <returns>The new item template content.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetOrRecycleContent(System.Boolean,System.Boolean@)">
            <summary>
            Either gets new content or recycles old content based on the current mode.
            </summary>
            <param name="swapOldAndNew">Whether or not we should swap old and new content when the mode/type pair is unchanged.</param>
            <param name="uiChanged">Whether or not the UI changed from its current content.</param>
            <returns>The content.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.GetReadOnlyTemplateContent">
            <summary>
            Gets the generated content from the read-only template.
            </summary>
            <returns>The read-only template content.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.IsCommandButtonVisible(System.Windows.Controls.DataFormCommandButtonsVisibility)">
            <summary>
            Returns whether or not the specified type of command button is visible.
            </summary>
            <param name="commandButtonVisibility">The type of command button.</param>
            <returns>Whether or not the type of command button is visible.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCollectionViewCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the situation where the collection changed on the ICollectionView.
            </summary>
            <param name="sender">The ICollectionView.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCollectionViewCurrentChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the situation where the current item changed on the ICollectionView.
            </summary>
            <param name="sender">The ICollectionView.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCollectionViewCurrentChanging(System.Object,System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Handles the situation where the current item is changing on the ICollectionView.
            </summary>
            <param name="sender">The ICollectionView.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCurrentItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the situation where a property on the current item changes.
            </summary>
            <param name="sender">The current item.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.PrepareContent(System.Windows.FrameworkElement)">
            <summary>
            Prepares the given content.
            </summary>
            <param name="rootElement">The root element.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.RemoveContentForType(System.Type,System.Collections.Generic.IDictionary{System.Type,System.Windows.FrameworkElement})">
            <summary>
            Removes the content attached to a given type from the fields dictionary
            and from the given dictionary of contents.
            </summary>
            <param name="type">The type to use as a key.</param>
            <param name="contents">The contents dictionary.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.ResetNextTabIndex">
            <summary>
            Resets the next tab index.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetAllCanProperties">
            <summary>
            Sets all of the properties of the form "CanXXXX".
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetButtonSeparatorVisibility">
            <summary>
            Sets the visibility of the button separator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanAddItems">
            <summary>
            Sets whether or not the user can add a new item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanBeginEdit">
            <summary>
            Sets whether or not the user can begin an edit.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanCancelEdit">
            <summary>
            Sets whether or not the user can cancel an edit.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCancelButtonVisibility">
            <summary>
            Sets the visibility of the cancel button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanDeleteItems">
            <summary>
            Sets whether or not the user can delete an item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanCommitEdit">
            <summary>
            Sets whether or not the user can commit an edit.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanMoveToFirstItem">
            <summary>
            Sets whether or not the user can move to the first item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanMoveToLastItem">
            <summary>
            Sets whether or not the user can move to the last item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanMoveToNextItem">
            <summary>
            Sets whether or not the user can move to the next item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCanMoveToPreviousItem">
            <summary>
            Sets whether or not the user can move to the previous item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetCommitButtonVisibility">
            <summary>
            Sets the visibility of the commit button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetDeleteItemButtonVisibility">
            <summary>
            Sets the visibility of the delete item button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetEditButtonVisibility">
            <summary>
            Sets the visibility of the edit button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetFirstItemButtonVisibility">
            <summary>
            Sets the visibility of the first item button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetIsItemValid">
            <summary>
            Sets whether or not the item is valid and updates buttons and states accordingly.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetHeaderVisibility">
            <summary>
            Sets the visibility of the header.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetLastItemButtonVisibility">
            <summary>
            Sets the visibility of the last item button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetMode">
            <summary>
            Sets the mode of the DataForm.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetNewItemButtonVisibility">
            <summary>
            Sets the visibility of the new item button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetNextItemButtonVisibility">
            <summary>
            Sets the visibility of the next item button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetPreviousItemButtonVisibility">
            <summary>
            Sets the visibility of the previous item button.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetUpCollectionView(System.Boolean)">
            <summary>
            Sets up the collection view.
            </summary>
            <param name="collectionViewCreated">Whether or not the collection view was created by the DataForm.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.SetUpNewCurrentItem">
            <summary>
            Sets up the new current item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.ShouldRegenerateUI(System.Windows.Controls.DataFormMode)">
            <summary>
            Returns a value indicating whether or not the UI should be re-generated based on
            a changed template.
            </summary>
            <param name="changedTemplateMode">The mode for which the template was changed.</param>
            <returns>A value indicating whether or not the UI should be re-generated.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.UpdateCurrentItem">
            <summary>
            Updates the current item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataForm.ValidateItem(System.Boolean)">
            <summary>
            Validates the current item.
            </summary>
            <param name="validateAllProperties">Whether or not to validate all properties.</param>
            <returns>Whether or not the current item is valid.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnNewItemButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "new item" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnBeginEditButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "begin edit" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCancelEditButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "cancel edit" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnDeleteItemButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "delete item" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnCommitEditButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "commit edit" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnMoveToFirstItemButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "move to first item" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnMoveToLastItemButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "move to last item" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnMoveToPreviousItemButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "move to previous item" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnMoveToNextItemButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the "move to next item" button.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnContentRootElementGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where the root element in the fields presenter has got focus.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnContentRootElementLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where the root element in the fields presenter has loaded.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnContentRootElementLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where the root element in the fields presenter has lost focus.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnContentRootElementBindingValidationError(System.Object,System.Windows.Controls.ValidationErrorEventArgs)">
            <summary>
            Handles the case where a field has had a binding validation error occur on it.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnDatePickerCalendarOpened(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where a date picker's calendar was opened.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnExternalTextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the case where a text box outside a DataField has lost focus.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnExternalTextBoxTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the case where a text box outside a DataField has is text changed.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnTextBoxTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the case where a text box's text changed.
            </summary>
            <param name="sender">The element.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DataForm.OnValidationSummaryErrorsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the case where the validation summary's error collection changed.
            </summary>
            <param name="sender">The validation summary.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="E:System.Windows.Controls.DataForm.AddingNewItem">
            <summary>
            Event handler for when an item is being added.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.AutoGeneratingField">
            <summary>
            Event handler for when a field is being auto-generated.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.BeginningEdit">
            <summary>
            Event handler for when an edit is beginning.  Cannot be canceled when AutoEdit is true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.ContentLoaded">
            <summary>
            Event handler for when content is loaded.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.ContentLoading">
            <summary>
            Event handler for when content is about to be loaded.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.CurrentItemChanged">
            <summary>
            Event handler for when the current item has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.DeletingItem">
            <summary>
            Event handler for when an item is being deleted.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.EditEnded">
            <summary>
            Event handler for when an edit has ended.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.EditEnding">
            <summary>
            Event handler for when an edit is ending.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataForm.ValidatingItem">
            <summary>
            Event handler for when the item is being validated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.AutoCommit">
            <summary>
            Gets or sets a value that indicates whether edited items are committed when the current item is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.AutoEdit">
            <summary>
            Gets or sets a value that indicates whether or not the 
            <see cref="T:System.Windows.Controls.DataForm"/> should be permanently in edit mode. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.AutoGenerateFields">
            <summary>
            Gets or sets a value that indicates whether or not to automatically 
            generate the <see cref="T:System.Windows.Controls.DataField"/>s collection. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CancelButtonContent">
            <summary>
            Gets or sets the content of the Cancel button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CancelButtonStyle">
            <summary>
            Gets or sets the style of the Cancel button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CommandButtonsVisibility">
            <summary>
            Gets or sets a value that indicates which command 
            buttons are visible on the <see cref="T:System.Windows.Controls.DataForm"/> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CommitButtonContent">
            <summary>
            Gets or sets the content of the Commit button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CommitButtonStyle">
            <summary>
            Gets or sets the style of the Commit button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CurrentIndex">
            <summary>
            Gets or sets the index of the current item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CurrentItem">
            <summary>
            Gets or sets the current item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.DescriptionViewerPosition">
            <summary>
            Gets or sets a value that indicates the position of descriptions in relation to the field.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.DataFieldStyle">
            <summary>
            Gets or sets the developer-specified style for <see cref="T:System.Windows.Controls.DataField"/>s.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.EditTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used when editing. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.ValidationSummary">
            <summary>
            Gets the ValidationSummary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.ValidationSummaryStyle">
            <summary>
            Gets or sets the developer-specified style for the ValidationSummary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.Header">
            <summary>
              Gets or sets the header for the <see cref="T:System.Windows.Controls.DataForm"/> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.HeaderTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> used
            for the header of the <see cref="T:System.Windows.Controls.DataForm"/> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.HeaderVisibility">
            <summary>
            Gets or sets a value that indicates whether the header is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.IsEmpty">
            <summary>
            Gets a value that indicates whether or not the control is displaying an item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.IsItemChanged">
            <summary>
            Gets a value that indicates whether or not the current item has been changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.IsItemValid">
            <summary>
            Gets a value that indicates whether or not the current item is valid.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.IsReadOnly">
            <summary>
            Gets or sets a value that indicates whether the user can edit the values in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.ItemsSource">
            <summary>
            Gets or sets a collection that is used to populate the form content of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.LabelPosition">
            <summary>
            Gets or sets a value that indicates the position of labels in relation to the field.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.Mode">
            <summary>
            Gets a value that indicates whether the control is in read only, edit, or add new mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.NewItemTemplate">
            <summary>
            Gets or sets the item template used when adding a new item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.ReadOnlyTemplate">
            <summary>
            Gets or sets the item template used when not editing.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanAddItems">
            <summary>
            Gets a value indicating whether or not the collection allows the
            addition of items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanBeginEdit">
            <summary>
            Gets a value that indicates whether or not an edit can be started.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanCancelEdit">
            <summary>
            Gets a value that indicates whether or not an edit can be canceled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanCommitEdit">
            <summary>
            Gets a value indicating whether or not an edit can be committed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanDeleteItems">
            <summary>
            Gets a value indicating whether or not the collection allows the
            deletion of items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanMoveToFirstItem">
            <summary>
            Gets a value indicating whether or not you can to the first item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanMoveToLastItem">
            <summary>
            Gets a value indicating whether or not you can to the last item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanMoveToNextItem">
            <summary>
            Gets a value indicating whether or not you can to the next item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CanMoveToPreviousItem">
            <summary>
            Gets a value indicating whether or not you can to the previous item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CurrentItemType">
            <summary>
            Gets the type of the current item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.EffectiveIsReadOnly">
            <summary>
            Gets a value indicating whether or not the DataForm is effectively read-only,
            taking into account both IsReadOnly and the presence of templates.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.Fields">
            <summary>
            Gets the list of fields.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.IsAddingNew">
            <summary>
            Gets a value indicating whether or not the user is appending a new item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.IsEditing">
            <summary>
            Gets a value indicating whether or not the user is editing the current item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.ItemsCount">
            <summary>
            Gets the number of items in the items source.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.AutoCommitPreventsCurrentItemChange">
            <summary>
            Gets a value indicating whether or not the value of AutoCommit should
            prevent the changing of the current item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CurrentItemChangeTracking">
            <summary>
            Gets the current item as an IChangeTracking.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.CurrentItemNotifyPropertyChanged">
            <summary>
            Gets the current item as an INotifyPropertyChanged.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.EditableCollectionView">
            <summary>
            Gets the entity collection view as an IEditableCollectionView.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.GeneratedBindingModesByType">
            <summary>
            Gets the generated binding modes associated to properties for a given type.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.GeneratedPropertiesByType">
            <summary>
            Gets the generated properties for a given type.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataForm.ShouldValidateOnCurrencyChange">
            <summary>
            Gets a value indicating whether or not validation should be run if
            currency is about to change or if currency has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormBindingInfo">
            <summary>
            Stores information about a Binding, including the BindingExpression, BindingTarget and associated Element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataFormBindingInfo.#ctor">
            <summary>
            Creates a new BindingInfo.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataFormBindingInfo.#ctor(System.Windows.Data.BindingExpression,System.Windows.DependencyProperty,System.Windows.FrameworkElement)">
            <summary>
            Creates a new BindingInfo with the specified BindingExpression, BindingTarget and Element.
            </summary>
            <param name="bindingExpression">The BindingExpression.</param>
            <param name="bindingTarget">The BindingTarget.</param>
            <param name="element">The Element.</param>
        </member>
        <member name="P:System.Windows.Controls.DataFormBindingInfo.BindingExpression">
            <summary>
            Gets or sets the BindingExpression.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataFormBindingInfo.BindingTarget">
            <summary>
            Gets or sets the BindingTarget.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataFormBindingInfo.Element">
            <summary>
            Gets or sets the Element.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter">
            <summary>
            Type converter for DataForm.CommandButtonsVisibility.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether we can convert from a given type.
            </summary>
            <param name="context">The type descriptor context.</param>
            <param name="sourceType">The source type.</param>
            <returns>Whether we can convert from the given type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a value from a type.
            </summary>
            <param name="context">The type descriptor context.</param>
            <param name="culture">The culture to use.</param>
            <param name="value">The value to convert from.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataFormCommandButtonsVisibilityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a value to a type.
            </summary>
            <param name="context">The type descriptor context.</param>
            <param name="culture">The culture to use.</param>
            <param name="value">The value to convert from.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataFormCommandButtonsVisibility">
            <summary>
            Enumeration denoting which of the command buttons should be visible.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.None">
            <summary>
            Represents the case where no buttons are visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.Add">
            <summary>
            Represents the case where the add button is visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.Delete">
            <summary>
            Represents the case where the delete button is visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.Edit">
            <summary>
            Represents the case where the edit button is visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.Navigation">
            <summary>
            Represents the case where the navigation buttons are visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.Commit">
            <summary>
            Represents the case where the commit button is visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.Cancel">
            <summary>
            Represents the case where the cancel button is visible.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormCommandButtonsVisibility.All">
            <summary>
            Represents the case where all buttons is visible.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFieldDescriptionViewerPosition">
            <summary>
            Enumeration denoting a description viewer position.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataFieldDescriptionViewerPosition.Auto">
            <summary>
            Represents the case where a description position should be
            dependent on its parent (same behavior as BesideContent when there
            is no parent).
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFieldDescriptionViewerPosition.BesideContent">
            <summary>
            Represents the case where the description should be placed to the
            right of the input control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFieldDescriptionViewerPosition.BesideLabel">
            <summary>
            Represents the case where the description should be placed to the
            right of the label.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormEditAction">
            <summary>
            Enumeration denoting an action taken to end an edit.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataFormEditAction.Cancel">
            <summary>
            Represents the case where an edit has been canceled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormEditAction.Commit">
            <summary>
            Represents the case where an edit has been committed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFieldLabelPosition">
            <summary>
            Enumeration denoting a label position.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataFieldLabelPosition.Auto">
            <summary>
            Represents the case where a field label position should be
            dependent on its parent (same behavior as Left when there
            is no parent).
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFieldLabelPosition.Left">
            <summary>
            Represents the case where the label should be placed to the
            left of the input control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFieldLabelPosition.Top">
            <summary>
            Represents the case where the label should be placed above
            the input control.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormMode">
            <summary>
            Enumeration denoting a DataForm mode.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataFormMode.ReadOnly">
            <summary>
            Represents the case where an object is not being edited.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormMode.Edit">
            <summary>
            Represents the case where an object is being edited.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataFormMode.AddNew">
            <summary>
            Represents the case where a new object is being added.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormAddingNewItemEventArgs">
            <summary>
            Event args for the AddingNewItem event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormAddingNewItemEventArgs.#ctor">
            <summary>
            Constructs a new instance of DataFormAddingNewItemEventArgs.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormEditEndedEventArgs">
            <summary>
            Event args for the EditEnded event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormEditEndedEventArgs.#ctor(System.Windows.Controls.DataFormEditAction)">
            <summary>
            Constructs a new instance of DataFormEditEndedEventArgs.
            </summary>
            <param name="editAction">The edit action.</param>
        </member>
        <member name="P:System.Windows.Controls.DataFormEditEndedEventArgs.EditAction">
            <summary>
            Gets the edit action.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormEditEndingEventArgs">
            <summary>
            Event args for the EditEnding event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormEditEndingEventArgs.#ctor(System.Windows.Controls.DataFormEditAction)">
            <summary>
            Constructs a new instance of DataFormEditEndingEventArgs.
            </summary>
            <param name="editAction">The edit action.</param>
        </member>
        <member name="P:System.Windows.Controls.DataFormEditEndingEventArgs.EditAction">
            <summary>
            Gets the edit action.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormContentLoadEventArgs">
            <summary>
            Event args for the ContentLoaded and ContentLoading events.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormContentLoadEventArgs.#ctor(System.Windows.FrameworkElement,System.Windows.Controls.DataFormMode)">
            <summary>
            Constructs a new instance of DataFormContentLoadEventArgs.
            </summary>
            <param name="content">The content that was loaded or will be loaded.</param>
            <param name="mode">The mode of the DataForm.</param>
        </member>
        <member name="P:System.Windows.Controls.DataFormContentLoadEventArgs.Content">
            <summary>
            Gets the content that was loaded or will be loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataFormContentLoadEventArgs.Mode">
            <summary>
            Gets the mode of the DataForm.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormAutoGeneratingFieldEventArgs">
            <summary>
            Event args for the AutoGeneratingField event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormAutoGeneratingFieldEventArgs.#ctor(System.String,System.Type,System.Windows.Controls.DataField)">
            <summary>
            Constructs a new instance of DataFormAutoGeneratingFieldEventArgs.
            </summary>
            <param name="propertyName">The name of the property for the field being generated.</param>
            <param name="propertyType">The type of the property for the field being generated.</param>
            <param name="field">The field being generated.</param>
        </member>
        <member name="P:System.Windows.Controls.DataFormAutoGeneratingFieldEventArgs.Field">
            <summary>
            Gets or sets the field to be used.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataFormAutoGeneratingFieldEventArgs.PropertyName">
            <summary>
            Gets the name of the property for which this field is being generated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataFormAutoGeneratingFieldEventArgs.PropertyType">
            <summary>
            Gets the type of the property for which this field is being generated.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataFormToStringConverter">
            <summary>
            Value converter for the DataForm.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts forwards.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataFormToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts backwards.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataFormValueConverter">
            <summary>
            Value converter for the DataForm.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataFormValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts forwards.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataFormValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts backwards.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.PathOrderPair">
            <summary>
            Wrapper class used to sort paths based on the order derived from a DisplayAttribute.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.PathOrderPair.GetOrder(System.Windows.Controls.PathOrderPair)">
            <summary>
            Gets the order from a PathOrderPair.
            </summary>
            <param name="pathOrderPair">The PathOrderPair.</param>
            <returns>The order from the PathOrderPair.</returns>
        </member>
        <member name="P:System.Windows.Controls.PathOrderPair.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PathOrderPair.Order">
            <summary>
            Gets or sets the order.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationUtil">
            <summary>
            Utility class that contains static methods for DataForm validation purposes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.CopyBinding(System.Windows.Data.Binding)">
            <summary>
            Creates a new Binding that is a shallow copy of the source Binding.
            </summary>
            <param name="source">The Binding to copy.</param>
            <returns>The copied Binding.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.ElementHasErrors(System.Windows.DependencyObject)">
            <summary>
            Returns whether or not a DependencyObject has errors.
            </summary>
            <param name="element">The element to test.</param>
            <returns>Whether or not it has errors.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.GetBindingExpressionsForElement(System.Windows.FrameworkElement)">
            <summary>
            Gets the list of binding expressions for the given element.
            </summary>
            <param name="element">The element.</param>
            <returns>The list of binding expressions.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.GetDataFormBindingInfo(System.Windows.FrameworkElement,System.Object,System.Boolean,System.Boolean,System.Type[])">
            <summary>
            Searches through all Bindings on the specified element and returns a list of BindingInfo objects
            for each Binding that matches the specified criteria.
            </summary>
            <param name="element">FrameworkElement to search</param>
            <param name="dataItem">Only return Bindings with a context element equal to this object</param>
            <param name="twoWayOnly">If true, only returns TwoWay Bindings</param>
            <param name="searchChildren">If true, searches child elements for Bindings</param>
            <param name="excludedTypes">The Binding search will skip all of these Types</param>
            <returns>List of BindingInfo for every Binding found</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.GetDependencyPropertiesForElement(System.Windows.FrameworkElement)">
            <summary>
            Gets the list of dependency properties for the given element.
            </summary>
            <param name="element">The element.</param>
            <returns>The list of dependency properties.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.UpdateSourceOnElementBindings(System.Windows.FrameworkElement)">
            <summary>
            Updates the source on the bindings for a given element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.GetDataFormBindingInfoOfSingleElement(System.Windows.FrameworkElement,System.Object,System.Object,System.Boolean)">
            <summary>
            Gets a list of active bindings on the specified FrameworkElement.  Bindings are gathered
            according to the same conditions BindingGroup uses to find bindings of descendent elements
            within the visual tree.
            </summary>
            <param name="element">Root FrameworkElement to search under</param>
            <param name="inheritedDataContext">DomainContext of the element's parent</param>
            <param name="dataItem">Target DomainContext</param>
            <param name="twoWayOnly">If true, only returns TwoWay Bindings</param>
            <returns>The list of active bindings.</returns>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Data.DataForm.Toolkit.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.DataForm.Toolkit.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.DataForm.Toolkit.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.DataForm.Toolkit.Resources.DataForm_CannotCancelBeginEditWhenInAutoEdit">
            <summary>
              Looks up a localized string similar to {0} cannot be canceled when {1} is set to true..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Data.DataForm.Toolkit.Resources.DataForm_CannotChangeCurrency">
            <summary>
              Looks up a localized string similar to Cannot change currency when an item has validation errors or it is being edited and {0} is false.  Set {1} to a {2} to manage currency instead..
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Jul09\Bin\System.Windows.Controls.Layout.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Layout.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Accordion">
            <summary>
            Represents a collection of collapsed and expanded AccordionItem controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isAllowedToWriteSelectedItems">
            <summary>
            Determines whether the SelectedItemsProperty may be written.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isAllowedToWriteSelectedIndices">
            <summary>
            Determines whether the SelectedIndicesProperty may be written.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isIgnoringSelectedIndicesChanges">
            <summary>
            Indicates that changes to the SelectedIndices collection should
            be ignored.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isInSelectedItemsCollectionChanged">
            <summary>
            Determines whether we are currently in the SelectedItems Collection
            Changed handling.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._isInSelectedIndicesCollectionChanged">
            <summary>
            Determines whether we are currently in the SelectedIndices Collection
            Changed handling.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion._currentActioningItem">
            <summary>
            The item that is currently visually performing an action.
            </summary>
            <remarks>An action can be expanding, resizing or collapsing.</remarks>
        </member>
        <member name="F:System.Windows.Controls.Accordion._scheduledActions">
            <summary>
            The items that are currently waiting to perform an action.
            </summary>
            <remarks>An action can be expanding, resizing or collapsing.</remarks>
        </member>
        <member name="F:System.Windows.Controls.Accordion.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its ExpandDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.IsValidItemForSelection(System.Object)">
            <summary>
            Determines whether the new value can be selected.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            	<c>True</c> if this item can be selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.Accordion._selectedItemNestedLevel">
            <summary>
            Nested level for SelectedItemCoercion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedIndexProperty property changed handler.
            </summary>
            <param name="d">Accordion that changed its SelectedIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.IsValidIndexForSelection(System.Int32)">
            <summary>
            Determines whether the new value can be selected.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>
            	<c>True</c> if this item can be selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.Accordion._selectedIndexNestedLevel">
            <summary>
            Coercion level.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectionSequenceProperty">
            <summary>
            Identifies the SelectionSequence dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectionSequencePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when SelectionSequenceProperty changed.
            </summary>
            <param name="d">Accordion that changed its SelectionSequence property.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedItemsProperty">
            <summary>
            Identifies the SelectedItems dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler of SelectedItems.
            </summary>
            <param name="d">Accordion that changed the collection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Accordion.SelectedIndicesProperty">
            <summary>
            Identifies the SelectedIndices dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedIndicesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler of SelectedIndices.
            </summary>
            <param name="d">Accordion that changed the collection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Accordion.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">
            TreeView that changed its ItemContainerStyle.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Accordion.ContentTemplateProperty">
            <summary>
            Identifies the ContentTemplate dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Accordion.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Accordion"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Accordion control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionAutomationPeer object for the Accordion.</returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given 
            item.
            </summary>
            <returns>
            The element that is used to display the given item.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own 
            container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            True if the item is (or is eligible to be) its own container; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)"/> 
            method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item that should be cleared.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> 
            property changes.
            </summary>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.InitializeNewItemsSource">
            <summary>
            Initializes the SelectedItem property when a new ItemsSource is set.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnAccordionItemUnselected(System.Windows.Controls.AccordionItem)">
            <summary>
            Called when an AccordionItem is unselected.
            </summary>
            <param name="accordionItem">The accordion item that was unselected.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.UnselectItem(System.Object)">
            <summary>
            Unselects the item.
            </summary>
            <param name="item">The item that will be unselected.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnAccordionItemSelected(System.Windows.Controls.AccordionItem)">
            <summary>
            Called when an AccordionItem selected.
            </summary>
            <param name="accordionItem">The accordion item that was selected.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SelectItem(System.Object)">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item that will be selected.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ChangeSelectedItem(System.Object,System.Object)">
            <summary>
            Changes the selected item.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when selected items collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedIndicesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when selected indices collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ProposeSelectedItemCandidate(System.Object)">
            <summary>
            Gets an item that is suitable for selection.
            </summary>
            <param name="nonCandidate">Item that should not be considered if 
            possible.</param>
            <returns>An item that should be selected. This could be nonCandidate, 
            if no other possibility was found.</returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SelectAll">
            <summary>
            Selects all the AccordionItems in the Accordion control.
            </summary>
            <remarks>If the Accordion SelectionMode is OneOrMore or ZeroOrMore all 
            AccordionItems would be selected. If the Accordion SelectionMode is 
            One or ZeroOrOne all items would be selected and unselected. Only 
            the last AccordionItem would remain selected. </remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.UnselectAll">
            <summary>
            Unselects all the AccordionItems in the Accordion control.
            </summary>
            <remarks>If the Accordion SelectionMode is Zero or ZeroOrMore all 
            AccordionItems would be Unselected. If SelectionMode is One or  
            OneOrMode  than all items would be Unselected and selected. Only the 
            first AccordionItem would still be selected.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.UpdateAccordionItemsSelection(System.Boolean)">
            <summary>
            Updates all accordionItems to be selected or unselected.
            </summary>
            <param name="selectedValue">True to select all items, false to unselect.</param>
            <remarks>Will not attempt to change a locked accordionItem.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SetLockedProperties">
            <summary>
            Sets the locked properties on all the items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnSelectedItemChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the SelectedItemChanged event when the SelectedItem 
            property value changes.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Accordion.RaiseOnSelectedItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise the SelectedItemsCollectionChanged event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> 
            instance containing the event data.</param>
            <remarks>This event is raised after the changes to the collection 
            have been processed.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.ScheduleAction(System.Windows.Controls.AccordionItem,System.Windows.Controls.AccordionAction)">
            <summary>
            Allows an AccordionItem to signal the need for a visual action 
            (resize, collapse, expand).
            </summary>
            <param name="item">The AccordionItem that signals for a schedule.</param>
            <param name="action">The action it is scheduling for.</param>
            <returns>True if the item is allowed to proceed without scheduling, 
            false if the item needs to wait for a signal to execute the action.</returns>
        </member>
        <member name="M:System.Windows.Controls.Accordion.OnActionFinish(System.Windows.Controls.AccordionItem)">
            <summary>
            Signals the finish of an action by an item.
            </summary>
            <param name="item">The AccordionItem that finishes an action.</param>
            <remarks>An AccordionItem should always signal a finish, for this call
            will start the next scheduled action.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.StartNextAction">
            <summary>
            Starts the next action in the list, in a particular order.
            </summary>
            <remarks>An AccordionItem is should always signal that it is 
            finished with an action.</remarks>
        </member>
        <member name="M:System.Windows.Controls.Accordion.LayoutChildren">
            <summary>
            Determines and sets the height of the accordion items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Accordion.SetPanelOrientation">
            <summary>
            Sets the orientation of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.ItemsControlHelper">
            <summary>
            Gets the ItemsControlHelper that is associated with this control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.ExpandDirection">
            <summary>
            Gets or sets the ExpandDirection property of each 
            AccordionItem in the Accordion control and the direction in which
            the Accordion does layout.
            </summary>
            <remarks>Setting the ExpandDirection will set the expand direction 
            on the accordionItems.</remarks>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectionMode">
            <summary>
            Gets or sets the AccordionSelectionMode used to determine the minimum 
            and maximum selected AccordionItems allowed in the Accordion.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsMinimumOneSelected">
            <summary>
            Gets a value indicating whether at least one item is selected at 
            all times.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsMaximumOneSelected">
            <summary>
            Gets a value indicating whether at most one item is selected at all times.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <remarks>
            The default value is null.
            When multiple items are allowed (IsMaximumOneSelected false), 
            return the first of the selectedItems.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected AccordionItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectionSequence">
            <summary>
            Gets or sets the SelectionSequence used to determine 
            the order of AccordionItem selection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <remarks>Does not allow setting.</remarks>
        </member>
        <member name="P:System.Windows.Controls.Accordion.SelectedIndices">
            <summary>
            Gets the indices of the currently selected AccordionItems.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element
            generated for each item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.ContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content 
            of each generated AccordionItem. 
            </summary>
            <remarks>Either ContentTemplate or ItemTemplate is used. 
            Setting both will result in an exception.</remarks>
        </member>
        <member name="P:System.Windows.Controls.Accordion.HeaderTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the 
            header of each generated AccordionItem.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Accordion.SelectionChanged">
            <summary>
            Occurs when the SelectedItem or SelectedItems property value changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Accordion.SelectedItemsChanged">
            <summary>
            Occurs when the SelectedItems collection changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsShouldFillWidth">
            <summary>
            Gets a value indicating whether the accordion fills width.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Accordion.IsShouldFillHeight">
            <summary>
            Gets a value indicating whether the accordion fills height.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.AccordionAction">
            <summary>
            Determines the action the AccordionItem will perform.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.None">
            <summary>
            No action will be performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.Collapse">
            <summary>
            A collapse will be performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.Expand">
            <summary>
            An expand will be performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionAction.Resize">
            <summary>
            A resize will be performed.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.AccordionAutomationPeer">
            <summary>
            Exposes Accordion types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.#ctor(System.Windows.Controls.Accordion)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.AccordionAutomationPeer"/> class.
            </summary>
            <param name="owner">The Accordion that is associated with this
            AccordionAutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Accordion that is associated with this
            AccordionAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name Accordion.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Accordion that is associated
            with this AccordionAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>List AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the Accordion that is associated
            with this AccordionAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of 
            the <see cref="T:System.Windows.Controls.ItemsControl"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer"/>.
            </summary>
            <returns>
            A collection of AccordionItemAutomationPeer elements, or null if the
            Accordion that is associated with this AccordionAutomationPeer is
            empty.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionAutomationPeer.OwnerAccordion">
            <summary>
            Gets the Accordion that owns this AccordionAutomationPeer.
            </summary>
            <value>The accordion.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>true if multiple selection is allowed; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>true if selection is required; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.AccordionItem">
            <summary>
            Represents a control that displays a header and has a collapsible 
            content window.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ElementExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ElementExpandSiteName">
            <summary>
            The name of the ExpandSite template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._expanderButton">
            <summary>
            The ExpanderButton template part is a templated ToggleButton that's 
            used to select and unselect this AccordionItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._collapseStoryboard">
            <summary>
            BackingField for CollapseStoryboard.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._expandStoryboard">
            <summary>
            BackingField for ExpandStoryboard.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._allowedToWriteExpandDirection">
            <summary>
            Determines whether the ExpandDirection property may be written.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty PropertyChangedCallback call back static 
            function.
            This function validates the new value before calling virtual function 
            OnExpandDirectionChanged.
            </summary>
            <param name="d">Expander object whose ExpandDirection property is 
            changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains 
            the old and new values.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedProperty PropertyChangedCallback static function.
            </summary>
            <param name="d">Expander object whose Expanded property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the 
            old and new values.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._isSelectedNestedLevel">
            <summary>
            Nested level for IsSelectedCoercion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._isLocked">
            <summary>
            BackingField for IsLocked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.AccordionButtonStyleProperty">
            <summary>
            Identifies the AccordionButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnAccordionButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AccordionButtonStyleProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its AccordionButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnAccordionButtonStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when AccordionButtonStyle is changed.
            </summary>
            <param name="oldStyle">The old style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ExpandableContentControlStyleProperty">
            <summary>
            Identifies the ExpandableContentControlStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpandableContentControlStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandableContentControlStyleProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its ExpandableContentControlStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpandableContentControlStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when ExpandableContentControlStyle is changed.
            </summary>
            <param name="oldStyle">The old style.</param>
            <param name="newStyle">The new style.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._allowedToWriteContentTargetSize">
            <summary>
            Determines whether it is allowed to set the ContentTargetSize
            property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem.ContentTargetSizeProperty">
            <summary>
            Identifies the ContentTargetSize dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnContentTargetSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentTargetSizeProperty property changed handler.
            </summary>
            <param name="d">AccordionItem that changed its ContentTargetSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.#ctor">
            <summary>
            Initializes a new instance of the AccordionItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.Schedule(System.Windows.Controls.AccordionAction)">
            <summary>
            Schedules the specified action.
            </summary>
            <param name="action">The action to be performed.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.StartAction">
            <summary>
            Starts an action, such as resize, collapse or expand.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnStoryboardFinished(System.Object,System.EventArgs)">
            <summary>
            Called when a storyboard finishes.
            </summary>
            <param name="sender">The AccordionItem that finished a storyboard.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing 
            the event data.</param>
            <remarks>AccordionItem is required to make this call.</remarks>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the AccordionItem control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionItemAutomationPeer object for the AccordionItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.PreparePrepareHeaderedContentControlContainerForItemOverride(System.Windows.Controls.HeaderedContentControl,System.Object,System.Windows.Controls.ItemsControl,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">Specified item to display.</param>
            <param name="parent">The parent ItemsControl.</param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.HasDefaultValue(System.Windows.Controls.Control,System.Windows.DependencyProperty)">
            <summary>
            Check whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>
            True if the property has the default value; false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnSelected">
            <summary>
            Raises the Selected event when the IsSelected property changes 
            from false to true.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnUnselected">
            <summary>
            Raises the Unselected event when the IsSelected property changes 
            from true to false.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.ToggleSelected(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsSelected property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.RaiseEvent(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.OnExpanderButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle ExpanderButton's click event.
            </summary>
            <param name="sender">The ExpanderButton in template.</param>
            <param name="e">Routed event arg.</param>
        </member>
        <member name="F:System.Windows.Controls.AccordionItem._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.AccordionItem.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpandSite">
            <summary>
            Gets or sets the expand site.
            </summary>
            <value>The expand site.</value>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.CollapseStoryboard">
            <summary>
            Gets or sets the collapse storyboard.
            </summary>
            <value>The collapse storyboard.</value>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpandStoryboard">
            <summary>
            Gets or sets the expand storyboard.
            </summary>
            <value>The expand storyboard.</value>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpandDirection">
            <summary>
            Gets the direction in which the AccordionItem content window opens.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the AccordionItem is 
            selected and its content window is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.IsLocked">
            <summary>
            Gets a value indicating whether the AccordionItem cannot be 
            selected by the user.
            </summary>
            <value><c>True</c> if this instance is locked; otherwise, <c>false</c>.</value>
            <remarks>The IsSelected property may not be changed when the 
            AccordionItem is locked. Locking occurs when the item is the first 
            in the list, the SelectionMode of Accordion requires atleast one selected
            AccordionItem and the AccordionItem is currently selected.</remarks>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.AccordionButtonStyle">
            <summary>
            Gets or sets the Style used by AccordionButton.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ExpandableContentControlStyle">
            <summary>
            Gets or sets the Style used by ExpandableContentControl.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ContentTargetSize">
            <summary>
            Gets the Size that the content will animate to.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ParentAccordion">
            <summary>
            Gets or sets a reference to the parent Accordion of an
            AccordionItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.ScheduledAction">
            <summary>
            Gets the scheduled action.
            </summary>
            <value>The scheduled action.</value>
        </member>
        <member name="E:System.Windows.Controls.AccordionItem.Selected">
            <summary>
            Occurs when the accordionItem is selected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.AccordionItem.Unselected">
            <summary>
            Occurs when the accordionItem is unselected.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.AccordionItem.RelevantContentSize">
            <summary>
            Gets the relevant size of the current content.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.AccordionItemAutomationPeer">
            <summary>
            Exposes AccordionItem types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.#ctor(System.Windows.Controls.AccordionItem)">
            <summary>
            Initializes a new instance of the AccordionAutomationPeer class.
            </summary>
            <param name="owner">
            The Accordion that is associated with this
            AccordionAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the AccordionItem that is associated
            with this AccordionItemAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Custom AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the AccordionItem that is associated with this
            AccordionItemAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name AccordionItem.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the AccordionItem that is associated
            with this AccordionItemAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Collapses the AccordionItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Expands the AccordionItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the AccordionItem to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current Accordion from the collection of selected
            items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears selection from currently selected items and then proceeds to
            select the current Accordion.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.OwnerAccordionItem">
            <summary>
            Gets the AccordionItem that owns this AccordionItemAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the Accordion.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether the Accordion is selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.AccordionItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider
            and acts as the container for the calling object.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.Primitives.AccordionButton">
            <summary>
            Represents the header for an accordion item.
            </summary>
            <remarks>By creating a seperate control, there is more flexibility in 
            the templating possibilities.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.AccordionButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.AccordionButton"/> 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.AccordionButton.UpdateVisualState(System.Boolean)">
            <summary>
            Updates the state of the visual.
            </summary>
            <param name="useTransitions">If set to <c>true</c> use transitions.</param>
            <remarks>The header will follow the parent accordionitem states.</remarks>
        </member>
        <member name="P:System.Windows.Controls.Primitives.AccordionButton.ParentAccordionItem">
            <summary>
            Gets or sets a reference to the parent AccordionItem 
            of an AccordionButton.
            </summary>
            <value>The parent accordion item.</value>
        </member>
        <member name="T:System.Windows.Controls.Primitives.ExpandableContentControl">
            <summary>
            Represents a control with a single piece of content that expands or 
            collapses in a sliding motion to a specified desired size.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.ElementScrollViewerName">
            <summary>
            The name of the ScrollSite template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.ElementContentSiteName">
            <summary>
            The name of the ContentSite template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.RevealModeProperty">
            <summary>
            Identifies the RevealMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnRevealModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RevealModeProperty property changed handler.
            </summary>
            <param name="d">ExpandableContentControl that changed its RevealMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.PercentageProperty">
            <summary>
            Identifies the Percentage dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnPercentagePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PercentageProperty property changed handler.
            </summary>
            <param name="d">Page that changed its Percentage.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ExpandableContentControl.TargetSizeProperty">
            <summary>
            Identifies the TargetSize dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnTargetSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TargetSizeProperty property changed handler.
            </summary>
            <param name="d">ExpandableContentControl that changed its TargetSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.SetRevealDimension">
            <summary>
            Sets the dimensions according to the current percentage.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.SetNonRevealDimension">
            <summary>
            Sets the opposite dimension.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ExpandableContentControl"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.ExpandableContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ExpandableContentControl control when a 
            new template is applied.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.ContentSite">
            <summary>
            Gets or sets the ContentSite template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.ScrollSite">
            <summary>
            Gets or sets the ScrollSite template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.RevealMode">
            <summary>
            Gets or sets the direction in which the ExpandableContentControl 
            content window opens.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.IsVerticalRevealMode">
            <summary>
            Gets a value indicating whether the content should be revealed vertically.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.IsHorizontalRevealMode">
            <summary>
            Gets a value indicating whether the content should be revealed horizontally.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.Percentage">
            <summary>
            Gets or sets the relative percentage of the content that is 
            currently visible. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.TargetSize">
            <summary>
            Gets or sets the desired size of the ExpandableContentControl content.
            </summary>
            <remarks>Use the percentage property to animate to this size.</remarks>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ExpandableContentControl.RelevantContentSize">
            <summary>
            Gets the content current visible size.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.AccordionSelectionMode">
            <summary>
            Defines the minimum and maximum number of selected items allowed in an Accordion control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.One">
            <summary>
            Exactly one item must be selected in the Accordion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.OneOrMore">
            <summary>
            At least one item must be selected in the Accordion. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.ZeroOrOne">
            <summary>
            No more than one item can be selected in the accordion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.AccordionSelectionMode.ZeroOrMore">
            <summary>
            Any number of  items can be selected in the Accordion. 
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SelectionSequence">
            <summary>
            Determines the order in which visual states are set.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SelectionSequence.CollapseBeforeExpand">
            <summary>
            Collapses are set before expansions.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SelectionSequence.Simultaneous">
            <summary>
            No delays, all states are set immediately.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.LayoutTransformer">
            <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.TransformRootName">
            <summary>
            Name of the TransformRoot template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.PresenterName">
            <summary>
            Name of the Presenter template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the LayoutTransform DependencyProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._transformRoot">
            <summary>
            Root element for performing transformations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._contentPresenter">
            <summary>
            ContentPresenter element for displaying the content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformer class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the LayoutTransformer control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.LayoutTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">Source of the change.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:System.Windows.Controls.LayoutTransformer.DiagnosticWriteLine(System.String)">
            <summary>
            Outputs diagnostic info if DIAGNOSTICWRITELINE is defined.
            </summary>
            <param name="message">Diagnostic message.</param>
        </member>
        <member name="P:System.Windows.Controls.LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer 
            control content.
            </summary>
            <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_InvalidManipulationOfSelectionCollections">
            <summary>
              Looks up a localized string similar to The modification made to the collection lead to an invalid Selection state. Please check the SelectionMode to allow zero or multiple items..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnActionFinish_InvalidFinish">
            <summary>
              Looks up a localized string similar to Should not signal a finish when item is not expected to perform an action..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectedIndicesChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SelectedIndices..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectedItemsChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SelectedItems..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectionModePropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid SelectionMode value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_OnSelectionSequencepropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid SelectionSequence value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_PrepareContainerForItemOverride_InvalidTemplates">
            <summary>
              Looks up a localized string similar to Cannot set both ItemTemplate and ContentTemplate at the same time. Please use ContentTemplate and HeaderTemplate..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Accordion_UnsupportedCollectionAction">
            <summary>
              Looks up a localized string similar to Unsupported collection action &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_InvalidWriteToContentTargetSize">
            <summary>
              Looks up a localized string similar to ContentTargetSize is a read-only value and is set through Accordion..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_InvalidWriteToExpandDirection">
            <summary>
              Looks up a localized string similar to ExpandDirection is a read-only value and is set through Accordion..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_OnIsSelectedPropertyChanged_InvalidChange">
            <summary>
              Looks up a localized string similar to Cannot modify the IsSelected property while item is locked..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_StartAction_InvalidAction">
            <summary>
              Looks up a localized string similar to Invalid Action &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.AccordionItem_StartAction_InvalidCall">
            <summary>
              Looks up a localized string similar to Cannot start an action when there is no action scheduled..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TransitiotioningContentControl_IsTransitioningReadOnly">
            <summary>
              Looks up a localized string similar to IsTransitioning property is read-only..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TransitioningContentControl">
            <summary>
            Represents a control with a single piece of content and when that content 
            changes performs a transition animation. 
            </summary>
            <QualityBand>Experimental</QualityBand>
            <remarks>The API for this control will change considerably in the future.</remarks>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.PresentationGroup">
            <summary>
            The name of the group that holds the presentation states.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.NormalState">
            <summary>
            The name of the state that represents a normal situation where no
            transition is currently being used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.DefaultTransitionState">
            <summary>
            The name of the state that represents the default transition.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.PreviousContentPresentationSitePartName">
            <summary>
            The name of the control that will display the previous content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.CurrentContentPresentationSitePartName">
            <summary>
            The name of the control that will display the current content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl._allowIsTransitioningWrite">
            <summary>
            Indicates whether the control allows writing IsTransitioning.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.IsTransitioningProperty">
            <summary>
            Identifies the IsTransitioning dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnIsTransitioningPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsTransitioningProperty property changed handler.
            </summary>
            <param name="d">TransitioningContentControl that changed its IsTransitioning.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl._currentTransition">
            <summary>
            The storyboard that is used to transition old and new content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.TransitionProperty">
            <summary>
            Identifies the Transition dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnTransitionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TransitionProperty property changed handler.
            </summary>
            <param name="d">TransitioningContentControl that changed its Transition.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnTransitionPropertyChanged(System.String,System.String)">
            <summary>
            Called when the TransitionProperty changes.
            </summary>
            <param name="oldTransition">The old transition.</param>
            <param name="newTransition">The new transition.</param>
        </member>
        <member name="F:System.Windows.Controls.TransitioningContentControl.RestartTransitionProperty">
            <summary>
            Identifies the RestartTransitionOnContentChange dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnRestartTransitionOnContentChangePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RestartTransitionProperty property changed handler.
            </summary>
            <param name="d">TransitioningContentControl that changed its RestartTransitionOnContentChange.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnRestartTransitionOnContentChangeChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when the RestartTransitionProperty changes.
            </summary>
            <param name="oldValue">The old value of RestartTransitionOnContentChange.</param>
            <param name="newValue">The new value of RestartTransitionOnContentChange.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TransitioningContentControl"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TransitioningContentControl control 
            when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.StartTransition(System.Object,System.Object)">
            <summary>
            Starts the transition.
            </summary>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.OnTransitionCompleted(System.Object,System.EventArgs)">
            <summary>
            Handles the Completed event of the transition storyboard.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.AbortTransition">
            <summary>
            Aborts the transition and releases the previous content.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TransitioningContentControl.ChangeTransition(System.String)">
            <summary>
            Called when the transition should be changed.
            </summary>
            <param name="newTransition">The transition to be used.</param>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.CurrentContentPresentationSite">
            <summary>
            Gets or sets the current content presentation site.
            </summary>
            <value>The current content presentation site.</value>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.PreviousContentPresentationSite">
            <summary>
            Gets or sets the previous content presentation site.
            </summary>
            <value>The previous content presentation site.</value>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.IsTransitioning">
            <summary>
            Gets a value indicating whether this instance is currently performing
            a transition.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.Transition">
            <summary>
            Gets or sets the name of the transition to use. These correspond
            directly to the VisualStates inside the PresentationStates group.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TransitioningContentControl.RestartTransitionOnContentChange">
            <summary>
            Gets or sets a value indicating whether the current transition
            will be aborted when setting new content during a transition.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TransitioningContentControl.TransitionCompleted">
            <summary>
            Occurs when the current transition has completed.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Jul09\Bin\System.Windows.Controls.Input.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Input.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_CurrentIndex_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid index value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_InvalidInputAction_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid InvalidInputAction value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.InvalidAttemptToChangeReadOnlyProperty">
            <summary>
              Looks up a localized string similar to Invalid attempt to change read-only property &quot;{0}.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ListTimePickerPopup_TimeItemsSelection_ReadOnly">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeItemsSelection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidDoubleValue_InvalidDoubleValue">
            <summary>
              Looks up a localized string similar to Invalid double value &apos;{0}&apos;: valid value is of double type and within decimal range..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidIncrementValue_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Increment value &apos;{0}&apos;: valid value is of double type, within decimal range, and positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_OnDecimalPlacesPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid DecimalPlaces value &apos;{0}&apos;: valid value is of int type and within 0 and 15 inclusive..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ObservableObjectCollection_ReadOnly">
            <summary>
              Looks up a localized string similar to The collection is currently ReadOnly and should not be modified..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_OnMaxDropDownHeightPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid maximum drop down height value &apos;{0}&apos;. The value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_PopupButtonModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupButtonMode value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Spinner_SpinNotValid">
            <summary>
              Looks up a localized string similar to Spin action is not valid at this moment..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupMinutesInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupMinutesInterval &apos;{0}&apos;. The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupSecondsInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupSecondsInterval &apos;{0}&apos;.The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupSetInStyle">
            <summary>
              Looks up a localized string similar to Cannot set the PopupProperty in a style. Please use PopupTemplate..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupTimeSelectionModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupTimeSelectionMode for this popup, value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeUpDown_OnTimeHintContentChanged">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeHintContent..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UpDown_ParseException">
            <summary>
              Looks up a localized string similar to Cannot parse text &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Extensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="T:System.Windows.Controls.BindingSourceEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node. Uses the BindingSource to do the evaluation.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
            <remarks>Mimicks the class BindingEvaluator that uses DataContext
            to do evaluation.</remarks>
        </member>
        <member name="F:System.Windows.Controls.BindingSourceEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingSourceEvaluator class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Evaluates the specified source.
            </summary>
            <param name="source">The object used as a source for the
            evaluation.</param>
            <returns>The evaluated binding.</returns>
            <remarks>Only uses Path, Converter, ConverterCulture and
            ConverterParameter.</remarks>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.Value">
            <summary>
            Gets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.ValueBinding">
            <summary>
            Gets the value binding that is used as a template
            for the actual evaluation.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainUpDown">
            <summary>
            Represents a control that enables single value selection from a 
            domain of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase`1">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <remarks>
            This non generic base class is used to specify default template,
            and simulate covariance among sub classes of UpDownBase&lt;T&gt;.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementTextName">
            <summary>
            Name constant for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementSpinnerName">
            <summary>
            Name constant for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleName">
            <summary>
            Name constant for SpinnerStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for SpinnerStyleProperty.
            </summary>
            <param name="d">UpDownBase whose SpinnerStyleProperty changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when SpinnerStyle property value has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.GetValue">
            <summary>
            GetValue method for returning UpDownBase&lt;T&gt;.Value as object.
            </summary>
            <returns>Value as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.SetValue(System.Object)">
            <summary>
            SetValue method for setting UpDownBase&lt;T&gt;.Value through object type parameter.
            </summary>
            <param name="value">New value in object type.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._textBox">
            <summary>
            Private field for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._text">
            <summary>
            Private field to hold previous value of TextBox.Text.
            </summary>
            <remarks>
            Because TextBox.TextChanged seems to fire randomly, 
            so we compensatethat by handling LostFocus,
            and comparing TextBox.Text with cached previous value.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._spinner">
            <summary>
            Private field for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.IsEditableProperty">
            <summary>
            Identifies the IsEditable dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEditableProperty property changed handler.
            </summary>
            <param name="d">UpDownBase that changed its IsEditable.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase(of T) class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.GetValue">
            <summary>
            GetValue override to return Value property as object type.
            </summary>
            <returns>The Value property as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetValue(System.Object)">
            <summary>
            SetValue override to set value to Value property.
            </summary>
            <param name="value">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnApplyTemplate">
            <summary>
            Builds the visual tree for the UpDownBase(of T) control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous 
            value to decide whether user has typed in a new value. 
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ProcessUserInput">
            <summary>
            Called OnLostFocus and OnKeyDown(Key.Enter) to process user input.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's GotFocus event.
            This event handler selects the whole text on GotFocus when nothing is selected.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetTextBoxText">
            <summary>
            Display current value in Text template part.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpinnerSpin(System.Object,System.Windows.Controls.SpinEventArgs)">
            <summary>
            Event handler for Spinner template part's Spin event.
            </summary>
            <param name="sender">The Spinner template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParseError(System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raises the ParserError event when there is an error in parsing user input.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParsing(System.Windows.Controls.UpDownParsingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Parsing"/> event, to allow easily hooking
            into the parse logic.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Occurs when the spinner spins.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{`0})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{`0})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditableChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when IsEditable property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Text">
            <summary>
            Gets the Text template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Spinner">
            <summary>
            Gets the Spinner template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.IsEditable">
            <summary>
            Gets or sets a value indicating whether the value can be manually 
            edited by the end-user.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.GroupDomain">
            <summary>
            Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateInvalid">
            <summary>
            InvalidDomain of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateValid">
            <summary>
            Valid of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._items">
            <summary>
            Backing store for the Items collection, when ItemsSource is null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueDuringInitialization">
            <summary>
            The value as set during initialization. Since no items have been added
            at that point, the value will be reset. However, during 
            initialization, the value will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to new object().</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isNotAllowedToEditByFocus">
            <summary>
            Indicates whether the control should not move to EditMode when
            it is gains Focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isEditing">
            <summary>
            BackingField for IsEditing, indicating whether the control is in EditMode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isInvalidInput">
            <summary>
            Backing field for InvalidInput, indicating whether the last parsed input was invalid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.CurrentIndexProperty">
            <summary>
            Identifies the CurrentIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CurrentIndexProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its CurrentIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.IsValidCurrentIndex(System.Int32)">
            <summary>
            SelectedIndexProperty validation handler.
            </summary>
            <param name="value">New value of SelectedIndexProperty.</param>
            <returns>
            Returns true if value is valid for SelectedIndexProperty, false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.CoerceSelectedIndex(System.Int32)">
            <summary>
            CurrentIndexProperty coercion handler.
            </summary>
            <param name="index">The index.</param>
            <returns>
            Coerced effective value of CurrentIndexProperty from input parameter value.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._initialCurrentIndex">
            <summary>
            Cached previous value of SelectedIndexProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexDuringInitialization">
            <summary>
            The index as set during initialization. Since no items have been added
            at that point, an Exception should be thrown. However, during 
            initialization, the index will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to -1.</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexNestLevel">
            <summary>
            Nest level for selected index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueBindingEvaluator">
            <summary>
            Gets or sets the BindingEvaluator, a framework element that can
            provide updated string values from a single binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.InvalidInputActionProperty">
            <summary>
            Identifies the InvalidInputAction dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnInvalidInputActionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            InvalidInputAction property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed the InvalidInputAction.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.FallbackItemProperty">
            <summary>
            Identifies the FallbackItem dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown that changed its ItemsSource.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemTemplateProperty">
            <summary>
            Identifies the ItemTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DomainUpDown control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a DomainUpDownAutomationPeer for use by the 
            Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetActualItems">
            <summary>
            Gets the correct items collection that we are using, abstracting away ItemsSource and Items logic.
            </summary>
            <returns>Returns either Items or ItemsSource.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items collection is changed. This can either be Items or ItemsSource.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <remarks>If ItemsSource does not implement INotifyCollectionChanged, this method will not be called on
            changes in the ItemsSource.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when ItemsSource has changed.
            Handles setting the selected item.
            </summary>
            <param name="oldItemsSource">The old items source.</param>
            <param name="itemsSource">The items source.</param>
            <remarks>When switching ItemsSource, the selectedIndex will be used (if possible) 
            to select an item in the new collection.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Object})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Cancels the event when the value is not part of the domain.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Will set CurrentIndex.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexChanged(System.Int32,System.Int32)">
            <summary>
            Processes changes to the CurrentIndex property.
            </summary>
            <param name="oldValue">The old value of CurrentIndex.</param>
            <param name="newValue">The new value of CurrentIndex.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a value in the domain.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
            <remarks>An empty string will return the currently selected value.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not increment when the selected item is the last item.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not decrement when the selected item is the first item. </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current index, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.TryEnterEditMode">
            <summary>
            Tries the enter edit mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetIndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Gets the index of a sequence.
            </summary>
            <param name="sequence">The sequence that contains the item of interest.</param>
            <param name="item">The item that contained within the sequence.</param>
            <returns>The index of the item in the sequence. -1 if the item was not found.</returns>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.Items">
            <summary>
            Gets a collection of items which represent the domain 
            in the DomainUpDown control.
            </summary>
            <remarks>When ItemsSource is set, will return a copy of the items in ItemsSource.
            When ItemsSource property is not set (set to null) this collection 
            will return an empty writeable colection.</remarks>
            <value>The items.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsEditing">
            <summary>
            Gets a value indicating whether the control is in EditMode.
            </summary>
            <value><c>True</c> if currently in edit mode; otherwise, <c>False</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsInvalidInput">
            <summary>
            Gets or sets a value indicating whether the last parsed input was invalid.
            </summary>
            <value><c>True</c> if input is currently Invalid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.CurrentIndex">
            <summary>
            Gets or sets the index of the current selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the DomainUpDown control 
            will cycle through values when trying to spin the first and last item. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberBinding">
            <summary>
            Gets or sets the Binding object used for object to string 
            conversions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberPath">
            <summary>
            Gets or sets the Binding Path to use for identifying the value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.InvalidInputAction">
            <summary>
            Gets or sets a value determining the DomainUpDown behavior when a 
            user sets a value not included in the domain.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.FallbackItem">
            <summary>
            Gets or sets the item that is used when a user attempts to 
            set a value not included in the domain.
            </summary>
            <remarks>FallbackItem will only be used if it is contained within 
            the Items collection.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemsSource">
            <summary>
            Gets or sets a collection of items which represent the 
            domain in the DomainUpDown control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display an item from the 
            Domain when the item is selected.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.DomainUpDownAutomationPeer">
            <summary>
            Exposes DomainUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1">
            <summary>
            Exposes UpDownBase types to UI Automation.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.#ctor(System.Windows.Controls.UpDownBase{`0})">
            <summary>
            Initializes a new instance of the UpDownBaseAutomationPeer class.
            </summary>
            <param name="owner">
            The UpDownBase that is associated with this UpDownBaseAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Group AutomationControlType.</returns>
            <remarks>Return AutomationControlType.Spinner per MSDN article.</remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetClassNameCore">
            <summary>
            Gets the name of the UpDownBase that is associated with this
            UpDownBaseAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name UpDownBase.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.OwnerUpDown">
            <summary>
            Gets the UpDownBase that owns this UpDownBaseAutomationPeer.
            </summary>
            <value>The domain up down.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.#ctor(System.Windows.Controls.DomainUpDown)">
            <summary>
            Initializes a new instance of the DomainUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The DomainUpDown that is associated with this DomainUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the DomainUpDown that is associated with this
            DomainUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name DomainUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.InvalidInputAction">
            <summary>
            Determines the behavior of a DomainUpDown control when a user sets a 
            value not included in the domain.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.UseFallbackItem">
            <summary>
            Once a user sets a value not included in the domain, the DomainUpDown 
            control will use the FallbackItem property as the selected item. If 
            FallbackItem is not specified the first item in the DomainUpDown Items 
            collection will be used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.TextBoxCannotLoseFocus">
            <summary>
            Once a user sets a value not included in the domain, the 
            DomainUpDown control cannot lose focus.
            </summary>
            <remarks>There are situations that the control can not regain focus.</remarks>
        </member>
        <member name="T:System.Windows.Controls.ObservableObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObservableObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML and allows for readonly collections.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObservableObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObservableObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
            <param name="collection">The collection whose items will be copied.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.InsertItem(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.SetItem(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
            <value><c>True</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericUpDown">
            <summary>
            Represents a control that enables single value selection from a numeric
            range of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Minimum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Maximum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.IncrementProperty">
            <summary>
            Identifies the Increment dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IncrementProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Increment property.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Increment property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementChanged(System.Double,System.Double)">
            <summary>
            Called when the Increment property value has changed.
            </summary>
            <param name="oldValue">Old value of the Increment property.</param>
            <param name="newValue">New value of the Increment property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.DecimalPlacesProperty">
            <summary>
            Identifies the DecimalPlaces dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DecimalPlacesProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its DecimalPlaces.</param>
            <param name="e">DependencyPropertyChangedEventArgs for DecimalPlaces property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesChanged(System.Int32,System.Int32)">
            <summary>
            Called when the DecimalPlaces property value has changed.
            </summary>
            <param name="oldValue">Old value of the DecimalPlaces property.</param>
            <param name="newValue">New value of the DecimalPlaces property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.formatString">
            <summary>
            Format string used to display Value property.
            </summary>
            <seealso cref="P:System.Windows.Controls.NumericUpDown.DecimalPlaces"/>
            <seealso cref="M:System.Windows.Controls.NumericUpDown.FormatValue"/>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.#ctor">
            <summary>
            Initializes a new instance of the NumericUpDown class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current value, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the NumericUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a NumericUpDownAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A NumericUpDownAutomationPeer object for the NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanging to do validation and coercion.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanged to raise value changed automation event and 
            determine if a maximum or minimum has been reached.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a decimal number.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.FormatValue">
            <summary>
            Provides decimal specific value formatting for the value property.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._levelsFromRootCall">
            <summary>
            Levels from root call.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialInc">
            <summary>
            Initial Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMin">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMax">
            <summary>
            Initial Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialVal">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedInc">
            <summary>
            Requested Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMin">
            <summary>
            Requested Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMax">
            <summary>
            Requested Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedVal">
            <summary>
            Requested Value value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceMaximum">
            <summary>
            Ensure the Maximum is greater than or equal to the Minimum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceValue">
            <summary>
            Ensure the value falls between the Minimum and Maximum values.
            This function assumes that (Maximum >= Minimum).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.IsValidDoubleValue(System.Object,System.Double@)">
            <summary>
            Check if an object value is a valid double value.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="number">The double value to be returned.</param>
            <returns>true if a valid double; false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <remarks>
            EnsureValidDoubleValue(DependencyObject d, DependencyPropertyChangedEventArgs e) is simply a wrapper for 
            EnsureValidDoubleValue(DependencyObject d, DependencyProperty property, object oldValue, object newValue).
            </remarks>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="property">The DependencyProperty that changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidIncrementValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of Increment dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDecimalPlacesValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of DecimalPlaces dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DecimalPlaces DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Minimum">
            <summary>
            Gets or sets the Minimum possible Value.
            </summary>
            <remarks>
            The default value is zero.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Maximum">
            <summary>
            Gets or sets the Maximum possible Value.
            </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Increment">
            <summary>
            Gets or sets a value added or subtracted from the value property.
             </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places that are displayed in the 
            NumericUpDown. 
            </summary>
            <remarks>
            The default value is zero.
            
            DecimalPlaces decides output format of Value property.
            It is implemented via formatString field and FormatValue override.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.NumericUpDownAutomationPeer">
            <summary>
            Exposes NumericUpDown types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.#ctor(System.Windows.Controls.NumericUpDown)">
            <summary>
            Initializes a new instance of the NumericUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The NumericUpDown that is associated with this NumericUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the NumericUpDown that is associated with this
            NumericUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the NumericUpDown that is associated
            with this NumericUpDownAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Sets the value of the NumericUpDown.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value of the NumericUpDown is read-only.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <summary>
            Gets the maximum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <summary>
            Gets minimum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <summary>
            Gets the value of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.EnumerableExtensions">
            <summary>
            Extension methods for Enumerable.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a sequence from an integer, to an integer, skipping 
            a defined amount of integers.
            </summary>
            <param name="from">The value of the first integer in the sequence.</param>
            <param name="to">The inclusive end of the sequence.</param>
            <param name="by">The amount of integers to skip.</param>
            <returns>A sequence of integers.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an action to each element in an IEnumerable.
            </summary>
            <typeparam name="T">The Type of the elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="action">The action applied to all the elements.</param>
            <remarks>See a discussion about the merits on this function here:
            http://blogs.msdn.com/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx.</remarks>
        </member>
        <member name="T:System.Windows.Controls.Primitives.Clipper">
            <summary>
            Clips a ratio of its content.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.Clipper.RatioVisibleProperty">
            <summary>
            Identifies the RatioVisible dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisiblePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="d">PartialView that changed its RatioVisible.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisiblePropertyChanged(System.Double,System.Double)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.#ctor">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.Clipper.RatioVisible">
            <summary>
            Gets or sets the percentage of the item visible.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EnumerableFunctions">
            <summary>
            This class contains general purpose functions to manipulate the generic
            IEnumerable type.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Scan``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1},``1)">
            <summary>
            Applies a function to an accumulated value and an item in the 
            sequence and yields the result as the accumulated value.
            </summary>
            <typeparam name="T">The type of the input sequence.</typeparam>
            <typeparam name="R">The type of the initial value.</typeparam>
            <param name="that">The sequence to scan.</param>
            <param name="func">The function applied to the accumulator and the
            current item.</param>
            <param name="initialValue">The initial value in the output sequence.
            </param>
            <returns>A sequence of computed values.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.GetWeightedValues(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns a stream of weighted values based on a percentage.
            </summary>
            <param name="values">A sequence of values.</param>
            <param name="percent">The percentage of values.</param>
            <returns>A sequence of percentages.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.LinearClipper">
            <summary>
            Clips the content of the control in a given direction.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.LinearClipper.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="d">ExpandDirectionView that changed its ExpandDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionPropertyChanged(System.Windows.Controls.ExpandDirection,System.Windows.Controls.ExpandDirection)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.LinearClipper.ExpandDirection">
            <summary>
            Gets or sets the clipped edge.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.NullableConverter`1">
            <summary>
            Converts a string or base value to a <see cref="T:System.Nullable"/> value.
            </summary>
            <typeparam name="T">The type should be value type.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="destinationType">The type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <param name="destinationType">The type of convert the value to
            .</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.Rating">
            <summary>
            A control that has a rating.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Rating.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="dependencyObject">Rating that changed its DisplayValue.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValuePropertyChanged">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemCountProperty">
            <summary>
            Identifies the ItemCount dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemCountProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemCount.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountPropertyChanged(System.Int32)">
            <summary>
            This method is invoked when the items count property is changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.Rating.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemContainerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStylePropertyChanged(System.Windows.Style)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its SelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModePropertyChanged(System.Windows.Controls.RatingSelectionMode,System.Windows.Controls.RatingSelectionMode)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its Value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValuePropertyChanged(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the control when the items change.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.#ctor">
            <summary>
            Initializes a new instance of the Rating control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnApplyTemplate">
            <summary>
            Applies control template to the items control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateValues">
            <summary>
            Updates the values of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateDisplayValues">
            <summary>
            Updates the value and actual value of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateHoverStates">
            <summary>
            Updates the hover states of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetContainerForItemOverride">
            <summary>
            This method returns a container for the item.
            </summary>
            <returns>A container for the item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Gets a value indicating whether the item is its own container.
            </summary>
            <param name="item">The item which may be a container.</param>
            <returns>A value indicating whether the item is its own container.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method prepares a container to host an item.
            </summary>
            <param name="element">The container.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Sets the focused rating item.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Clears the focus of the rating item.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method clears a container used to host an item.
            </summary>
            <param name="element">The container that hosts the item.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse enter event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse leave event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItems">
            <summary>
            Returns a sequence of rating items.
            </summary>
            <returns>A sequence of rating items.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.SelectRatingItem(System.Windows.Controls.RatingItem)">
            <summary>
            Selects a rating item.
            </summary>
            <param name="selectedRatingItem">The selected rating item.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is raised when a rating item value is selected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetSelectedRatingItem">
            <summary>
            Returns the selected rating item.
            </summary>
            <returns>The selected rating item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnRatingItemValueSelected(System.Windows.Controls.RatingItem,System.Double)">
            <summary>
            This method is invoked when the rating item value is changed.
            </summary>
            <param name="ratingItem">The rating item that has changed.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnCreateAutomationPeer">
            <summary>
            Returns a RatingItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A RatingItemAutomationPeer object for the RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event when a key
            is pressed while the control has focus.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains
            the event data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e " />is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItemAtOffsetFrom(System.Windows.Controls.RatingItem,System.Int32)">
            <summary>
            Gets a rating item at a certain index offset from another 
            rating item.
            </summary>
            <param name="ratingItem">The rating item.</param>
            <param name="offset">The rating item at an offset from the 
            index of the rating item.</param>
            <returns>The rating item at the offset.</returns>
        </member>
        <member name="P:System.Windows.Controls.Rating.DisplayValue">
            <summary>
            Gets or sets the actual value of the Rating control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.FocusedRatingItem">
            <summary>
            Gets or sets the focused rating item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.HoveredRatingItem">
            <summary>
            Gets or sets the rating item hovered over.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Interaction">
            <summary>
            Gets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemsControlHelper">
            <summary>
            Gets or sets the items control helper class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemCount">
            <summary>
            Gets or sets the number of rating items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the Rating is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Value">
            <summary>
            Gets or sets the rating value.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Rating.ValueChanged">
            <summary>
            This event is raised when the value of the rating is changed.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingAutomationPeer">
            <summary>
            Exposes Rating types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.#ctor(System.Windows.Controls.Rating)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RatingAutomationPeer"/> class.
            </summary>
            <param name="owner">The Rating that is associated with this
            RatingAutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Rating that is associated with this
            RatingAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name Rating.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Rating that is associated
            with this RatingAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>List AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the Rating that is associated
            with this RatingAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of 
            the <see cref="T:System.Windows.Controls.ItemsControl"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer"/>.
            </summary>
            <returns>
            A collection of RatingItemAutomationPeer elements, or null if the
            Rating that is associated with this RatingAutomationPeer is
            empty.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Sets the value of the Rating.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.OwnerRating">
            <summary>
            Gets the Rating that owns this RatingAutomationPeer.
            </summary>
            <value>The Rating.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>true if multiple selection is allowed; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>true if selection is required; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value of the Rating is read-only.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <summary>
            Gets the maximum value supported by the Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <summary>
            Gets minimum value supported by the Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <summary>
            Gets the value of the Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.RatingItem">
            <summary>
            An item used in a rating control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateFilled">
            <summary>
            The state in which the item is filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateEmpty">
            <summary>
            The state in which the item is empty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.GroupFill">
            <summary>
            The group that contains fill states.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StatePartial">
            <summary>
            The state in which the item is partially filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._interactionHelper">
            <summary>
            The interaction helper used to get the common states working.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingDisplayValue">
            <summary>
            A value indicating whether the actual value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its DisplayValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValuePropertyChanged(System.Double,System.Double)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary> 
            <param name="oldValue">The old value.</param> 
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingIsReadOnly">
            <summary>
            A value indicating whether the read only value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.RatingItem.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.SelectValue">
            <summary>
            Selects a value and raises the value selected event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.#ctor">
            <summary>
            Initializes a new instance of the RatingItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse enters the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse leaves the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnClick">
            <summary>
            Sets the value to 1.0 when clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use 
            transitions.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionItemAutomationPeer object for the AccordionItem.</returns>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.DisplayValue">
            <summary>
            Gets the actual value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.IsReadOnly">
            <summary>
            Gets a value indicating whether the control is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.ParentRating">
            <summary>
            Gets or sets the parent rating of this rating item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.Value">
            <summary>
            Gets or sets the value property.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingItemAutomationPeer">
            <summary>
            Exposes RatingItem types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.#ctor(System.Windows.Controls.RatingItem)">
            <summary>
            Initializes a new instance of the RatingAutomationPeer class.
            </summary>
            <param name="owner">
            The Rating that is associated with this
            RatingAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the RatingItem that is associated
            with this RatingItemAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Custom AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the RatingItem that is associated with this
            RatingItemAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the RatingItem that is associated
            with this RatingItemAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the RatingItem to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current Rating from the collection of selected
            items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears selection from currently selected items and then proceeds to
            select the current Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.OwnerRatingItem">
            <summary>
            Gets the RatingItem that owns this RatingItemAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether the Rating is selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider
            and acts as the container for the calling object.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.RatingSelectionMode">
            <summary>
            This type is used to determine the state of the item selected and the
            previous items.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Continuous">
            <summary>
            All items before the selected ones are selected.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Individual">
            <summary>
            Only the item selected is visually distinguished.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Tuple`2">
            <summary>
            A structure that groups two values.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Tuple structure.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="P:System.Windows.Controls.Tuple`2.First">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Tuple`2.Second">
            <summary>
            Gets the second value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Tuple">
            <summary>
            A set of tuple functions.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Tuple.Create``2(``0,``1)">
            <summary>
            A method to create tuples.
            </summary>
            <typeparam name="T0">The type of the first item.</typeparam>
            <typeparam name="T1">The type of the second item.</typeparam>
            <param name="arg0">The type of the first argument.</param>
            <param name="arg1">The type of the second argument.</param>
            <returns>The tuple to return.</returns>
        </member>
        <member name="T:System.Windows.Controls.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
            <remarks>
            ButtonSpinner inherits from Spinner. 
            It adds two button template parts and a content property.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.Spinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
            <remarks>
            Spinner abstract class defines and implements common and focused visual state groups.
            Spinner abstract class defines and implements Spin event and OnSpin method.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Spinner.ValidSpinDirectionProperty">
            <summary>
            Identifies the ValidSpinDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidSpinDirectionProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its ValidSpinDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.#ctor">
            <summary>
            Initializes a new instance of the Spinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.Spinner.ValidSpinDirection">
            <summary>
            Gets or sets the spin direction that is currently valid.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Spinner.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Spinner.Spin">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementIncreaseButtonName">
            <summary>
            Name constant of the IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementDecreaseButtonName">
            <summary>
            Name constant of the DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._increaseButton">
            <summary>
            Private field for IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._decreaseButton">
            <summary>
            Private field for DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its Content.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.#ctor">
            <summary>
            Initializes a new instance of the ButtonSpinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ButtonSpinner control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentChanged(System.Object,System.Object)">
            <summary>
            Occurs when the Content property value changed.
            </summary>
            <param name="oldValue">The old value of the Content property.</param>
            <param name="newValue">The new value of the Content property.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle click event of IncreaseButton and DecreaseButton template parts,
            translating Click to appropriate Spin event.
            </summary>
            <param name="sender">Event sender, should be either IncreaseButton or DecreaseButton template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Cancel LeftMouseButtonUp events originating from a button that has
            been changed to disabled.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.Content">
            <summary>
            Gets or sets the content that is contained within the button spinner.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.SpinEventArgs.#ctor(System.Windows.Controls.SpinDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="P:System.Windows.Controls.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the 
            end-user.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer">
            <summary>
            Exposes ListTimePickerPopup types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer">
            <summary>
            Exposes TimePickerPopup types to UI Automation.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePickerPopup that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the TimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The TimePicker that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.ListTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>
            Returns an AutomationPeer that can handle the the pattern,
            or null.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string ListTimePickerPopup.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of child elements of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren"/>.
            </summary>
            <returns>
            A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> elements.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The ListTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.OwnerListTimePickerPopup">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.PickerAutomationPeer">
            <summary>
            Exposes Picker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.#ctor(System.Windows.Controls.Picker)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.PickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The Picker that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Picker that is associated
            with this PickerAutomationPeer. This method is called by
            GetAutomationControlType.
            </summary>
            <returns>ComboBox AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Picker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raises the ExpandCollapse automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.OwnerPicker">
            <summary>
            Gets the Picker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.ExpandCollapseState">
            <summary>
            Gets an element's current Collapsed or Expanded state.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer">
            <summary>
            Exposes RangeTimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.RangeTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner of this AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string RangeTimePickerPopupAutomationPeer.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar control type.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the RangeTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The RangeTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerAutomationPeer">
            <summary>
            Exposes TimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.#ctor(System.Windows.Controls.TimePicker)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TimePickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePicker that is associated to this
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimePicker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
            <summary>
            Sets the control's text value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.OwnerTimePicker">
            <summary>
            Gets the TimePicker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value is read only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
            <summary>
            Gets a string representation of the current text value.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimeUpDownAutomationPeer">
            <summary>
            Exposes TimeUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.#ctor(System.Windows.Controls.TimeUpDown)">
            <summary>
            Initializes a new instance of the TimeUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The TimeUpDown that is associated with this TimeUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimeUpDown that is associated with this
            TimeUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name TimeUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.ItemSelectionHelper`1">
            <summary>
            Exposes an ObservableCollection of T and 
            a SelectedItem property for binding purposes.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItemName">
            <summary>
            Name used for the SelectedItem property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.ItemsName">
            <summary>
            Name used for the Items property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._selectedItem">
            <summary>
            BackingField for the selected item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._items">
            <summary>
            BackingField for Items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:System.Windows.Controls.Primitives.ItemSelectionHelper`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time from a ListBox.
            </summary>
            <remarks>Can also be used independently.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopup">
            <summary>
            Base class for a control that can be used as the popup portion in a TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.ITimeInput">
            <summary>
            Interface describing the common value, maximum and minimum properties
            that a TimeInput control is expected to have.
            </summary>
            <remarks>Used for internal coercion of these properties.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Value">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedStateName">
            <summary>
            The name of the visual state that represents a Popup that is 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.NotContainedStateName">
            <summary>
            The name of the visual state that represent a Popup that is not 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedByPickerGroupName">
            <summary>
            The name of the ContainedByPicker state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupModeGroupName">
            <summary>
            The name of the PopupMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsAndDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowTimeDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.HoursAndMinutesOnlyStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timePickerParent">
            <summary>
            BackingField of TimePickerParent.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoChanged(System.Windows.Controls.TimeGlobalizationInfo,System.Windows.Controls.TimeGlobalizationInfo)">
            <summary>
            Called when the time globalization info changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when display format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCancel">
            <summary>
            Raises the Cancel event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCommit">
            <summary>
            Raises the Commit event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual states.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>An array of PopupTimeSelectionModes that are supported by
            the Popup.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCreateAutomationPeer">
            <summary>
            Returns an AutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>An AutomationPeer for the Popup object.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>An AutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimePickerParent">
            <summary>
            Gets or sets the container for this Popup.
            </summary>
            <value>The TimePicker that contains this Popup.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Minimum">
            <summary>
            Gets or sets the Minimum time considered valid by the control.
            </summary>
            <remarks>Setting the Minimum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Maximum">
            <summary>
            Gets or sets the Maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            time formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalizationInfo used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time 
            in the TimePickerPopup. If no format is specified, ShortTimeFormat 
            is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupSecondsInterval">
            <summary>
            Gets or sets the interval of seconds that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupMinutesInterval">
            <summary>
            Gets or sets the interval of minutes that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Commit">
            <summary>
            Occurs when a selected item is committed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxPartName">
            <summary>
            The name of the ListBox TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._listBoxPart">
            <summary>
            BackingField for ListBoxPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._isValueChangeCausedBySelection">
            <summary>
            Determines whether the value changed because SelectedItem in the
            ListBox was changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxStyleProperty">
            <summary>
            Identifies the ListBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyleProperty">
            <summary>
            Identifies the ListBoxItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxItemStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._allowWritingTimeItemsSelection">
            <summary>
            Indicates whether it is allowed to set the TimeItemsSelection property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionProperty">
            <summary>
            Identifies the TimeItemsSelection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnTimeItemsSelectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeItemsSelectionProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its TimeItemsSelection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ListTimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RegenerateTimeItems">
            <summary>
            Regenerates the time items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.SelectValue">
            <summary>
            Select a value based on the current value. This will 'snap' the 
            Value to the closest possible Time based on the interval.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ScrollToSelectedValue">
            <summary>
            Scrolls to a value in the list, or closest.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Called when the TimeItems object is set.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called by any property change on the TimeItems object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnOpened">
            <summary>
            Called when TimePicker opened the popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ItemSelectedByMouse(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the ListBoxPart control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The ListTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RaiseAutomationPeerSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the automation peer selection changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxPart">
            <summary>
            Gets the ListBox part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxStyle">
            <summary>
            Gets or sets the Style applied to the ListBox portion the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyle">
            <summary>
            Gets or sets the Style applied to the ListBoxItems in the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelection">
            <summary>
            Gets the collection of times used in the ListBox portion of the 
            ListTimePickerPopup control.
            </summary>
            <value>The time items selection.</value>
        </member>
        <member name="T:System.Windows.Controls.RangeTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time through 3 
            sliders: Hours, Minutes and seconds.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursSliderPartName">
            <summary>
            The HoursSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesSliderPartName">
            <summary>
            The MinutesSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsSliderPartName">
            <summary>
            The SecondsSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursContainerPartName">
            <summary>
            The HoursLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesContainerPartName">
            <summary>
            The MinutesLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsContainerPartName">
            <summary>
            The SecondsLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPartName">
            <summary>
            The name of the CommitButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPartName">
            <summary>
            The name of the CancelButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._secondsSlider">
            <summary>
            BackingField for the SecondsSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._minutesSlider">
            <summary>
            BackingField for the MinutesSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._hoursSlider">
            <summary>
            BackingField for the HoursSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._cancelButtonPart">
            <summary>
            BackingField for CancelButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._commitButtonPart">
            <summary>
            BackingField for CommitButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._isOpenedByContainer">
            <summary>
            Is set when opened or closed by a container.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._ignoreSliderChange">
            <summary>
            Determines whether the control should ignore the changes in its 
            sliders.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SliderStyleProperty">
            <summary>
            Identifies the SliderStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnSliderStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SliderStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its SliderStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyleProperty">
            <summary>
            Identifies the TimeButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnTimeButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeButtonStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its TimeButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.RangeTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the RangeTimePickerPopup control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SliderSizeChange(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when a slider changes size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SecondsChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Seconds Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.MinutesChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Minutes Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>        
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.HoursChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Hours Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCommit(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the commit button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCancel(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the cancel button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValueFromSliders">
            <summary>
            Calculates the value based on the sliders.
            </summary>
            <returns>The DateTime as represented by the current values in the 
            Sliders.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetSlidersToValue(System.DateTime)">
            <summary>
            Sets the sliders to value.
            </summary>
            <param name="value">The DateTime that needs to be reflected by
            the three sliders.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GenerateLabels">
            <summary>
            Generates the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetEnabledStatusOnLabels">
            <summary>
            Sets the enabled status on the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.LayoutLabels">
            <summary>
            Arranges the time labels on the RangeTimePickerPopup control.
            </summary>
            <remarks>Uses a canvas to layout labels vertically.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnLabelClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a label is clicked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetCoercedValue(System.DateTime)">
            <summary>
            Gets the value after Minimum and Maximum coercion.
            </summary>
            <param name="time">The input.</param>
            <returns>Time between Minimum and Maximum.</returns>
            <remarks>Done to avoid coercion in containing controls.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetSnappedValue(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the coerced value, using interval and a minimum and maximum.
            </summary>
            <param name="value">The value that will be snapped.</param>
            <param name="minimum">The minimum the value may be.</param>
            <param name="maximum">The maximum the value may be.</param>
            <param name="interval">The interval to which the value gets snapped.</param>
            <returns>A value that is within range and snapped to an interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateLabelElement(System.String,System.TimeSpan)">
            <summary>
            Creates the element for a label.
            </summary>
            <param name="text">The text that is set as content.</param>
            <param name="timespan">The TimeSpan that is represented by the Button.</param>
            <returns>A Button representing the label.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The RangeTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsSlider">
            <summary>
            Gets or sets the seconds slider Part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesSlider">
            <summary>
            Gets or sets the minutes slider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursSlider">
            <summary>
            Gets or sets the HoursSlider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursContainer">
            <summary>
            Gets or sets the hours labels.
            </summary>
            <value>The hours labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesContainer">
            <summary>
            Gets or sets the minute labels.
            </summary>
            <value>The minute labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsContainer">
            <summary>
            Gets or sets the second labels.
            </summary>
            <value>The second labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPart">
            <summary>
            Gets or sets the cancel button part.
            </summary>
            <value>The cancel button part.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPart">
            <summary>
            Gets or sets the commit button part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.IsCurrentlyOpen">
            <summary>
            Gets a value indicating whether this instance is currently open.
            </summary>
            <value><c>True</c> if this instance is currently open; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SliderStyle">
            <summary>
            Gets or sets the Style applied to the sliders in the 
            RangeTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyle">
            <summary>
            Gets or sets the Style applied to the buttons that represent
            hours, minutes and seconds.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopupTemplate">
            <summary>
            Describes the template used to instantiate a Popup for TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.PopupTimeSelectionMode">
            <summary>
            Determines the granularity of time selection
            by a popup. Hours and minutes are always used.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.AllowSecondsSelection">
            <summary>
            Hours, Minutes and Seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.HoursAndMinutesOnly">
            <summary>
            Hours and Minutes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CustomTimeFormat">
            <summary>
            Represents a single time format used for parsing and formatting.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ITimeFormat">
            <summary>
            Defines time formats used for formatting and parsing DateTime values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>A format to use during display of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>An array of formats to be used during parsing.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
            <param name="format">The format that is used to parse or display
            a String or DateTime.</param>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Equality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Inequality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.CustomTimeFormat.Format">
            <summary>
            Gets or sets the custom format that is used to parse or display
            a String or DateTime.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LongTimeFormat">
            <summary>
            Represents the long time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Equality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Inequality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.ShortTimeFormat">
            <summary>
            Represents the short time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Equality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Inequality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeFormatConverter">
            <summary>
            Converts from a string value to an ITimeFormat instance. Converts "Short" 
            to ShortTimeFormat, "Long" to LongTimeFormat and any other strings to 
            CustomTimeFormat. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified 
            type descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of type string to an instance of type ITimeFormat.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="source">
            The string that is converted.
            </param>
            <returns>
            An instance of ITimeFormat that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an known instance of type ITimeFormat to a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeGlobalizationInfo">
            <summary>
            Strategy object that determines how controls interact with DateTime and 
            CultureInfo.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeGlobalizationInfo.TimeChars">
            <summary>
            The characters that are allowed inside a format.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)">
            <summary>
            Transforms a format to a format that only allows the characters
            h, m, s, t, H and the defined TimeSeparators (: and .).
            Also takes into account the rule that a single TimeCharacter should
            be followed by a space.
            </summary>
            <param name="format">The format that needs to be transformed.</param>
            <returns>A format containing only the expected characters.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)">
            <summary>
            Returns the global representation of each integer formatted 
            by the TimeGlobalizationInfo.
            </summary>
            <param name="input">Character that will be mapped to a different
            character.</param>
            <returns>The global version of a character that represents the input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)">
            <summary>
            Returns the European number character of each global representation 
            parsed by the TimeGlobalizationInfo.
            </summary>
            <param name="input">The global version of the character that needs 
            to be mapped to a regular character.</param>
            <returns>The character that represents the global version of a character.</returns>
            <remarks>All characters pass through this method (whitespaces and
            TimeDesignators). Return the input character if no logical mapping
            could be made.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Gets the actual TimeParsers that will be used for parsing.
            </summary>
            <param name="parsers">The parsers that are currently used by parent.</param>
            <returns>A new collection of parsers that represent the parsers
            this strategy object will use.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])">
            <summary>
            Formats the specified DateTime to a time string representation.
            </summary>
            <param name="value">The DateTime that should be formatted.</param>
            <param name="timeFormat">The time format used to describe how value
            should be formatted.</param>
            <param name="timeCharacters">The allowed characters in the format. 
            Leave empty to indicate that all characters are allowed. See remarks.</param>
            <returns>
            A string that represents the time part of a DateTime.
            </returns>
            <remarks>The TimeFormat will contain TimeCharacters in a certain 
            order, like hh:mm:ss. By passing specific TimeCharacters, these
            will get filtered and the method only returns part of the formatted
            string. Example: pass 'h', 't', 'H' to get back 4 AM, if the culture
            was set to en-US.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <returns>
            A DateTime with a correctly set time part.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <param name="result">A DateTime with a correctly set time part.</param>
            <returns>
            True, if the time was parsed correctly, false if the time was not 
            parsed.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the time unit that is represented by a text position.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="textPosition">The location in the text.</param>
            <param name="timeFormat">The time format describe how the text 
            can be parsed to a DateTime.</param>
            <returns>
            The TimeSpan that is represented by the character at a
            specific caret position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the position for a time unit in a string that can be parsed by 
            the specified ITimeFormat.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="timeSpan">The time span that is searched for.</param>
            <param name="timeFormat">The time format that describes how this text can be
            parsed to a DateTime.</param>
            <returns>
            The position in the text that corresponds to the TimeSpan or
            -1 if none was found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)">
            <summary>
            Performs addition of a date time and a time span in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after incrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)">
            <summary>
            Subtracts a time span from a date time in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after decrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionStart(System.String)">
            <summary>
            Gets the caret position at the start of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <returns>Caret position for the end of the designator,
            or -1 if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionEnd(System.String,System.Int32)">
            <summary>
            Gets the caret position at the end of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <param name="designatorStartIndex">Start index of the designator.</param>
            <returns>
            Caret position for the end of the designator,
            or -1 if none found.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.Culture">
            <summary>
            Gets or sets the culture used by the owning TimeInput control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.ActualCulture">
            <summary>
            Gets the actual culture used by the TimeGlobalizationInfo for formatting 
            and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators">
            <summary>
            Gets the characters that may be used to separate components of time,
            that is, hours, minutes and seconds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.AMDesignator">
            <summary>
            Gets the string designator for hours that are "ante meridiem" 
            (before noon).
            </summary>
            <value>The AM designator.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.PMDesignator">
            <summary>
            Gets the string designator for hours that are "post meridiem" 
            (after noon).
            </summary>
            <value>The PM designator.</value>
        </member>
        <member name="T:System.Windows.Controls.Picker">
            <summary>
            Base class for all controls that have popup functionality.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementPopupName">
            <summary>
            Name constant for Popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementDropDownToggleName">
            <summary>
            Name constant for DropDownToggle.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownPopup">
            <summary>
            BackingField for PopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownToggleButton">
            <summary>
            BackingField for DropDownTogglePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.IsDropDownOpenProperty">
            <summary>
            Identifies the IsDropDownOpen dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnIsDropDownOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its IsDropDownOpen.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.PopupButtonModeProperty">
            <summary>
            Identifies the PopupButtonMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupButtonModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupButtonModeProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its PopupButtonMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.MaxDropDownHeightProperty">
            <summary>
            Identifies the MaxDropDownHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxDropDownHeightProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its MaxDropDownHeight.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChild">
            <summary>
            BackingField for PopupChild.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._outsidePopupCanvas">
            <summary>
            Gets or sets the expansive area outside of the popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChildCanvas">
            <summary>
            Gets or sets the canvas for the popup child.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending 
            change handlers. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupClosedVisualState">
            <summary>
            Gets or sets a value indicating whether a visual popup state is 
            being used in the current template for the Closed state. Setting 
            this value to true will delay the actual setting of Popup.IsOpen 
            to false until after the visual state's transition for Closed is 
            complete.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupHasOpened">
            <summary>
            A value indicating whether the popup has been opened at least once.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Picker"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Picker control when a new template is 
            applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.GetSelectedValue">
            <summary>
            Gets the selected value represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.ArrangePopup">
            <summary>
            Arrange the drop down popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OpenDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly opens the popup, checks the expander 
            button, and then fires the Opened event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.CloseDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly closes the popup, flips the Checked 
            value, and then fires the Closed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ToggleButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Opens or closes the popup if reacting to button press.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OutsidePopupMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ControlIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightChanged(System.Double)">
            <summary>
            Handles MaxDropDownHeightChanged by re-arranging and updating the 
            popup arrangement.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpening(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpening event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation and 
            halt opening the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpened event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosing(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosing event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation 
            and halt closing the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control 
            currently has the focus.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.HasFocus">
            <summary>
            Checks to see if the control has focus currently.
            </summary>
            <returns>Returns a value indicating whether the control or its popup
            have focus.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownPopup">
            <summary>
            Gets or sets the popup part.
            </summary>
            <value>The popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownToggleButton">
            <summary>
            Gets or sets the drop down toggle part.
            </summary>
            <value>The drop down toggle part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion 
            of the control is open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupButtonMode">
            <summary>
            Gets or sets the button event that causes the popup portion of the 
            Picker control to open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the 
            Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupChild">
            <summary>
            Gets the element shown in the drop down portion of the Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from 
            false to true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from 
            false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false 
            and the drop-down is open.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeCoercionHelper._timeInputControl">
            <summary>
            The TimeInput control that needs to be coerced.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.#ctor(System.Windows.Controls.ITimeInput)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeCoercionHelper"/> class.
            </summary>
            <param name="timeInput">The time input that this helper will coerce.</param>
            <remarks>Lifetime of this helper class is determined by lifetime
            of control it is coercing.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMinimumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the minimum value being set.
            </summary>
            <param name="newMinimum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMaximumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the maximum value being set.
            </summary>
            <param name="newMaximum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValue(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValueOnRangeMove(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="newMinimum">The new minimum.</param>
            <param name="newMaximum">The new maximum.</param>
            <returns>True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParser">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParserCollection">
            <summary>
            Represents a collection of TimeParser objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
            <param name="parsers">A sequence of TimeParser objects that will
            be copied into this collection.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.CatchallTimeParser">
            <summary>
            TimeParser that will allow very loose time to be entered. It will try
            to parse the first two numbers as hours and the second two numbers as 
            minutes, and will not care about other characters, such as designators,
            separators or non-time related characters.
            If the first character is bigger than 2, it will parse only the first 
            character as an hour and will use the second two characters for minutes.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.CatchallTimeParser.exp">
            <summary>
            Expression used to parse.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CatchallTimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>
            True if the parse was successful, false if it was not.
            </returns>
            <remarks>The parsing is culture insensitive. A user can type 8p to
            indicate 20:00:00, or 20.</remarks>
        </member>
        <member name="T:System.Windows.Controls.TimePicker">
            <summary>
            Represents a control that allows the user to select a time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementTimeUpDownName">
            <summary>
            The name for the TimeUpDown element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleName">
            <summary>
            The name for the TimeUpDownStyle element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementPopupPlaceHolderPartName">
            <summary>
            The name for the PopupPlaceHolder element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeUpDownPart">
            <summary>
            BackingField for TimeUpDownPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupPlaceHolderPart">
            <summary>
            BackingField for PopupPlaceHolderPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupSessionValueCache">
            <summary>
            Cache of the value before we open a popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isInitialized">
            <summary>
            Indicates that the control has finished initialization.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleProperty">
            <summary>
            Identifies the TimeUpDownStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeUpDownStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeUpDownStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its TimeUpDownStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SpinnerStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its SpinnerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupProperty">
            <summary>
            Identifies the Popup dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Popup.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTemplateProperty">
            <summary>
            Identifies the PopupTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTemplateProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTemplate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._instantiatedPopupFromTemplate">
            <summary>
            BackingField for InstantiatedPopupFromTemplate.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupSecondsInitialized">
            <summary>
            Determines whether PopupSeconds has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupMinutesInitialized">
            <summary>
            Determines whether PopupMinutes has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePicker"/> 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePicker control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.GetSelectedValue">
            <summary>
            Gets the selected time  represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a change in value in TimeUpDown.
            </summary>
            <param name="sender">The TimeUpDown that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParseError(System.Object,System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParsing(System.Object,System.Windows.Controls.UpDownParsingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownOpened event when the IsDropDownOpen property
            changed from false to true.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownClosed event when the IsDropDownOpen property
            changed from true to false.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a Value change in a popup.
            </summary>
            <param name="sender">The Popup that raised a ValueChange.</param>
            <param name="e">The  instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCommitted(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been committed. Will close the popup.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCanceled(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been canceled. Will close the popup,
            and set the value back to its initial value.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.RegisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Called when a new Popup is set.
            </summary>
            <param name="popup">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.UnregisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Unregisters the popup.
            </summary>
            <param name="popup">The old value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.InstantiatePopupFromTemplate">
            <summary>
            Instantiates the template.
            </summary>
            <remarks>Will only use template if Popup is not set.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PropagateNewValue">
            <summary>
            Propagates the new value to components that are part of
            our template.
            </summary>
            <remarks>Workaround for SL2 inability to do twoway 
            templatebinding. Should remove in SL3.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCreateAutomationPeer">
            <summary>
            Returns a PickerAutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>A PickerAutomationPeer for the Picker object.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownPart">
            <summary>
            Gets or sets the time up down part.
            </summary>
            <value>The time up down part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupPlaceHolderPart">
            <summary>
            Gets or sets the popup place holder part.
            </summary>
            <remarks>This is the ContentControl that is used to display
            Popups.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value from 
            the textbox, spinning a new value and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value 
            from the textbox, spinning a new value and programmatically specifying 
            a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownStyle">
            <summary>
            Gets or sets the Style applied to the TimeUpDown portion of the TimePicker 
            control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Format">
            <summary>
            Gets or sets the Format used by the control. From XAML Use either 
            "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time in the 
            TimePicker. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimePickerPopup">
            <summary>
            Gets the TimePickerPopup that is used by the TimePicker. This
            can be either a popup created from the PopupTemplate, or a popup
            set directly to the Popup property. When both are set, the Popup
            property will win.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Popup">
            <summary>
            Gets or sets the TimePickerPopup that will be shown to the user by the 
            TimePicker control. This property may not be styled. To style a 
            TimePicker with a Popup, please use the PopupTemplate property.
            When both PopupTemplate and Popup are set, Popup will be used.
            </summary>
            <remark>This property might be null, since a template can be used.</remark>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTemplate">
            <summary>
            Gets or sets the template used as Popup. A Popup can also be set
            directly on the Popup property. When both PopupTemplate and Popup
            are set, Popup will be used. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupSecondsInterval">
            <summary>
            Gets or sets the seconds interval between time values allowed by 
            the TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupMinutesInterval">
            <summary>
            Gets or sets the minutes interval between time values allowed by the 
            TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.TimeTypeConverter">
            <summary>
            Allows time to be set from xaml.
            </summary>
            <QualityBand>Preview</QualityBand>
            <remarks>This converter is used by xaml and thus uses the 
            English formats.</remarks>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._timeFormats">
            <summary>
            BackingField for the TimeFormats being used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._dateFormats">
            <summary>
            BackingField for the DateFormats being used.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from 
            the specified type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified 
            type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of other data types into instances of DateTime that
            represent a time.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert. This culture
            is not used during conversion, but a specific set of formats is used.</param>
            <param name="source">
            The string being converted to the DateTime.
            </param>
            <returns>
            A DateTime that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime into a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeUpDown">
            <summary>
            Represents a control that uses a spinner and textbox to allow a user to 
            input time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintFormat">
            <summary>
            StringFormat used in the TimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ElementTimeHintPopupName">
            <summary>
            The name for the TimeHint element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeHint">
            <summary>
            The group name "TimeHintStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeParsingStates">
            <summary>
            The group name "ParsingStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedUpStateName">
            <summary>
            The state name "TimeHintOpenedUp" indicates that the hint is being
            shown on the top of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedDownStateName">
            <summary>
            The state name "TimeHintOpenedDown" indicates that the hint is
            being shown at the bottom of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintClosedStateName">
            <summary>
            The state name "TimeHintClosed" indicates that no hint is being 
            shown.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ValidTimeStateName">
            <summary>
            The state name "ValidTime" that indicates that currently the textbox
            text parses to a valid Time.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.InvalidTimeStateName">
            <summary>
            The state name "InvalidTime" that indicates that currently the textbox 
            text does not allow parsing.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.EmptyTimeStateName">
            <summary>
            The state name "EmptyTime" that indicates that currently the textbox
            text would parse to a Null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintPopupPart">
            <summary>
            BackingField for TimeHintPopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._lastParsedText">
            <summary>
            The text that was last parsed. Used in comparisons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintExpandDirection">
            <summary>
            The direction in which the TimeHint will expand.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isShowTimeHint">
            <summary>
            BackingField for IsShowTimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintContentProperty">
            <summary>
            Identifies the TimeHintContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeHintContentProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeHintContent.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintDate">
            <summary>
            Represents the formatted DateTime that is used in the TimeHint hint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isIgnoreSelectionOfAllText">
            <summary>
            Indicates whether the control should not proceed with selecting all
            text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._allowHintContentChange">
            <summary>
            BackingField for AllowHintContentChange.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimeUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Provides handling for the ValueChanging event.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on the position of the caret,
            the value and the minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the SelectionChanged event from TextBox.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.InputChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the TextChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.DetermineHint">
            <summary>
            Determines the value of the hint property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the Left Mouse Button Down event of the TimeHint.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous
            value to decide whether user has typed in a new value.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific 
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations 
            for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> 
            subclass to return.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintPopupPart">
            <summary>
            Gets or sets the time hint popup part.
            </summary>
            <value>The time hint popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsShowTimeHint">
            <summary>
            Gets or sets a value indicating whether this instance is showing a
            TimeHint visual.
            </summary>
            <value><c>True</c> if this instance is showing the TimeHint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMinimum">
            <summary>
            Gets the actual minimum. If a Minimum is set, use that, otherwise
            use the start of the day.
            </summary>        
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMaximum">
            <summary>
            Gets the actual maximum. If a Maximum is set, use that, otherwise
            use the end of the day.
            </summary>
            <value>The actual maximum.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time  in the 
            TimeUpDown. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the TimeUpDown control will 
            cycle through values when trying to spin the first and last item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintContent">
            <summary>
            Gets the text used to guide the user when entering time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.UpDownParseErrorEventArgs">
            <summary>
            Provides data for the UpDownBase.ParseError event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParseErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UpDownParseErrorEventArgs class.
            </summary>
            <param name="text">The text that caused the parsing error.</param>
            <param name="error">The exception thrown by ParseValue method.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Text">
            <summary>
            Gets the original string value that failed to parse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Error">
            <summary>
            Gets the exception that was raised during the initial parsing 
            attempt.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.UpDownParsingEventArgs`1">
            <summary>
            Provides data for the UpDownBase.Parsing event.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> class.
            </summary>
            <param name="text">The text that will be parsed.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Text">
            <summary>
            Gets the original string value that will be parsed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Value">
            <summary>
            Gets or sets the value to be used.
            </summary>
            <value>The parsed value.</value>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Handled">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> is handled.
            </summary>
            <value><c>True</c> if handled; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Jul09\Bin\System.Windows.Controls.Theming.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Theming.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Theming.DefaultStyleKeyRetriever">
            <summary>
            This class retrieves the default style key of a control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.DefaultStyleKeyRetriever.#ctor">
            <summary>
            Initializes a new instance of the DefaultStyleKeyRetriever class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.DefaultStyleKeyRetriever.GetDefaultStyleKey(System.Windows.Controls.Control)">
            <summary>
            This method retrieves the default style key of a control.
            </summary>
            <param name="control">The control to retrieve the default style key 
            from.</param>
            <returns>The default style key of the control.</returns>
        </member>
        <member name="T:System.Windows.Controls.Theming.BaseMergedStyleDictionary">
            <summary>
            A class that defines the behavior of looking for an item recursively up 
            a chain of dictionaries.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.BaseMergedStyleDictionary.Parent">
            <summary>
            Gets or sets the parent of this merged dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.BaseMergedStyleDictionary.Item(System.String)">
            <summary>
            Retrieves an item using a key.  If the item is not found in the 
            local dictionary a lookup is attempted on the parent.
            </summary>
            <param name="key">The key to use to retrieve the item.</param>
            <returns>A style corresponding to the key.</returns>
        </member>
        <member name="T:System.Windows.Controls.Theming.FunctionalProgramming">
            <summary>
            Collection of functions for functional programming tasks.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.FunctionalProgramming.TraverseDepthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.FunctionalProgramming.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.FunctionalProgramming.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends an item to the front of a stream.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="that">The stream.</param>
            <param name="value">The value to append to the front of the stream.
            </param>
            <returns>A stream with the item appended to the front.</returns>
        </member>
        <member name="T:System.Windows.Controls.Theming.ImplicitStyleManager">
            <summary>
            Encapsulates an attached behavior that propagates styles in a framework 
            element's associated resource dictionary to its children.  The class 
            also provides attached properties that allow the resource dictionary to 
            be loaded from an external source.  Hierarchical styling is supported in
            a way similar to WPF.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetHasBeenStyled(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the HasBeenStyled attached property for a specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement from which the property value is read.</param>
            <returns>The HasBeenStyled property value for the FrameworkElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.SetHasBeenStyled(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Sets the value of the HasBeenStyled attached property to a specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement to which the attached property is written.</param>
            <param name="value">The needed HasBeenStyled value.</param>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager.HasBeenStyledProperty">
            <summary>
            Identifies the HasBeenStyled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetApplyMode(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the ImplicitStyleManager.ApplyMode attached property 
            for a specified framework element. 
            The value indicates whether the style implicitly applied on descendent
            framework elements.
            </summary>
            <param name="element">The FrameworkElement from which the property value is read.</param>
            <returns>The ApplyMode property value for the FrameworkElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.SetApplyMode(System.Windows.FrameworkElement,System.Windows.Controls.Theming.ImplicitStylesApplyMode)">
            <summary>
            Sets the value of the ImplicitStyleManager.ApplyMode attached
            property on a specified framework element. 
            This value indicates whether the style should be implicitly applied
            on descendent framework elements.
            </summary>
            <param name="element">The FrameworkElement to which the attached 
            property is written.</param>
            <param name="value">The ApplyMode value.</param>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager.ApplyModeProperty">
            <summary>
            Identifies the ApplyMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.OnApplyModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ApplyModeProperty property changed handler.
            </summary>
            <param name="dependencyObject">FrameworkElement that changed its 
            ApplyMode.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetExternalResourceDictionary(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the ExternalResourceDictionary attached property 
            for a specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement from which the property 
            value is read.</param>
            <returns>The ExternalResourceDictionary property value for the 
            FrameworkElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.SetExternalResourceDictionary(System.Windows.FrameworkElement,System.Windows.ResourceDictionary)">
            <summary>
            Sets the value of the ExternalResourceDictionary attached property 
            to a specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement to which the attached 
            property is written.</param>
            <param name="value">The needed ExternalResourceDictionary value.
            </param>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager.ExternalResourceDictionaryProperty">
            <summary>
            Identifies the ExternalResourceDictionary dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetLayoutUpdatedHandler(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the LayoutUpdatedHandler attached property for a 
            specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement from which the property 
            value is read.</param>
            <returns>The LayoutUpdatedHandler property value for the 
            FrameworkElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.SetLayoutUpdatedHandler(System.Windows.FrameworkElement,System.EventHandler)">
            <summary>
            Sets the value of the LayoutUpdatedHandler attached property to a 
            specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement to which the attached 
            property is written.</param>
            <param name="value">The needed LayoutUpdatedHandler value.</param>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager.LayoutUpdatedHandlerProperty">
            <summary>
            Identifies the LayoutUpdatedHandler dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetResourceDictionaryUri(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the ImplicitStyleManager.ResourceDictionaryUri 
            attached property for a specified framework element.
            The value indicates the URI address for the resource dictionary that 
            is implicitly applied.
            </summary>
            <param name="element">The FrameworkElement from which the property 
            value is read.</param>
            <returns>The ResourceDictionaryUri property value for the 
            FrameworkElement.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.SetResourceDictionaryUri(System.Windows.FrameworkElement,System.Uri)">
            <summary>
            Sets the value of the ImplicitStyleManager.ResourceDictionaryUri 
            attached property for a specified framework element. 
            The value indicates the URI address for the resource dictionary 
            that is implicitly applied.
            </summary>
            <param name="element">The FrameworkElement to which the attached 
            property is written.</param>
            <param name="value">The needed ResourceDictionaryUri value.</param>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager.ResourceDictionaryUriProperty">
            <summary>
            Identifies the ResourceDictionaryUri dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.OnResourceDictionaryUriPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ResourceDictionaryUriProperty property changed handler.
            </summary>
            <param name="dependencyObject">FrameworkElement that changed its 
            ResourceDictionaryUri.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager._useApplicationResources">
            <summary>
            Gets or sets a value indicating whether to use application
            resources.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager._applicationResourceDictionaryUri">
            <summary>
            A field that stores a resource dictionary uri which is used to 
            retrieve resources associated with the application.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetStyle(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the Style attached property for a specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement from which the property value is read.</param>
            <returns>The Style property value for the FrameworkElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.SetStyle(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets the value of the Style attached property to a specified FrameworkElement.
            </summary>
            <param name="element">The FrameworkElement to which the attached property is written.</param>
            <param name="value">The needed Style value.</param>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStyleManager.StyleProperty">
            <summary>
            Identifies the Style dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.OnStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StyleProperty property changed handler.
            </summary>
            <param name="dependencyObject">FrameworkElement that changed its Style.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.Apply(System.Windows.FrameworkElement)">
            <summary>
            Applies implicit styles to an element and its descendents.
            </summary>
            <param name="element">The element to apply implicit styles to.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetMergedStyleDictionary(System.Windows.FrameworkElement)">
            <summary>
            Retrieves or creates the merged style dictionary of an element.
            </summary>
            <param name="styledElement">A styled element.</param>
            <returns>The merged dictionary of the element.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.GetStyleKey(System.Windows.FrameworkElement)">
            <summary>
            Retrieves the style key for a given element by first checking to
            see if it can retrieve its default style key and then using the
            full name of its concrete type.
            </summary>
            <param name="element">The element to retrieve the style key for.
            </param>
            <returns>The style key.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.Parse(System.Uri)">
            <summary>
            Retrieves a style collection from a uri of a resource
            dictionary.
            </summary>
            <param name="uri">The uri of a resource dictionary.</param>
            <returns>A style collection containing the styles in the resource
            dictionary.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ImplicitStyleManager.PropagateStyles(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            This method propagates the styles in the resources associated with
            a framework element to its descendents. This results in a  
            style inheritance that mimics WPF's behavior.
            </summary>
            <param name="element">The element that will have its styles 
            propagated to its children.</param>
            <param name="recurse">Whether to recurse over styled elements that
            are set to OneTime and have already been styled.</param>
        </member>
        <member name="P:System.Windows.Controls.Theming.ImplicitStyleManager.UseApplicationResources">
            <summary>
            Gets or sets a value indicating whether the implicitly applied 
            styles are based on values from 
            ImplicitStyleManager.ApplicationResourceDictionaryUri.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.ImplicitStyleManager.ApplicationResourceDictionaryUri">
            <summary>
            Gets or sets the ResourceDictionary URI that is implicitly applied 
            to all FrameworksElements in the Application.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.ImplicitStyleManager.ApplicationExternalResourceDictionary">
            <summary>
            Gets or sets the external resource dictionary to use for the 
            application.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.ImplicitStylesApplyMode">
            <summary>
            Specifies the mode in which styles are implicitly applied in 
            ImplicitStyleManager.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStylesApplyMode.None">
            <summary>
            Specifies that the ImplicitStyleManager does not implicitly apply 
            styles.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStylesApplyMode.OneTime">
            <summary>
            Specifies that the ImplicitStyleManager will implicitly apply styles 
            to the descendent visual tree once and will not attempt refreshes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ImplicitStylesApplyMode.Auto">
            <summary>
            Specifies that the ImplicitStyleManager will implicitly apply styles 
            to the descendent visual tree once the visual tree changes. 
            Using this setting may incur a serious performance hit.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.InvalidResourceException">
            <summary>
            Exception thrown when resource is not found.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Theming.InvalidResourceException.#ctor">
            <summary>
            Initializes a new instance of the InvalidResourceException class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.InvalidResourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidResourceException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.InvalidResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidResourceException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.InvalidResourceException.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the InvalidResourceException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="uri">The uri of the resource.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.InvalidResourceException.#ctor(System.String,System.Uri,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidResourceException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:System.Windows.Controls.Theming.InvalidResourceException.Uri">
            <summary>
            Gets the uri of the resource that could not be found.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.MergedStyleResourceDictionary">
            <summary>
            A dictionary that merges a resource dictionary with a parent dictionary.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.MergedStyleResourceDictionary._resourceDictionary">
            <summary>
            The resource dictionary to check for a value before checking the 
            parent.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.MergedStyleResourceDictionary.#ctor(System.Windows.ResourceDictionary,System.Windows.Controls.Theming.BaseMergedStyleDictionary)">
            <summary>
            Initializes a new instance of the MergedResourceDictionary class.
            </summary>
            <param name="resourceDictionary">A resource dictionary to check for 
            a value before checking the parent.</param>
            <param name="parentResourceDictionary">The parent merged resource 
            dictionary to check if no match is found in the resource 
            dictionary.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.MergedStyleResourceDictionary.#ctor(System.Windows.ResourceDictionary)">
            <summary>
            Initializes a new instance of the MergedResourceDictionary class.
            </summary>
            <param name="resourceDictionary">A resource dictionary to check for a value 
            before checking the parent.</param>
        </member>
        <member name="P:System.Windows.Controls.Theming.MergedStyleResourceDictionary.Item(System.String)">
            <summary>
            Retrieves an item using a key.  If the item is not found in the 
            local dictionary a lookup is attempted on the parent.
            </summary>
            <param name="key">The key to use to retrieve the item.</param>
            <returns>A style corresponding to the key.</returns>
        </member>
        <member name="T:System.Windows.Controls.Theming.ResourceNotFoundException">
            <summary>
            Exception thrown when resource is not found.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="uri">The uri of the resource.</param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceNotFoundException.#ctor(System.String,System.Uri,System.Exception)">
            <summary>
            Initializes a new instance of the ResourceNotFoundException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:System.Windows.Controls.Theming.ResourceNotFoundException.Uri">
            <summary>
            Gets the uri of the resource that could not be found.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.VisualTreeExtensions">
            <summary>
            A static class providing methods for working with the visual tree.  
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.VisualTreeExtensions.EnsureName(System.Windows.FrameworkElement)">
            <summary>
            Ensures that a framework element has a unique name.
            </summary>
            <param name="element">The element to set the name of.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.VisualTreeExtensions.GetVisualAncestors(System.Windows.FrameworkElement)">
            <summary>
            Returns the visual tree ancestors of an element.
            </summary>
            <param name="element">The descendent of the ancestors.</param>
            <returns>The visual tree ancestors of the element.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.VisualTreeExtensions.GetLogicalChildrenDepthFirst(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            depth-first search.  A visual element is assumed to be a logical 
            child of another visual element if they are in the same namescope.
            For performance reasons this method manually manages the stack 
            instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual children of a framework element.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The visual children of the framework element.</returns>
        </member>
        <member name="P:System.Windows.Controls.Theming.VisualTreeExtensions.UniqueId">
            <summary>
            Gets or sets an identity integer that ensures that names are unique.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.ImplicitStyleManager_Parse_CanOnlyParseXAMLFilesWithResourceDictionaryAsTheRootElement">
            <summary>
              Looks up a localized string similar to Cannot parse XAML files which do not have a ResourceDictionary as the root element..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.ImplicitStyleManager_ResourceNotFound">
            <summary>
              Looks up a localized string similar to Resource not found at &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Properties.Resources.InvalidResourceException_UnableToLoadResources">
            <summary>
              Looks up a localized string similar to Unable to load resources..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Theming.ResourceParser">
            <summary>
            Parse streams containing theme resources.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.OldXamlNamespace">
            <summary>
            The default old XAML namespace.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.NewXamlNamespace">
            <summary>
            The default new XAML namespace.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.StyleXaml">
            <summary>
            The XAML markup for an empty Style declaration.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Theming.ResourceParser.StyleXamlWithPrefix">
            <summary>
            The XAML markup for an empty Style declaration with a TargetType
            using an XML prefix.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.IsXamlElement``1(System.String,System.String)">
            <summary>
            Determines whether an XML element is a type in the core Silverlight
            namespace.
            </summary>
            <typeparam name="T">The type to check for.</typeparam>
            <param name="name">The name of the element.</param>
            <param name="ns">The namespace of the element.</param>
            <returns>
            A value indicating whether an the element is the Silverlight type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.Parse(System.IO.Stream,System.Boolean)">
            <summary>
            Retrieves a resource dictionary from an input stream.
            </summary>
            <param name="stream">
            A stream containing the XAML for a  resource dictionary.
            </param>
            <param name="checkTypes">
            A value indicating whether styles in the resource dictionary should
            be filtered to types that have been loaded by the application.
            </param>
            <returns>A resource dictionary.</returns>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.ParseResources(System.Xml.XmlReader,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Transform a ResourceDictionary defined in the reader into a
            ContentControl in the writer and nest all of its resources in
            ContentControl.Resources.
            </summary>
            <param name="reader">Reader with the resources.</param>
            <param name="writer">Writer with the transformed resources.</param>
            <param name="checkTypes">
            A value indicating whether styles in the resource dictionary should
            be filtered to types that have been loaded by the application.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.ParseElement(System.Xml.XmlReader,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Process an element's opening tag.
            </summary>
            <param name="reader">Reader with the resources.</param>
            <param name="writer">Writer with the transformed resources.</param>
            <param name="checkTypes">
            A value indicating whether styles in the resource dictionary should
            be filtered to types that have been loaded by the application.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.ResourceParser.IsStyleTargetTypeLoaded(System.Xml.XmlReader)">
            <summary>
            Determine if the current element in the reader represents a Style
            whose TargetType has been loaded in the assembly.
            </summary>
            <param name="reader">Reader with the resources.</param>
            <returns>
            A value indicating whether the element is not a style or it is a
            Style with a TargetType loaded in this assembly.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.Theming.Theme">
            <summary>
            Uses ImplicitStyleManager to implicitly apply a set of styles to all of
            its descendent FrameworkElements.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.#ctor">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
            <param name="themeAssembly">
            Assembly with the embedded resource containing the theme to apply.
            </param>
            <param name="themeResourceName">
            Name of the embedded resource containing the theme to apply.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
            <param name="themeResourceStream">
            A resource stream containing the theme to apply.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Theming.Theme.LoadTheme(System.IO.Stream)">
            <summary>
            Load a theme from a resource stream.
            </summary>
            <param name="themeResourceStream">
            A resource stream containing the theme to load.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Theming.Theme.ApplyMode">
            <summary>
            Gets or sets the mode defining how styles in the theme are
            implicitly applied.
            </summary>
            <remarks>
            The default value is OneTime.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.Theming.Tuple`2">
            <summary>
            A structure that groups two values.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.Theming.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Tuple structure.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="P:System.Windows.Controls.Theming.Tuple`2.First">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Theming.Tuple`2.Second">
            <summary>
            Gets the second value.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Jul09\Bin\System.Windows.Controls.DataVisualization.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.DataVisualization.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1">
            <summary>
            Aggregated observable collection.
            </summary>
            <typeparam name="T">The type of the items in the observable collections.
            </typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1">
            <summary>
            An observable collection that can only be written to by internal 
            classes.
            </summary>
            <typeparam name="T">The type of object in the observable collection.
            </typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1">
            <summary>
            An observable collection that cannot be reset.  When clear is called
            items are removed individually, giving listeners the chance to detect
            each remove event and perform operations such as unhooking event 
            handlers.
            </summary>
            <typeparam name="T">The type of item in the collection.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1.#ctor">
            <summary>
            Instantiates a new instance of the NoResetObservableCollection 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.NoResetObservableCollection`1.ClearItems">
            <summary>
            Clears all items in the collection by removing them individually.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.Mutate(System.Action{System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection{`0}})">
            <summary>
            A method that mutates the collection.
            </summary>
            <param name="action">The action to mutate the collection.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the collection at an index.
            </summary>
            <param name="index">The index to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item at a particular location in the collection.
            </summary>
            <param name="index">The location to set an item.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item in the collection.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.ClearItems">
            <summary>
            Clears the items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ReadOnlyObservableCollection`1.IsMutating">
            <summary>
            Gets or sets a value indicating whether the owner is writing to the 
            collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of an aggregated observable collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollectionsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Rebuilds the list if a collection changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Synchronizes the collection with changes made in a child collection.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.GetStartingIndexOfCollectionAtIndex(System.Int32)">
            <summary>
            Returns the starting index of a collection in the aggregate
            collection.
            </summary>
            <param name="index">The starting index of a collection.</param>
            <returns>The starting index of the collection in the aggregate 
            collection.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.Rebuild">
            <summary>
            Rebuild the list in the correct order when a child collection 
            changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.AggregatedObservableCollection`1.ChildCollections">
            <summary>
            Gets child collections of the aggregated collection.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAnchoredToOrigin">
            <summary>
            Range axes look for this interface on series to determine whether to
            anchor the origin to the bottom or top of the screen where possible.
            </summary>
            <remarks>
            Implementing this interface ensures that value margins will not cause
            an origin to float above the bottom or top of the screen if no
            data exists below or above.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAnchoredToOrigin.AnchoredAxis">
            <summary>
            Gets the axis to which the data is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AreaDataPoint">
            <summary>
            Represents a data point used for Area series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPoint">
            <summary>
            Represents a control that displays a data point.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupCommonStates">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateCommonNormal">
            <summary>
            Normal state of the Common group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateCommonMouseOver">
            <summary>
            MouseOver state of the Common group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupSelectionStates">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateSelectionUnselected">
            <summary>
            Unselected state of the Selection group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateSelectionSelected">
            <summary>
            Selected state of the Selection group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.GroupRevealStates">
            <summary>
            Reveal state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateRevealShown">
            <summary>
            Shown state of the Reveal group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateRevealHidden">
            <summary>
            Hidden state of the Reveal group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectionEnabledProperty">
            <summary>
            Identifies the IsSelectionEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectionEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="d">Control that changed its IsSelectionEnabled.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectionEnabledPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isHovered">
            <summary>
            A value indicating whether the mouse is hovering over the data 
            point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsHoveredPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsHoveredProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="d">Control that changed its IsSelected.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIsSelectedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValueProperty">
            <summary>
            Identifies the ActualDependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualDependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualDependentValue property changes.
            </summary>
            <param name="d">Control that changed its ActualDependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isCoercingActualDependentValue">
            <summary>
            A value indicating whether the actual independent value is being
            coerced.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._oldActualDependentValueBeforeCoercion">
            <summary>
            The preserved previous actual dependent value before coercion.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualDependentValuePropertyChanged(System.IComparable,System.IComparable)">
            <summary>
            Called when the value of the ActualDependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueProperty">
            <summary>
            Identifies the DependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the DependentValue property changes.
            </summary>
            <param name="d">Control that changed its DependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValuePropertyChanged(System.IComparable,System.IComparable)">
            <summary>
            Called when the DependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueStringFormatProperty">
            <summary>
            Identifies the DependentValueStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValueStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DependentValueStringFormat property changes.
            </summary>
            <param name="d">Control that changed its DependentValueStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnDependentValueStringFormatPropertyChanged(System.String,System.String)">
            <summary>
            Called when DependentValueStringFormat property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedDependentValueProperty">
            <summary>
            Identifies the FormattedDependentValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedIndependentValueProperty">
            <summary>
            Identifies the FormattedIndependentValue dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueProperty">
            <summary>
            Identifies the IndependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the IndependentValue property changes.
            </summary>
            <param name="d">Control that changed its IndependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValuePropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the IndependentValue property changes.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueStringFormatProperty">
            <summary>
            Identifies the IndependentValueStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValueStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the IndependentValueStringFormat property changes.
            </summary>
            <param name="d">Control that changed its IndependentValueStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnIndependentValueStringFormatPropertyChanged(System.String,System.String)">
            <summary>
            Called when the value of the IndependentValueStringFormat property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._isCoercingActualIndependentValue">
            <summary>
            A value indicating whether the actual independent value is being
            coerced.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._oldActualIndependentValueBeforeCoercion">
            <summary>
            The preserved previous actual dependent value before coercion.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValueProperty">
            <summary>
            Identifies the ActualIndependentValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualIndependentValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ActualIndependentValue property changes.
            </summary>
            <param name="d">Control that changed its ActualIndependentValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnActualIndependentValuePropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the ActualIndependentValue property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateProperty">
            <summary>
            Identifies the State dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnStatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the State property changes.
            </summary>
            <param name="d">Control that changed its State.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnStatePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DataPointState,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Called when the value of the State property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._haveStateRevealShown">
            <summary>
            Tracks whether the Reveal/Shown VisualState is available.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._haveStateRevealHidden">
            <summary>
            Tracks whether the Reveal/Hidden VisualState is available.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPoint._templateApplied">
            <summary>
            Tracks whether the template has been applied yet.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.#ctor">
            <summary>
            Initializes a new instance of the DataPoint class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.GoToCurrentRevealState">
            <summary>
            Updates the Control's visuals to reflect the current state(s).
            </summary>
            <returns>True if a state transition was started.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DataPoint when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnCurrentStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Changes the DataPoint object's state after one of the VSM state animations completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Control's Loaded event.
            </summary>
            <param name="sender">The Control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPoint.SetFormattedProperty(System.Windows.DependencyProperty,System.String,System.Object)">
            <summary>
            Sets a dependency property with the specified format.
            </summary>
            <param name="property">The DependencyProperty to set.</param>
            <param name="format">The Format string to apply to the value.</param>
            <param name="value">The value of the dependency property to be formatted.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether selection is enabled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsActive">
            <summary>
            Gets a value indicating whether the data point is active.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelectedChanged">
            <summary>
            An event raised when the IsSelected property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsHovered">
            <summary>
            Gets a value indicating whether the mouse is hovering over
            the data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsCoercingIsSelected">
            <summary>
            Gets or sets a value indicating whether the IsSelected property is 
            being coerced.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsSelected">
            <summary>
            Gets or sets a value indicating whether the data point is selected.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValueChanged">
            <summary>
            Event raised when the actual dependent value of the data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualDependentValue">
            <summary>
            Gets or sets the actual dependent value displayed in the chart.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueChanged">
            <summary>
            This event is raised when the dependent value of the data point is 
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValue">
            <summary>
            Gets or sets the dependent value of the Control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.DependentValueStringFormat">
            <summary>
            Gets or sets the format string for the FormattedDependentValue property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedDependentValue">
            <summary>
            Gets the DependentValue as formatted by the DependentValueStringFormat property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.FormattedIndependentValue">
            <summary>
            Gets the IndependentValue as formatted by the IndependentValueStringFormat property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueChanged">
            <summary>
            Called when the independent value of the data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValue">
            <summary>
            Gets or sets the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IndependentValueStringFormat">
            <summary>
            Gets or sets the format string for the FormattedIndependentValue property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValueChanged">
            <summary>
            Occurs when the actual independent value of the data point is 
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ActualIndependentValue">
            <summary>
            Gets or sets the actual independent value.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPoint.StateChanged">
            <summary>
            Occurs when the state of a data point is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.IsCoercingState">
            <summary>
            Gets or sets a value indicating whether the State property is being
            coerced to its previous value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.State">
            <summary>
            Gets or sets the state of the data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPoint.ImplementationRoot">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaDataPoint.#ctor">
            <summary>
            Initializes a new instance of the AreaDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions">
            <summary>
            A set of extension methods for the DataPoint class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions.GetActualMargin(System.Windows.FrameworkElement,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Returns the actual margin for a given framework element and axis.
            </summary>
            <param name="element">The framework element.</param>
            <param name="axis">The axis along which to return the margin.
            </param>
            <returns>The margin for a given framework element and axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.FrameworkElementExtensions.GetMargin(System.Windows.FrameworkElement,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Returns the margin for a given framework element and axis.
            </summary>
            <param name="element">The framework element.</param>
            <param name="axis">The axis along which to return the margin.
            </param>
            <returns>The margin for a given framework element and axis.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge">
            <summary>
            Specifies the edge position of a child element that is inside an
            EdgePanel.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Center">
            <summary>
            A child element that is positioned in the center of a EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Left">
            <summary>
            A child element that is positioned on the left side of the
            EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Top">
            <summary>
            A child element that is positioned at the top of the EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Right">
            <summary>
            A child element that is positioned on the right side of the
            EdgePanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.Edge.Bottom">
            <summary>
            A child element that is positioned at the bottom of the EdgePanel.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel">
            <summary>
            Defines an area where you can arrange child elements either horizontally
            or vertically, relative to each other.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.MaximumIterations">
            <summary>
            The maximum number of iterations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._ignorePropertyChange">
            <summary>
            A flag that ignores a property change when set.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.GetEdge(System.Windows.UIElement)">
            <summary>
            Gets the value of the Edge attached property for a specified
            UIElement.
            </summary>
            <param name="element">
            The element from which the property value is read.
            </param>
            <returns>The Edge property value for the element.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.SetEdge(System.Windows.UIElement,System.Windows.Controls.DataVisualization.Charting.Primitives.Edge)">
            <summary>
            Sets the value of the Edge attached property to a specified element.
            </summary>
            <param name="element">
            The element to which the attached property is written.
            </param>
            <param name="edge">The needed Edge value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.EdgeProperty">
            <summary>
            Identifies the Edge dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.OnEdgePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            EdgeProperty property changed handler.
            </summary>
            <param name="d">UIElement that changed its Edge.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.#ctor">
            <summary>
            Initializes a new instance of the EdgePanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.EdgePanelSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Invalidate measure when edge panel is resized.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._leftRect">
            <summary>
            The left rectangle in which to render left elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._rightRect">
            <summary>
            The right rectangle in which to render right elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._topRect">
            <summary>
            The top rectangle in which to render top elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel._bottomRect">
            <summary>
            The bottom rectangle in which to render bottom elements.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a EdgePanel in anticipation of arranging
            them during the ArrangeOverride pass.
            </summary>
            <param name="constraint">A maximum Size to not exceed.</param>
            <returns>The desired size of the EdgePanel.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content (child elements) of a EdgePanel element.
            </summary>
            <param name="arrangeSize">
            The Size the EdgePanel uses to arrange its child elements.
            </param>
            <returns>The arranged size of the EdgePanel.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Primitives.EdgePanel.SafeCreateRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Rect safely by forcing width/height to be valid.
            </summary>
            <param name="left">Rect left parameter.</param>
            <param name="top">Rect top parameter.</param>
            <param name="width">Rect width parameter.</param>
            <param name="height">Rect height parameter.</param>
            <returns>New Rect struct.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Axis">
            <summary>
            An axis class used to determine the plot area coordinate of values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAxis">
            <summary>
            An axis class used to determine the plot area coordinate of values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether the axis can plot a value.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether the axis can plot a value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area 
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.Orientation">
            <summary>
            Gets or sets the orientation of the axis.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.IAxis.OrientationChanged">
            <summary>
            This event is raised when the Orientation property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.RegisteredListeners">
            <summary>
            Gets the registered IAxisListeners.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IAxis.DependentAxes">
            <summary>
            Gets the collection of child axes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Axis.LocationProperty">
            <summary>
            Identifies the Location dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnLocationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LocationProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its Location.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnLocationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisLocation,System.Windows.Controls.DataVisualization.Charting.AxisLocation)">
            <summary>
            LocationProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Axis.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnOrientationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisOrientation,System.Windows.Controls.DataVisualization.Charting.AxisOrientation)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnInvalidated(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the invalidated event.
            </summary>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether the axis can plot a value.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether the axis can plot a value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area 
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.#ctor">
            <summary>
            Instantiates a new instance of the Axis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnChildAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Child axes collection changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnDependentAxesCollectionChanged">
            <summary>
            Child axes collection changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.RegisteredListenersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This event is raised when the registered listeners collection is
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            This method is invoked when a series is registered.
            </summary>
            <param name="series">The series that has been registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Axis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            This method is invoked when a series is unregistered.
            </summary>
            <param name="series">The series that has been unregistered.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.Location">
            <summary>
            Gets or sets the axis location.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Axis.LocationChanged">
            <summary>
            This event is raised when the location property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.DependentAxes">
            <summary>
            Gets the list of child axes belonging to this axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.Orientation">
            <summary>
            Gets or sets the orientation of the axis.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Axis.OrientationChanged">
            <summary>
            This event is raised when the Orientation property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Axis.RegisteredListeners">
            <summary>
            Gets or the collection of series that are using the Axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisLabel">
            <summary>
            A label used to display data in an axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLabel.StringFormatProperty">
            <summary>
            Identifies the StringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.OnStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StringFormatProperty property changed handler.
            </summary>
            <param name="d">AxisLabel that changed its StringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.OnStringFormatPropertyChanged(System.String)">
            <summary>
            StringFormatProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLabel.FormattedContentProperty">
            <summary>
            Identifies the FormattedContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the AxisLabel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AxisLabel.UpdateFormattedContent">
            <summary>
            Updates the formatted text.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AxisLabel.StringFormat">
            <summary>
            Gets or sets the text string format.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AxisLabel.FormattedContent">
            <summary>
            Gets the formatted content property.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisLocation">
            <summary>
            Axis position.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Auto">
            <summary>
            Location is determined automatically.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Left">
            <summary>
            Left in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Top">
            <summary>
            Top in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Right">
            <summary>
            Right in the series host area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisLocation.Bottom">
            <summary>
            Bottom of the series host area.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.CategoryAxis">
            <summary>
            An axis that displays categories.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DisplayAxis">
            <summary>
            An axis that has a range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRequireSeriesHost">
            <summary>
            An object that implements this interface requires a series host.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRequireSeriesHost.SeriesHost">
            <summary>
            Gets or sets the series host.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MaximumAxisIntervalsPer200Pixels">
            <summary>
            Maximum intervals per 200 pixels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisGridName">
            <summary>
            The name of the axis grid template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisTitleName">
            <summary>
            The name of the axis title template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisLabelStyleProperty">
            <summary>
            Identifies the AxisLabelStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnAxisLabelStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AxisLabelStyleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its AxisLabelStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnAxisLabelStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            AxisLabelStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GetLength(System.Windows.Size)">
            <summary>
            Returns the length of the axis given an available size.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The length of the axis given an available size.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._gridLines">
            <summary>
            This field stores the grid lines element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnGridLinesPropertyChanged(System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines,System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines)">
            <summary>
            GridLinesProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MajorTickMarkStyleProperty">
            <summary>
            Identifies the MajorTickMarkStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnMajorTickMarkStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MajorTickMarkStyleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its MajorTickMarkStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnMajorTickMarkStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            MajorTickMarkStyleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnTitlePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="d">DisplayAxis that changed its Title.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnTitlePropertyChanged(System.Object,System.Object)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ShowGridLinesProperty">
            <summary>
            Identifies the ShowGridLines dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnShowGridLinesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ShowGridLinesProperty property changed handler.
            </summary>
            <param name="d">Axis that changed its ShowGridLines.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnShowGridLinesPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            ShowGridLinesProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.SetShowGridLines(System.Boolean)">
            <summary>
            Creates and destroys a grid lines element based on the specified
            value.
            </summary>
            <param name="newValue">A value indicating whether to display grid 
            lines or not.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLineStyleProperty">
            <summary>
            Identifies the GridlineStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._grid">
            <summary>
            The grid used to layout the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._axisTitle">
            <summary>
            The control used to display the axis title.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateMajorTickMark">
            <summary>
            Creates a major axis tick mark.
            </summary>
            <returns>A line to used to render a tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateTickMark(System.Windows.Style)">
            <summary>
            Creates a tick mark and applies a style to it.
            </summary>
            <param name="style">The style to apply.</param>
            <returns>The newly created tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.InternalGetMajorGridLinePositions">
            <summary>
            This method is used to share the grid line coordinates with the
            internal grid lines control.
            </summary>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns the coordinates to use for the grid line control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of coordinates at which to draw grid lines.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.#ctor">
            <summary>
            Instantiates a new instance of the DisplayAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.DisplayAxisSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            If display axis has just become visible, invalidate.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.CreateAxisLabel">
            <summary>
            Creates an axis label.
            </summary>
            <returns>The new axis label.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnDependentAxesCollectionChanged">
            <summary>
            Updates the grid lines element if a suitable dependent axis has
            been added to a radial axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.PrepareAxisLabel(System.Windows.Controls.Control,System.Object)">
            <summary>
            Prepares an axis label to be plotted.
            </summary>
            <param name="label">The axis label to prepare.</param>
            <param name="dataContext">The data context to use for the axis 
            label.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnApplyTemplate">
            <summary>
            Retrieves template parts and configures layout.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnOrientedPanelSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            When the size of the oriented panel changes invalidate the axis.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnLocationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisLocation,System.Windows.Controls.DataVisualization.Charting.AxisLocation)">
            <summary>
            Arranges the grid when the location property is changed.
            </summary>
            <param name="oldValue">The old location.</param>
            <param name="newValue">The new location.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ArrangeAxisGrid">
            <summary>
            Arranges the elements in the axis grid.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MeasureOverride(System.Windows.Size)">
            <summary>
            Renders the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The required size.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnOrientationPropertyChanged(System.Windows.Controls.DataVisualization.Charting.AxisOrientation,System.Windows.Controls.DataVisualization.Charting.AxisOrientation)">
            <summary>
            Reformulates the grid when the orientation is changed.  Grid is
            either separated into two columns or two rows.  The title is 
            inserted with the outermost section from the edge and an oriented
            panel is inserted into the innermost section.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnInvalidated(System.Windows.RoutedEventArgs)">
            <summary>
            Updates the visual appearance of the axis when it is invalidated.
            </summary>
            <param name="args">Information for the invalidated event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.RenderAxis(System.Windows.Size)">
            <summary>
            Renders the axis if there is a valid value for orientation.
            </summary>
            <param name="availableSize">The available size in which to render 
            the axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Invalidate">
            <summary>
            Invalidates the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxis._seriesHost">
            <summary>
            The series host.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            This method is run when the series host property is changed.
            </summary>
            <param name="oldValue">The old series host.</param>
            <param name="newValue">The new series host.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisLabelStyle">
            <summary>
            Gets or sets the style used for the axis labels.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ActualLength">
            <summary>
            Gets the actual length.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLines">
            <summary>
            Gets or sets the grid lines property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.MajorTickMarkStyle">
            <summary>
            Gets or sets the style applied to the Axis tick marks.
            </summary>
            <value>The Style applied to the Axis tick marks.</value>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.Title">
            <summary>
            Gets or sets the title property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleLayoutTransformControl">
            <summary>
            Gets or sets the LayoutTransformControl used to rotate the title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.TitleStyle">
            <summary>
            Gets or sets the style applied to the Axis title.
            </summary>
            <value>The Style applied to the Axis title.</value>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.ShowGridLines">
            <summary>
            Gets or sets a value indicating whether grid lines should be shown.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.GridLineStyle">
            <summary>
            Gets or sets the Style of the Axis's gridlines.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisGrid">
            <summary>
            Gets or sets the grid used to layout the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.DependentAxisGrid">
            <summary>
            Gets or sets a grid to lay out the dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.OrientedPanel">
            <summary>
            Gets the oriented panel used to layout the axis labels.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.AxisTitle">
            <summary>
            Gets or sets the title control used to display the title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxis.SeriesHost">
            <summary>
            Gets or sets the series host.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis">
            <summary>
            An axis that is arranged by category.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IDataConsumer">
            <summary>
            An object that consumes data.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IDataConsumer.DataChanged(System.Windows.Controls.DataVisualization.Charting.IDataProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Supplies the consumer with data.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="data">The data used by the consumer.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis.GetPlotAreaCoordinateRange(System.Object)">
            <summary>
            Accepts a category and returns the coordinate range of that category
            on the axis.
            </summary>
            <param name="category">A category for which to retrieve the 
            coordinate location.</param>
            <returns>The coordinate range of the category on the axis.</returns>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ICategoryAxis.GetCategoryAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the category at a given coordinate.
            </summary>
            <param name="position">The plot are coordinate.</param>
            <returns>The category at the given plot area coordinate.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis._majorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis._labelPool">
            <summary>
            A pool of labels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.SortOrderProperty">
            <summary>
            Identifies the SortOrder dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnSortOrderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SortOrderProperty property changed handler.
            </summary>
            <param name="d">CategoryAxis that changed its SortOrder.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnSortOrderPropertyChanged">
            <summary>
            SortOrderProperty property changed handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.#ctor">
            <summary>
            Instantiates a new instance of the CategoryAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnDependentAxesCollectionChanged">
            <summary>
            Child axes collection changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            Updates categories when a series is registered.
            </summary>
            <param name="series">The series to be registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            Updates categories when a series is unregistered.
            </summary>
            <param name="series">The series to be unregistered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetPlotAreaCoordinateRange(System.Object)">
            <summary>
            Returns range of coordinates for a given category.
            </summary>
            <param name="category">The category to return the range for.</param>
            <returns>The range of coordinates corresponding to the category.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetCategoryAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the category at a given coordinate.
            </summary>
            <param name="position">The plot area position.</param>
            <returns>The category at the given plot area position.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.DataChanged(System.Windows.Controls.DataVisualization.Charting.IDataProvider,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates the categories in response to an update from a registered
            axis data provider.
            </summary>
            <param name="dataProvider">The category axis information
            provider.</param>
            <param name="data">A sequence of categories.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.UpdateCategories">
            <summary>
            Updates the list of categories.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns the major axis grid line coordinates.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="value">The value for which to retrieve the plot area 
            coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.CreateAndPrepareAxisLabel(System.Object)">
            <summary>
            Creates and prepares a new axis label.
            </summary>
            <param name="value">The axis label value.</param>
            <returns>The axis label content control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.RenderOriented(System.Windows.Size)">
            <summary>
            Renders as an oriented axis.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can be plotted on the
            axis.
            </summary>
            <param name="value">A value which may or may not be able to be
            plotted.</param>
            <returns>A value indicating whether a value can be plotted on the
            axis.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.SortOrder">
            <summary>
            Gets or sets the sort order used for the categories.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.Categories">
            <summary>
            Gets or sets a list of categories to display.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.CategoryAxis.GridLineCoordinatesToDisplay">
            <summary>
            Gets or sets the grid line coordinates to display.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder">
            <summary>
            The sort order to use when sorting categories.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.None">
            <summary>
            No sort order.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.Ascending">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.CategorySortOrder.Descending">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines">
            <summary>
            This control draws gridlines with the help of an axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IAxisListener">
            <summary>
            An object that listens for changes in an axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IAxisListener.AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            This method is called when the axis is invalidated.
            </summary>
            <param name="axis">The axis that has been invalidated.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines._axis">
            <summary>
            The field that stores the axis that the grid lines are connected to.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.OnAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.DisplayAxis,System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            AxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.#ctor(System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            Instantiates a new instance of the DisplayAxisGridLines class.
            </summary>
            <param name="axis">The axis used by the DisplayAxisGridLines.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Redraws grid lines when the size of the control changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Redraws grid lines when the axis is invalidated.
            </summary>
            <param name="axis">The invalidated axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.Invalidate">
            <summary>
            Draws the grid lines.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DisplayAxisGridLines.Axis">
            <summary>
            Gets the axis that the grid lines are connected to.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeConsumer">
            <summary>
            An object that consumes a range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeConsumer.RangeChanged(System.Windows.Controls.DataVisualization.Charting.IRangeProvider,System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Informs a range consumer that a provider's range has changed.
            </summary>
            <param name="provider">The range provider.</param>
            <param name="range">The range of data.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer">
            <summary>
            Consumes value margins and uses them to lay out objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer.ValueMarginsChanged(System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.ValueMargin})">
            <summary>
            Updates layout to accommodate for value margins.
            </summary>
            <param name="provider">A value margin provider.</param>
            <param name="valueMargins">A sequence of value margins.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider">
            <summary>
            Provides information about margins necessary for values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Gets the margins required for values.
            </summary>
            <param name="consumer">The axis to retrieve the value margins 
            for.</param>
            <returns>The margins required for values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ValueMargin">
            <summary>
            A margin specified for a given value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.#ctor(System.Object,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ValueMargin class.
            </summary>
            <param name="value">The value the margin is associated with.</param>
            <param name="lowMargin">The lower margin.</param>
            <param name="highMargin">The higher margin.</param> 
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.Equals(System.Object)">
            <summary>
            Determines whether two value margins are equal.
            </summary>
            <param name="obj">The value margin to compare with this one.</param>
            <returns>A value indicating whether the two value margins are equal.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.op_Equality(System.Windows.Controls.DataVisualization.Charting.ValueMargin,System.Windows.Controls.DataVisualization.Charting.ValueMargin)">
            <summary>
            Determines whether two unit value objects are equal.
            </summary>
            <param name="left">The left value margin.</param>
            <param name="right">The right value margin.</param>
            <returns>A value indicating  whether two value margins objects are 
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.op_Inequality(System.Windows.Controls.DataVisualization.Charting.ValueMargin,System.Windows.Controls.DataVisualization.Charting.ValueMargin)">
            <summary>
            Determines whether two value margin objects are not equal.
            </summary>
            <param name="left">The left value margin.</param>
            <param name="right">The right value margin.</param>
            <returns>A value indicating whether two value margin objects are not
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMargin.GetHashCode">
            <summary>
            Returns the hash code of the value margin object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.Value">
            <summary>
            Gets the value that the margin is associated with.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.LowMargin">
            <summary>
            Gets the low margin for a value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMargin.HighMargin">
            <summary>
            Gets the high margin for a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.RangeAxis">
            <summary>
            An axis that has a range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeAxis">
            <summary>
            An axis with a range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            The plot area coordinate of a value.
            </summary>
            <param name="position">The position at which to retrieve the plot 
            area coordinate.</param>
            <returns>The plot area coordinate.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.Range">
            <summary>
            Gets the range of values displayed on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.IRangeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._majorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._minorTickMarkPool">
            <summary>
            A pool of major tick marks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._labelPool">
            <summary>
            A pool of labels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis.MinorTickMarkStyleProperty">
            <summary>
            Identifies the MinorTickMarkStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._actualRange">
            <summary>
            The actual range of values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._protectedMaximum">
            <summary>
            The maximum value displayed in the range axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.RangeAxis._protectedMinimum">
            <summary>
            The minimum value displayed in the range axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.#ctor">
            <summary>
            Instantiates a new instance of the RangeAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.CreateMinorTickMark">
            <summary>
            Creates a minor axis tick mark.
            </summary>
            <returns>A line to used to render a tick mark.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Invalidates axis when the actual range changes.
            </summary>
            <param name="range">The new actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetPlotAreaCoordinate(System.Object)">
            <summary>
            Returns the plot area coordinate of a given value.
            </summary>
            <param name="value">The value to return the plot area coordinate
            for.</param>
            <returns>The plot area coordinate of the given value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a given value.
            </summary>
            <param name="value">The value to return the plot area coordinate
            for.</param>
            <param name="currentRange">The value range to use when calculating 
            the plot area coordinate.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of the given value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the data range.
            </summary>
            <param name="range">The range to potentially override.</param>
            <returns>The overridden range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.EnforceMaximumAndMinimum(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Modifies a range to respect the minimum and maximum axis values.
            </summary>
            <param name="range">The range of data.</param>
            <returns>A range modified to  respect the minimum and maximum axis 
            values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.UpdateActualRange">
            <summary>
            Updates the actual range displayed on the axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.RenderOriented(System.Windows.Size)">
            <summary>
            Renders the axis as an oriented axis.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.Render(System.Windows.Size)">
            <summary>
            Renders the axis labels, tick marks, and other visual elements.
            </summary>
            <param name="availableSize">The available size.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorGridLineCoordinates(System.Windows.Size)">
            <summary>
            Returns a sequence of the major grid line coordinates.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the major grid line coordinates.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorGridLineValues(System.Windows.Size)">
            <summary>
            Returns a sequence of the values at which to plot major grid lines.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of the values at which to plot major grid lines.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMinorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area coordinate.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area coordinate.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeConsumer#RangeChanged(System.Windows.Controls.DataVisualization.Charting.IRangeProvider,System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the axis with information about a provider's data range.
            </summary>
            <param name="usesRangeAxis">The information provider.</param>
            <param name="range">The range of data in the information provider.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IValueMarginConsumer#ValueMarginsChanged(System.Windows.Controls.DataVisualization.Charting.IValueMarginProvider,System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.ValueMargin})">
            <summary>
            Updates the layout of the axis to accommodate a sequence of value
            margins.
            </summary>
            <param name="provider">A value margin provider.</param>
            <param name="valueMargins">A sequence of value margins.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnObjectRegistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            If a new range provider is registered, update actual range.
            </summary>
            <param name="series">The axis listener being registered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.OnObjectUnregistered(System.Windows.Controls.DataVisualization.Charting.IAxisListener)">
            <summary>
            If a range provider is unregistered, update actual range.
            </summary>
            <param name="series">The axis listener being unregistered.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.UpdateValueMargins(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap},System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Create function that when given a range will return the 
            amount in pixels by which the value margin range 
            overlaps.  Positive numbers represent values outside the
            range.
            </summary>
            <param name="valueMargins">The list of value margins, coordinates, and overlaps.</param>
            <param name="comparableRange">The new range to use to calculate coordinates.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.RangeAxis.GetMaxLeftAndRightOverlap(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap},System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap@,System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap@)">
            <summary>
            Returns the value margin, coordinate, and overlap triples that have the largest left and right overlap.
            </summary>
            <param name="valueMargins">The list of value margin, coordinate, and 
            overlap triples.</param>
            <param name="maxLeftOverlapValueMargin">The value margin, 
            coordinate, and overlap triple that has the largest left overlap.
            </param>
            <param name="maxRightOverlapValueMargin">The value margin, 
            coordinate, and overlap triple that has the largest right overlap.
            </param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.MinorTickMarkStyle">
            <summary>
            Gets or sets the minor tick mark style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ActualRange">
            <summary>
            Gets or sets the actual range of values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ProtectedMaximum">
            <summary>
            Gets or sets the maximum value displayed in the range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.ProtectedMinimum">
            <summary>
            Gets or sets the minimum value displayed in the range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#Range">
            <summary>
            Gets the actual maximum value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.System#Windows#Controls#DataVisualization#Charting#IRangeAxis#Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.RangeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMaximumProperty">
            <summary>
            Identifies the ActualMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMinimumProperty">
            <summary>
            Identifies the ActualMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMaximumPropertyChanged(System.Nullable{System.DateTime})">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnMinimumPropertyChanged(System.Nullable{System.DateTime})">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis2 that changed its Interval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalPropertyChanged">
            <summary>
            IntervalProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalProperty">
            <summary>
            Identifies the ActualInterval dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalTypeProperty">
            <summary>
            Identifies the InternalIntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalTypePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxis that changed its InternalIntervalType.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnIntervalTypePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalTypeProperty">
            <summary>
            Identifies the ActualIntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.#ctor">
            <summary>
            Instantiates a new instance of the DateTimeAxis2 class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ToDateTimeRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range to a range of type DateTime.
            </summary>
            <param name="range">A range to be converted.</param>
            <returns>A range that has been converted.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CreateAxisLabel">
            <summary>
            Creates a new instance of the DateTimeAxisLabel class.
            </summary>
            <returns>Returns  a new instance of the DateTimeAxisLabel class.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.PrepareAxisLabel(System.Windows.Controls.Control,System.Object)">
            <summary>
            Prepares an instance of the DateTimeAxisLabel class by setting its
            IntervalType property.
            </summary>
            <param name="label">An instance of the DateTimeAxisLabel class.
            </param>
            <param name="dataContext">The data context to assign to the label.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the typed actual maximum and minimum properties when the
            actual range changes.
            </summary>
            <param name="range">The actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can plot.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether a value can plot.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="range">The range to use determine the coordinate.</param>
            <param name="length">The length of the axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CalculateActualInterval(System.Windows.Size)">
            <summary>
            Returns the actual interval to use to determine which values are 
            displayed in the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The actual interval to use to determine which values are 
            displayed in the axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetMajorAxisValues(System.Windows.Size)">
            <summary>
            Returns a sequence of major values.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of major values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to create major tick marks for.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to create major tick marks for.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IncrementDateTime(System.DateTime,System.Double)">
            <summary>
            This method accepts a date time and increments it.
            </summary>
            <param name="date">A date time.</param>
            <param name="interval">The interval used to increment the date time.
            </param>
            <returns>The new date time.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.AlignIntervalStart(System.DateTime,System.Double,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            Adjusts the beginning of the first interval depending on the type and size.
            </summary>
            <param name="start">Original start point.</param>
            <param name="intervalSize">Interval size.</param>
            <param name="type">Type of the interval (Month, Year, ...).</param>
            <returns>
            Adjusted interval start position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The position.</param>
            <returns>A range of values at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.CalculateDateTimeInterval(System.DateTime,System.DateTime,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType@,System.Windows.Size)">
            <summary>
            Recalculates a DateTime interval obtained from maximum and minimum.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <param name="type">Date time interval type.</param>
            <param name="availableSize">The available size.</param>
            <returns>Auto Interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the actual range to ensure that it is never set to an
            empty range.
            </summary>
            <param name="range">The range to override.</param>
            <returns>The overridden range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMaximum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualMinimum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Maximum">
            <summary>
            Gets or sets the maximum value plotted on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Minimum">
            <summary>
            Gets or sets the minimum value to plot on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Interval">
            <summary>
            Gets or sets the axis interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualInterval">
            <summary>
            Gets the actual interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.IntervalType">
            <summary>
            Gets or sets the interval to use for the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.ActualIntervalType">
            <summary>
            Gets or sets the actual interval type.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel">
            <summary>
            An axis label for displaying DateTime values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.IntervalTypeProperty">
            <summary>
            Identifies the IntervalType dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnIntervalTypePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its IntervalType.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnIntervalTypePropertyChanged(System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType,System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType)">
            <summary>
            IntervalTypeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.YearsIntervalStringFormatProperty">
            <summary>
            Identifies the YearsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnYearsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            YearsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its YearsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnYearsIntervalStringFormatPropertyChanged">
            <summary>
            YearsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MonthsIntervalStringFormatProperty">
            <summary>
            Identifies the MonthsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMonthsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MonthsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MonthsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMonthsIntervalStringFormatPropertyChanged">
            <summary>
            MonthsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.WeeksIntervalStringFormatProperty">
            <summary>
            Identifies the WeeksIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnWeeksIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            WeeksIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its WeeksIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnWeeksIntervalStringFormatPropertyChanged">
            <summary>
            WeeksIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.DaysIntervalStringFormatProperty">
            <summary>
            Identifies the DaysIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnDaysIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DaysIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its DaysIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnDaysIntervalStringFormatPropertyChanged">
            <summary>
            DaysIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.HoursIntervalStringFormatProperty">
            <summary>
            Identifies the HoursIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnHoursIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HoursIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its HoursIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnHoursIntervalStringFormatPropertyChanged">
            <summary>
            HoursIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MinutesIntervalStringFormatProperty">
            <summary>
            Identifies the MinutesIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMinutesIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinutesIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MinutesIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMinutesIntervalStringFormatPropertyChanged">
            <summary>
            MinutesIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.SecondsIntervalStringFormatProperty">
            <summary>
            Identifies the SecondsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnSecondsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SecondsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its SecondsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnSecondsIntervalStringFormatPropertyChanged">
            <summary>
            SecondsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MillisecondsIntervalStringFormatProperty">
            <summary>
            Identifies the MillisecondsIntervalStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMillisecondsIntervalStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MillisecondsIntervalStringFormatProperty property changed handler.
            </summary>
            <param name="d">DateTimeAxisLabel that changed its MillisecondsIntervalStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.OnMillisecondsIntervalStringFormatPropertyChanged">
            <summary>
            MillisecondsIntervalStringFormatProperty property changed handler.
            </summary>    
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the DateTimeAxisLabel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.UpdateFormattedContent">
            <summary>
            Updates the formatted text.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.IntervalType">
            <summary>
            Gets or sets the interval type of the DateTimeAxis2.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.YearsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MonthsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.WeeksIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.DaysIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.HoursIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MinutesIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.SecondsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DateTimeAxisLabel.MillisecondsIntervalStringFormat">
            <summary>
            Gets or sets the format string to use when the interval is hours.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType">
            <summary>
            A date time interval.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Auto">
            <summary>
            Automatically determine interval.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Milliseconds">
            <summary>
            Interval type is milliseconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Seconds">
            <summary>
            Interval type is seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Minutes">
            <summary>
            Interval type is minutes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Hours">
            <summary>
            Interval type is hours.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Days">
            <summary>
            Interval type is days.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Weeks">
            <summary>
            Interval type is weeks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Months">
            <summary>
            Interval type is months.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DateTimeIntervalType.Years">
            <summary>
            Interval type is years.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines">
            <summary>
            This control draws gridlines with the help of an axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines._gridLinePool">
            <summary>
            A pool of grid lines.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines.#ctor(System.Windows.Controls.DataVisualization.Charting.DisplayAxis)">
            <summary>
            Initializes a new instance of the OrientedAxisGridLines class.
            </summary>
            <param name="displayAxis">The axis to draw grid lines for.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.OrientedAxisGridLines.Invalidate">
            <summary>
            Draws the grid lines.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IDataProvider">
            <summary>
            Provides information to a category axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IDataProvider.GetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Retrieves the data to be plotted on the axis.
            </summary>
            <param name="axis">The axis to retrieve the data for.</param>
            <returns>The data to plot on the axis.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRangeProvider">
            <summary>
            Provides information to a RangeConsumer.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRangeProvider.GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the range of values.
            </summary>
            <param name="rangeConsumer">The range consumer requesting the data 
            range.</param>
            <returns>A data range.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LinearAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NumericAxis">
            <summary>
            An axis that displays numeric values.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMaximumProperty">
            <summary>
            Identifies the ActualMaximum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMinimumProperty">
            <summary>
            Identifies the ActualMinimum dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">BaseNumericAxis that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMaximumPropertyChanged(System.Nullable{System.Double})">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">BaseNumericAxis that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnMinimumPropertyChanged(System.Nullable{System.Double})">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ExtendRangeToOriginProperty">
            <summary>
            Identifies the ExtendRangeToOrigin dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnExtendRangeToOriginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExtendRangeToOriginProperty property changed handler.
            </summary>
            <param name="d">NumericAxis that changed its ExtendRangeToOrigin.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnExtendRangeToOriginPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            ExtendRangeToOriginProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.#ctor">
            <summary>
            Instantiates a new instance of the BaseNumericAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OnActualRangeChanged(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Updates the typed actual maximum and minimum properties when the
            actual range changes.
            </summary>
            <param name="range">The actual range.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.CanPlot(System.Object)">
            <summary>
            Returns a value indicating whether a value can plot.
            </summary>
            <param name="value">The value to plot.</param>
            <returns>A value indicating whether a value can plot.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.CreateAxisLabel">
            <summary>
            Returns a numeric axis label.
            </summary>
            <returns>A numeric axis label.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the data value range and returns a range that takes the
            margins of the values into account.
            </summary>
            <param name="range">The range of data values.</param>
            <returns>A range that can store both the data values and their 
            margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMaximum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ActualMinimum">
            <summary>
            Gets the actual maximum value plotted on the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Maximum">
            <summary>
            Gets or sets the maximum value plotted on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Minimum">
            <summary>
            Gets or sets the minimum value to plot on the axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.ExtendRangeToOrigin">
            <summary>
            Gets or sets a value indicating whether to always show the origin.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.NumericAxis.Origin">
            <summary>
            Gets the origin value on the axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LinearAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OnIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IntervalProperty property changed handler.
            </summary>
            <param name="d">LinearAxis that changed its Interval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OnIntervalPropertyChanged">
            <summary>
            IntervalProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LinearAxis.ActualIntervalProperty">
            <summary>
            Identifies the ActualInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.#ctor">
            <summary>
            Instantiates a new instance of the LinearAxis class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetPlotAreaCoordinate(System.Object,System.Windows.Controls.DataVisualization.Range{System.IComparable},System.Double)">
            <summary>
            Returns the plot area coordinate of a value.
            </summary>
            <param name="value">The value to plot.</param>
            <param name="range">The range of values.</param>
            <param name="length">The length of axis.</param>
            <returns>The plot area coordinate of a value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.CalculateActualInterval(System.Windows.Size)">
            <summary>
            Returns the actual interval to use to determine which values are 
            displayed in the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>Actual interval to use to determine which values are 
            displayed in the axis.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetMajorTickMarkValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to create major tick marks for.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to create major tick marks for.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetMajorValues(System.Windows.Size)">
            <summary>
            Returns a sequence of major axis values.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of major axis values.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetLabelValues(System.Windows.Size)">
            <summary>
            Returns a sequence of values to plot on the axis.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>A sequence of values to plot on the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.AlignToInterval(System.Double,System.Double)">
            <summary>
            Aligns a value to the provided interval value.  The aligned value
            should always be smaller than or equal to than the provided value.
            </summary>
            <param name="value">The value to align to the interval.</param>
            <param name="interval">The interval to align to.</param>
            <returns>The aligned value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.GetValueAtPosition(System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Returns the value range given a plot area coordinate.
            </summary>
            <param name="value">The plot area position.</param>
            <returns>The value at that plot area coordinate.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.LengthToRange(System.Double,System.Double)">
            <summary>
            Function that uses the mid point of all the data values
            in the value margins to convert a length into a range
            of data with the mid point as the center of that range.
            </summary>
            <param name="midPoint">The mid point of the range.</param>
            <param name="length">The length of the range.</param>
            <returns>The range object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LinearAxis.OverrideDataRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Overrides the actual range to ensure that it is never set to an
            empty range.
            </summary>
            <param name="range">The range to override.</param>
            <returns>Returns the overridden range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LinearAxis.Interval">
            <summary>
            Gets or sets the axis interval.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LinearAxis.ActualInterval">
            <summary>
            Gets the actual interval of the axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NumericAxisLabel">
            <summary>
            A label used to display numeric axis values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NumericAxisLabel.#ctor">
            <summary>
            Instantiates a new instance of the NumericAxisLabel class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BarDataPoint">
            <summary>
            Represents a data point used for bar series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarDataPoint.#ctor">
            <summary>
            Initializes a new instance of the BarDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint">
            <summary>
            Represents a data point used for bar series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.SizeProperty">
            <summary>
            Identifies the Size dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SizeProperty property changed handler.
            </summary>
            <param name="d">BubbleDataPoint that changed its Size.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnSizePropertyChanged(System.Double,System.Double)">
            <summary>
            SizeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSizeProperty">
            <summary>
            Identifies the ActualSize dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnActualSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ActualSizeProperty property changed handler.
            </summary>
            <param name="d">BubbleDataPoint that changed its ActualSize.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.OnActualSizePropertyChanged(System.Double,System.Double)">
            <summary>
            ActualSizeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.#ctor">
            <summary>
            Initializes a new instance of the bubble data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.Size">
            <summary>
            Gets or sets the size value of the bubble data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.SizePropertyChanged">
            <summary>
            This event is raised when the size property is changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSize">
            <summary>
            Gets or sets the actual size of the bubble data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.BubbleDataPoint.ActualSizePropertyChanged">
            <summary>
            This event is raised when the actual size property is changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnDataPoint">
            <summary>
            Represents a data point used for column series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnDataPoint.#ctor">
            <summary>
            Initializes a new instance of the ColumnDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ISeriesHost">
            <summary>
            Defines properties, methods and events for classes that host a 
            collection of Series objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.IStyleDispenser">
            <summary>
            Represents a service that dispenses Styles.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.IStyleDispenser.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.IStyleDispenser.ResetStyles">
            <summary>
            Resets the style dispenser.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.Axes">
            <summary>
            Gets the collection of axes the series host has available.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.Series">
            <summary>
            Gets the collection of series the series host has available.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.ForegroundElements">
            <summary>
            Gets the foreground elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.BackgroundElements">
            <summary>
            Gets the background elements.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.ISeriesHost.GlobalSeriesIndexesInvalidated">
            <summary>
            Occurs when the series descendents in the series host have changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions">
            <summary>
            Extension methods for series hosts.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions.GetDescendentSeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Gets all series that track their global indexes recursively.
            </summary>
            <param name="rootSeriesHost">The root series host.</param>
            <returns>A sequence of series.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ISeriesHostExtensions.IsUsedByASeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Gets a value indicating whether an axis is in use by the series 
            host.
            </summary>
            <param name="that">The series host.</param>
            <param name="axis">The axis that may or may not be used by a 
            series.</param>
            <returns>A value indicating whether an axis is in use by the series 
            host.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection">
            <summary>
            An axes collection used by a series host.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1">
            <summary>
            An observable collection that does not allow duplicates.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at an index. Throws if the item already exists in the collection.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item at a given index. Throws if the item already exists at another index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UniqueObservableCollection`1.ClearItems">
            <summary>
            Clears all items in the collection by removing them individually.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.#ctor(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Instantiates a new instance of the SeriesHostAxesCollection class.
            </summary>
            <param name="seriesHost">The series host.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.#ctor(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.UniqueObservableCollection{System.Windows.Controls.DataVisualization.Charting.IAxis})">
            <summary>
            Instantiates a new instance of the SeriesHostAxesCollection class.
            </summary>
            <param name="seriesHost">The series host.</param>
            <param name="persistentAxes">A collection of axes that can never be 
            removed from the chart.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.ThisCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            A method that attaches and removes listeners to axes added to this
            collection.
            </summary>
            <param name="sender">This object.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.AxisRegisteredListenersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Remove an axis from the collection if it is no longer used.
            </summary>
            <param name="sender">The axis that has had its registered 
            listeners collection changed.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.PersistentAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method synchronizes the collection with the persistent axes 
            collection when it is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the axes collection but throws an exception
            if a series in the series host is listening to it.
            </summary>
            <param name="index">The index of the item being removed.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.SeriesHost">
            <summary>
            Gets or sets the series host field.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.SeriesHostAxesCollection.PersistentAxes">
            <summary>
            Gets or sets a collection of axes cannot be removed under any 
            circumstances.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AreaSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1">
            <summary>
            A base class that contains methods used by both the line and area series.
            </summary>
            <typeparam name="T">The type of data point used by the series.</typeparam>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes">
            <summary>
            A dynamic series with axes and only one legend item and style for all 
            data points.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes">
            <summary>
            Represents a dynamic series that uses axes to display data points.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointSeries">
            <summary>
            Represents a control that contains a dynamic data series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Series">
            <summary>
            Represents a control that contains a data series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Series._seriesHost">
            <summary>
            Stores the Parent instance the Series belongs to.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Called when the value of the SeriesHost property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Series.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnTitleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed callback.
            </summary>
            <param name="o">Series for which the Title changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.OnTitleChanged(System.Object,System.Object)">
            <summary>
            Called when the Title property changes.
            </summary>
            <param name="oldValue">The old value of the Title property.</param>
            <param name="newValue">The new value of the Title property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.#ctor">
            <summary>
            Initializes a new instance of the Series class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.Refresh">
            <summary>
            Refreshes data from data source and renders the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Series.RefreshStyles">
            <summary>
            Refreshes styles from style dispenser and renders the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.SeriesHost">
            <summary>
            Gets or sets the parent instance the Series belongs to.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.LegendItems">
            <summary>
            Gets the legend items to be added to the legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Series.Title">
            <summary>
            Gets or sets the title content of the Series.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotAreaName">
            <summary>
            The name of the template part with the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._storyBoardQueue">
            <summary>
            Queue of hide/reveal storyboards to play.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._dependentValueBinding">
            <summary>
            The binding used to identify the dependent value binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._dataPointsByObject">
            <summary>
            Data points collection sorted by object.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._independentValueBinding">
            <summary>
            The binding used to identify the independent value binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed callback.
            </summary>
            <param name="o">Series for which the ItemsSource changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the ItemsSource property changes.
            </summary>
            <param name="oldValue">Old value of the ItemsSource property.</param>
            <param name="newValue">New value of the ItemsSource property.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IsSelectionEnabledProperty">
            <summary>
            Identifies the IsSelectionEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnIsSelectionEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="d">DynamicSeries that changed its IsSelectionEnabled.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnIsSelectionEnabledPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsSelectionEnabledProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AnimationSequenceProperty">
            <summary>
            Identifies the AnimationSequence dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._plotArea">
            <summary>
            The plot area canvas.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._processingOnSelectedItemPropertyChanged">
            <summary>
            Tracks whether a call to OnSelectedItemPropertyChanged is already in progress.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="d">DynamicSeries that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSelectedItemPropertyChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the SelectedItem property changes.
            </summary>
            <param name="oldValue">The old selected index.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LegendItemStyleProperty">
            <summary>
            Identifies the LegendItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnLegendItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LegendItemStyleProperty property changed handler.
            </summary>
            <param name="d">DataPointSeries that changed its LegendItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnLegendItemStylePropertyChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when the value of the LegendItemStyle property changes.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries._needRefreshWhenSizeChanged">
            <summary>
            Indicates whether a call to Refresh is required when the control's
            size changes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.#ctor">
            <summary>
            Initializes a new instance of the Series class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AddObject(System.Object)">
            <summary>
            Adds an object to the series host by creating a corresponding data point
            for it.
            </summary>
            <param name="dataContext">The object to add to the series host.</param>
            <returns>The data point created for the object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ShouldCreateDataPoint(System.Object)">
            <summary>
            Returns whether a data point should be created for the data context.
            </summary>
            <param name="dataContext">The data context that will be used for the
            data point.</param>
            <returns>A value indicating whether a data point should be created
            for the data context.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.GetInsertionIndex(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Returns the index at which to insert data point in the plot area
            child collection.
            </summary>
            <param name="dataPoint">The data point to retrieve the insertion
            index for.</param>
            <returns>The insertion index.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AddDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Adds a data point to the plot area.
            </summary>
            <param name="dataPoint">The data point to add to the plot area.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.GetDataPoint(System.Object)">
            <summary>
            Retrieves the data point corresponding to the object passed as the
            parameter.
            </summary>
            <param name="dataContext">The data context used for the point.
            </param>
            <returns>The data point associated with the object.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateAndPrepareDataPoint(System.Object)">
            <summary>
            Creates and prepares a data point.
            </summary>
            <param name="dataContext">The object to use as the data context
            of the data point.</param>
            <returns>The newly created data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateDataPoint">
            <summary>
            Returns a Control suitable for the Series.
            </summary>
            <returns>The DataPoint instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.CreateLegendItem">
            <summary>
            Creates a legend item.
            </summary>
            <returns>A legend item for insertion in the legend items collection.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that handles the ObservableCollection.CollectionChanged event for the ItemsSource property.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LoadDataPoints(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Updates data points collection with items retrieved from items
            source and removes the old items.
            </summary>
            <param name="newItems">The items to load.</param>
            <param name="oldItems">The items to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnApplyTemplate">
            <summary>
            Attaches handler plot area after loading it from XAML.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.InvokeOnLayoutUpdated(System.Action)">
            <summary>
            Invokes an action when the plot area's layout is updated.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Handles changes to the SeriesHost property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnItemsSourceCollectionChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method called when the ItemsSource collection changes.
            </summary>
            <param name="collection">New value of the collection.</param>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnPlotAreaChanged(System.Windows.Controls.Panel,System.Windows.Controls.Panel)">
            <summary>
            Removes items from the existing plot area and adds items to new
            plot area.
            </summary>
            <param name="oldValue">The previous plot area.</param>
            <param name="newValue">The new plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Updates the visual appearance of all the data points when the size
            changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Refresh">
            <summary>
            Refreshes data from data source and renders the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.RemoveObject(System.Object)">
            <summary>
            Removes an object from the series host by removing its corresponding
            data point.
            </summary>
            <param name="dataContext">The object to remove from the series data
            source.</param>
            <returns>The data point corresponding to the removed object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.RemoveDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Removes a data point from the plot area.
            </summary>
            <param name="dataPoint">The data point to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Updates the visual representation of all data points in the plot
            area.
            </summary>
            <param name="dataPoints">A sequence of data points to update.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AttachEventHandlersToDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Attaches event handlers to the data points.
            </summary>
            <param name="dataPoints">A sequence of data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DetachEventHandlersFromDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Detaches event handlers from the data points.
            </summary>
            <param name="dataPoints">A sequence of data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attaches event handlers to a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Unselect(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Unselects a data point.
            </summary>
            <param name="dataPoint">The data point to unselect.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.Select(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Selects a data point.
            </summary>
            <param name="dataPoint">The data point to select.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIsSelectedChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Method executed when a data point is either selected or unselected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches event handlers from a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnBeforeUpdateDataPoints">
            <summary>
            This method that executes before data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnAfterUpdateDataPoints">
            <summary>
            This method that executes after data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of a single data point in the plot
            area.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Prepares a data point by extracting binding it to a data context
            object.
            </summary>
            <param name="dataPoint">A data point.</param>
            <param name="dataContext">A data context object.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.StaggeredStateChange(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Int32,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Reveals data points using a storyboard.
            </summary>
            <param name="dataPoints">The data points to change the state of.
            </param>
            <param name="dataPointCount">The number of data points in the sequence.</param>
            <param name="newState">The state to change to.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStateChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.DataPointState})">
            <summary>
            Handles data point state property change.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointStateChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Windows.Controls.DataVisualization.Charting.DataPointState,System.Windows.Controls.DataVisualization.Charting.DataPointState)">
            <summary>
            Handles data point state property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles data point actual dependent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Handles data point actual dependent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles data point actual independent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointActualIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Handles data point actual independent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointDependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.IComparable})">
            <summary>
            Handles data point dependent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Handles data point dependent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIndependentValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles data point independent value property changes.
            </summary>
            <param name="sender">The data point.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Handles data point independent value property change.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.DependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IndependentValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IndependentValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ItemsSource">
            <summary>
            Gets or sets a collection used to contain the data points of the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.AnimationSequence">
            <summary>
            Gets or sets the animation sequence to use for the DataPoints of the Series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ActiveDataPoints">
            <summary>
            Gets a stream of the active data points in the plot area.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ActiveDataPointCount">
            <summary>
            Gets the number of active data points in the plot area.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionEasingFunction">
            <summary>
            Gets or sets the easing function to use when transitioning the
            data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.IsSelectionEnabled">
            <summary>
            Gets or sets a value indicating whether elements in the series can
            be selected.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotArea">
            <summary>
            Gets the plot area canvas.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.PlotAreaSize">
            <summary>
            Gets the size of the plot area.
            </summary>
            <remarks>
            Use this method instead of PlotArea.ActualWidth/ActualHeight
            because the ActualWidth and ActualHeight properties are set after
            the SizeChanged handler runs.
            </remarks>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectionChanged">
            <summary>
            Event raised when selection has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TemplateApplied">
            <summary>
            Gets or sets a value indicating whether the template has been
            applied.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.LegendItemStyle">
            <summary>
            Gets or sets the style to use for the legend items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.ClipGeometry">
            <summary>
            Gets or sets the Geometry used to clip DataPoints to the PlotArea bounds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.TransitionDuration">
            <summary>
            Gets or sets the duration of the value Transition animation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeries.UpdatingDataPoints">
            <summary>
            Gets a value indicating whether all data points are being
            updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.CreateRangeAxisFromData(System.Object)">
            <summary>
            Creates the correct range axis based on the data.
            </summary>
            <param name="value">The value to evaluate to determine which type of
            axis to create.</param>
            <returns>The range axis appropriate that can plot the provided
            value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetActualDataPointAxisValue(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Retrieves the value for a given access from a data point.
            </summary>
            <param name="dataPoint">The data point to retrieve the value from.</param>
            <param name="axis">The axis to retrieve the value for.</param>
            <returns>A function that returns a value appropriate for the axis
            when provided a DataPoint.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes._internalDependentAxis">
            <summary>
            Stores the internal dependent axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnInternalDependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            DependentAxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes._internalIndependentAxis">
            <summary>
            The internal independent axis.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnInternalIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis,System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.#ctor">
            <summary>
            Initializes a new instance of the DynamicSeriesWithAxes class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Update the axes when the specified data point's ActualDependentValue property changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Update the axes when the specified data point's DependentValue property changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateActualDependentAxis">
            <summary>
            Update axes when the specified data point's effective dependent value changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointActualIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Update axes when the specified data point's actual independent value changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Update axes when the specified data point's independent value changes.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateActualIndependentAxis">
            <summary>
            Update axes when a data point's effective independent value changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Only updates all data points if series has axes.
            </summary>
            <param name="dataPoints">A sequence of data points to update.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes">
            <summary>
            Method called to get series to acquire the axes it needs.  Acquires
            no axes by default.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Method called to get series to acquire the axes it needs.  Acquires
            no axes by default.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Charting.IAxis})">
            <summary>
            Method called to get the axes that the series needs.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
            <param name="independentAxisPredicate">A predicate that returns
            a value indicating whether an axis is an acceptable candidate for
            the series independent axis.</param>
            <param name="independentAxisFactory">A function that creates an
            acceptable independent axis.</param>
            <param name="dependentAxisPredicate">A predicate that returns
            a value indicating whether an axis is an acceptable candidate for
            the series dependent axis.</param>
            <param name="dependentAxisFactory">A function that creates an
            acceptable dependent axis.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IAxisListener#AxisInvalidated(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            Updates data points when the axis is invalidated.
            </summary>
            <param name="axis">The axis that was invalidated.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the actual range of data for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the range for.</param>
            <returns>The actual range of data.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IDataProvider#GetData(System.Windows.Controls.DataVisualization.Charting.IDataConsumer)">
            <summary>
            Returns data to a data consumer.
            </summary>
            <param name="dataConsumer">The data consumer requesting the data.
            </param>
            <returns>The data for a given data consumer.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Called when the value of the SeriesHost property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IRangeProvider#GetRange(System.Windows.Controls.DataVisualization.Charting.IRangeConsumer)">
            <summary>
            Returns the data range.
            </summary>
            <param name="rangeConsumer">The consumer requesting the range.</param>
            <returns>The data range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.System#Windows#Controls#DataVisualization#Charting#IValueMarginProvider#GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="axis">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.DataPointsByActualDependentValue">
            <summary>
            Gets or sets the data points by dependent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalActualDependentAxis">
            <summary>
            Gets or sets the actual dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalDependentAxis">
            <summary>
            Gets or sets the value of the internal dependent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalActualIndependentAxis">
            <summary>
            Gets or sets the actual independent axis value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.InternalIndependentAxis">
            <summary>
            Gets or sets the value of the internal independent axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.UpdatingAllAxes">
            <summary>
            Gets or sets a value indicating whether to the axes are being 
            updated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSeriesWithAxes.AxesInvalidated">
            <summary>
            Gets or sets a value indicating whether the axes have been 
            invalidated.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.IRequireGlobalSeriesIndex">
            <summary>
            Defines methods on classes that contain a global index.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.IRequireGlobalSeriesIndex.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            Occurs when a global series index changes.
            </summary>
            <param name="globalIndex">The global index that has changed.
            </param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.DataPointStyleProperty">
            <summary>
            Identifies the DataPointStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndexProperty">
            <summary>
            Identifies the GlobalSeriesIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnGlobalSeriesIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            GlobalSeriesIndexProperty property changed handler.
            </summary>
            <param name="d">Series that changed its Index.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnGlobalSeriesIndexPropertyChanged(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            GlobalSeriesIndexProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnTitleChanged(System.Object,System.Object)">
            <summary>
            Called when the Title property changes.
            </summary>
            <param name="oldValue">Old value of the Title property.</param>
            <param name="newValue">New value of the Title property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.#ctor">
            <summary>
            Initializes a new instance of the DynamicSingleSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GetStyleEnumeratorFromHost">
            <summary>
            Returns the data point style to use for all data points in the 
            series.
            </summary>
            <returns>The data point style to use for all charts in the series.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnPlotAreaChanged(System.Windows.Controls.Panel,System.Windows.Controls.Panel)">
            <summary>
            Insert grid containing data point used for legend item into the 
            plot area.
            </summary>
            <param name="oldValue">The old plot area.</param>
            <param name="newValue">The new plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            When the series host property is set retrieves a style to use for all the
            data points.
            </summary>
            <param name="oldValue">The old series host value.</param>
            <param name="newValue">The new series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.CreateLegendItemDataPoint">
            <summary>
            Creates the LegendItem Control if conditions are right.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Sets the style of the data point to the single style used for all
            data points.
            </summary>
            <param name="dataPoint">The data point to apply the style to.
            </param>
            <param name="dataContext">The object associated with the data point.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            This method updates the global series index property.
            </summary>
            <param name="globalIndex">The global index of the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.RefreshStyles">
            <summary>
            Refreshes the styles in the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.LegendItem">
            <summary>
            Gets the single legend item associated with the series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.CustomTitleInUse">
            <summary>
            Gets or sets a value indicating whether a custom title is in use.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.DataPointStyle">
            <summary>
            Gets or sets the style to use for the data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.ActualDataPointStyle">
            <summary>
            Gets or sets the actual style of used for the data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.DataPointSingleSeriesWithAxes.GlobalSeriesIndex">
            <summary>
            Gets the index of the series in the Parent's series collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.#ctor">
            <summary>
            Initializes a new instance of the LineAreaBaseSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnAfterUpdateDataPoints">
            <summary>
            This method executes after all data points have been updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Repositions line data point in the sorted collection if the actual 
            independent axis is a range axis.
            </summary>
            <param name="dataPoint">The data point that has changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.CreateDataPoint">
            <summary>
            Creates a new line data point.
            </summary>
            <returns>A line data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style to use for all data points.
            </summary>
            <returns>The style to use for all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.UpdateShape">
            <summary>
            Updates the point collection object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.DataPointsByIndependentValue">
            <summary>
            Gets data points collection sorted by independent value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineAreaBaseSeries`1.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.PathStyleProperty">
            <summary>
            Identifies the PathStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.#ctor">
            <summary>
            Initializes a new instance of the AreaSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnApplyTemplate">
            <summary>
            Creates a DataPoint for determining the line color.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">AreaSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AreaSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">AreaSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of the data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.UpdateShape">
            <summary>
            Updates the point collection object.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.AreaSeries.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Remove value margins from the side of the data points to ensure
            that area chart is flush against the edge of the chart.
            </summary>
            <param name="consumer">The value margin consumer.</param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.Geometry">
            <summary>
            Gets the geometry property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.PathStyle">
            <summary>
            Gets or sets the style of the Path object that follows the data 
            points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.AreaSeries.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the axis to which the series is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs">
            <summary>
            Information describing the style dispensed when a StyleDispensed event 
            is raised.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.#ctor(System.Int32,System.Windows.Style)">
            <summary>
            Initializes a new instance of the StyleDispensedEventArgs class.
            </summary>
            <param name="index">The index of the style dispensed.</param>
            <param name="style">The style dispensed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.Equals(System.Object)">
            <summary>
            Returns a value indicating whether two style dispenser arguments are 
            equal.
            </summary>
            <param name="obj">The other StyleDispenser object.</param>
            <returns>A value indicating whether two style dispenser arguments 
            are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.Index">
            <summary>
            Gets the index of the style dispensed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.StyleDispensedEventArgs.Style">
            <summary>
            Gets the style dispensed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator">
            <summary>
            An enumerator that dispenses styles sequentially by coordinating with
            related enumerators.  Enumerators are related through an association
            with a parent StyleDispenser class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.index">
            <summary>
            The index of current item in the StyleDispenser's list.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator._parentEnumerator">
            <summary>
            The parent enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.#ctor(System.Windows.Controls.DataVisualization.Charting.StyleDispenser,System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Initializes a new instance of a StyleEnumerator.
            </summary>
            <param name="dispenser">The style dispenser that dispensed this
            StyleEnumerator.</param>
            <param name="stylePredicate">A predicate used to determine which
            styles to return.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenserParentChanged">
            <summary>
            The style dispenser parent has changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.GetIndexOfNextSuitableStyle(System.Int32)">
            <summary>
            Returns the index of the next suitable style in the style dispenser
            list.
            </summary>
            <param name="startIndex">The index at which to start looking.</param>
            <returns>The index of the next suitable style.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenserResetting">
            <summary>
            Resets the style dispenser.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenserStyleDispensed(System.Object,System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            This method is invoked when one of the related style enumerator's 
            dispenses a style.  The enumerator checks to see if the style 
            dispensed would've been the next style it would have returned.  If
            so it updates it's index to the position after the previously
            returned style.
            </summary>
            <param name="sender">The style dispenser.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.OnStyleDispensed(System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            Raises the style dispensed event.
            </summary>
            <param name="args">Information about the style dispensed.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.MoveNext">
            <summary>
            Moves to the next style.
            </summary>
            <returns>A value indicating whether there are any more suitable
            styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.Reset">
            <summary>
            Resets the style enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.Dispose">
            <summary>
            Stops listening to style dispenser.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.CurrentStyle">
            <summary>
            Gets or sets the current style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.ParentEnumerator">
            <summary>
            Gets the parent enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StylePredicate">
            <summary>
            Gets or sets a predicate that returns a value indicating whether a 
            style should be returned by this enumerator.
            </summary>
            <returns>A value indicating whether a style can be returned by this
            enumerator.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.StyleDispenser">
            <summary>
            Gets the style dispenser that dispensed this enumerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.Current">
            <summary>
            Gets the current style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleEnumerator.ShouldRetrieveFromParentEnumerator">
            <summary>
            Gets a value indicating whether a enumerator should return styles
            from its parent enumerator.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap">
            <summary>
            A class used to calculate axis range. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.#ctor">
            <summary>
            Initializes a new instance of the ValueMarginCoordinateAndOverlap 
            class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.ValueMargin">
            <summary>
            Gets or sets the value margin object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.Coordinate">
            <summary>
            Gets or sets the coordinate.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.LeftOverlap">
            <summary>
            Gets or sets the left overlap.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ValueMarginCoordinateAndOverlap.RightOverlap">
            <summary>
            Gets or sets the right overlap.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2">
            <summary>
            Implements a left-leaning red-black tree.
            </summary>
            <remarks>
            Based on the research paper "Left-leaning Red-Black Trees"
            by Robert Sedgewick. More information available at:
            http://www.cs.princeton.edu/~rs/talks/LLRB/RedBlack.pdf
            http://www.cs.princeton.edu/~rs/talks/LLRB/08Penn.pdf
            </remarks>
            <typeparam name="TKey">Type of keys.</typeparam>
            <typeparam name="TValue">Type of values.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._keyComparison">
            <summary>
            Stores the key comparison function.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._valueComparison">
            <summary>
            Stores the value comparison function.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2._rootNode">
            <summary>
            Stores the root node of the tree.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the LeftLeaningRedBlackTree class implementing a normal dictionary.
            </summary>
            <param name="keyComparison">The key comparison function.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.#ctor(System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the LeftLeaningRedBlackTree class implementing an ordered multi-dictionary.
            </summary>
            <param name="keyComparison">The key comparison function.</param>
            <param name="valueComparison">The value comparison function.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Add(`0,`1)">
            <summary>
            Adds a key/value pair to the tree.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(`0)">
            <summary>
            Removes a key (and its associated value) from a normal (non-multi) dictionary.
            </summary>
            <param name="key">Key to remove.</param>
            <returns>True if key present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(`0,`1)">
            <summary>
            Removes a key/value pair from the tree.
            </summary>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if key/value present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Clear">
            <summary>
            Removes all nodes in the tree.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetKeys">
            <summary>
            Gets a sorted list of keys in the tree.
            </summary>
            <returns>Sorted list of keys.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValueForKey(`0)">
            <summary>
            Gets the value associated with the specified key in a normal (non-multi) dictionary.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValuesForKey(`0)">
            <summary>
            Gets a sequence of the values associated with the specified key.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Sequence of values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetValuesForAllKeys">
            <summary>
            Gets a sequence of all the values in the tree.
            </summary>
            <returns>Sequence of all values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.IsRed(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Returns true if the specified node is red.
            </summary>
            <param name="node">Specified node.</param>
            <returns>True if specified node is red.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Add(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,`0,`1)">
            <summary>
            Adds the specified key/value pair below the specified root node.
            </summary>
            <param name="node">Specified node.</param>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Remove(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,`0,`1)">
            <summary>
            Removes the specified key/value pair from below the specified node.
            </summary>
            <param name="node">Specified node.</param>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if key/value present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.FlipColor(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Flip the colors of the specified node and its direct children.
            </summary>
            <param name="node">Specified node.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.RotateLeft(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Rotate the specified node "left".
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.RotateRight(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Rotate the specified node "right".
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MoveRedLeft(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Moves a red node from the right child to the left child.
            </summary>
            <param name="node">Parent node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MoveRedRight(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Moves a red node from the left child to the right child.
            </summary>
            <param name="node">Parent node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.DeleteMinimum(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Deletes the minimum node under the specified node.
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.FixUp(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node)">
            <summary>
            Maintains invariants by adjusting the specified nodes children.
            </summary>
            <param name="node">Specified node.</param>
            <returns>New root node.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetNodeForKey(`0)">
            <summary>
            Gets the (first) node corresponding to the specified key.
            </summary>
            <param name="key">Key to search for.</param>
            <returns>Corresponding node or null if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.GetExtreme``1(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node},System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,``0})">
            <summary>
            Gets an extreme (ex: minimum/maximum) value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="node">Node to start from.</param>
            <param name="successor">Successor function.</param>
            <param name="selector">Selector function.</param>
            <returns>Extreme value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Traverse``1(System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,System.Boolean},System.Func{System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree{`0,`1}.Node,``0})">
            <summary>
            Traverses a subset of the sequence of nodes in order and selects the specified nodes.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="node">Starting node.</param>
            <param name="condition">Condition method.</param>
            <param name="selector">Selector method.</param>
            <returns>Sequence of selected nodes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.KeyAndValueComparison(`0,`1,`0,`1)">
            <summary>
            Compares the specified keys (primary) and values (secondary).
            </summary>
            <param name="leftKey">The left key.</param>
            <param name="leftValue">The left value.</param>
            <param name="rightKey">The right key.</param>
            <param name="rightValue">The right value.</param>
            <returns>CompareTo-style results: -1 if left is less, 0 if equal, and 1 if greater than right.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.IsMultiDictionary">
            <summary>
            Gets a value indicating whether the tree is acting as an ordered multi-dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Count">
            <summary>
            Gets the count of key/value pairs in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MinimumKey">
            <summary>
            Gets the minimum key in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MaximumKey">
            <summary>
            Gets the maximum key in the tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MinimumValue">
            <summary>
            Gets the minimum key's minimum value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.MaximumValue">
            <summary>
            Gets the maximum key's maximum value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node">
            <summary>
            Represents a node of the tree.
            </summary>
            <remarks>
            Using fields instead of properties drops execution time by about 40%.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Key">
            <summary>
            Gets or sets the node's key.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Value">
            <summary>
            Gets or sets the node's value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Left">
            <summary>
            Gets or sets the left node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Right">
            <summary>
            Gets or sets the right node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.IsBlack">
            <summary>
            Gets or sets the color of the node.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Collections.LeftLeaningRedBlackTree`2.Node.Siblings">
            <summary>
            Gets or sets the number of "siblings" (nodes with the same key/value).
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2">
            <summary>
            Implements a dictionary that can store multiple values for the same key.
            </summary>
            <typeparam name="TKey">Type for keys.</typeparam>
            <typeparam name="TValue">Type for values.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
            <param name="allowDuplicateValues">The parameter is not used.</param>
            <param name="keyEqualityComparer">The parameter is not used.</param>
            <param name="valueEqualityComparer">The parameter is not used.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Add(`0,`1)">
            <summary>
            Adds a key/value pair to the dictionary.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a key/value pair from the dictionary.
            </summary>
            <param name="key">Key to remove.</param>
            <param name="value">Value to remove.</param>
            <returns>True if the value was present and removed.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Clear">
            <summary>
            Clears the items in the dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.BinaryTree">
            <summary>
            Gets or sets the BinaryTree instance used to store the dictionary values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Count">
            <summary>
            Gets the count of values in the dictionary.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Collections.MultipleDictionary`2.Item(`0)">
            <summary>
            Returns the collection of values corresponding to a key.
            </summary>
            <param name="key">Specified key.</param>
            <returns>Collection of values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2">
            <summary>
            Implements a dictionary that can store multiple values for the same key and sorts the values.
            </summary>
            <typeparam name="TKey">Type for keys.</typeparam>
            <typeparam name="TValue">Type for values.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.#ctor(System.Boolean,System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Initializes a new instance of the MultipleDictionary class.
            </summary>
            <param name="allowDuplicateValues">The parameter is not used.</param>
            <param name="keyComparison">Key comparison class.</param>
            <param name="valueComparison">Value comparison class.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetKeyRange">
            <summary>
            Gets a Range corresponding to the keys in the dictionary.
            </summary>
            <returns>Range of keys.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetLargestAndSmallestValues">
            <summary>
            Gets the largest and smallest key's extreme values from the dictionary.
            </summary>
            <returns>Tuple of the largest and smallest values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for the values in the dictionary.
            </summary>
            <returns>Enumerator for values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Collections.OrderedMultipleDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the values in the dictionary.
            </summary>
            <returns>Enumerator for the values.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1">
            <summary>
            A generic equality comparer.
            </summary>
            <typeparam name="T">The type of the objects being compared.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the GenericEqualityComparer class.
            </summary>
            <param name="equalityFunction">A function which determines whether 
            two items are equal.</param>
            <param name="hashCodeFunction">A function that returns a hash code 
            for an object.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            A function which determines whether two items are equal.
            </summary>
            <param name="x">The left object.</param>
            <param name="y">The right object.</param>
            <returns>A value indicating whether the objects. are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            A function that returns a hash code for an object.
            </summary>
            <param name="obj">The object to returns a hash code for.</param>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.EqualityFunction">
            <summary>
            Gets or sets a function which determines whether two items are equal.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.GenericEqualityComparer`1.HashCodeFunction">
            <summary>
            Gets or sets a function that returns a hash code for an object.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BubbleSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.  A third binding determines the size of the data point.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.MaximumBubbleSizeAsRatioOfSmallestDimension">
            <summary>
            The maximum bubble size as a ratio of the smallest dimension.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries._sizeValueBinding">
            <summary>
            The binding used to identify the size value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.#ctor">
            <summary>
            Initializes a new instance of the bubble series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.CreateDataPoint">
            <summary>
            Creates a new instance of bubble data point.
            </summary>
            <returns>A new instance of bubble data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style enumerator used to retrieve a style to use for 
            all data points.
            </summary>
            <returns>The style enumerator used to retrieve a style to use for 
            all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.PrepareDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object)">
            <summary>
            Prepares a bubble data point by binding the size value binding to
            the size property.
            </summary>
            <param name="dataPoint">The data point to prepare.</param>
            <param name="dataContext">The data context of the data point.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attaches size change and actual size change event handlers to the
            data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches size change and actual size change event handlers from the
            data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.BubbleDataPointActualSizePropertyChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates all data points when the actual size property of a data 
            point changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.BubbleDataPointSizePropertyChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Animates the value of the ActualSize property to the size property
            when it changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnBeforeUpdateDataPoints">
            <summary>
            Calculates the sum of all data point actual size values before all
            data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.UpdateDataPoints(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Ensure that if any data points are updated, all data points are 
            updated.
            </summary>
            <param name="dataPoints">The data points to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the data point's visual representation.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnAfterUpdateDataPoints">
            <summary>
            Updates the value margins after all data points are updated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">BubbleSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">BubbleSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            The margins required for each value.
            </summary>
            <param name="consumer">The consumer to return the value margins for.</param>
            <returns>A sequence of margins for each value.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.SizeValueBinding">
            <summary>
            Gets or sets the Binding to use for identifying the size of the bubble.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.SizeValuePath">
            <summary>
            Gets or sets the Binding Path to use for identifying the size of the bubble.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.MaxOfDataPointActualSizeValues">
            <summary>
            Gets or sets the sum of all data point actual size values.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BubbleSeries.IndependentAxis">
            <summary>
            Gets or sets independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1">
            <summary>
            This series serves as the base class for the column and bar series.
            </summary>
            <typeparam name="T">The type of the data point.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1._categoriesWithMultipleDataPoints">
            <summary>
            Keeps a list of DataPoints that share the same category.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetDataPointGroup(System.Object)">
            <summary>
            Returns the group of data points in a given category.
            </summary>
            <param name="category">The category for which to return the data
            point group.</param>
            <returns>The group of data points in a given category.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetIsDataPointGrouped(System.Object)">
            <summary>
            Returns a value indicating whether a data point corresponding to
            a category is grouped.
            </summary>
            <param name="category">The category.</param>
            <returns>A value indicating whether a data point corresponding to
            a category is grouped.</returns>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1._dataPointlength">
            <summary>
            The length of each data point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.#ctor">
            <summary>
            Initializes a new instance of the ColumnBarBaseSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnBeforeUpdateDataPoints">
            <summary>
            Method run before DataPoints are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style enumerator used to retrieve a style to use for 
            all data points.
            </summary>
            <returns>The style enumerator used to retrieve a style to use for 
            all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDataPointActualDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Updates a data point when its actual dependent value has changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.RedrawOtherSeries(System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Redraws other column series to assure they allocate the right amount
            of space for their columns.
            </summary>
            <param name="seriesHost">The series host to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Redraw other column series when removed from a series host.
            </summary>
            <param name="oldValue">The old value of the series host property.</param>
            <param name="newValue">The new value of the series host property.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.CreateDataPoint">
            <summary>
            Creates the bar data point.
            </summary>
            <returns>A bar data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.CalculateDataPointLength">
            <summary>
            Calculates the length of the data points.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetValueMargins(System.Windows.Controls.DataVisualization.Charting.IValueMarginConsumer)">
            <summary>
            Returns the value margins for a given axis.
            </summary>
            <param name="consumer">The axis to retrieve the value margins for.
            </param>
            <returns>A sequence of value margins.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.GetCategoryRange(System.Object)">
            <summary>
            Gets a range in which to render a data point.
            </summary>
            <param name="category">The category to retrieve the range for.
            </param>
            <returns>The range in which to render a data point.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a category axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnBarBaseSeries`1.System#Windows#Controls#DataVisualization#Charting#IAnchoredToOrigin#AnchoredAxis">
            <summary>
            Gets the axis to which the data is anchored.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ObjectPool`1">
            <summary>
            A pool of objects that can be reused.
            </summary>
            <typeparam name="T">The type of object in the pool.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.DefaultMinimumObjectsInThePool">
            <summary>
            The default minimum number objects to keep in the pool.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1._createObject">
            <summary>
            A function which creates objects.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1._objects">
            <summary>
            The list of objects.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.currentIndex">
            <summary>
            The index of the current item in the list.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObjectPool`1.minimumObjectsInThePool">
            <summary>
            The minimum number of objects to keep in the pool.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
            <param name="minimumObjectsInThePool">The minimum number of objects
            to keep in the pool.</param>
            <param name="createObject">The function that creates the objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
            <param name="createObject">The function that creates the objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.ForEachRemaining(System.Action{`0})">
            <summary>
            Performs an operation on the subsequent, already-created objects
            in the pool.
            </summary>
            <param name="action">The action to perform on the remaining objects.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Next">
            <summary>
            Creates a new object or reuses an existing object in the pool.
            </summary>
            <returns>A new or existing object in the pool.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Reset">
            <summary>
            Resets the pool of objects.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Done">
            <summary>
            Finishes the object creation process.
            </summary>
            <remarks>
            If there are substantially more remaining objects in the pool those
            objects may be removed.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObjectPool`1.Clear">
            <summary>
            Removes the objects from the pool.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper">
            <summary>
            Represents a control that can animate the transitions between its specified
            dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.KeyFramesPerSecond">
            <summary>
            Number of key frames per second to generate the date time animations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.StoryboardKeyPattern">
            <summary>
            The pattern used to ensure unique keys for the storyboards stored in
            a framework element's resource dictionary.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.GetStoryboardKey(System.String)">
            <summary>
            Returns a unique key for a storyboard.
            </summary>
            <param name="propertyPath">The property path of the property that 
            the storyboard animates.</param>
            <returns>A unique key for a storyboard.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.BeginAnimation(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.String,System.Object,System.TimeSpan,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Starts animating a dependency property of a framework element to a 
            target value.
            </summary>
            <param name="target">The element to animate.</param>
            <param name="animatingDependencyProperty">The dependency property to
            animate.</param>
            <param name="propertyPath">The path of the dependency property to 
            animate.</param>
            <param name="targetValue">The value to animate the dependency
            property to.</param>
            <param name="timeSpan">The duration of the animation.</param>
            <param name="easingFunction">The easing function to uses to
            transition the data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.DependencyPropertyAnimationHelper.CreateStoryboard(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.String,System.Object@,System.TimeSpan,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Creates a story board that animates a dependency property to a 
            value.
            </summary>
            <param name="target">The element that is the target of the 
            storyboard.</param>
            <param name="animatingDependencyProperty">The dependency property
            to animate.</param>
            <param name="propertyPath">The property path of the dependency
            property to animate.</param>
            <param name="toValue">The value to animate the dependency property
            to.</param>
            <param name="durationTimeSpan">The duration of the animation.
            </param>
            <param name="easingFunction">The easing function to use to
            transition the data points.</param>
            <returns>The story board that animates the property.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.GridExtensions">
            <summary>
            A set of extension methods for the Grid container.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.GridExtensions.Mirror(System.Windows.Controls.Grid,System.Windows.Controls.Orientation)">
            <summary>
            Mirrors the grid either horizontally or vertically.
            </summary>
            <param name="grid">The grid to mirror.</param>
            <param name="orientation">The orientation to mirror the grid along.
            </param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.LayoutTransformControl">
            <summary>
            Control that implements support for transformations as if applied by
            LayoutTransform (which does not exist in Silverlight).
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.AcceptableDelta">
            <summary>
            Value used to work around double arithmetic rounding issues in 
            Silverlight.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.DecimalsAfterRound">
            <summary>
            Value used to work around double arithmetic rounding issues in 
            Silverlight.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.ContentProperty">
            <summary>
            Identifies the ContentProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformProperty">
            <summary>
            Identifies the TransformProperty dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._layoutRoot">
            <summary>
            Host panel for Child element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to layout root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._transformation">
            <summary>
            Transformation matrix corresponding to matrix transform.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.LayoutTransformControl._childActualSize">
            <summary>
            Actual DesiredSize of Child element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformControl class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnApplyTemplate">
            <summary>
            Called whenever the control's template changes.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ChildChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the child dependency property.
            </summary>
            <param name="o">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnChildChanged(System.Windows.FrameworkElement)">
            <summary>
            Updates content when the child property is changed.
            </summary>
            <param name="newContent">The new child.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.OnTransformChanged(System.Windows.Media.Transform)">
            <summary>
            Processes the transform when the transform is changed.
            </summary>
            <param name="newValue">The transform to process.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.TransformUpdated">
            <summary>
            Notifies the LayoutTransformControl that some aspect of its 
            Transform property has changed.
            </summary>
            <remarks>
            Call this to update the LayoutTransform in cases where 
            LayoutTransformControl wouldn't otherwise know to do so.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the current transform to determine the corresponding 
            matrix.
            </summary>
            <param name="transform">The transform to use to determine the 
            matrix.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform and returns the corresponding matrix.
            </summary>
            <param name="transform">The transform to create a matrix for.
            </param>
            <returns>The matrix calculated from the transform.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can
            give to child elements. Infinity can be specified as a value to 
            indicate that the element will size to whatever content is 
            available.</param>
            <returns>The size that this element determines it needs during 
            layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this 
            element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's 
            finalSize for clarity.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Computes the largest usable size after applying the transformation 
            to the specified bounds.
            </summary>
            <param name="arrangeBounds">The size to arrange within.</param>
            <returns>The size required.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Return true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">The left size.</param>
            <param name="b">The right size.</param>
            <returns>A value indicating whether the left size is smaller than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a matrix to avoid issues due to 
            floating point imprecision.
            </summary>
            <param name="matrix">The matrix to round.</param>
            <param name="decimalsAfterRound">The number of decimals after the
            round.</param>
            <returns>The rounded matrix.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implement Windows Presentation Foundation's Rect.Transform on 
            Silverlight.
            </summary>
            <param name="rectangle">The rectangle to transform.</param>
            <param name="matrix">The matrix to use to transform the rectangle.
            </param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements Windows Presentation Foundation's Matrix.Multiply on 
            Silverlight.
            </summary>
            <param name="matrix1">The left matrix.</param>
            <param name="matrix2">The right matrix.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.LayoutTransformControl.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements Windows Presentation Foundation's Matrix.HasInverse on
            Silverlight.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>True if matrix has an inverse.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.LayoutTransformControl.Child">
            <summary>
            Gets or sets the single child of the LayoutTransformControl.
            </summary>
            <remarks>
            Corresponds to Windows Presentation Foundation's Decorator.Child 
            property.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.LayoutTransformControl.Transform">
            <summary>
            Gets or sets the Transform of the LayoutTransformControl.
            </summary>
            <remarks>
            Corresponds to UIElement.RenderTransform.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1">
            <summary>
            An object that synchronizes changes in an observable collection to 
            a list.
            </summary>
            <typeparam name="T">The type of the objects in the collection.
            </typeparam>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1._collection">
            <summary>
            The collection to synchronize with a list.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method that synchronizes the panel's child collection with the 
            contents of the observable collection when it changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.Populate">
            <summary>
            A method that populates a panel with the items in the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.ClearItems">
            <summary>
            Removes the items in the adapted list from the target list.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.Collection">
            <summary>
            Gets or sets the collection to synchronize with a list.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.ObservableCollectionListAdapter`1.TargetList">
            <summary>
            Gets or sets the panel to synchronize with the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.OrientedPanel">
            <summary>
            A panel that plots elements on a one dimensional plane.  In order to 
            minimize collisions it moves elements further and further from the edge 
            of the plane based on their priority.  Elements that have the same
            priority level are always the same distance from the edge.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.ActualMinimumDistanceBetweenChildrenProperty">
            <summary>
            Identifies the ActualMinimumDistanceBetweenChildren dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.MinimumDistanceBetweenChildrenProperty">
            <summary>
            Identifies the MinimumDistanceBetweenChildren dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnMinimumDistanceBetweenChildrenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumDistanceBetweenChildrenProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its MinimumDistanceBetweenChildren.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnMinimumDistanceBetweenChildrenPropertyChanged(System.Double,System.Double)">
            <summary>
            MinimumDistanceBetweenChildrenProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.ActualLengthProperty">
            <summary>
            Identifies the ActualLength dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetCenterCoordinate(System.Windows.UIElement)">
            <summary>
            Gets the value of the CenterCoordinate attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The CenterCoordinate property value for the UIElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.SetCenterCoordinate(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the value of the CenterCoordinate attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed CenterCoordinate value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.CenterCoordinateProperty">
            <summary>
            Identifies the CenterCoordinate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnCenterCoordinatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CenterCoordinateProperty property changed handler.
            </summary>
            <param name="dependencyObject">UIElement that changed its CenterCoordinate.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.OffsetPaddingProperty">
            <summary>
            Identifies the OffsetPadding dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOffsetPaddingPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OffsetPaddingProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its OffsetPadding.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOffsetPaddingPropertyChanged(System.Double,System.Double)">
            <summary>
            OffsetPaddingProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetPriority(System.Windows.UIElement)">
            <summary>
            Gets the value of the Priority attached property for a specified UIElement.
            </summary>
            <param name="element">The UIElement from which the property value is read.</param>
            <returns>The Priority property value for the UIElement.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.SetPriority(System.Windows.UIElement,System.Int32)">
            <summary>
            Sets the value of the Priority attached property to a specified UIElement.
            </summary>
            <param name="element">The UIElement to which the attached property is written.</param>
            <param name="value">The needed Priority value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.PriorityProperty">
            <summary>
            Identifies the Priority dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnPriorityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PriorityProperty property changed handler.
            </summary>
            <param name="dependencyObject">UIElement that changed its Priority.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.IsInvertedProperty">
            <summary>
            Identifies the IsInverted dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsInvertedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsInvertedProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its IsInverted.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsInvertedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsInvertedProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.IsReversedProperty">
            <summary>
            Identifies the IsReversed dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsReversedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReversedProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its IsReversed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnIsReversedPropertyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReversedProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.OrientedPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">OrientedPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.OnOrientationPropertyChanged(System.Windows.Controls.Orientation)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.#ctor">
            <summary>
            Instantiates a new instance of the OrientedPanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.UpdateActualLength">
            <summary>
            Updates the actual length property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetRanges(System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Func{System.Windows.UIElement,System.Double})">
            <summary>
            Returns a sequence of ranges for a given sequence of children and a
            length selector.
            </summary>
            <param name="children">A sequence of children.</param>
            <param name="lengthSelector">A function that returns a length given
            a UIElement.</param>
            <returns>A sequence of ranges.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures children and determines necessary size.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The necessary size.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges items according to position and priority.
            </summary>
            <param name="finalSize">The final size of the panel.</param>
            <returns>The final size of the control.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.OrientedPanel.GetCorrectedDesiredSize(System.Windows.UIElement)">
            <summary>
            Gets the "corrected" DesiredSize (for Line instances); one that is
            more consistent with how the elements actually render.
            </summary>
            <param name="element">UIElement to get the size for.</param>
            <returns>Corrected size.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.ActualMinimumDistanceBetweenChildren">
            <summary>
            Gets the actual minimum distance between children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.MinimumDistanceBetweenChildren">
            <summary>
            Gets or sets the minimum distance between children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.ActualLength">
            <summary>
            Gets the actual length of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.OffsetPadding">
            <summary>
            Gets or sets the amount of offset padding to add between items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.IsInverted">
            <summary>
            Gets or sets a value indicating whether the panel is inverted.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.IsReversed">
            <summary>
            Gets or sets a value indicating whether the direction is reversed. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.Orientation">
            <summary>
            Gets or sets the orientation of the panel.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.OrientedPanel.PriorityOffsets">
            <summary>
            Gets or sets the offset of the edge to use for each priority group.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StoryboardQueue">
            <summary>
            Represents a storyboard queue that plays storyboards in sequence.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.StoryboardQueue._storyBoards">
            <summary>
            A queue of the storyboards.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StoryboardQueue.Enqueue(System.Windows.Media.Animation.Storyboard,System.EventHandler)">
            <summary>
            Accepts a new storyboard to play in sequence.
            </summary>
            <param name="storyBoard">The storyboard to play.</param>
            <param name="completedAction">An action to execute when the 
            storyboard completes.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StoryboardQueue.Dequeue">
            <summary>
            Removes the next storyboard in the queue and plays it.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisOrientation">
            <summary>
            Specifies the orientation of an axis.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.None">
            <summary>
            Orientation is automatically set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.X">
            <summary>
            Indicates the axis plots along the X axis.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisOrientation.Y">
            <summary>
            Indicates the axis plots along the Y axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType">
            <summary>
            Specifies an interval type.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Auto">
            <summary>
            Automatically determined by the ISeriesHost control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Number">
            <summary>
            The interval type is numerical.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Years">
            <summary>
            The interval type is years.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Months">
            <summary>
            The interval type is months.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Weeks">
            <summary>
            The interval type is weeks.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Days">
            <summary>
            The interval type is days.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Hours">
            <summary>
            The interval type is hours.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Minutes">
            <summary>
            The interval type is minutes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Seconds">
            <summary>
            The interval type is seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AxisIntervalType.Milliseconds">
            <summary>
            The interval type is milliseconds.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1">
            <summary>
            Converts a string or base value to a <see cref="T:System.Nullable"/> value.
            </summary>
            <typeparam name="T">The type should be value type.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="destinationType">The type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <param name="destinationType">The type of convert the value to
            .</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.Chart">
            <summary>
            Represents a control that displays a Chart.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaName">
            <summary>
            Specifies the name of the ChartArea TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendName">
            <summary>
            Specifies the name of the legend TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._legendChildrenLegendAdapter">
            <summary>
            Stores the legend children.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._chartAreaChildrenListAdapter">
            <summary>
            An adapter that synchronizes changes to the ChartAreaChildren
            property to the ChartArea panel's children collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._axes">
            <summary>
            Stores the collection of Axes in the Chart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._foregroundElements">
            <summary>
            The collection of foreground elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._backgroundElements">
            <summary>
            The collection of background elements.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._edgeAxes">
            <summary>
            Axes arranged along the edges.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._series">
            <summary>
            Stores the collection of Series displayed by the Chart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaStyleProperty">
            <summary>
            Identifies the ChartAreaStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendStyleProperty">
            <summary>
            Identifies the LegendStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.LegendTitleProperty">
            <summary>
            Identifies the LegendTitle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.PlotAreaStyleProperty">
            <summary>
            Identifies the PlotAreaStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.StylePaletteProperty">
            <summary>
            Identifies the StylePalette dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnStylePalettePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the StylePalette property is changed.
            </summary>
            <param name="d">Chart that contains the changed StylePalette.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnStylePalettePropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.Style})">
            <summary>
            Called when the value of the StylePalette property is changed.
            </summary>
            <param name="newValue">The new value for the StylePalette.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.#ctor">
            <summary>
            Initializes a new instance of the Chart class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.GetAutoAxisLocation(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Determines the location of an axis based on the existing axes in
            the chart.
            </summary>
            <param name="axis">The axis to determine the location of.</param>
            <returns>The location of the axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AddAxisToChartArea(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Adds an axis to the ISeriesHost area.
            </summary>
            <param name="axis">The axis to add to the ISeriesHost area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AxisOrientationChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.AxisOrientation})">
            <summary>
            Rebuilds the chart area if an axis orientation is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.SetEdge(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Sets the Edge property of an axis based on its location and
            orientation.
            </summary>
            <param name="axis">The axis to set the edge property of.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AxisLocationChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Controls.DataVisualization.Charting.AxisLocation})">
            <summary>
            Rebuild the chart area if an axis location is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.AddSeriesToPlotArea(System.Windows.Controls.DataVisualization.Charting.Series)">
            <summary>
            Adds a series to the plot area and injects chart services.
            </summary>
            <param name="series">The series to add to the plot area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Chart control when a new template
            is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.ActualAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Ensures that ISeriesHost is in a consistent state when axes collection is
            changed.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.Refresh">
            <summary>
            Causes the Chart to refresh the data obtained from its data source
            and render the resulting series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.RemoveAxisFromChartArea(System.Windows.Controls.DataVisualization.Charting.Axis)">
            <summary>
            Removes an axis from the Chart area.
            </summary>
            <param name="axis">The axis to remove from the ISeriesHost area.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.RemoveSeriesFromPlotArea(System.Windows.Controls.DataVisualization.Charting.Series)">
            <summary>
            Removes a series from the plot area.
            </summary>
            <param name="series">The series to remove from the plot area.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnSeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the ObservableCollection.CollectionChanged property
            changes.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.ResetStyles">
            <summary>
            Resets the styles dispensed by the chart.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnChildSeriesGlobalSeriesIndexesInvalidated(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Method handles the event raised when a child series' global series
            indexes have changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.OnGlobalSeriesIndexesInvalidated(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Updates the global indexes of all descendents that require a global
            index.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.Chart.UpdateGlobalIndexes">
            <summary>
            Updates the global index property of all Series that track their
            global index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.Chart._globalSeriesIndicesInvalidated">
            <summary>
            This field is used to track listeners to the
            GlobalSeriesIndexesInvalidated event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaChildren">
            <summary>
            Gets or sets the chart area children collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Axes">
            <summary>
            Gets or sets a collection of Axes in the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#ForegroundElements">
            <summary>
            Gets the collection of foreground elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#BackgroundElements">
            <summary>
            Gets the collection of background elements.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.InternalActualAxes">
            <summary>
            Gets or sets the axes that are currently in the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ActualAxes">
            <summary>
            Gets the actual axes displayed in the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartArea">
            <summary>
            Gets or sets the reference to the template's ChartArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Legend">
            <summary>
            Gets or sets the reference to the Chart's Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Series">
            <summary>
            Gets or sets the collection of Series displayed by the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.ChartAreaStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's ChartArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendItems">
            <summary>
            Gets the collection of legend items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.LegendTitle">
            <summary>
            Gets or sets the Title content of the Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.PlotAreaStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's PlotArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.StylePalette">
            <summary>
            Gets or sets a palette of styles used by the children of the ISeriesHost.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.StyleDispenser">
            <summary>
            Gets or sets an object that rotates through the palette.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.Title">
            <summary>
            Gets or sets the title displayed for the Chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.TitleStyle">
            <summary>
            Gets or sets the Style of the ISeriesHost's Title.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#IRequireSeriesHost#SeriesHost">
            <summary>
            Gets or sets the Series host of the chart.
            </summary>
            <remarks>This will always return null.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Axes">
            <summary>
            Gets the axes collection of the chart.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#Series">
            <summary>
            Gets the Series collection of the chart.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.Chart.System#Windows#Controls#DataVisualization#Charting#ISeriesHost#GlobalSeriesIndexesInvalidated">
            <summary>
            This event is raised when global Series indices are invalidated.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LegendItem">
            <summary>
            Represents an item used by a Series in the Legend of a Chart.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LegendItem.#ctor">
            <summary>
            Initializes a new instance of the LegendItem class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.AnimationSequence">
            <summary>
            Specifies the supported animation sequences.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.Simultaneous">
            <summary>
            Animates all of the data points simultaneously.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.FirstToLast">
            <summary>
            Animates the data points from first to last.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.AnimationSequence.LastToFirst">
            <summary>
            Animates the data points from last to first.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.DataPointState">
            <summary>
            Describes the state a data point is in.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Created">
            <summary>
            Data point has been created.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Showing">
            <summary>
            Data point is in the process of being revealed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Normal">
            <summary>
            Data point is visible in the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.PendingRemoval">
            <summary>
            Data point is in the process of being removed from the plot area.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Hiding">
            <summary>
            Data point is in the process of being hidden.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.DataPointState.Hidden">
            <summary>
            Data point is hidden.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineDataPoint">
            <summary>
            Represents a data point used for line series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineDataPoint.#ctor">
            <summary>
            Initializes a new instance of the LineDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.PieDataPoint">
            <summary>
            Represents a data point used for pie charts.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceName">
            <summary>
            The name of the slice template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnGeometryPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the Geometry property changes.
            </summary>
            <param name="d">Control that changed its Geometry.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometrySelectionProperty">
            <summary>
            Identifies the GeometrySelection dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryHighlightProperty">
            <summary>
            Identifies the GeometryHighlight dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatioProperty">
            <summary>
            Identifies the ActualOffsetRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualOffsetRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualOffsetRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its ActualOffsetRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualOffsetRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the ActualOffsetRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatioProperty">
            <summary>
            Identifies the ActualRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the ActualRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its ActualRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnActualRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the ActualRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.FormattedRatioProperty">
            <summary>
            Identifies the FormattedRatio dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatioProperty">
            <summary>
            Identifies the OffsetRatio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnOffsetRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the OffsetRatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its OffsetRatio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnOffsetRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the OffsetRatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioProperty">
            <summary>
            Identifies the Ratio dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the RatioProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its Ratio.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioPropertyChanged(System.Double,System.Double)">
            <summary>
            Called when the value of the RatioProperty property changes.
            </summary>
            <param name="oldValue">The value to be replaced.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioStringFormatProperty">
            <summary>
            Identifies the RatioStringFormat dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioStringFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the value of the RatioStringFormatProperty property changes.
            </summary>
            <param name="d">PieDataPoint that changed its RatioStringFormat.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnRatioStringFormatPropertyChanged(System.String)">
            <summary>
            Called when the value of the RatioStringFormatProperty property changes.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.#ctor">
            <summary>
            Initializes a new instance of the PieDataPoint.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnApplyTemplate">
            <summary>
            Builds the visual tree for the PieDataPoint when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.Geometry">
            <summary>
            Gets or sets the Geometry property which defines the shape of the
            data point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometrySelection">
            <summary>
            Gets or sets the Geometry which defines the shape of a point. The 
            GeometrySelection property is a copy of the Geometry property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.GeometryHighlight">
            <summary>
            Gets or sets the GeometryHighlight property which is a clone of the
            Geometry property.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatioChanged">
            <summary>
            Occurs when the actual offset ratio of the pie data point changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualOffsetRatio">
            <summary>
            Gets or sets the offset ratio that is displayed on the screen.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatioChanged">
            <summary>
            An event raised when the actual ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.ActualRatio">
            <summary>
            Gets or sets the ratio displayed on the screen.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.FormattedRatio">
            <summary>
            Gets the Ratio with the value of the RatioStringFormat property applied.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatioChanged">
            <summary>
            An event raised when the offset ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.OffsetRatio">
            <summary>
            Gets or sets the offset ratio of the pie data point.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioChanged">
            <summary>
            An event raised when the ratio of the pie data point is
            changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.Ratio">
            <summary>
            Gets or sets the ratio of the total that the data point 
            represents.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.RatioStringFormat">
            <summary>
            Gets or sets the format string for the FormattedRatio property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieDataPoint.SliceElement">
            <summary>
            Gets or sets the element that represents the pie slice.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ScatterDataPoint">
            <summary>
            Represents a data point used for scatter series.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterDataPoint.#ctor">
            <summary>
            Initializes a new instance of the ScatterDataPoint class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.BarSeries">
            <summary>
            Represents a control that contains a data series to be rendered in bar format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BarSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.BarSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.#ctor">
            <summary>
            Initializes a new instance of the BarSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal category axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.BarSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates each point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BarSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.BarSeries.IndependentAxis">
            <summary>
            Gets or sets the independent category axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StringFormatConverter">
            <summary>
            Converts a value to a string using a format string.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to a string by formatting it.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type of the conversion.</param>
            <param name="parameter">The format string.</param>
            <param name="culture">The culture to use for conversion.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a string to a target type.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <param name="targetType">The target type of the conversion.</param>
            <param name="parameter">A parameter used during the conversion
            process.</param>
            <param name="culture">The culture to use for the conversion.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StyleDispenserExtensions">
            <summary>
            Extensions methods for the IStyleDispenser interface.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StyleDispenserExtensions.GetStylesWithTargetType(System.Windows.Controls.DataVisualization.IStyleDispenser,System.Type,System.Boolean)">
            <summary>
            Returns a style enumerator that returns styles with a specified 
            target type or styles with a target type that is an ancestor of the
            specified target type.
            </summary>
            <param name="dispenser">The style dispenser.</param>
            <param name="targetType">The target type.</param>
            <param name="takeAncestors">A value indicating whether to accept 
            ancestors of the target type.</param>
            <returns>A style enumerator.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Tuple`2">
            <summary>
            A structure that groups two values.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Tuple structure.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Tuple`2.First">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Tuple`2.Second">
            <summary>
            Gets the second value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Unit">
            <summary>
            Units of measure.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Unit.Pixels">
            <summary>
            The corresponding value is in pixels.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Unit.Degrees">
            <summary>
            The corresponding value is in degrees.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.UnitValue">
            <summary>
            A value in units.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.#ctor(System.Double,System.Windows.Controls.DataVisualization.Unit)">
            <summary>
            Instantiates a new instance of the UnitValue struct.
            </summary>
            <param name="value">The value associated with the units.</param>
            <param name="unit">The units associated with the value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.CompareTo(System.Object)">
            <summary>
            Compares two unit values to determine if they are equal or not.
            </summary>
            <param name="obj">The object being compared.</param>
            <returns>A number smaller than zero if the obj is larger than this
            object.  A number equal to 0 if they are equal.  A number greater 
            than zero if this unit value is greater than obj.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.Equals(System.Object)">
            <summary>
            Determines if two values are equal.
            </summary>
            <param name="obj">The other value.</param>
            <returns>A value indicating whether values are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_Equality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether two unit value objects are equal.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating  whether two unit value objects are 
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_Inequality(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether two unit value objects are not equal.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether two unit value objects are not
            equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_LessThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether the left value is smaller than the right.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether the left value is smaller than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.op_GreaterThan(System.Windows.Controls.DataVisualization.UnitValue,System.Windows.Controls.DataVisualization.UnitValue)">
            <summary>
            Determines whether the left value is larger than the right.
            </summary>
            <param name="left">The left unit value.</param>
            <param name="right">The right unit value.</param>
            <returns>A value indicating whether the left value is larger than
            the right.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.UnitValue.GetHashCode">
            <summary>
            Returns the hash code of the unit value object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.UnitValue.Value">
            <summary>
            Gets the value associated with the units.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.UnitValue.Unit">
            <summary>
            Gets the units associated with the value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.ValueHelper">
            <summary>
            A set of functions for data conversion operations.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.ValueHelper.Radian">
            <summary>
            The value of a single radian.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.CanGraph(System.Double)">
            <summary>
            Returns a value indicating whether this value can be graphed on a 
            linear axis.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns>A value indicating whether this value can be graphed on a 
            linear axis.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TryConvert(System.Object,System.Double@)">
            <summary>
            Attempts to convert an object into a double.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="doubleValue">The double value.</param>
            <returns>A value indicating whether the value can be converted to a 
            double.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TryConvert(System.Object,System.DateTime@)">
            <summary>
            Attempts to convert an object into a date time.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="dateTimeValue">The double value.</param>
            <returns>A value indicating whether the value can be converted to a 
            date time.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDouble(System.Object)">
            <summary>
            Converts an object into a double.
            </summary>
            <param name="value">The value to convert to a double.</param>
            <returns>The converted double value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDateTime(System.Object)">
            <summary>
            Converts a value to a date.
            </summary>
            <param name="value">The value to convert to a date.</param>
            <returns>The converted date value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetDateTimesBetweenInclusive(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Returns a sequence of date time values from a start and end date 
            time inclusive.
            </summary>
            <param name="start">The start date time.</param>
            <param name="end">The end date time.</param>
            <param name="count">The number of values to return.</param>
            <returns>A sequence of date time values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetTimeSpanIntervalsInclusive(System.TimeSpan,System.Int64)">
            <summary>
            Returns a sequence of time span values within a time span inclusive.
            </summary>
            <param name="timeSpan">The time span to split.</param>
            <param name="count">The number of time spans to return.</param>
            <returns>A sequence of time spans.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetIntervalsInclusive(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns that intervals between a start and end value, including those
            start and end values.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="count">The total number of intervals.</param>
            <returns>A sequence of intervals.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.RemoveNoiseFromDoubleMath(System.Double)">
            <summary>
            Removes the noise from double math.
            </summary>
            <param name="value">The value.</param>
            <returns>A double without a noise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDoubleRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range into a double range.
            </summary>
            <param name="range">The range to convert.</param>
            <returns>A range with its members converted to doubles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToDateTimeRange(System.Windows.Controls.DataVisualization.Range{System.IComparable})">
            <summary>
            Converts a range into a date time range.
            </summary>
            <param name="range">The range to convert.</param>
            <returns>A range with its members converted to date times.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.Compare(System.IComparable,System.IComparable)">
            <summary>
            Compares two IComparables returning -1 if the left is null and 1 if
            the right is null.
            </summary>
            <param name="left">The left comparable.</param>
            <param name="right">The right comparable.</param>
            <returns>A value indicating which is larger.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.Translate(System.Windows.Point,System.Windows.Point)">
            <summary>
            Applies the translate transform to a point.
            </summary>
            <param name="origin">The origin point.</param>
            <param name="offset">The offset point.</param>
            <returns>The translated point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToComparableRange(System.Windows.Controls.DataVisualization.Range{System.Double})">
            <summary>
            Converts any range to a range of IComparable.
            </summary>
            <param name="range">The range to be converted.</param>
            <returns>The new range type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.LeftOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the left value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The left value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.RightOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the right value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The right value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.WidthOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the width value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The width value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.HeightOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the height value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The height value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.BottomOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the bottom value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The bottom value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.TopOrDefault(System.Windows.Rect,System.Double)">
            <summary>
            Returns the top value of the rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="value">The default value.</param>
            <returns>The top value of the rectangle.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.ToComparableRange(System.Windows.Controls.DataVisualization.Range{System.DateTime})">
            <summary>
            Converts any range to a range of IComparable.
            </summary>
            <param name="range">The range to be converted.</param>
            <returns>The new range type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetLength(System.Windows.Controls.DataVisualization.Range{System.DateTime})">
            <summary>
            Returns the time span of a date range.
            </summary>
            <param name="range">The range of values.</param>
            <returns>The length of the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.GetLength(System.Windows.Controls.DataVisualization.Range{System.Double})">
            <summary>
            Returns the time span of a date range.
            </summary>
            <param name="range">The range of values.</param>
            <returns>The length of the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.IsEmptyOrHasNoSize(System.Windows.Rect)">
            <summary>
            Returns a value indicating whether a rectangle is empty or has
            no width or height.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>A value indicating whether a rectangle is empty or has
            no width or height.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.ValueHelper.SetStyle(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets the style property of an element.
            </summary>
            <param name="element">The element.</param>
            <param name="style">The style.</param>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Range`1">
            <summary>
            A range of values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._hasData">
            <summary>
            A flag that determines whether the range is empty or not.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._maximum">
            <summary>
            The maximum value in the range.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Range`1._minimum">
            <summary>
            The minimum value in the range.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the Range class.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.op_Equality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compare two ranges and return a value indicating whether they are
            equal.
            </summary>
            <param name="leftRange">Left-hand side range.</param>
            <param name="rightRange">Right-hand side range.</param>
            <returns>A value indicating whether the ranges are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.op_Inequality(System.Windows.Controls.DataVisualization.Range{`0},System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compare two ranges and return a value indicating whether they are
            not equal.
            </summary>
            <param name="leftRange">Left-hand side range.</param>
            <param name="rightRange">Right-hand side range.</param>
            <returns>A value indicating whether the ranges are not equal.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Add(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Adds a range to the current range.
            </summary>
            <param name="range">A range to add to the current range.</param>
            <returns>A new range that encompasses the instance range and the
            range parameter.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Compares the range to another range.
            </summary>
            <param name="range">A different range.</param>
            <returns>A value indicating whether the ranges are equal.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Equals(System.Object)">
            <summary>
            Compares the range to an object.
            </summary>
            <param name="obj">Another object.</param>
            <returns>A value indicating whether the other object is a range,
            and if so, whether that range is equal to the instance range.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.Contains(`0)">
            <summary>
            Returns a value indicating whether a value is within a range.
            </summary>
            <param name="value">The value.</param>
            <returns>Whether the value is within the range.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.IntersectsWith(System.Windows.Controls.DataVisualization.Range{`0})">
            <summary>
            Returns a value indicating whether two ranges intersect.
            </summary>
            <param name="range">The range to compare against this range.</param>
            <returns>A value indicating whether the ranges intersect.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.GetHashCode">
            <summary>
            Computes a hash code value.
            </summary>
            <returns>A hash code value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Range`1.ToString">
            <summary>
            Returns the string representation of the range.
            </summary>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.HasData">
            <summary>
            Gets a value indicating whether the range is empty or not.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.Maximum">
            <summary>
            Gets the maximum value in the range.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Range`1.Minimum">
            <summary>
            Gets the minimum value in the range.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ColumnSeries">
            <summary>
            Represents a control that contains a data series to be rendered in column format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ColumnBarBaseSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the ColumnSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal category axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates each point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ColumnSeries.IndependentAxis">
            <summary>
            Gets or sets the independent category axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.LineSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y 
            line format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.PolylineStyleProperty">
            <summary>
            Identifies the PolylineStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">LineSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.LineSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">LineSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.#ctor">
            <summary>
            Initializes a new instance of the LineSeries class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.OnApplyTemplate">
            <summary>
            Creates a DataPoint for determining the line color.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates the visual representation of the data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.LineSeries.UpdateShape">
            <summary>
            Updates the point collection object.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.Points">
            <summary>
            Gets the collection of points that make up the line.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.PolylineStyle">
            <summary>
            Gets or sets the style of the Polyline object that follows the data 
            points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.LineSeries.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.ScatterSeries">
            <summary>
            Represents a control that contains a data series to be rendered in X/Y scatter format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.#ctor">
            <summary>
            Initializes a new instance of the ScatterSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.DependentRangeAxisProperty">
            <summary>
            Identifies the DependentRangeAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnDependentRangeAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="d">ScatterSeries that changed its DependentRangeAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnDependentRangeAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IRangeAxis)">
            <summary>
            DependentRangeAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.IndependentAxisProperty">
            <summary>
            Identifies the IndependentAxis dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnIndependentAxisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="d">ScatterSeries that changed its IndependentAxis.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.OnIndependentAxisPropertyChanged(System.Windows.Controls.DataVisualization.Charting.IAxis)">
            <summary>
            IndependentAxisProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.GetAxes(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Acquire a horizontal linear axis and a vertical linear axis.
            </summary>
            <param name="firstDataPoint">The first data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.CreateDataPoint">
            <summary>
            Creates a new scatter data point.
            </summary>
            <returns>A scatter data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.GetStyleEnumeratorFromHost">
            <summary>
            Returns the style enumerator used to retrieve a style to use for 
            all data points.
            </summary>
            <returns>The style enumerator used to retrieve a style to use for 
            all data points.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            This method updates a single data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.ActualDependentRangeAxis">
            <summary>
            Gets the dependent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.DependentRangeAxis">
            <summary>
            Gets or sets the dependent range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.ActualIndependentAxis">
            <summary>
            Gets the independent axis as a range axis.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.ScatterSeries.IndependentAxis">
            <summary>
            Gets or sets the independent range axis.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.PieSeries">
            <summary>
            Represents a control that contains a data series to be rendered in pie
            format.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries.StylePaletteProperty">
            <summary>
            Identifies the StylePalette dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnStylePalettePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StylePaletteProperty property changed handler.
            </summary>
            <param name="d">Parent that changed its StylePalette.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnStylePalettePropertyChanged(System.Collections.ObjectModel.Collection{System.Windows.Style})">
            <summary>
            StylePaletteProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries._styleEnumerator">
            <summary>
            The pie data point style enumerator.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.#ctor">
            <summary>
            Initializes a new instance of the PieSeries class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.PieSeries._dataPointLegendItems">
            <summary>
            A dictionary that links data points to their legend items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.ConvertRatioOfRotationToPoint(System.Double,System.Double,System.Double)">
            <summary>
            Accepts a ratio of a full rotation, the x and y length and returns
            the 2D point using trigonometric functions.
            </summary>
            <param name="ratio">The ratio of a full rotation [0..1].</param>
            <param name="radiusX">The x radius.</param>
            <param name="radiusY">The y radius.</param>
            <returns>The corresponding 2D point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.AddDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Creates a legend item for each data point.
            </summary>
            <param name="dataPoint">The data point added.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.RemoveDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Removes data point's legend item when the data point is removed.
            </summary>
            <param name="dataPoint">The data point to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.CreateDataPoint">
            <summary>
            Creates a data point.
            </summary>
            <returns>A data point.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnBeforeUpdateDataPoints">
            <summary>
            Updates all ratios before data points are updated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointsChanged(System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint},System.Collections.Generic.IList{System.Windows.Controls.DataVisualization.Charting.DataPoint})">
            <summary>
            Called after data points have been loaded from the items source.
            </summary>
            <param name="newDataPoints">New active data points.</param>
            <param name="oldDataPoints">Old inactive data points.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateLegendItemIndexes">
            <summary>
            Updates the indexes of all legend items when a change is made to the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateRatios">
            <summary>
            Updates the ratios of each data point.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdateDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Updates a data point.
            </summary>
            <param name="dataPoint">The data point to update.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.UpdatePieDataPointGeometry(System.Windows.Controls.DataVisualization.Charting.PieDataPoint,System.Double,System.Double)">
            <summary>
            Updates the PieDataPoint's Geometry property.
            </summary>
            <param name="pieDataPoint">PieDataPoint instance.</param>
            <param name="plotAreaWidth">PlotArea width.</param>
            <param name="plotAreaHeight">PlotArea height.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.CreatePieLegendItem(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Int32)">
            <summary>
            Creates a legend item from a data point.
            </summary>
            <param name="dataPoint">The data point to use to create the legend item.</param>
            <param name="index">The 1-based index of the Control.</param>
            <returns>The series host legend item.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.AttachEventHandlersToDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Attach event handlers to a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.DetachEventHandlersFromDataPoint(System.Windows.Controls.DataVisualization.Charting.DataPoint)">
            <summary>
            Detaches event handlers from a data point.
            </summary>
            <param name="dataPoint">The data point.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.GlobalSeriesIndexChanged(System.Nullable{System.Int32})">
            <summary>
            This method updates the global series index property.
            </summary>
            <param name="globalIndex">The global index of the series.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointDependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.IComparable,System.IComparable)">
            <summary>
            Updates the data point when the dependent value is changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnDataPointIndependentValueChanged(System.Windows.Controls.DataVisualization.Charting.DataPoint,System.Object,System.Object)">
            <summary>
            Updates the data point when the independent value is changed.
            </summary>
            <param name="dataPoint">The data point.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointActualRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's actual ratio is
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointActualOffsetRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's actual offset ratio
            is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's ratio is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnPieDataPointOffsetRatioChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Updates the data point when the pie data point's offset ratio is 
            changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.ResetStyles">
            <summary>
            Resets the styles dispensed by the series.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.OnSeriesHostPropertyChanged(System.Windows.Controls.DataVisualization.Charting.ISeriesHost,System.Windows.Controls.DataVisualization.Charting.ISeriesHost)">
            <summary>
            Sets the new series host to be the parent style dispenser of the
            local style dispenser object.
            </summary>
            <param name="oldValue">The new series host value.</param>
            <param name="newValue">The old series host value.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.PieSeries.RefreshStyles">
            <summary>
            Refreshes styles in the pie series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.StylePalette">
            <summary>
            Gets or sets a palette of styles used by the pie series.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.ActivePieDataPoints">
            <summary>
            Gets the active pie data points.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.PieSeries.StyleDispenser">
            <summary>
            Gets or sets an object used to dispense styles from the style 
            palette.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Charting.StyleDispenser">
            <summary>
            A class that rotates through a list of styles.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._stylesDispensed">
            <summary>
            A linked list of styles dispensed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._styleEnumerators">
            <summary>
            A bag of weak references to connected style enumerators.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._ignoreStyleDispensedByEnumerator">
            <summary>
            Value indicating whether to ignore that the style enumerator has 
            dispensed a style.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._styles">
            <summary>
            The list of styles of rotate.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.StylesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method is raised when the styles collection is changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Charting.StyleDispenser._parent">
            <summary>
            The parent of the style dispenser.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.#ctor">
            <summary>
            Initializes a new instance of the StyleDispenser class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.ResetStyles">
            <summary>
            Resets the state of the StyleDispenser and its style enumerators.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.Unregister(System.Windows.Controls.DataVisualization.Charting.StyleEnumerator)">
            <summary>
            Unregisters a style enumerator so that it can be garbage collected.
            </summary>
            <param name="enumerator">The style enumerator.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.GetStylesWhere(System.Func{System.Windows.Style,System.Boolean})">
            <summary>
            Returns a rotating enumerator of Style objects that coordinates with 
            the style dispenser object to ensure that no two enumerators are
            currently on the same style if possible.  If the style
            dispenser is reset or its collection of styles is changed then
            the enumerators will also be reset.
            </summary>
            <param name="stylePredicate">A predicate that returns a value
            indicating whether to return a style.</param>
            <returns>An enumerator of styles.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.EnumeratorStyleDispensed(System.Object,System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            This method is raised when an enumerator dispenses a style.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.OnParentChanged">
            <summary>
            Raises the ParentChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.OnEnumeratorStyleDispensed(System.Object,System.Windows.Controls.DataVisualization.StyleDispensedEventArgs)">
            <summary>
            Raises the EnumeratorStyleDispensed event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.OnResetting">
            <summary>
            This method raises the EnumeratorsResetting event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.Styles">
            <summary>
            Gets or sets the list of styles to rotate.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Charting.StyleDispenser.Parent">
            <summary>
            Gets or sets the parent of the style dispenser.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.EnumerableFunctions">
            <summary>
            This class contains general purpose functions to manipulate the generic
            IEnumerable type.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.FastCount(System.Collections.IEnumerable)">
            <summary>
            Attempts to cast IEnumerable to a list in order to retrieve a count 
            in order one.  It attempts to cast fail the sequence is enumerated.
            </summary>
            <param name="that">The sequence.</param>
            <returns>The number of elements in the sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns whether a sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <returns>Whether the sequence is empty or not.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MinOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the minimum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.SumOrDefault(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the sum of all values in the sequence or the default value.
            </summary>
            <param name="that">The stream.</param>
            <returns>The sum of all values or the default value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MaxOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Returns the maximum value in the stream based on the result of a
            project function.
            </summary>
            <typeparam name="T">The stream type.</typeparam>
            <param name="that">The stream.</param>
            <param name="projectionFunction">The function that transforms the
            item.</param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.Iterate``1(``0,System.Func{``0,``0})">
            <summary>
            Creates a sequence of values by accepting an initial value, an 
            iteration function, and apply the iteration function recursively.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="value">The initial value.</param>
            <param name="nextFunction">The function to apply to the value.
            </param>
            <returns>A sequence of the iterated values.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the index of an item in a sequence.
            </summary>
            <param name="that">The sequence.</param>
            <param name="value">The item to search for.</param>
            <returns>The index of the item or -1 if not found.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.ForEachWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Executes an action for each item and a sequence, passing in the 
            index of that item to the action procedure.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="action">A function that accepts a sequence item and its
            index in the sequence.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MaxOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the maximum value from.
            </param>
            <returns>The maximum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.MinOrNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum value or null if sequence is empty.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to retrieve the minimum value from.
            </param>
            <returns>The minimum value or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.EnumerableFunctions.FastElementAt``1(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Attempts to retrieve an element at an index by testing whether a 
            sequence is randomly accessible.  If not, performance degrades to a 
            linear search.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="index">The index of the element in the sequence.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Legend">
            <summary>
            Represents a control that displays a list of items and has a title.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.LegendItemsAreaName">
            <summary>
            Legend area name.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.OnTitlePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TitleProperty property changed handler.
            </summary>
            <param name="d">Legend that changed its Title.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend.TitleStyleProperty">
            <summary>
            Identifies the TitleStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.#ctor">
            <summary>
            Initializes a new instance of the Legend class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.OnApplyTemplate">
            <summary>
            Loads template parts when template is applied.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataVisualization.Legend._legendItemsLegendItemsAreaAdapter">
            <summary>
            Object that synchronizes the collection of legend items with the 
            children in the legend items area container.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event for ItemsSource.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Legend.UpdateLegendVisibility">
            <summary>
            Updates the Legend's Visibility property according to whether it has anything to display.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.Title">
            <summary>
            Gets or sets the title content of the Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.TitleStyle">
            <summary>
            Gets or sets the style applied to the Title property of the Legend.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.LegendItemsArea">
            <summary>
            Gets or sets the reference to the LegendItemsArea.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Legend.Items">
            <summary>
            Gets a collection of legend items to insert into the legend 
            area.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions">
            <summary>
            Collection of functions that manipulate streams of ranges.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum and maximum values in a stream.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="that">The stream.</param>
            <returns>The range of values in the stream.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.RangeEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{System.Windows.Controls.DataVisualization.Range{``0}})">
            <summary>
            Returns a range encompassing all ranges in a stream.
            </summary>
            <typeparam name="T">The type of the minimum and maximum values.
            </typeparam>
            <param name="that">The stream.</param>
            <returns>A range encompassing all ranges in a stream.</returns>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.StylePalette">
            <summary>
            Represents a collection of Style objects.
            </summary>
            <remarks>
            For more information, see System.Windows.Controls.ObjectCollection.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.StylePalette.#ctor">
            <summary>
            Initializes a new instance of the StylePalette class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Title">
            <summary>
            Represents the title of a data visualization control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.Title.#ctor">
            <summary>
            Initializes a new instance of the Title class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_Axes_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the Chart&apos;s Axes property is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_AxisLocationChanged_CantBeChangedToAutoWhenHostedInsideOfASeriesHost">
            <summary>
              Looks up a localized string similar to Axis location cannot be changed to auto when hosted inside of a series host..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Chart_Series_SetterNotSupported">
            <summary>
              Looks up a localized string similar to Changing the Chart&apos;s Series property is not supported; changes to the collection should be made with its .Add/.Remove methods instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedDependentAxisCannotBeUsed">
            <summary>
              Looks up a localized string similar to Assigned dependent axis cannot be used.  The data may not be able to be rendered on the provided axis or the series may require that they axis has an origin..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedIndependentAxisCannotBeUsed">
            <summary>
              Looks up a localized string similar to Assigned independent axis cannot be used..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue">
            <summary>
              Looks up a localized string similar to No suitable axis is available for plotting the dependent value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DataPointSeriesWithAxes_ThisSeriesDoesNotSupportRadialAxes">
            <summary>
              Looks up a localized string similar to This series does not support radial axes..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.DisplayAxis_GetLength_CannotDetermineTheLengthOfAnAxisWithAnOrientationOfNone">
            <summary>
              Looks up a localized string similar to Cannot determine the size of an axis without an orientation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.EdgePanel_OnEdgePropertyChanged">
            <summary>
              Looks up a localized string similar to Attempt to set Edge property to an invalid value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ctor_MaximumValueMustBeLargerThanOrEqualToMinimumValue">
            <summary>
              Looks up a localized string similar to The maximum value must be larger than or equal to the minimum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_get_Maximum_CannotReadTheMaximumOfAnEmptyRange">
            <summary>
              Looks up a localized string similar to &quot;Cannot read the Maximum of an empty range.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_get_Minimum_CannotReadTheMinimumOfAnEmptyRange">
            <summary>
              Looks up a localized string similar to &quot;Cannot read the Minimum of an empty range.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ToString_Data">
            <summary>
              Looks up a localized string similar to [{0},{1}].
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Range_ToString_NoData">
            <summary>
              Looks up a localized string similar to No Data..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.RangeAxis_MaximumValueMustBeLargerThanOrEqualToMinimumValue">
            <summary>
              Looks up a localized string similar to The maximum value must be larger than or equal to the minimum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.RangeAxis_MinimumValueMustBeLargerThanOrEqualToMaximumValue">
            <summary>
              Looks up a localized string similar to The minimum value must be smaller than or equal to the maximum value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.ReadOnlyObservableCollection_CollectionIsReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Series_OnGlobalSeriesIndexPropertyChanged_UntitledSeriesFormatString">
            <summary>
              Looks up a localized string similar to Series {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.Series_SeriesHost_SeriesHostPropertyNotNull">
            <summary>
              Looks up a localized string similar to A series cannot be added to more than one series host..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.SeriesHostAxesCollection_InvalidAttemptToRemovePermanentAxisFromSeriesHost">
            <summary>
              Looks up a localized string similar to Invalid attempt to remove permanent axis from axis collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.SeriesHostAxesCollection_RemoveItem_AxisCannotBeRemovedFromASeriesHostWhenOneOrMoreSeriesAreListeningToIt">
            <summary>
              Looks up a localized string similar to An axis cannot be removed from a series host when one or more hosted series is listening to it..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.StyleEnumerator_CantResetEnumeratorResetStyleDispenserInstead">
            <summary>
              Looks up a localized string similar to Cannot reset a style enumerator.  Reset style dispenser instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.Properties.Resources.UniqueObservableCollection_InvalidAttemptToInsertADuplicateItem">
            <summary>
              Looks up a localized string similar to Invalid attempt to insert a duplicate item..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataVisualization.WeakReferenceBag`1">
            <summary>
            A bag of weak references to items.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.#ctor">
            <summary>
            Initializes a new instance of the WeakEvent class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Add(`0)">
            <summary>
            Adds an item to the bag.
            </summary>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Remove(`0)">
            <summary>
            Removes an item from the bag.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.GetEnumerator">
            <summary>
            Returns a sequence of the elements in the bag.
            </summary>
            <returns>A sequence of the elements in the bag.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a sequence of the elements in the bag.
            </summary>
            <returns>A sequence of the elements in the bag.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataVisualization.WeakReferenceBag`1.Items">
            <summary>
            Gets or sets the list of event listeners.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\readme_Silverilght4_RTW.txt ===
Bits taken from \\cpvsbuild\drops\release\sl_v4_rtw\layouts\x86ret\50401.00.00
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ComponentModel.DataAnnotations.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.ComponentModel.DataAnnotations</name>
    <version>2.0.5.0</version>
    <publickeytoken>ddd0da4d3e678217</publickeytoken>
    <relpath>System.ComponentModel.DataAnnotations.dll</relpath>
    <extension downloadUri="System.ComponentModel.DataAnnotations.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ComponentModel.Composition.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.ComponentModel.Composition</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.ComponentModel.Composition.dll</relpath>
    <extension downloadUri="System.ComponentModel.Composition.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ComponentModel.Composition.Initialization.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.ComponentModel.Composition.Initialization</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.ComponentModel.Composition.Initialization.dll</relpath>
    <extension downloadUri="System.ComponentModel.Composition.Initialization.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.Data.Services.Client.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Data.Services.Client</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Data.Services.Client.dll</relpath>
    <extension downloadUri="System.Data.Services.Client.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\Microsoft.CSharp.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>Microsoft.CSharp</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>Microsoft.CSharp.dll</relpath>
    <extension downloadUri="Microsoft.CSharp.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.Json.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Json</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Json.dll</relpath>
    <extension downloadUri="System.Json.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Jul09\Bin\System.Windows.Controls.Toolkit.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.LengthConverter">
            <summary>
            Converts instances of other types to and from instances of a double that
            represent an object measurement such as a height or width.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.LengthConverter.UnitToPixelConversions">
            <summary>
            Conversions from units to pixels.
            </summary>
        </member>
        <member name="M:System.Windows.LengthConverter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.LengthConverter" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.LengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a
            <see cref="T:System.Double" /> that represents an object
            measurement.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert from.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.LengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to values of the
            <see cref="T:System.Double" /> type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="source">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:System.Windows.LengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert a measurement to the
            specified type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.LengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified measurement to the specified type.
            </summary>
            <param name="typeDescriptorContext">
            An object that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.VisualTreeExtensions">
            <summary>
            Provides useful extensions for working with the visual tree.
            </summary>
            <remarks>
            Since many of these extension methods are declared on types like
            DependencyObject high up in the class hierarchy, we've placed them in
            the Primitives namespace which is less likely to be imported for normal
            scenarios.
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualAncestors(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree ancestors of the element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualAncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualAncestorsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualChildrenAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualDescendants(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualDescendantsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetVisualSiblings(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree siblings of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.GetBoundsRelativeTo(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Get the bounds of an element relative to another element.
            </summary>
            <param name="element">The element.</param>
            <param name="otherElement">
            The element relative to the other element.
            </param>
            <returns>
            The bounds of the element relative to another element, or null if
            the elements are not related.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherElement"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.VisualTreeExtensions.InvokeOnLayoutUpdated(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Perform an action when the element's LayoutUpdated event fires.
            </summary>
            <param name="element">The element.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.DockPanel">
            <summary>
            Arranges child elements around the edges of the panel.  Optionally, 
            last added child element can occupy the remaining space.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DockPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DockPanel.LastChildFillProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.DockPanel.LastChildFill" />
            dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.OnLastChildFillPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LastChildFillProperty property changed handler.
            </summary>
            <param name="d">DockPanel that changed its LastChildFill.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.GetDock(System.Windows.UIElement)">
            <summary>
            Gets the value of the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" /> attached
            property for the specified element.
            </summary>
            <param name="element">
            The element from which the property value is read.
            </param>
            <returns>
            The <see cref="P:System.Windows.Controls.DockPanel.Dock" /> property
            value for the element.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.SetDock(System.Windows.UIElement,System.Windows.Controls.Dock)">
            <summary>
            Sets the value of the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" /> attached
            property for the specified element to the specified dock value.
            </summary>
            <param name="element">
            The element to which the attached property is assigned.
            </param>
            <param name="dock">
            The dock value to assign to the specified element.
            </param>
        </member>
        <member name="F:System.Windows.Controls.DockPanel.DockProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" />
            attached property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.OnDockPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DockProperty property changed handler.
            </summary>
            <param name="d">UIElement that changed its Dock.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.DockPanel" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:System.Windows.Controls.DockPanel" /> in preparation
            for arranging them during the
            <see cref="M:System.Windows.Controls.DockPanel.ArrangeOverride(System.Windows.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The area available to the
            <see cref="T:System.Windows.Controls.DockPanel" />.
            </param>
            <returns>
            The desired size of the
            <see cref="T:System.Windows.Controls.DockPanel" />.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the child elements of the
            <see cref="T:System.Windows.Controls.DockPanel" /> control.
            </summary>
            <param name="arrangeSize">
            The area in the parent element that the
            <see cref="T:System.Windows.Controls.DockPanel" /> should use to
            arrange its child elements.
            </param>
            <returns>
            The actual size of the
            <see cref="T:System.Windows.Controls.DockPanel" /> after the child
            elements are arranged. The actual size should always equal
            <paramref name="arrangesize" />.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child element
            added to a <see cref="T:System.Windows.Controls.DockPanel" />
            resizes to fill the remaining space.
            </summary>
            <value>
            True if the last element added resizes to fill the remaining space,
            false to indicate the last element does not resize. The default is
            true.
            </value>
        </member>
        <member name="T:System.Windows.Controls.ExpandDirection">
            <summary>
            Specifies the direction in which an
            <see cref="T:System.Windows.Controls.Expander" /> control opens.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Down">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the down direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Up">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the up direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Left">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the left direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Right">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the right direction.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Expander">
            <summary>
            Represents a control that displays a header and has a collapsible
            content window.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.HeaderedContentControl">
            <summary>
            Provides the base implementation for controls that contain a single
            content element and a header.
            </summary>
            <remarks>
            HeaderedContentControl adds Header and HeaderTemplatefeatures to a
            ContentControl. HasHeader and HeaderTemplateSelector are removed for
            lack of support and consistency with other Silverlight controls.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.HeaderedContentControl.HeaderProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose Header property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="F:System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplateProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose HeaderTemplate property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.HeaderedContentControl" />
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property changes.
            </summary>
            <param name="oldHeader">
            The old value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property.
            </param>
            <param name="newHeader">
            The new value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property.
            </param>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property changes.
            </summary>
            <param name="oldHeaderTemplate">
            The old value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property.
            </param>
            <param name="newHeaderTemplate">
            The new value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property.
            </param>
        </member>
        <member name="P:System.Windows.Controls.HeaderedContentControl.Header">
            <summary>
            Gets or sets the content for the header of the control.
            </summary>
            <value>
            The content for the header of the control. The default value is
            null.
            </value>
        </member>
        <member name="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the
            control's header.
            </summary>
            <value>
            The template that is used to display the content of the control's
            header. The default is null.
            </value>
        </member>
        <member name="F:System.Windows.Controls.Expander.ElementExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Expander._expanderButton">
            <summary>
            The ExpanderButton template part is a templated ToggleButton that's used 
            to expand and collapse the ExpandSite, which hosts the content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Expander.ExpandDirectionProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Expander.ExpandDirection" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Expander.ExpandDirection" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty PropertyChangedCallback call back static function.
            This function validates the new value before calling virtual function OnExpandDirectionChanged.
            </summary>
            <param name="d">Expander object whose ExpandDirection property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.IsValidExpandDirection(System.Object)">
            <summary>
            Check whether the passed in value o is a valid ExpandDirection enum value.
            </summary>
            <param name="o">The value to be checked.</param>
            <returns>True if o is a valid ExpandDirection enum value, false o/w.</returns>
        </member>
        <member name="F:System.Windows.Controls.Expander.IsExpandedProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnIsExpandedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandedProperty PropertyChangedCallback static function.
            </summary>
            <param name="d">Expander object whose Expanded property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Expander" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Expander" /> control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnCreateAutomationPeer">
            <summary>
            Returns a
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            A
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            object for the <see cref="T:System.Windows.Controls.Expander" />.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpanded">
            <summary>
            Raises the
            <see cref="E:System.Windows.Controls.Expander.Expanded" /> event
            when the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            property changes from false to true.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnCollapsed">
            <summary>
            Raises the
            <see cref="E:System.Windows.Controls.Expander.Collapsed" /> event
            when the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            property changes from true to false.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.ToggleExpanded(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsExpanded property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.RaiseEvent(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpanderButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle ExpanderButton's click event.
            </summary>
            <param name="sender">The ExpanderButton in template.</param>
            <param name="e">Routed event arg.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Expander.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Expander.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Expander.ExpandDirection">
            <summary>
            Gets or sets the direction in which the
            <see cref="T:System.Windows.Controls.Expander" /> content window
            opens.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Controls.ExpandDirection" />
            values that define which direction the content window opens.  The
            default is
            <see cref="F:System.Windows.Controls.ExpandDirection.Down" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.Expander.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the
            <see cref="T:System.Windows.Controls.Expander" /> content window is
            visible.
            </summary>
            <value>
            True if the content window is expanded; otherwise, false. The
            default is false.
            </value>
        </member>
        <member name="E:System.Windows.Controls.Expander.Expanded">
            <summary>
            Occurs when the content window of an
            <see cref="T:System.Windows.Controls.Expander" /> control opens to
            display both its header and content.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Expander.Collapsed">
            <summary>
            Occurs when the content window of an
            <see cref="T:System.Windows.Controls.Expander" /> control closes and
            only the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Expander.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.ExpanderAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.Expander" /> types to UI
            automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.#ctor(System.Windows.Controls.Expander)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The element associated with this automation peer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
            </summary>
            <returns>
            The
            <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Group" />
            enumeration value.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
            </summary>
            <returns>A string that contains Expander.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            </summary>
            <param name="pattern">One of the enumeration values.</param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Displays all child nodes, controls, or content of the control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Hides all nodes, controls, or content that are descendants of the
            control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raise an automation event when a Expander is expanded or collapsed.
            </summary>
            <param name="oldValue">
            A value indicating whether the Expander was expanded.
            </param>
            <param name="newValue">
            A value indicating whether the Expander is expanded.
            </param>
        </member>
        <member name="P:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the control.
            </summary>
            <value>
            The state (expanded or collapsed) of the control.
            </value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.BindingSourceEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node. Uses the BindingSource to do the evaluation.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
            <remarks>Mimicks the class BindingEvaluator that uses DataContext
            to do evaluation.</remarks>
        </member>
        <member name="F:System.Windows.Controls.BindingSourceEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingSourceEvaluator class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Evaluates the specified source.
            </summary>
            <param name="source">The object used as a source for the
            evaluation.</param>
            <returns>The evaluated binding.</returns>
            <remarks>Only uses Path, Converter, ConverterCulture and
            ConverterParameter.</remarks>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.Value">
            <summary>
            Gets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.ValueBinding">
            <summary>
            Gets the value binding that is used as a template
            for the actual evaluation.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlExtensions">
            <summary>
            Provides useful extensions to ItemsControl instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetScrollHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the ScrollViewer that contains the containers of an
            ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The ScrollViewer that contains the containers of an ItemsControl, or
            null if a ScrollViewer could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetContainers(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetContainersIterator``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsAndContainers(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsAndContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlExtensions.GetItemsAndContainersIterator``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.ScrollViewerExtensions">
            <summary>
            Provides useful extensions to ScrollViewer instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ScrollViewerExtensions.LineChange">
            <summary>
            The amount to scroll a ScrollViewer for a line change.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.GetIsMouseWheelScrollingEnabled(System.Windows.Controls.ScrollViewer)">
            <summary>
            Gets a value indicating whether the ScrollViewer has enabled
            scrolling via the mouse wheel.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <returns>
            A value indicating whether the ScrollViewer has enabled scrolling
            via the mouse wheel.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.SetIsMouseWheelScrollingEnabled(System.Windows.Controls.ScrollViewer,System.Boolean)">
            <summary>
            Sets a value indicating whether the ScrollViewer will enable
            scrolling via the mouse wheel.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="value">
            A value indicating whether the ScrollViewer will enable scrolling
            via the mouse wheel.
            </param>
        </member>
        <member name="F:System.Windows.Controls.ScrollViewerExtensions.IsMouseWheelScrollingEnabledProperty">
            <summary>
            Identifies the IsMouseWheelScrollingEnabled dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.OnIsMouseWheelScrollingEnabledPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsMouseWheelScrollingEnabledProperty property changed handler.
            </summary>
            <param name="d">ScrollViewerExtensions that changed its IsMouseWheelScrollingEnabled.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.OnMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the mouse wheel event.
            </summary>
            <param name="sender">The ScrollViewer.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.CoerceVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Coerce a vertical offset to fall within the vertical bounds of a
            ScrollViewer.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The vertical offset to coerce.</param>
            <returns>
            The coerced vertical offset that falls within the ScrollViewer's
            vertical bounds.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.CoerceHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Coerce a horizontal offset to fall within the horizontal bounds of a
            ScrollViewer.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The horizontal offset to coerce.</param>
            <returns>
            The coerced horizontal offset that falls within the ScrollViewer's
            horizontal bounds.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollByVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer vertically by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The vertical offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollByHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer horizontally by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The horizontal offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.LineRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.PageRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollToTop(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the top.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollToBottom(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the bottom.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ScrollViewerExtensions.ScrollIntoView(System.Windows.Controls.ScrollViewer,System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollViewer's viewport.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="element">The element to scroll into view.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="viewer" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element" /> is null.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.TreeViewItemConnectingLineInfo">
            <summary>
            Represents the necessary information to draw connecting lines in a
            TreeViewItem.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemConnectingLineInfo.#ctor(System.Windows.Controls.TreeViewItem)">
            <summary>
            Initializes a new instance of the TreeViewItemConnectingLineInfo
            class.
            </summary>
            <param name="item">The TreeViewItem.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemConnectingLineInfo.PositionConnectingLines">
            <summary>
            Position the connecting lines in the TreeViewItem.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemConnectingLineInfo.PositionVerticalConnectingLine">
            <summary>
            Position the vertical connecting line in the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.Item">
            <summary>
            Gets the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.VerticalConnectingLine">
            <summary>
            Gets or sets the vertical connecting line of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.HorizontalConnectingLine">
            <summary>
            Gets or sets the horizontal connecting line of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.ExpanderButton">
            <summary>
            Gets or sets the expander button of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemConnectingLineInfo.Header">
            <summary>
            Gets or sets the header of the TreeViewItem.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TreeViewConnectingLines">
            <summary>
            Provides the necessary infrastructure to enable drawing connecting
            lines between the TreeViewItems in a TreeView.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetConnectingLineInfo(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the value of the ConnectingLineInfo attached property for a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The ConnectingLineInfo property value for the TreeViewItem.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.ConnectingLineInfoProperty">
            <summary>
            Identifies the ConnectingLineInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsVerticalConnectingLineOf(System.Windows.Shapes.Line)">
            <summary>
            Gets the value of the IsVerticalConnectingLineOf attached property
            for a specified Line.
            </summary>
            <param name="element">The Line from which the property value is read.</param>
            <returns>The IsVerticalConnectingLineOf property value for the Line.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsVerticalConnectingLineOf(System.Windows.Shapes.Line,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsVerticalConnectingLineOf attached property to a specified Line.
            </summary>
            <param name="element">The Line to which the attached property is written.</param>
            <param name="value">The needed IsVerticalConnectingLineOf value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsVerticalConnectingLineOfProperty">
            <summary>
            Identifies the IsVerticalConnectingLineOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsVerticalConnectingLineOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsVerticalConnectingLineOfProperty property changed handler.
            </summary>
            <param name="d">
            Line that changed its IsVerticalConnectingLineOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsHorizontalConnectingLineOf(System.Windows.Shapes.Line)">
            <summary>
            Gets the value of the IsHorizontalConnectingLineOf attached property
            for a specified Line.
            </summary>
            <param name="element">
            The Line from which the property value is read.
            </param>
            <returns>
            The IsHorizontalConnectingLineOf property value for the Line.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsHorizontalConnectingLineOf(System.Windows.Shapes.Line,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsHorizontalConnectingLineOf attached property
            to a specified Line.
            </summary>
            <param name="element">
            The Line to which the attached property is written.
            </param>
            <param name="value">
            The needed IsHorizontalConnectingLineOf value.
            </param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsHorizontalConnectingLineOfProperty">
            <summary>
            Identifies the IsHorizontalConnectingLineOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsHorizontalConnectingLineOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsHorizontalConnectingLineOfProperty property changed handler.
            </summary>
            <param name="d">
            Line that changed its IsHorizontalConnectingLineOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsExpanderButtonOf(System.Windows.Controls.Primitives.ToggleButton)">
            <summary>
            Gets the value of the IsExpanderButtonOf attached property for a
            specified ToggleButton.
            </summary>
            <param name="element">
            The ToggleButton from which the property value is read.
            </param>
            <returns>
            The IsExpanderButtonOf property value for the ToggleButton.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsExpanderButtonOf(System.Windows.Controls.Primitives.ToggleButton,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsExpanderButtonOf attached property to a
            specified ToggleButton.
            </summary>
            <param name="element">
            The ToggleButton to which the attached property is written.
            </param>
            <param name="value">The needed IsExpanderButtonOf value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsExpanderButtonOfProperty">
            <summary>
            Identifies the IsExpanderButtonOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsExpanderButtonOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsExpanderButtonOfProperty property changed handler.
            </summary>
            <param name="d">
            ToggleButton that changed its IsExpanderButtonOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.GetIsHeaderOf(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the IsHeaderOf attached property for a specified
            FrameworkElement.
            </summary>
            <param name="element">
            The FrameworkElement from which the property value is read.
            </param>
            <returns>
            The IsHeaderOf property value for the FrameworkElement.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.SetIsHeaderOf(System.Windows.FrameworkElement,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsHeaderOf attached property to a specified
            FrameworkElement.
            </summary>
            <param name="element">
            The FrameworkElement to which the attached property is written.
            </param>
            <param name="value">The needed IsHeaderOf value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewConnectingLines.IsHeaderOfProperty">
            <summary>
            Identifies the IsHeaderOf dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewConnectingLines.OnIsHeaderOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsHeaderOfProperty property changed handler.
            </summary>
            <param name="d">
            FrameworkElement that changed its IsHeaderOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:System.Windows.Controls.TreeViewItemCheckBox">
            <summary>
            Represents a CheckBox whose value is associated with the
            TreeViewExtensions.IsChecked attached property of TreeViewItems.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItemCheckBox._parent">
            <summary>
            The parent TreeViewItem of the CheckBox.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemCheckBox.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItemCheckBox class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemCheckBox.AssociateParentTreeViewItem">
            <summary>
            Associate the parent TreeViewItem with the CheckBox.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemCheckBox.OnIsCheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Update the TreeViewItem's IsChecked property when this IsChecked
            property is changed.
            </summary>
            <param name="sender">The CheckBox.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItemCheckBox.ParentTreeViewItem">
            <summary>
            Gets the parent TreeViewItem of the CheckBox.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TreeViewExtensions">
            <summary>
            Provides useful extensions to TreeView and TreeViewItem instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetParentItemsControl(System.Windows.DependencyObject)">
            <summary>
            Get the parent ItemsControl of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The parent ItemsControl of an element, or null if not found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetAncestorItemsControls(System.Windows.DependencyObject)">
            <summary>
            Get the ancestor ItemsControls of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The ancestor ItemsControls of an element.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetParentTreeViewItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the parent TreeViewItem of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The parent TreeViewItem if found, otherwise null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetParentTreeView(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the parent TreeView of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>The parent TreeView if found, otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The TreeViewItem containers of a TreeView.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the child TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The child TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the items and TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The items and TreeViewItem containers of a TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetItemsAndContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the items and TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The items and TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The TreeViewItem containers of a TreeView.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the descendant TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The descendant TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the descendant items and TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The descendant items and TreeViewItem containers of a TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the descendant items and TreeViewItem containers of a
            TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The descendant items and TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDescendantItemsAndContainersIterator(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and TreeViewItem containers of a TreeView or
            TreeViewItem.
            </summary>
            <param name="control">The TreeView or TreeViewItem.</param>
            <returns>
            The items and TreeViewItem containers of a TreeView or TreeViewItem.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetSiblingItemsAndContainers(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the sibling items and containers of the item.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>The sibling items and containers of the item.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainersFromItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Get the TreeViewItems already created that are used to represent the
            given item.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item being represented.</param>
            <returns>
            A sequence of TreeViewItems that represent the given item, or an
            empty sequence if none were found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetContainerFromItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Get the TreeViewItem already created that is used to represent the
            given item.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item being represented.</param>
            <returns>
            The TreeViewItems that represents the given item, or null if no
            container was found.
            </returns>
            <remarks>
            If multiple TreeViewItems represent the same item, the first item
            found via a breadth-first search will be used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a path of items and TreeViewItem containers from the
            TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A path of items and TreeViewItem containers from the TreeViewItem to
            the root of the TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetPathIterator(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a path of items and TreeViewItem containers from the
            TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A path of items and TreeViewItem containers from the TreeViewItem to
            the root of the TreeView.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the item wrapped by this container.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The item wrapped by the container, or null if not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetIsRoot(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a value indicating whether the TreeViewItem is a root of its
            TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A value indicating whether the TreeViewItem is a root of its
            TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetIsLeaf(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets a value indicating whether the TreeViewItem is a leaf in its
            TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A value indicating whether the TreeViewItem is a leaf in its
            TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetDepth(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the depth of a TreeViewItem in its TreeView (using a zero-based
            index).
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The depth of a TreeViewItem in its TreeView (using a zero-based
            index).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item" /> is not in a TreeView.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetSelectedContainer(System.Windows.Controls.TreeView)">
            <summary>
            Get the selected TreeViewItem in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The selected TreeViewItem, or null if no selected item found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SetSelectedContainer(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Sets the selected TreeViewItem of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The TreeViewItem to select.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ClearSelection(System.Windows.Controls.TreeView)">
            <summary>
            Clear the selection of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SelectItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Select an item in the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item to select.</param>
            <returns>
            A value indicating whether the item was successfully set as the
            TreeView's SelectedItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetSelectedPath(System.Windows.Controls.TreeView)">
            <summary>
            Gets the path to the TreeView's selected item.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The path to the TreeView's selected item.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandOrCollapseAll(System.Windows.Controls.TreeViewItem,System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Recursively expand or collapse the TreeViewItem and all of its
            descendants.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <param name="expand">
            A value indicating whether to expand or collapse.
            </param>
            <param name="depth">
            The number of levels that have already been collapsed or expanded.
            This is used in conjunction with the optional maximumDepth to only
            expand a specified number of layers.
            </param>
            <param name="maximumDepth">
            An optional depth that defines the number of layers to expand or
            collapse.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandOrCollapseAll(System.Windows.Controls.TreeView,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Expand or collapse all of the descendants of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="expand">
            A value indicating whether to expand or collapse.
            </param>
            <param name="maximumDepth">
            An optional depth that defines the number of layers to expand or
            collapse.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandAll(System.Windows.Controls.TreeView)">
            <summary>
            Expand all of the items in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.CollapseAll(System.Windows.Controls.TreeView)">
            <summary>
            Collapse all of the items in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandToDepth(System.Windows.Controls.TreeView,System.Int32)">
            <summary>
            Expand a specified number of layers in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="depth">The number of layers to expand.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPathToRoot(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Expand a path from the given item to the root of it's TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <param name="collapseSiblings">
            A value indicating whether to collapse siblings while expanding the
            path.  This will result in only the path from the item to the root
            being expanded.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Expand a path from the TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandSelectedPath(System.Windows.Controls.TreeView)">
            <summary>
            Expand the path from the SelectedItem to the root of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.CollapseAllButSelectedPath(System.Windows.Controls.TreeView)">
            <summary>
            Collapse all TreeViewItems except those along the path from the
            TreeView's SelectedItem to the root of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath(System.Windows.Controls.TreeView,System.Object[])">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},``0[])">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="comparisonSelector">
            A function that takes a TreeViewItem's item and returns a value to
            compare against elements of the given <paramref name="items" />.
            The item itself will be used if 
            <paramref name="comparisonSelector" /> is null.
            </param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.ExpandPath``1(System.Windows.Controls.TreeView,System.Func{System.Object,``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="comparisonSelector">
            A function that takes a TreeViewItem's item and returns a value to
            compare against elements of the given <paramref name="items" />.
            The item itself will be used if 
            <paramref name="comparisonSelector" /> is null.
            </param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetIsChecked(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the value of the IsChecked attached property for a specified
            TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The IsChecked property value for the TreeViewItem.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SetIsChecked(System.Windows.Controls.TreeViewItem,System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the IsChecked attached property to a specified
            TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem to which the attached property is written.
            </param>
            <param name="value">The needed IsChecked value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewExtensions.IsCheckedProperty">
            <summary>
            Identifies the IsChecked dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.OnIsCheckedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCheckedProperty property changed handler.
            </summary>
            <param name="d">The TreeViewItem that changed IsChecked.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetAssociatedCheckBox(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the value of the AssociatedCheckBox attached property for a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The AssociatedCheckBox property value for the TreeViewItem.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.SetAssociatedCheckBox(System.Windows.Controls.TreeViewItem,System.Windows.Controls.TreeViewItemCheckBox)">
            <summary>
            Sets the value of the AssociatedCheckBox attached property to a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem to which the attached property is written.
            </param>
            <param name="value">The needed AssociatedCheckBox value.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewExtensions.AssociatedCheckBoxProperty">
            <summary>
            Identifies the AssociatedCheckBox dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.OnAssociatedCheckBoxPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AssociatedCheckBoxProperty property changed handler.
            </summary>
            <param name="d">
            The TreeViewItem that changed its AssociatedCheckBox.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView)">
            <summary>
            Get the sequence of items and containers with their IsChecked
            property set to True.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The sequence of items and containers with their IsChecked property
            set to True.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view"/> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(System.Windows.Controls.TreeView,System.Boolean)">
            <summary>
            Get the sequence of items and containers with their IsChecked
            property set to True.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="includeIndeterminate">
            A value indicating whether to include TreeViewItems with an
            indeterminate IsChecked value.
            </param>
            <returns>
            The sequence of items and containers with their IsChecked property
            set to True or also set to null if indeterminate values are
            included.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view"/> is null.
            </exception>
        </member>
        <member name="P:System.Windows.Controls.TreeViewExtensions.CancelIsCheckedChangedBubbling">
            <summary>
            Gets or sets a value indicating whether recursive calls to
            OnIsCheckedPropertyChanged should ignore their notifications or
            process them accordingly.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewExtensions.CancelIsCheckedChangedChildNotifications">
            <summary>
            Gets or sets a value indicating whether recursive calls to
            OnIsCheckedPropertyChanged should update their children when their
            IsChecked value has changed.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the ObjectCollection class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ObjectCollection class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new ObjectCollection.</param>
        </member>
        <member name="T:System.Windows.Controls.TreeViewItemIndentationConverter">
            <summary>
            Used to convert TreeViewItems into a value based on their depth in
            the TreeView.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItemIndentationConverter
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a TreeViewItem into a value based on the depth of the item
            in the TreeView.
            </summary>
            <param name="value">The TreeViewItem.</param>
            <param name="targetType">
            The indentation type to convert to (such as Thickness or double).
            </param>
            <param name="parameter">
            The number of pixels to indent each level of the TreeView.  A
            default value of 15.0 will be used if no parameter is provided.
            </param>
            <param name="culture">
            The culture used to convert the TreeViewItem.
            </param>
            <returns>
            A value based on the depth of the item in the TreeView.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.WrapIndentation(System.Double,System.Type)">
            <summary>
            Wrap the indentation in the desired type.
            </summary>
            <param name="indentation">
            The number of pixels to indent the TreeViewItem.
            </param>
            <param name="targetType">
            The indentation type to convert to (such as Thickness or double).
            </param>
            <returns>
            A value based on the depth of the item in the TreeView.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItemIndentationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an indentation back into a TreeViewItem.  This always throws
            a NotSupportedException.
            </summary>
            <param name="value">The indentation.</param>
            <param name="targetType">The type of the indentation.</param>
            <param name="parameter">
            The number of pixels to indent each level of the TreeView.
            </param>
            <param name="culture">
            The culture used to convert the TreeViewItem.
            </param>
            <returns>Always throws a NotSupportedException.</returns>
        </member>
        <member name="T:System.Windows.Controls.StretchDirection">
            <summary>
            Describes the direction that content is scaled.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.StretchDirection.UpOnly">
            <summary>
            The content scales upward only when it is smaller than the parent.
            If the content is larger, no scaling downward is performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.StretchDirection.DownOnly">
            <summary>
            The content scales downward only when it is larger than the parent.
            If the content is smaller, no scaling upward is performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.StretchDirection.Both">
            <summary>
            The content stretches to fit the parent according to the
            <see cref="P:System.Windows.Controls.Viewbox.Stretch" /> property.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Viewbox">
            <summary>
            Defines a content decorator that can stretch and scale a single child to
            fill the available space.
            </summary>
            <remarks>
            Viewbox should inherit from Decorator (which inherits from 
            FrameworkElement), but the closest working base in Silverlight is the 
            ContentControl class.  This provides a number of extra APIs not present 
            in WPF that should be avoided (including the Template property which 
            should not be changed from its default value).  Viewbox has been sealed 
            to prevent the creation of derived classes that depend on these features 
            not available on its WPF counterpart.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.ChildElementName">
            <summary>
            Name of  child element in Viewbox's default template.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.DefaultTemplateMarkup">
            <summary>
            XAML markup used to define the write-once Viewbox template.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.StretchProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Viewbox.Stretch" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Viewbox.Stretch" /> dependency
            property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.OnStretchPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StretchProperty property changed handler.
            </summary>
            <param name="d">Viewbox that changed its Stretch.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.IsValidStretchValue(System.Object)">
            <summary>
            Check whether the passed in object value is a valid Stretch enum value.
            </summary>
            <param name="o">The object typed value to be checked.</param>
            <returns>True if o is a valid Stretch enum value, false o/w.</returns>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.StretchDirectionProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Viewbox.StretchDirection" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Viewbox.StretchDirection" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.OnStretchDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StretchDirectionProperty property changed handler.
            </summary>
            <param name="d">Viewbox that changed its StretchDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.IsValidStretchDirectionValue(System.Object)">
            <summary>
            Check whether the passed in object value is a valid StretchDirection enum value.
            </summary>
            <param name="o">The object typed value to be checked.</param>
            <returns>True if o is a valid StretchDirection enum value, false o/w.</returns>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Viewbox" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Viewbox" /> control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child element of a Viewbox to prepare for arranging
            it during the ArrangeOverride pass.
            </summary>
            <remarks>
            Viewbox measures it's child at an infinite constraint; it allows the child to be however large it so desires.
            The child's returned size will be used as it's natural size for scaling to Viewbox's size during Arrange.
            </remarks>
            <param name="availableSize">
            An upper limit Size that should not be exceeded.
            </param>
            <returns>The target Size of the element.</returns>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a Viewbox element.
            Viewbox always sets the child to its desired size.  It then computes and applies a transformation
            from that size to the space available: Viewbox's own input size less child margin.
            </summary>
            <param name="finalSize">
            The Size this element uses to arrange its child content.
            </param>
            <returns>
            The Size that represents the arranged size of this Viewbox element
            and its child.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.ComputeScaleFactor(System.Windows.Size,System.Windows.Size)">
            <summary>
            Compute the scale factor of the Child content.
            </summary>
            <param name="availableSize">
            Available size to fill with content.
            </param>
            <param name="contentSize">Desired size of the content.</param>
            <returns>Width and Height scale factors.</returns>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.DefaultTemplate">
            <summary>
            Gets or sets the default ControlTemplate of the Viewbox.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.ChildElement">
            <summary>
            Gets or sets the element of the Viewbox that will render the child.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.Scale">
            <summary>
            Gets or sets the transformation on the ChildElement used to scale the
            Child content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.Child">
            <summary>
            Gets or sets the single child element of a
            <see cref="T:System.Windows.Controls.Viewbox" /> element.
            </summary>
            <value>
            The single child element of a
            <see cref="T:System.Windows.Controls.Viewbox" /> element.
            </value>
            <remarks>
            Child must be an alias of ContentControl.Content property to ensure 
            continuous namescope, ie, named element within Viewbox can be found.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.Stretch">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Stretch" /> mode,
            which determines how content fits into the available space.
            </summary>
            <value>
            A <see cref="T:System.Windows.Media.Stretch" /> mode, which
            determines how content fits in the available space.  The default is
            <see cref="F:System.Windows.Media.Stretch.Uniform" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.StretchDirection">
            <summary>
            Gets or sets the
            <see cref="T:System.Windows.Controls.StretchDirection" />, which
            determines how scaling is applied to the contents of a
            <see cref="T:System.Windows.Controls.Viewbox" />.
            </summary>
            <value>
            A <see cref="T:System.Windows.Controls.StretchDirection" />, which
            determines how scaling is applied to the contents of a
            <see cref="T:System.Windows.Controls.Viewbox" />. The default is
            <see cref="F:System.Windows.Controls.StretchDirection.Both" />.
            </value>
        </member>
        <member name="T:System.Windows.Controls.OrientedSize">
            <summary>
            The OrientedSize structure is used to abstract the growth direction from
            the layout algorithms of WrapPanel.  When the growth direction is
            oriented horizontally (ex: the next element is arranged on the side of
            the previous element), then the Width grows directly with the placement
            of elements and Height grows indirectly with the size of the largest
            element in the row.  When the orientation is reversed, so is the
            directional growth with respect to Width and Height.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.WrapPanel">
            <summary>
            Positions child elements sequentially from left to right or top to
            bottom.  When elements extend beyond the panel edge, elements are
            positioned in the next row or column.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property
            </value>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </value>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.OrientationProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </value>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">WrapPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.WrapPanel" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.OnItemHeightOrWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler for ItemHeight and ItemWidth.
            </summary>
            <param name="d">
            WrapPanel that changed its ItemHeight or ItemWidth.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:System.Windows.Controls.WrapPanel" /> in anticipation
            of arranging them during the
            <see cref="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The size available to child elements of the wrap panel.
            </param>
            <returns>
            The size required by the
            <see cref="T:System.Windows.Controls.WrapPanel" /> and its 
            elements.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges and sizes the
            <see cref="T:System.Windows.Controls.WrapPanel" /> control and its
            child elements.
            </summary>
            <param name="finalSize">
            The area within the parent that the
            <see cref="T:System.Windows.Controls.WrapPanel" /> should use 
            arrange itself and its children.
            </param>
            <returns>
            The actual size used by the
            <see cref="T:System.Windows.Controls.WrapPanel" />.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.ArrangeLine(System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The height applied to the layout area of each item that is contained
            within a <see cref="T:System.Windows.Controls.WrapPanel" />.  The
            default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The width that applies to the layout area of each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            The default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the direction in which child elements are arranged.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" />
            values.  The default is
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            </value>
        </member>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DateTimeTypeConverter_FormatException">
            <summary>
              Looks up a localized string similar to DateTime value is in the wrong format..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DockPanel_OnDockPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Dock value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ParameterCollection_EnsureCanChangeCollection_IsReadOnly">
            <summary>
              Looks up a localized string similar to ConstructorParameters cannot be changed because ObjectDataProvider is using a user-assigned ObjectInstance..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResolveElementNameEventArgs_ctor_ElementNameEmpty">
            <summary>
              Looks up a localized string similar to The elementName should not be empty..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TreeViewExtensions_GetDepth_NotInTreeView">
            <summary>
              Looks up a localized string similar to The item is not in a TreeView..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Viewbox_OnApplyTemplate_OnlyOnce">
            <summary>
              Looks up a localized string similar to The template can only be applied one time..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Viewbox_OnStretchDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid StretchDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Viewbox_OnStretchPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Stretch value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.WrapPanel_OnItemHeightOrWidthPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid length value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.WrapPanel_OnOrientationPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Orientation value &apos;{0}&apos;..
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ComponentModel.Composition.Initialization.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition</name>
  </assembly>
  <members>
    <member name="T:System.Lazy`2">
      <typeparam name="T"></typeparam>
      <typeparam name="TMetadata"></typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)"></member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)"></member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)"></member>
    <member name="M:System.Lazy`2.#ctor(`1)"></member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)"></member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)"></member>
    <member name="P:System.Lazy`2.Metadata"></member>
    <member name="T:System.ComponentModel.Composition.AttributedModelServices">
      <summary>Contains helper methods for using the attributed programming model with composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch with the specified contract name.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="contractName">The contract name of the export.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)">
      <summary>Creates a composable part from the specified attributed object, and adds it to the specified composition batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="attributedPart">The object to add.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)">
      <summary>Creates a part from the specified object under the specified contract name and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="contractName">The contract name to export the part under.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)">
      <summary>Creates a part from the specified value and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])">
      <summary>Creates composable parts from an array of attributed objects and composes them in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="attributedParts">An array of attributed objects to compose.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)">
      <summary>Creates a composable part from an attributed object.</summary>
      <returns>The created part.</returns>
      <param name="attributedPart">The attributed object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
      <param name="ensureIsDiscoverable">A value indicating whether or not the new definition should be discoverable.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)">
      <summary>Gets a canonical contract name for the specified type.</summary>
      <returns>A contract name created from the specified type.</returns>
      <param name="type">The type to use.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Gets a metadata view object from a dictionary of loose metadata.</summary>
      <returns>A metadata view containing the specified metadata.</returns>
      <param name="metadata">A collection of loose metadata.</param>
      <typeparam name="TMetadataView">The type of the metadata view object to get.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)">
      <summary>Gets the unique identifier for the specified method.</summary>
      <returns>The unique identifier for the method.</returns>
      <param name="method">The method to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)">
      <summary>Gets the unique identifier for the specified type.</summary>
      <returns>The unique identifier for the type.</returns>
      <param name="type">The type to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)">
      <summary>Composes the specified part by using the specified composition service, with recomposition disabled.</summary>
      <returns>The composed part.</returns>
      <param name="compositionService">The composition service to use.</param>
      <param name="attributedPart">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ChangeRejectedException">
      <summary>An exception that indicates whether a part has been rejected during composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a list of composition errors. </summary>
      <param name="errors">A collection of errors that occurred during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.ChangeRejectedException.Message">
      <summary>Gets or sets the message associated with the component rejection.</summary>
      <returns>The message associated with the component rejection.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <summary>The exception that is thrown when the underlying exported value or metadata of a <see cref="T:System.Lazy`1" /> or <see cref="T:System.Lazy`2" /> object cannot be cast to T or TMetadataView, respectively.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionError">
      <summary>Represents an error that occurred during composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the composition element that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message, and the composition element and exception that are the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the exception that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Description">
      <summary>Gets a description of the composition error.</summary>
      <returns>A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Element">
      <summary>Gets the composition element that is the cause of the error.</summary>
      <returns>The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Exception">
      <summary>Gets the exception that is the underlying cause of the composition error.</summary>
      <returns>The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.ToString">
      <summary>Returns a string representation of the composition error.</summary>
      <returns>A string that contains the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionException">
      <summary>Represents the exception that is thrown when one or more errors occur during composition in a <see cref="T:System.ComponentModel.Composition.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified collection of composition errors.</summary>
      <param name="errors">A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that represent problems during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.ComposablePartException" /> or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Errors">
      <summary>Gets or sets a collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Message">
      <summary>Gets a message that describes the exception.</summary>
      <returns> A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CreationPolicy"></member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Any">
      <summary>Specifies that the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use the most appropriate <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the part given the current context. This is the default <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. Be default, <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />, unless the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> or importer requests <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Shared">
      <summary>Specifies that a single shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and shared by all requestors.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
      <summary>Specifies that a new non-shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> for every requestor.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportAttribute">
      <summary>Specifies that a type, property, field, or method provides a particular export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the specified type under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type to export.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under a contract name derived from the specified type.</summary>
      <param name="contractType">A type from which to derive the contract name that is used to export the type or member marked with this attribute, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
      <summary>Gets the contract name that is used to export the type or member marked with this attribute.</summary>
      <returns>The contract name that is used to export the type or member marked with this attribute. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
      <summary>Gets the contract type that is exported by the member that this attribute is attached to.</summary>
      <returns>The type of export that is be provided. The default value is null, which means that the type will be obtained by looking at the type on the member that this export is attached to. </returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <summary>Specifies metadata for a type, property, field, or method marked with the <see cref="T:System.ComponentModel.Composition.ExportAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportMetadataAttribute" /> with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value, or null to set the <see cref="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" /> property to an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple">
      <summary>Gets or sets a value that indicates whether this item is marked with this attribute more than once.</summary>
      <returns>true if the item is marked more than once; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ICompositionService">
      <summary>Provides methods to satisfy imports on an existing part instance.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Composes the specified part, with recomposition and validation disabled.</summary>
      <param name="part">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportAttribute">
      <summary>Specifies that a property, field, or parameter value should be provided by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name and type.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the export from, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
      <summary>Gets or sets a value that indicates whether the property, field, or parameter will be set to its type's default value when an export with the contract name is not present in the container.</summary>
      <returns>true if the property, field, or parameter will be set to its type's default value when there is no export with the <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> in the <see cref="T:System.ComponentModel.Composition.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition">
      <summary>Gets or sets a value that indicates whether the property or field will be recomposed when exports with a matching contract have changed in the container.</summary>
      <returns>true if the property or field allows recomposition when exports with a matching <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
      <summary>Gets the contract name of the export to import.</summary>
      <returns>The contract name of the export to import. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
      <summary>Gets the type of the export to import.</summary>
      <returns>The type of the export to import.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <summary>The exception that is thrown when the cardinality of an import is not compatible with the cardinality of the matching exports.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <summary>Specifies which constructor should be used when creating a part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportingConstructorAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportManyAttribute">
      <summary>Specifies that a property, field, or parameter should be populated with all matching exports by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name and contract type.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the exports to import, or nullto use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition">
      <summary>Gets or sets a value indicating whether the decorated property or field will be recomposed when exports that provide the matching contract change.</summary>
      <returns>true if the property or field allows for recomposition when exports that provide the same <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false.The default value is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName">
      <summary>Gets the contract name of the exports to import.</summary>
      <returns>The contract name of the exports to import. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType">
      <summary>Gets the contract type of the export to import.</summary>
      <returns>The type of the export that this import is expecting. The default value is null, which means that the type will be obtained by looking at the type on the member that this import is attached to. If the type is <see cref="T:System.Object" />, the import will match any exported type.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.InheritedExportAttribute">
      <summary>Specifies that a type provides a particular export, and that subclasses of that type will also provide that export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name.</summary>
      <param name="contractName">The name of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name and type.</summary>
      <param name="contractName">The name of the contract.</param>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract type.</summary>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <summary>Notifies a part when its imports have been satisfied.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied">
      <summary>Called when a part's imports have been satisfied and it is safe to use.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <summary>Specifies that a custom attribute’s properties provide metadata for exports applied to the same type, property, field, or method.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.MetadataAttributeAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <summary>Specifies the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> for a part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" /> class with the specified creation policy.</summary>
      <param name="creationPolicy">The creation policy to use.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
      <summary>Gets or sets a value that indicates the creation policy of the attributed part.</summary>
      <returns>One of the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> values that indicates the creation policy of the attributed part. The default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartMetadataAttribute"></member>
    <member name="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartMetadataAttribute" /> class with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value or null to use an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <summary>Specifies that this type’s exports won’t be included in a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <summary>A catalog that combines multiple <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> or null to create an empty <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A array of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalogs" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs">
      <summary>Gets the underlying catalogs of the <see cref="T:System.ComponentModel.Composition.AggregateCatalog" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects that underlie the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object have changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object is changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the export definitions that match the constraint expressed by the specified definition.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <summary>Retrieves exports provided by a collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers. The providers are consulted in the order in which they are supplied.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers">
      <summary>Gets a collection that contains the providers that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregatingExportProvider" /> object aggregates.</summary>
      <returns>A collection of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> aggregates.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <summary>Discovers attributed parts in a managed code assembly.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> class with the specified assembly.</summary>
      <param name="assembly">The assembly that contains the attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> is null.-or-<paramref name="assembly" /> was loaded in the reflection-only context.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly">
      <summary>Gets the assembly whose attributed types are contained in the assembly catalog.</summary>
      <returns>The assembly whose attributed <see cref="T:System.Type" /> objects are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Parts">
      <summary>Gets the part definitions that are contained in the assembly catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</summary>
      <returns>A string that represents the type and assembly of this <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element that this element originated from.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString">
      <summary>Gets a string representation of the assembly catalog.</summary>
      <returns>A representation of the assembly catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <summary>Represents a single composition operation for transactional composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class with the specified parent <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />.</summary>
      <param name="outerAtomicComposition">The parent of this composition operation.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)">
      <summary>Adds an action to be executed when the overall composition operation completes successfully.</summary>
      <param name="completeAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)">
      <summary>Adds an action to be executed if the overall composition operation fails.</summary>
      <param name="revertAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete">
      <summary>Marks this composition operation as complete.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class, and mark this composition operation as failed.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)">
      <summary>Saves a key-value pair in the transaction to track tentative state.</summary>
      <param name="key">The key to save.</param>
      <param name="value">The value to save.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method, with the option of not searching parent transactions.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="localAtomicCompositionOnly">true to exclude parent transactions; otherwise, false.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <summary>Retrieves exports from a catalog.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog.</summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog and optional in thread-safe mode. </summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if this object must be thread-safe; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog">
      <summary>Gets the catalog that is used to provide exports.</summary>
      <returns>The catalog that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns all exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider">
      <summary>Gets or sets the export provider which provides access to additional exports.</summary>
      <returns>The export provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> object have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> class with the specified changes.</summary>
      <param name="addedDefinitions">The part definitions that were added to the catalog.</param>
      <param name="removedDefinitions">The part definitions that were removed from the catalog.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions">
      <summary>Gets a collection of definitions added to the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions added to the catalog.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction for this change.</summary>
      <returns>The composition transaction for this change.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions">
      <summary>Gets a collection of definitions removed from the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions removed from the catalog in this change.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <summary>Retrieves exports from a part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class, optionally in thread-safe mode. </summary>
      <param name="isThreadSafe">true if the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> object must be thread-safe; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Executes composition on the specified batch.</summary>
      <param name="batch">The batch to execute composition on.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets a collection of all exports in this provider that match the conditions of the specified import.</summary>
      <returns>A collection of all exports in this provider that match the specified conditions.</returns>
      <param name="definition">The <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider">
      <summary>Gets or sets the export provider that provides access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>A provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <summary>Represents a set of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects which will be added or removed from the container in a single transactional composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class with the specified parts for addition and removal.</summary>
      <param name="partsToAdd">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to add.</param>
      <param name="partsToRemove">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partsToAdd" /> is null.-or-<paramref name="partsToRemove" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Adds the specified export to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <returns>System.ComponentModel.Composition.Primitives.ComposablePart</returns>
      <param name="export">The export to add to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Adds the specified part to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <param name="part">The part to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be added.</summary>
      <returns>A collection of parts to be added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be removed.</summary>
      <returns>A collection of parts to be removed.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Puts the specified part on the list of parts to remove.</summary>
      <param name="part">The part to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <summary>Contains static metadata keys used by the composition system.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a unique identifier.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a creation policy.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <summary>Manages composition of parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified export providers.</summary>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog, thread-safe mode, and export providers. </summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="isThreadSafe">true if this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object must be thread-safe; otherwise, false.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set the <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> property to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog and export providers.</summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
      <summary>Gets the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that provides the container access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>The catalog that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to exports produced from <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Executes composition on the container, including the changes in the specified <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />.</summary>
      <param name="batch">Changes to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> to include during the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns a collection of all exports that match the conditions in the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects in this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
      <summary>Gets the export providers that provide the container access to additional <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Releases the specified <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="export">The <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that needs to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
      <summary>Removes the specified export from composition and releases its resources if possible.</summary>
      <param name="export">An indirect reference to the export to remove.</param>
      <typeparam name="T">The type of the export.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Releases a set of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exports" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed.</param>
      <typeparam name="T">The type of the exports.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed and their metadata.</param>
      <typeparam name="T">The type of the exports.</typeparam>
      <typeparam name="TMetadataView">The type of the exports' metadata view.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object without registering it for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of the errors that occurred.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <summary>Retrieves exports which match a specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> class.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged">
      <summary>Occurs when the exports in the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> change.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging">
      <summary>Occurs when the provided exports are changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>System.Lazy`2</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`1" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1">
      <summary>Returns the exported object with the contract name derived from the specified type parameter. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)">
      <summary>Returns the exported object with the specified contract name. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the specified contract name.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1">
      <summary>Gets the exported object with the contract name derived from the specified type parameter or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the contract name derived from <paramref name="T" />, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)">
      <summary>Gets the exported object with the specified contract name or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the specified contract name, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the specified contract name in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1">
      <summary>Gets all the exported objects with the contract name derived from the specified type parameter.</summary>
      <returns>The exported objects with the contract name derived from the specified type parameter, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported objects cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)">
      <summary>Gets all the exported objects with the specified contract name.</summary>
      <returns>The exported objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <param name="contractName">The contract name of the exported objects to return; or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported values cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`1" /> object.</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`2" /> object.</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets all exports that match the conditions of the specified import definition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all exports that match the conditions of the specified import definition and composition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" /> and <paramref name="atomicComposition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="atomicComposition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the specified contract name if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`2" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`1" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`1" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects for the contract matching <paramref name="contractName" />.</returns>
      <param name="type">The type of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="metadataViewType">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="metadataViewType" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the constraint defined by the specified definition.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>true
            if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; true if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; otherwise, false.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <param name="exports">When this method returns, contains a collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions defined by <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> and <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> class. </summary>
      <param name="addedExports">The events that were added.</param>
      <param name="removedExports">The events that were removed.</param>
      <param name="atomicComposition">The composition transaction that contains the change.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports">
      <summary>Gets the exports that were added in this change.</summary>
      <returns>A collection of the exports that were added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction of the change, if any.</summary>
      <returns>A reference to the composition transaction associated with the change, or null if no transaction is being used.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames">
      <summary>Gets the contract names that were altered in the change.</summary>
      <returns>A collection of the altered contract names.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports">
      <summary>Gets the exports that were removed in the change.</summary>
      <returns>A collection of the removed exports.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <summary>Performs composition for containers.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class. </summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class, optionally in thread-safe mode.</summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if thread safety is required; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Previews all the required imports for the specified part to make sure that they can be satisfied, without actually setting them.</summary>
      <param name="part">The part to preview the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Releases all the exports used to satisfy the imports of the specified part.</summary>
      <param name="part">The part to release the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part without registering them for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <summary>Provides notifications when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> changes.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> has changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> is changing.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.TypeCatalog"></member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">A collection of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">An array of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the type catalog.</summary>
      <returns>A string containing a human-readable display name of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element from which the type catalog originated.</summary>
      <returns>Always null. </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString">
      <summary>Returns a string representation of the type catalog.</summary>
      <returns>A string representation of the type catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePart">
      <summary>Defines the abstract base class for composable parts, which import objects and produce exported objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.Activate">
      <summary>Called when all the imports of the part have been set, and exports can be retrieved.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.GetExportedValue(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exported object described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</summary>
      <returns>The exported object described by <paramref name="definition" />.</returns>
      <param name="definition">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property that describes the exported object to return.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred getting the exported object described by the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more prerequisite imports, indicated by <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite" />, have not been set.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.Metadata">
      <summary>Gets the metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object. </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Sets the import described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object to be satisfied by the specified exports.</summary>
      <param name="definition">One of the objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property that specifies the import to be set.</param>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects of which to set the import described by <paramref name="definition" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null. -or- <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred setting the import described by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />. -or- <paramref name="exports" /> contains an element that is null. -or- <paramref name="exports" /> is empty and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />. -or- <paramref name="exports" /> contains more than one element and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.Composition.Primitives.ComposablePart.OnComposed" /> has been previously called and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable" /> is false.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog">
      <summary>Represents the abstract base class for composable part catalogs, which collect and return <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a list of export definitions that match the constraint defined by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition">
      <summary>Defines an abstract base class for composable part definitions, which describe and enable the creation of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.CreatePart">
      <summary>Creates a new instance of a part that the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> describes.</summary>
      <returns>The created part.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ExportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the objects exported by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ImportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.Metadata">
      <summary>Gets a collection of the metadata for this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection that contains the metadata for the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
      <summary>The exception that is thrown when an error occurs when calling methods on a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the composition element that is the cause of the exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message, and the composition element and exception that are the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element">
      <summary>Gets the composition element that is the cause of the exception.</summary>
      <returns>The compositional element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />. The default is null.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object and that can specify both a contract name and metadata.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class with the specified contract name, required type identity, required metadata, cardinality, a value that indicates if the import definition is recomposable, a value that indicates if the import definition is a prerequisite, and a value that indicates the required creation policy.</summary>
      <param name="contractName">A string that contains the contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="requiredTypeIdentity">The type identity of the export type expected. Use the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method to generate a type identity for a given type. If no specific type is required, use null.</param>
      <param name="requiredMetadata">A collection of key/value pairs containing the metadata names and types required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />; or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata" /> property to an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</param>
      <param name="cardinality">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> is required to be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <param name="requiredCreationPolicy">A value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. If no specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> is needed, the default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").-or-<paramref name="requiredMetadata" /> contains an element that is null.-or-<paramref name="cardinality" /> is not one of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that must be matched to satisfy the import described by this import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions that must be matched for the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> to be satisfied by an <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Returns a value indicating whether the constraint represented by this object is satisfied by the export represented by the given export definition.</summary>
      <returns>true if the constraint is satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all exports used should be shared by all importers in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all exports used should be non-shared in the container. In this case, each importer receives a separate instance.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata">
      <summary>Gets the metadata names of the export required by the import definition.</summary>
      <returns>A collection of <see cref="T:System.String" /> objects that contain the metadata names of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />. The default is an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity">
      <summary>Gets the expected type of the export that matches this <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</summary>
      <returns>A string that is generated by calling the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method on the type that this import expects. If the value is null then this import does not expect a particular type.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.Export">
      <summary>Represents an export, which is a type that consists of a delay-created exported object and the metadata that describes that object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.ComponentModel.Composition.Primitives.ExportDefinition,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified export definition and exported object getter.</summary>
      <param name="definition">An object that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObject" /> property is called. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name, metadata, and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.Export.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObject" />  method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObject" /> method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Definition">
      <summary>Gets the definition that describes the contract that the export satisfies.</summary>
      <returns>A definition that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</returns>
      <exception cref="T:System.NotImplementedException">This property was not overridden by a derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore">
      <summary>Returns the exported object the export provides.</summary>
      <returns>The exported object the export provides.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObjectCore" /> method was not overridden by a derived class.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The current instance is an instance of <see cref="T:System.ComponentModel.Composition.Export`1" /> and the underlying exported object cannot be cast to T.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Metadata">
      <summary>Gets the metadata for the export.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="P:System.ComponentModel.Composition.Primitives.Export.Definition" /> property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Value">
      <summary>Provides the object this export represents.</summary>
      <returns>The object this export represents.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportDefinition">
      <summary>Describes the contract that a particular <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class with the specified contract name and metadata.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.ContractName">
      <summary>Gets the contract name.</summary>
      <returns>The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata">
      <summary>Gets the contract metadata.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.ToString">
      <summary>Returns a string representation of the export definition.</summary>
      <returns>A string representation of the export definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportedDelegate">
      <summary>Represents a function exported by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class for the specified part and method. </summary>
      <param name="instance">The part exporting the method.</param>
      <param name="method">The method to be exported.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.CreateDelegate(System.Type)">
      <summary>Gets a delegate of the specified type.</summary>
      <returns>A delegate of the specified type, or null if no such delegate can be created.</returns>
      <param name="delegateType">The type of the delegate to return.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ICompositionElement">
      <summary>Represents an element that participates in composition.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
      <summary>Gets the display name of the composition element.</summary>
      <returns>The human-readable display name of the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
      <summary>Gets the composition element from which the current composition element originated.</summary>
      <returns>The composition element from which the current <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> originated, or null if the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> is the root composition element.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportCardinality">
      <summary>Indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne">
      <summary>Zero or one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne">
      <summary>Exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object is required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore">
      <summary>Zero or more <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}},System.String,System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class with the specified constraint, contract name, cardinality, a value that indicates whether the import definition is recomposable, and a value that indicates whether the import definition is a prerequisite.</summary>
      <param name="constraint">An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must match to satisfy the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="contractName">The contract name.</param>
      <param name="cardinality">One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cardinality" /> is not one of the values of <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality">
      <summary>Gets the cardinality of the exports required by the import definition.</summary>
      <returns>One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />. The default is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that the import must satisfy to match the import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must satisfy to match the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.ContractName">
      <summary>Gets the name of the contract.</summary>
      <returns>The contract name.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets a value that indicates whether the export represented by the specified definition satisfies the constraints of this import definition.</summary>
      <returns>true if the constraints are satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite">
      <summary>Gets a value that indicates whether the import definition must be satisfied before a part can start producing exported objects.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object can start producing exported objects; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable">
      <summary>Gets a value that indicates whether the import definition can be satisfied multiple times.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.ToString">
      <summary>Returns a string representation of the import definition.</summary>
      <returns>A string representation of the import definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo">
      <summary>Represents a <see cref="T:System.Reflection.MemberInfo" /> object that does not load assemblies or create objects until requested.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class, representing the specified member.</summary>
      <param name="member">The member to represent.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Func{System.Reflection.MemberInfo[]})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessorsCreator">A function whose return value is a collection of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Reflection.MemberInfo[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessors">An array of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.Equals(System.Object)">
      <param name="obj">The other object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetAccessors">
      <summary>Gets an array of the accessors for the represented member.</summary>
      <returns>An array of the accessors for the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetHashCode"></member>
    <member name="P:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.MemberType">
      <summary>Gets the type of the represented member.</summary>
      <returns>The type of the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Equality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Inequality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are not equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
      <summary>Provides extension methods to create and retrieve reflection-based parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an export definition from the specified member, with the specified contract name, metadata, and origin.</summary>
      <returns>An export definition created from the specified parameters.</returns>
      <param name="exportingMember">The member to export.</param>
      <param name="contractName">The contract name to use for the export.</param>
      <param name="metadata">The metadata for the export.</param>
      <param name="origin">The object that the export originates from.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified member, with the specified contract name, type identity, required metadata, cardinality, recomposition policy, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="importingMember">The member to import into.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="isRecomposable">A value that indicates whether the import is recomposable.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified parameter, with the specified contract name, type identity, required metadata, cardinality, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="parameter">The parameter to import.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified part type, imports, exports, metadata, and origin.</summary>
      <returns>A part definition created from the specified parameters.</returns>
      <param name="partType">The type of the part.</param>
      <param name="isDisposalRequired">true if the part requires disposal; otherwise, false.</param>
      <param name="imports">A collection of the part's imports.</param>
      <param name="exports">A collection of the part's exports.</param>
      <param name="metadata">The part's metadata.</param>
      <param name="origin">The part's origin.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exporting member from a specified export definition.</summary>
      <returns>The member specified in the export definition.</returns>
      <param name="exportDefinition">The export definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing member from a specified import definition.</summary>
      <returns>The member specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing parameter from a specified import definition.</summary>
      <returns>The parameter specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Gets the type of a part from a specified part definition.</summary>
      <returns>The type of the defined part.</returns>
      <param name="partDefinition">The part definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Determines whether the specified part requires disposal.</summary>
      <returns>true if the part requires disposal; otherwise, false.</returns>
      <param name="partDefinition">The part to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Determines whether an import definition represents a member or a parameter.</summary>
      <returns>true if the import definition represents a parameter; otherwise, false.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ComponentModel.Composition.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition</name>
  </assembly>
  <members>
    <member name="T:System.Lazy`2">
      <typeparam name="T"></typeparam>
      <typeparam name="TMetadata"></typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)"></member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)"></member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)"></member>
    <member name="M:System.Lazy`2.#ctor(`1)"></member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)"></member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)"></member>
    <member name="P:System.Lazy`2.Metadata"></member>
    <member name="T:System.ComponentModel.Composition.AttributedModelServices">
      <summary>Contains helper methods for using the attributed programming model with composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch with the specified contract name.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="contractName">The contract name of the export.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)">
      <summary>Creates a part from the specified value and adds it to the specified batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="exportedValue">The value to add.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)">
      <summary>Creates a composable part from the specified attributed object, and adds it to the specified composition batch.</summary>
      <returns>The new part.</returns>
      <param name="batch">The batch to add to.</param>
      <param name="attributedPart">The object to add.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)">
      <summary>Creates a part from the specified object under the specified contract name and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="contractName">The contract name to export the part under.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)">
      <summary>Creates a part from the specified value and composes it in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="exportedValue">The value to compose.</param>
      <typeparam name="T">The type of the new part.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])">
      <summary>Creates composable parts from an array of attributed objects and composes them in the specified composition container.</summary>
      <param name="container">The composition container to perform composition in.</param>
      <param name="attributedParts">An array of attributed objects to compose.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)">
      <summary>Creates a composable part from an attributed object.</summary>
      <returns>The created part.</returns>
      <param name="attributedPart">The attributed object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)">
      <summary>Creates a part definition with the specified type and origin.</summary>
      <returns>The new part definition.</returns>
      <param name="type">The type of the definition.</param>
      <param name="origin">The origin of the definition.</param>
      <param name="ensureIsDiscoverable">A value indicating whether or not the new definition should be discoverable.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)">
      <summary>Gets a canonical contract name for the specified type.</summary>
      <returns>A contract name created from the specified type.</returns>
      <param name="type">The type to use.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Gets a metadata view object from a dictionary of loose metadata.</summary>
      <returns>A metadata view containing the specified metadata.</returns>
      <param name="metadata">A collection of loose metadata.</param>
      <typeparam name="TMetadataView">The type of the metadata view object to get.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)">
      <summary>Gets the unique identifier for the specified method.</summary>
      <returns>The unique identifier for the method.</returns>
      <param name="method">The method to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)">
      <summary>Gets the unique identifier for the specified type.</summary>
      <returns>The unique identifier for the type.</returns>
      <param name="type">The type to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)">
      <summary>Composes the specified part by using the specified composition service, with recomposition disabled.</summary>
      <returns>The composed part.</returns>
      <param name="compositionService">The composition service to use.</param>
      <param name="attributedPart">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ChangeRejectedException">
      <summary>An exception that indicates whether a part has been rejected during composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a list of composition errors. </summary>
      <param name="errors">A collection of errors that occurred during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.ChangeRejectedException.Message">
      <summary>Gets or sets the message associated with the component rejection.</summary>
      <returns>The message associated with the component rejection.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <summary>The exception that is thrown when the underlying exported value or metadata of a <see cref="T:System.Lazy`1" /> or <see cref="T:System.Lazy`2" /> object cannot be cast to T or TMetadataView, respectively.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionError">
      <summary>Represents an error that occurred during composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the composition element that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message, and the composition element and exception that are the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> property to null.</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> class with the specified error message and the exception that is the cause of the composition error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property to an empty string ("").</param>
      <param name="exception">The <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" /> or null to set the <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Description">
      <summary>Gets a description of the composition error.</summary>
      <returns>A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionError" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Element">
      <summary>Gets the composition element that is the cause of the error.</summary>
      <returns>The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Exception">
      <summary>Gets the exception that is the underlying cause of the composition error.</summary>
      <returns>The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.CompositionError" />. The default is null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.ToString">
      <summary>Returns a string representation of the composition error.</summary>
      <returns>A string that contains the <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionException">
      <summary>Represents the exception that is thrown when one or more errors occur during composition in a <see cref="T:System.ComponentModel.Composition.CompositionContainer" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified collection of composition errors.</summary>
      <param name="errors">A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that represent problems during composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.CompositionException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" /> or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.ComposablePartException" /> or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Errors">
      <summary>Gets or sets a collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.CompositionError" /> objects that describe the errors associated with the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Message">
      <summary>Gets a message that describes the exception.</summary>
      <returns> A message that describes the <see cref="T:System.ComponentModel.Composition.CompositionException" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.CreationPolicy"></member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Any">
      <summary>Specifies that the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use the most appropriate <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the part given the current context. This is the default <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. Be default, <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> will use <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />, unless the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> or importer requests <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Shared">
      <summary>Specifies that a single shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and shared by all requestors.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
      <summary>Specifies that a new non-shared instance of the associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> will be created by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> for every requestor.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportAttribute">
      <summary>Specifies that a type, property, field, or method provides a particular export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the specified type under the specified contract name.</summary>
      <param name="contractName">The contract name that is used to export the type or member marked with this attribute, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type to export.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> class, exporting the type or member marked with this attribute under a contract name derived from the specified type.</summary>
      <param name="contractType">A type from which to derive the contract name that is used to export the type or member marked with this attribute, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
      <summary>Gets the contract name that is used to export the type or member marked with this attribute.</summary>
      <returns>The contract name that is used to export the type or member marked with this attribute. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
      <summary>Gets the contract type that is exported by the member that this attribute is attached to.</summary>
      <returns>The type of export that is be provided. The default value is null, which means that the type will be obtained by looking at the type on the member that this export is attached to. </returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <summary>Specifies metadata for a type, property, field, or method marked with the <see cref="T:System.ComponentModel.Composition.ExportAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportMetadataAttribute" /> with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value, or null to set the <see cref="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" /> property to an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple">
      <summary>Gets or sets a value that indicates whether this item is marked with this attribute more than once.</summary>
      <returns>true if the item is marked more than once; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ICompositionService">
      <summary>Provides methods to satisfy imports on an existing part instance.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Composes the specified part, with recomposition and validation disabled.</summary>
      <param name="part">The part to compose.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportAttribute">
      <summary>Specifies that a property, field, or parameter value should be provided by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the specified contract name and type.</summary>
      <param name="contractName">The contract name of the export to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> class, importing the export with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the export from, or null to use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
      <summary>Gets or sets a value that indicates whether the property, field, or parameter will be set to its type's default value when an export with the contract name is not present in the container.</summary>
      <returns>true if the property, field, or parameter will be set to its type's default value when there is no export with the <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> in the <see cref="T:System.ComponentModel.Composition.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition">
      <summary>Gets or sets a value that indicates whether the property or field will be recomposed when exports with a matching contract have changed in the container.</summary>
      <returns>true if the property or field allows recomposition when exports with a matching <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.CompositionContainer" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
      <summary>Gets the contract name of the export to import.</summary>
      <returns>The contract name of the export to import. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
      <summary>Gets the type of the export to import.</summary>
      <returns>The type of the export to import.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <summary>The exception that is thrown when the cardinality of an import is not compatible with the cardinality of the matching exports.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified message that describes the error.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <summary>Specifies which constructor should be used when creating a part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportingConstructorAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportManyAttribute">
      <summary>Specifies that a property, field, or parameter should be populated with all matching exports by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the default contract name.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the specified contract name and contract type.</summary>
      <param name="contractName">The contract name of the exports to import, or null or an empty string ("") to use the default contract name.</param>
      <param name="contractType">The type of the export to import.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> class, importing the set of exports with the contract name derived from the specified type.</summary>
      <param name="contractType">The type to derive the contract name of the exports to import, or nullto use the default contract name.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition">
      <summary>Gets or sets a value indicating whether the decorated property or field will be recomposed when exports that provide the matching contract change.</summary>
      <returns>true if the property or field allows for recomposition when exports that provide the same <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" /> are added or removed from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; otherwise, false.The default value is false.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName">
      <summary>Gets the contract name of the exports to import.</summary>
      <returns>The contract name of the exports to import. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType">
      <summary>Gets the contract type of the export to import.</summary>
      <returns>The type of the export that this import is expecting. The default value is null, which means that the type will be obtained by looking at the type on the member that this import is attached to. If the type is <see cref="T:System.Object" />, the import will match any exported type.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />. This is the default.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all used exports be shared by all parts in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all used exports be non-shared in a container. In this case, each part receives their own instance.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.InheritedExportAttribute">
      <summary>Specifies that a type provides a particular export, and that subclasses of that type will also provide that export.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name.</summary>
      <param name="contractName">The name of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract name and type.</summary>
      <param name="contractName">The name of the contract.</param>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> class with the specified contract type.</summary>
      <param name="contractType">The type of the contract.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <summary>Notifies a part when its imports have been satisfied.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied">
      <summary>Called when a part's imports have been satisfied and it is safe to use.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <summary>Specifies that a custom attribute’s properties provide metadata for exports applied to the same type, property, field, or method.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.MetadataAttributeAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <summary>Specifies the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> for a part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" /> class with the specified creation policy.</summary>
      <param name="creationPolicy">The creation policy to use.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
      <summary>Gets or sets a value that indicates the creation policy of the attributed part.</summary>
      <returns>One of the <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> values that indicates the creation policy of the attributed part. The default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartMetadataAttribute"></member>
    <member name="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartMetadataAttribute" /> class with the specified name and metadata value.</summary>
      <param name="name">A string that contains the name of the metadata value or null to use an empty string ("").</param>
      <param name="value">An object that contains the metadata value. This can be null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Name">
      <summary>Gets the name of the metadata value.</summary>
      <returns> A string that contains the name of the metadata value.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Value">
      <summary>Gets the metadata value.</summary>
      <returns> An object that contains the metadata value.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <summary>Specifies that this type’s exports won’t be included in a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" /> class.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <summary>A catalog that combines multiple <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> or null to create an empty <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> class with the specified catalogs.</summary>
      <param name="catalogs">A array of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalogs" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="catalogs" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs">
      <summary>Gets the underlying catalogs of the <see cref="T:System.ComponentModel.Composition.AggregateCatalog" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects that underlie the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object have changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing">
      <summary>Occurs when the contents of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object is changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the export definitions that match the constraint expressed by the specified definition.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.AggregateCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <summary>Retrieves exports provided by a collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers. The providers are consulted in the order in which they are supplied.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class.</summary>
      <param name="providers">The prioritized list of export providers.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> class and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers">
      <summary>Gets a collection that contains the providers that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregatingExportProvider" /> object aggregates.</summary>
      <returns>A collection of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that the <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> aggregates.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <summary>Discovers attributed parts in a managed code assembly.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> class with the specified assembly.</summary>
      <param name="assembly">The assembly that contains the attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> is null.-or-<paramref name="assembly" /> was loaded in the reflection-only context.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly">
      <summary>Gets the assembly whose attributed types are contained in the assembly catalog.</summary>
      <returns>The assembly whose attributed <see cref="T:System.Type" /> objects are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Parts">
      <summary>Gets the part definitions that are contained in the assembly catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects contained in the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</summary>
      <returns>A string that represents the type and assembly of this <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> object.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element that this element originated from.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString">
      <summary>Gets a string representation of the assembly catalog.</summary>
      <returns>A representation of the assembly catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <summary>Represents a single composition operation for transactional composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class with the specified parent <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />.</summary>
      <param name="outerAtomicComposition">The parent of this composition operation.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)">
      <summary>Adds an action to be executed when the overall composition operation completes successfully.</summary>
      <param name="completeAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)">
      <summary>Adds an action to be executed if the overall composition operation fails.</summary>
      <param name="revertAction">The action to be executed.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete">
      <summary>Marks this composition operation as complete.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class, and mark this composition operation as failed.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)">
      <summary>Saves a key-value pair in the transaction to track tentative state.</summary>
      <param name="key">The key to save.</param>
      <param name="value">The value to save.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method, with the option of not searching parent transactions.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="localAtomicCompositionOnly">true to exclude parent transactions; otherwise, false.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)">
      <summary>Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method.</summary>
      <returns>true if the value was successfully retrieved; otherwise, false.</returns>
      <param name="key">The key to retrieve from.</param>
      <param name="value">The retrieved value.</param>
      <typeparam name="T">The type of the value to be retrieved.</typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <summary>Retrieves exports from a catalog.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog.</summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class with the specified catalog and optional in thread-safe mode. </summary>
      <param name="catalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if this object must be thread-safe; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="catalog" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog">
      <summary>Gets the catalog that is used to provide exports.</summary>
      <returns>The catalog that the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> uses to produce <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns all exports that match the conditions of the specified import.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be returned.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider">
      <summary>Gets or sets the export provider which provides access to additional exports.</summary>
      <returns>The export provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> object have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> class with the specified changes.</summary>
      <param name="addedDefinitions">The part definitions that were added to the catalog.</param>
      <param name="removedDefinitions">The part definitions that were removed from the catalog.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions">
      <summary>Gets a collection of definitions added to the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions added to the catalog.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction for this change.</summary>
      <returns>The composition transaction for this change.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions">
      <summary>Gets a collection of definitions removed from the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> in this change.</summary>
      <returns>A collection of definitions removed from the catalog in this change.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <summary>Retrieves exports from a part.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class, optionally in thread-safe mode. </summary>
      <param name="isThreadSafe">true if the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> object must be thread-safe; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Executes composition on the specified batch.</summary>
      <param name="batch">The batch to execute composition on.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets a collection of all exports in this provider that match the conditions of the specified import.</summary>
      <returns>A collection of all exports in this provider that match the specified conditions.</returns>
      <param name="definition">The <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider">
      <summary>Gets or sets the export provider that provides access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>A provider that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This property has already been set.-or-The methods on the <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> have already been accessed.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <summary>Represents a set of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects which will be added or removed from the container in a single transactional composition.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> class with the specified parts for addition and removal.</summary>
      <param name="partsToAdd">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to add.</param>
      <param name="partsToRemove">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partsToAdd" /> is null.-or-<paramref name="partsToRemove" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Adds the specified export to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <returns>System.ComponentModel.Composition.Primitives.ComposablePart</returns>
      <param name="export">The export to add to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Adds the specified part to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> object.</summary>
      <param name="part">The part to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be added.</summary>
      <returns>A collection of parts to be added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove">
      <summary>Gets the collection of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects to be removed.</summary>
      <returns>A collection of parts to be removed.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Puts the specified part on the list of parts to remove.</summary>
      <param name="part">The part to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <summary>Contains static metadata keys used by the composition system.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a unique identifier.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName">
      <summary>Specifies the key for metadata created by the composition system to mark a part with a creation policy.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <summary>Manages composition of parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified export providers.</summary>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog, thread-safe mode, and export providers. </summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="isThreadSafe">true if this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object must be thread-safe; otherwise, false.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set the <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> property to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class with the specified catalog and export providers.</summary>
      <param name="catalog">A catalog that provides <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
      <param name="providers">An array of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects, or null to set <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> to an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="providers" /> contains an element that is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
      <summary>Gets the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> that provides the container access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</summary>
      <returns>The catalog that provides the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to exports produced from <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects. The default is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>Executes composition on the container, including the changes in the specified <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />.</summary>
      <param name="batch">Changes to the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> to include during the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Returns a collection of all exports that match the conditions in the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects in this <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The composition transaction to use, or null to disable transactional composition.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
      <summary>Gets the export providers that provide the container access to additional <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> objects.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> objects that provide the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> access to additional <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects. The default is an empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>Releases the specified <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="export">The <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that needs to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="export" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
      <summary>Removes the specified export from composition and releases its resources if possible.</summary>
      <param name="export">An indirect reference to the export to remove.</param>
      <typeparam name="T">The type of the export.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Releases a set of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects from the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />. </summary>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to be released.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exports" /> contains an element that is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed.</param>
      <typeparam name="T">The type of the exports.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
      <summary>Removes a collection of exports from composition and releases their resources if possible.</summary>
      <param name="exports">A collection of indirect references to the exports to be removed and their metadata.</param>
      <typeparam name="T">The type of the exports.</typeparam>
      <typeparam name="TMetadataView">The type of the exports' metadata view.</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object without registering it for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="part" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of the errors that occurred.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <summary>Retrieves exports which match a specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> class.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged">
      <summary>Occurs when the exports in the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> change.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging">
      <summary>Occurs when the provided exports are changing.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>System.Lazy`2</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1">
      <summary>Returns the export with the contract name derived from the specified type parameter. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`2" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)">
      <summary>Returns the export with the specified contract name. If there is not exactly one matching export, an exception is thrown.</summary>
      <returns>The export with the specified contract name.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`1" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.-or-There is more than one <see cref="T:System.ComponentModel.Composition.Export`1" /> object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1">
      <summary>Returns the exported object with the contract name derived from the specified type parameter. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the contract name derived from the specified type parameter.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)">
      <summary>Returns the exported object with the specified contract name. If there is not exactly one matching exported object, an exception is thrown.</summary>
      <returns>The exported object with the specified contract name.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There are zero exported objects with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.-or-There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1">
      <summary>Gets the exported object with the contract name derived from the specified type parameter or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the contract name derived from <paramref name="T" />, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the contract name derived from <paramref name="T" /> in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)">
      <summary>Gets the exported object with the specified contract name or the default value for the specified type, or throws an exception if there is more than one matching exported object.</summary>
      <returns>The exported object with the specified contract name, if found; otherwise, the default value for <paramref name="T" />.</returns>
      <param name="contractName">The contract name of the exported object to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">There is more than one exported object with the specified contract name in the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The underlying exported object cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1">
      <summary>Gets all the exported objects with the contract name derived from the specified type parameter.</summary>
      <returns>The exported objects with the contract name derived from the specified type parameter, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <typeparam name="T">The type of the exported object to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported objects cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)">
      <summary>Gets all the exported objects with the specified contract name.</summary>
      <returns>The exported objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.Collections.ObjectModel.Collection`1" /> object.</returns>
      <param name="contractName">The contract name of the exported objects to return; or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the exported object to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">One or more of the underlying exported values cannot be cast to <paramref name="T" />.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`1" /> object.</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2">
      <summary>Gets all the exports with the contract name derived from the specified type parameter.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the contract name derived from <paramref name="T" />, if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`2" /> object.</returns>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets all exports that match the conditions of the specified import definition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all exports that match the conditions of the specified import definition and composition.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects matching the condition specified by <paramref name="definition" /> and <paramref name="atomicComposition" />.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
        <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.-or-<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is more than one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="atomicComposition" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`2" /> objects with the specified contract name if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`2" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return. The contract name is also derived from this type parameter.</typeparam>
      <typeparam name="TMetadataView">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Export`2" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="TMetadataView" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Export`1" /> objects with the specified contract name, if found; otherwise, an empty <see cref="T:System.ComponentModel.Composition.ExportCollection`1" /> object.</returns>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Export`1" /> objects to return, or null or an empty string ("") to use the default contract name.</param>
      <typeparam name="T">The type of the <see cref="T:System.ComponentModel.Composition.Export`1" /> objects to return.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)">
      <summary>Gets all the exports with the specified contract name.</summary>
      <returns>A collection of all the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects for the contract matching <paramref name="contractName" />.</returns>
      <param name="type">The type of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="metadataViewType">The type of the metadata view of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object to return, or null or an empty string ("") to use the default contract name.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="metadataViewType" /> is not a valid metadata view type.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Gets all the exports that match the constraint defined by the specified definition.</summary>
      <returns>A collection that contains all the exports that match the specified condition.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to return.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> event.</summary>
      <param name="e">An <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)">
      <summary>Gets all the exports that match the conditions of the specified import.</summary>
      <returns>true
            if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> and there are zero <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; true if <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> and there is exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> that matches the conditions of the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; otherwise, false.</returns>
      <param name="definition">The object that defines the conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects to get.</param>
      <param name="atomicComposition">The transactional container for the composition.</param>
      <param name="exports">When this method returns, contains a collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects that match the conditions defined by <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> object. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> and <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> event. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> class. </summary>
      <param name="addedExports">The events that were added.</param>
      <param name="removedExports">The events that were removed.</param>
      <param name="atomicComposition">The composition transaction that contains the change.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports">
      <summary>Gets the exports that were added in this change.</summary>
      <returns>A collection of the exports that were added.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition">
      <summary>Gets the composition transaction of the change, if any.</summary>
      <returns>A reference to the composition transaction associated with the change, or null if no transaction is being used.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames">
      <summary>Gets the contract names that were altered in the change.</summary>
      <returns>A collection of the altered contract names.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports">
      <summary>Gets the exports that were removed in the change.</summary>
      <returns>A collection of the removed exports.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <summary>Performs composition for containers.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class. </summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class, optionally in thread-safe mode.</summary>
      <param name="sourceProvider">The <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> that provides the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> access to <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects.</param>
      <param name="isThreadSafe">true if thread safety is required; otherwise, false.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Previews all the required imports for the specified part to make sure that they can be satisfied, without actually setting them.</summary>
      <param name="part">The part to preview the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>Releases all the exports used to satisfy the imports of the specified part.</summary>
      <param name="part">The part to release the imports of.</param>
      <param name="atomicComposition">The composition transaction to use, or null for no composition transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>Satisfies the imports of the specified part without registering them for recomposition.</summary>
      <param name="part">The part to satisfy the imports of.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <summary>Provides notifications when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> changes.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> has changed.</summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
      <summary>Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> is changing.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.TypeCatalog"></member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">A collection of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> class with the specified types.</summary>
      <param name="types">An array of attributed <see cref="T:System.Type" /> objects to add to the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> contains an element that is null.-or-<paramref name="types" /> contains an element that was loaded in the reflection-only context.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a collection of exports that match the conditions specified by the import definition.</summary>
      <returns>A collection of exports that match the conditions specified by <paramref name="definition" />.</returns>
      <param name="definition">Conditions that specify which exports to match.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>Gets the display name of the type catalog.</summary>
      <returns>A string containing a human-readable display name of the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>Gets the composition element from which the type catalog originated.</summary>
      <returns>Always null. </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString">
      <summary>Returns a string representation of the type catalog.</summary>
      <returns>A string representation of the type catalog.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePart">
      <summary>Defines the abstract base class for composable parts, which import objects and produce exported objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.Activate">
      <summary>Called when all the imports of the part have been set, and exports can be retrieved.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.GetExportedValue(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exported object described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</summary>
      <returns>The exported object described by <paramref name="definition" />.</returns>
      <param name="definition">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property that describes the exported object to return.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred getting the exported object described by the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more prerequisite imports, indicated by <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite" />, have not been set.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions">
      <summary>Gets a collection of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the part.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imported objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.Metadata">
      <summary>Gets the metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object. </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>Sets the import described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object to be satisfied by the specified exports.</summary>
      <param name="definition">One of the objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property that specifies the import to be set.</param>
      <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects of which to set the import described by <paramref name="definition" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null. -or- <paramref name="exports" /> is null.</exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred setting the import described by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="definition" /> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />. -or- <paramref name="exports" /> contains an element that is null. -or- <paramref name="exports" /> is empty and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />. -or- <paramref name="exports" /> contains more than one element and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> or <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.Composition.Primitives.ComposablePart.OnComposed" /> has been previously called and <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable" /> is false.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog">
      <summary>Represents the abstract base class for composable part catalogs, which collect and return <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets a list of export definitions that match the constraint defined by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.Tuple`2" /> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects for objects that match the constraint specified by <paramref name="definition" />.</returns>
      <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects to be returned.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts">
      <summary>Gets the part definitions that are contained in the catalog.</summary>
      <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition">
      <summary>Defines an abstract base class for composable part definitions, which describe and enable the creation of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.CreatePart">
      <summary>Creates a new instance of a part that the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> describes.</summary>
      <returns>The created part.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ExportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the objects exported by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> objects that describe the exported objects provided by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ImportDefinitions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by the part defined by this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> objects that describe the imports required by <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> objects created by the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.Metadata">
      <summary>Gets a collection of the metadata for this <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> object.</summary>
      <returns>A collection that contains the metadata for the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
      <summary>The exception that is thrown when an error occurs when calling methods on a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the composition element that is the cause of the exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message, and the composition element and exception that are the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="element">The composition element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> property to null.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> class with the specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.Message" /> property to its default value.</param>
      <param name="innerException">The exception that is the underlying cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, or null to set the <see cref="P:System.Exception.InnerException" /> property to null.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element">
      <summary>Gets the composition element that is the cause of the exception.</summary>
      <returns>The compositional element that is the cause of the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />. The default is null.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object and that can specify both a contract name and metadata.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> class with the specified contract name, required type identity, required metadata, cardinality, a value that indicates if the import definition is recomposable, a value that indicates if the import definition is a prerequisite, and a value that indicates the required creation policy.</summary>
      <param name="contractName">A string that contains the contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="requiredTypeIdentity">The type identity of the export type expected. Use the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method to generate a type identity for a given type. If no specific type is required, use null.</param>
      <param name="requiredMetadata">A collection of key/value pairs containing the metadata names and types required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />; or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata" /> property to an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</param>
      <param name="cardinality">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> is required to be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <param name="requiredCreationPolicy">A value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. If no specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> is needed, the default is <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").-or-<paramref name="requiredMetadata" /> contains an element that is null.-or-<paramref name="cardinality" /> is not one of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> values.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that must be matched to satisfy the import described by this import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions that must be matched for the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> to be satisfied by an <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Returns a value indicating whether the constraint represented by this object is satisfied by the export represented by the given export definition.</summary>
      <returns>true if the constraint is satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy">
      <summary>Gets or sets a value that indicates that the importer requires a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> for the exports used to satisfy this import. </summary>
      <returns>One of the following values:<see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, if the importer does not require a specific <see cref="T:System.ComponentModel.Composition.CreationPolicy" />.<see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> to require that all exports used should be shared by all importers in the container.<see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> to require that all exports used should be non-shared in the container. In this case, each importer receives a separate instance.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata">
      <summary>Gets the metadata names of the export required by the import definition.</summary>
      <returns>A collection of <see cref="T:System.String" /> objects that contain the metadata names of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />. The default is an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity">
      <summary>Gets the expected type of the export that matches this <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />.</summary>
      <returns>A string that is generated by calling the <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> method on the type that this import expects. If the value is null then this import does not expect a particular type.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.Export">
      <summary>Represents an export, which is a type that consists of a delay-created exported object and the metadata that describes that object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.ComponentModel.Composition.Primitives.ExportDefinition,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified export definition and exported object getter.</summary>
      <param name="definition">An object that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObject" /> property is called. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="definition" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name, metadata, and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.Export.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObject" />  method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Func{System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> class with the specified contract name and exported value getter.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object.</param>
      <param name="exportedValueGetter">A method that is called to create the exported object of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />. This delays the creation of the object until the <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObject" /> method is called.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.-or-<paramref name="exportedObjectGetter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Definition">
      <summary>Gets the definition that describes the contract that the export satisfies.</summary>
      <returns>A definition that describes the contract that the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</returns>
      <exception cref="T:System.NotImplementedException">This property was not overridden by a derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore">
      <summary>Returns the exported object the export provides.</summary>
      <returns>The exported object the export provides.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedObjectCore" /> method was not overridden by a derived class.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">The current instance is an instance of <see cref="T:System.ComponentModel.Composition.Export`1" /> and the underlying exported object cannot be cast to T.</exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">An error occurred during composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> will contain a collection of errors that occurred.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Metadata">
      <summary>Gets the metadata for the export.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" />.</returns>
      <exception cref="T:System.NotImplementedException">The <see cref="P:System.ComponentModel.Composition.Primitives.Export.Definition" /> property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Value">
      <summary>Provides the object this export represents.</summary>
      <returns>The object this export represents.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportDefinition">
      <summary>Describes the contract that a particular <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object satisfies.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> class with the specified contract name and metadata.</summary>
      <param name="contractName">The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</param>
      <param name="metadata">The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> or null to set the <see cref="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata" /> property to an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> is an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.ContractName">
      <summary>Gets the contract name.</summary>
      <returns>The contract name of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> object.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata">
      <summary>Gets the contract metadata.</summary>
      <returns>The metadata of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />. The default is an empty, read-only <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.ToString">
      <summary>Returns a string representation of the export definition.</summary>
      <returns>A string representation of the export definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportedDelegate">
      <summary>Represents a function exported by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> class for the specified part and method. </summary>
      <param name="instance">The part exporting the method.</param>
      <param name="method">The method to be exported.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.CreateDelegate(System.Type)">
      <summary>Gets a delegate of the specified type.</summary>
      <returns>A delegate of the specified type, or null if no such delegate can be created.</returns>
      <param name="delegateType">The type of the delegate to return.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ICompositionElement">
      <summary>Represents an element that participates in composition.</summary>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
      <summary>Gets the display name of the composition element.</summary>
      <returns>The human-readable display name of the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
      <summary>Gets the composition element from which the current composition element originated.</summary>
      <returns>The composition element from which the current <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> originated, or null if the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> is the root composition element.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportCardinality">
      <summary>Indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne">
      <summary>Zero or one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne">
      <summary>Exactly one <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> object is required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore">
      <summary>Zero or more <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects are required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportDefinition">
      <summary>Represents an import that is required by a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}},System.String,System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> class with the specified constraint, contract name, cardinality, a value that indicates whether the import definition is recomposable, and a value that indicates whether the import definition is a prerequisite.</summary>
      <param name="constraint">An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must match to satisfy the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="contractName">The contract name.</param>
      <param name="cardinality">One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</param>
      <param name="isRecomposable">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false.</param>
      <param name="isPrerequisite">true to specify that the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> can start producing exported objects; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cardinality" /> is not one of the values of <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality">
      <summary>Gets the cardinality of the exports required by the import definition.</summary>
      <returns>One of the enumeration values that indicates the cardinality of the <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> objects required by the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />. The default is <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Constraint">
      <summary>Gets an expression that defines conditions that the import must satisfy to match the import definition.</summary>
      <returns>An expression that contains a <see cref="T:System.Func`2" /> object that defines the conditions an <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> must satisfy to match the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</returns>
      <exception cref="T:System.NotImplementedException">The property was not overridden by a derived class.</exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.ContractName">
      <summary>Gets the name of the contract.</summary>
      <returns>The contract name.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets a value that indicates whether the export represented by the specified definition satisfies the constraints of this import definition.</summary>
      <returns>true if the constraints are satisfied; otherwise, false.</returns>
      <param name="exportDefinition">The export definition to test.</param>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite">
      <summary>Gets a value that indicates whether the import definition must be satisfied before a part can start producing exported objects.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> must be satisfied before a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object can start producing exported objects; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable">
      <summary>Gets a value that indicates whether the import definition can be satisfied multiple times.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> can be satisfied multiple times throughout the lifetime of a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> object; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.ToString">
      <summary>Returns a string representation of the import definition.</summary>
      <returns>A string representation of the import definition.</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo">
      <summary>Represents a <see cref="T:System.Reflection.MemberInfo" /> object that does not load assemblies or create objects until requested.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class, representing the specified member.</summary>
      <param name="member">The member to represent.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Func{System.Reflection.MemberInfo[]})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessorsCreator">A function whose return value is a collection of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Reflection.MemberInfo[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> class for a member of the specified type with the specified accessors.</summary>
      <param name="memberType">The type of the represented member.</param>
      <param name="accessors">An array of the accessors for the represented member.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.Equals(System.Object)">
      <param name="obj">The other object.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetAccessors">
      <summary>Gets an array of the accessors for the represented member.</summary>
      <returns>An array of the accessors for the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetHashCode"></member>
    <member name="P:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.MemberType">
      <summary>Gets the type of the represented member.</summary>
      <returns>The type of the represented member.</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Equality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Inequality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>Determines whether the two specified <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> objects are not equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="left">The first object to test.</param>
      <param name="right">The second object to test.</param>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
      <summary>Provides extension methods to create and retrieve reflection-based parts.</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an export definition from the specified member, with the specified contract name, metadata, and origin.</summary>
      <returns>An export definition created from the specified parameters.</returns>
      <param name="exportingMember">The member to export.</param>
      <param name="contractName">The contract name to use for the export.</param>
      <param name="metadata">The metadata for the export.</param>
      <param name="origin">The object that the export originates from.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified member, with the specified contract name, type identity, required metadata, cardinality, recomposition policy, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="importingMember">The member to import into.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="isRecomposable">A value that indicates whether the import is recomposable.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates an import definition for the specified parameter, with the specified contract name, type identity, required metadata, cardinality, creation policy, and origin.</summary>
      <returns>An import definition created from the specified parameters.</returns>
      <param name="parameter">The parameter to import.</param>
      <param name="contractName">The contract name to use for the import.</param>
      <param name="requiredTypeIdentity">The required type identity for the import.</param>
      <param name="requiredMetadata">The required metadata for the import.</param>
      <param name="cardinality">The cardinality of the import.</param>
      <param name="requiredCreationPolicy">A value that indicates the import's creation policy.</param>
      <param name="origin">The object to import into.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>Creates a part definition with the specified part type, imports, exports, metadata, and origin.</summary>
      <returns>A part definition created from the specified parameters.</returns>
      <param name="partType">The type of the part.</param>
      <param name="isDisposalRequired">true if the part requires disposal; otherwise, false.</param>
      <param name="imports">A collection of the part's imports.</param>
      <param name="exports">A collection of the part's exports.</param>
      <param name="metadata">The part's metadata.</param>
      <param name="origin">The part's origin.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>Gets the exporting member from a specified export definition.</summary>
      <returns>The member specified in the export definition.</returns>
      <param name="exportDefinition">The export definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing member from a specified import definition.</summary>
      <returns>The member specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Gets the importing parameter from a specified import definition.</summary>
      <returns>The parameter specified in the import definition.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Gets the type of a part from a specified part definition.</summary>
      <returns>The type of the defined part.</returns>
      <param name="partDefinition">The part definition to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>Determines whether the specified part requires disposal.</summary>
      <returns>true if the part requires disposal; otherwise, false.</returns>
      <param name="partDefinition">The part to examine.</param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>Determines whether an import definition represents a member or a parameter.</summary>
      <returns>true if the import definition represents a parameter; otherwise, false.</returns>
      <param name="importDefinition">The import definition to examine.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\Microsoft.CSharp.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.CSharp</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.RuntimeBinder.Binder">
      <summary>Contains factory methods to create dynamic call site binders for CSharp.</summary>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp binary operation binder.</summary>
      <returns>Returns a new CSharp binary operation binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="operation">The binary operation kind.</param>
      <param name="context">The <see cref="T:System.Type" /> object that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)">
      <summary>Initializes a new CSharp convert binder.</summary>
      <returns>Returns a new CSharp convert binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="type">The type to convert to.</param>
      <param name="context">The <see cref="T:System.Type" /> object that indicates where this operation is used.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp get index binder.</summary>
      <returns>Returns a new CSharp get index binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp get member binder.</summary>
      <returns>Returns a new CSharp get member binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="name">The name of the member to get.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp invoke binder.</summary>
      <returns>Returns a new CSharp invoke binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp invoke constructor binder.</summary>
      <returns>Returns a new CSharp invoke constructor binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp invoke member binder.</summary>
      <returns>Returns a new CSharp invoke member binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="name">The name of the member to invoke.</param>
      <param name="typeArguments">The list of type arguments specified for this invoke.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)">
      <summary>Initializes a new CSharp is event binder.</summary>
      <returns>Returns a new CSharp is event binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="name">The name of the event to look for.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp set index binder.</summary>
      <returns>Returns a new CSharp set index binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp set member binder.</summary>
      <returns>Returns a new CSharp set member binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="name">The name of the member to set.</param>
      <param name="context">The <see cref="T:System.Type" /> that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})">
      <summary>Initializes a new CSharp unary operation binder.</summary>
      <returns>Returns a new CSharp unary operation binder.</returns>
      <param name="flags">The flags with which to initialize the binder.</param>
      <param name="operation">The unary operation kind.</param>
      <param name="context">The <see cref="T:System.Type" /> object that indicates where this operation is used.</param>
      <param name="argumentInfo">The sequence of <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> instances for the arguments to this operation.</param>
    </member>
    <member name="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo">
      <summary>Represents information about C# dynamic operations that are specific to particular arguments at a call site. Instances of this class are generated by the C# compiler.</summary>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo.Create(Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> class.</summary>
      <returns>A new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo" /> class.</returns>
      <param name="flags">The flags for the argument.</param>
      <param name="name">The name of the argument, if named; otherwise null.</param>
    </member>
    <member name="T:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags">
      <summary>Represents information about C# dynamic operations that are specific to particular arguments at a call site. Instances of this class are generated by the C# compiler.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags.None">
      <summary>No additional information to represent.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags.UseCompileTimeType">
      <summary>The argument's compile-time type should be considered during binding.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags.Constant">
      <summary>The argument is a constant.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags.NamedArgument">
      <summary>The argument is a named argument.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags.IsRef">
      <summary>The argument is passed to a ref parameter.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags.IsOut">
      <summary>The argument is passed to an out parameter.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags.IsStaticType">
      <summary>The argument is a <see cref="T:System.Type" /> indicating an actual type name used in source. Used only for target objects in static calls.</summary>
    </member>
    <member name="T:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags">
      <summary>Represents information about C# dynamic operations that are not specific to particular arguments at a call site. Instances of this class are generated by the C# compiler.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.None">
      <summary>There is no additional information required for this binder.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.CheckedContext">
      <summary>The evaluation of this binder happens in a checked context.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.InvokeSimpleName">
      <summary>The binder represents an invoke on a simple name.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.InvokeSpecialName">
      <summary>The binder represents an invoke on a specialname.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.BinaryOperationLogical">
      <summary>The binder represents a logical AND or logical OR that is part of a conditional logical operator evaluation.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.ConvertExplicit">
      <summary>The binder represents an explicit conversion.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.ConvertArrayIndex">
      <summary>The binder represents an implicit conversion for use in an array creation expression.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.ResultIndexed">
      <summary>The result of any bind is going to be indexed get a set index or get index binder.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.ValueFromCompoundAssignment">
      <summary>The value in this set index or set member comes a compound assignment operator.</summary>
    </member>
    <member name="F:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags.ResultDiscarded">
      <summary>The binder is used in a position that does not require a result, and can therefore bind to a void returning method.</summary>
    </member>
    <member name="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException">
      <summary>Represents an error that occurs when a dynamic bind in the C# runtime binder is processed.</summary>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException" /> class.</summary>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException" /> class that has a specified error message.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException" /> class that has a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException">
      <summary>Represents an error that occurs when a dynamic bind in the C# runtime binder is processed.</summary>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException" /> class that has a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.Numerics.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Numerics</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Numerics.dll</relpath>
    <extension downloadUri="System.Numerics.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.Runtime.Serialization.Json.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.Runtime.Serialization.Json</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Runtime.Serialization.Json.dll</relpath>
    <extension downloadUri="System.Runtime.Serialization.Json.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ComponentModel.DataAnnotations.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.DataAnnotations</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.AssociationAttribute">
      <summary>Specifies that an entity member represents a data relationship, such as a foreign key relationship. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.AssociationAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociationAttribute" /> class. </summary>
      <param name="name">The name of the association. For bidirectional associations, the name must be the same on both sides of the association.</param>
      <param name="thisKey">A comma-separated list of the property names of the key values on this side of the association.</param>
      <param name="otherKey">A comma-separated list of the property names of the key values on the other side of the association.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.IsForeignKey">
      <summary>Gets or sets the member as the foreign key in an association that represents a data relationship.</summary>
      <returns>true if the member is a foreign key in a data relationship; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.Name">
      <summary>Gets the name used to identify the association. </summary>
      <returns>The name of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey">
      <summary>Gets a comma-separated list of the property names of the key values on the other side of the association.</summary>
      <returns>A comma-separated list of property names of the key values on the other side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKeyMembers">
      <summary>Gets the collection of individual key values specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" /> property.</summary>
      <returns>A collection of key values for the other side of the association. </returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey">
      <summary>Gets a comma-separated list of property names of the key values on this side of the association.</summary>
      <returns>A comma-separated list of property names of the key values on this side of the association.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKeyMembers">
      <summary>Gets the collection of individual key values specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" /> property.</summary>
      <returns>A collection of key values for this side of the association.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute">
      <summary>Designates that a property participates in optimistic concurrency checks.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> class. </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute">
      <summary>Designates a customized method to execute to validate the entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute" /> class. </summary>
      <param name="validatorType">The type that contains the method to invoke when validating the member. </param>
      <param name="method">The name of the method to invoke when validating the member.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted string which is the typically the value of the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName" /> property.</param>
      <exception cref="T:System.InvalidOperationException">The attribute is not well-formed.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method">
      <summary>Gets the name of the method to invoke for validation.</summary>
      <returns>The name of the method to invoke for validation.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType">
      <summary>Gets the type that contains the method for validating the member.</summary>
      <returns>The type that contains the method specified in the <see cref="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataType">
      <summary>Represents data types that are associated with data properties.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Custom">
      <summary>Represents a data type that is not one of the known types. </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.DateTime">
      <summary>Represents an instant in time, expressed as a date and time of day.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Date">
      <summary>Represents a data value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Time">
      <summary>Represents a time value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Duration">
      <summary>Represents a continuous time during which an object exists.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber">
      <summary>Represents a phone number value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Currency">
      <summary>Represents a currency value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Text">
      <summary>Represents text that is displayed.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Html">
      <summary>Represents an HTML file.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.MultilineText">
      <summary>Represents multiline text.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.EmailAddress">
      <summary>Represents an e-mail address.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Password">
      <summary>Represents a password value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.Url">
      <summary>Represents a URL value.</summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.DataType.ImageUrl">
      <summary>Represents a URL value that is displayed as an image instead of text.</summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DataTypeAttribute">
      <summary>Specifies the name of an additional type to associate with an entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> class with the specified data type enumeration. </summary>
      <param name="dataType">The type of data object to associate with the member.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" /> class with the specified name of a customized data type. </summary>
      <param name="customDataType">The name of a customized data type to associate with the member.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
      <summary>Gets a string that represents the name of the customized data type to associate with the member.</summary>
      <returns>The name of the customized data type to associate with the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
      <summary>Gets the type of the data object to associate with the member.</summary>
      <returns>The type of the data object to associate with the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
      <summary>Gets the object that represents the format of the data type.</summary>
      <returns>The object that represents the format of the data type.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName">
      <summary>Retrieves the name of the data type that is associated with the member.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType" /> property if the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> property is set to <see cref="F:System.ComponentModel.DataAnnotations.DataType.Custom" />; otherwise, the name of the value in the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> is set to <see cref="F:System.ComponentModel.DataAnnotations.DataType.Custom" />, but <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType" /> does not contain a value.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayAttribute">
      <summary>Specifies localizable strings for entity types and members that are used in the user interface.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField">
      <summary>Gets or sets a value that indicates whether the field is automatically displayed in the user interface.</summary>
      <returns>true if the field is automatically displayed in the user interface; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The property does not contain a value when trying to retrieve the value.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter">
      <summary>Gets or sets a value that indicates whether filtering is automatically displayed for this field.</summary>
      <returns>true if filtering is automatically displayed; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The property does not contain a value when trying to retrieve the value.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description">
      <summary>Gets or sets either a resource name or non-localized text, such as a tool tip, that is displayed to users to help them understand a member.</summary>
      <returns>Either a resource name or the non-localized text to display to users to help them understand a member. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text to display to users to help them understand a member.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField">
      <summary>Retrieves the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> property when the property has been set, or null if the property has not been set.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter">
      <summary>Retrieves the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> property if the property has been set, or null if the property has not been set.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</summary>
      <returns>The localized value for the description when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder">
      <summary>Retrieves the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property.</summary>
      <returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property if the property is set, or null if the property is not set.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName">
      <summary>Retrieves the localized or non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property.</summary>
      <returns>The localized value for the group name when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property is specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property represents a resource name; otherwise, the non-localized value specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName">
      <summary>Gets or sets either a resource name or non-localized text that is displayed to users when grouping fields in the user interface.</summary>
      <returns>Either a resource name or the non-localized text that is displayed to users when grouping fields in the user interface. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text that is displayed to users when grouping fields in the user interface.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name">
      <summary>Gets or sets either a resource name or non-localized text that is used as a member label for elements that are bound to the member.</summary>
      <returns>Either a resource name or the non-localized text that is used as a member label for elements that are bound to the member. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text that is used as a member label for elements that are bound to the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order">
      <summary>Gets or sets a value that indicates the order in which columns are sorted.</summary>
      <returns>A value that indicates the order in which columns are sorted.</returns>
      <exception cref="T:System.InvalidOperationException">The get accessor is called when the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> property has not been set.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt">
      <summary>Gets or sets either a resource name or non-localized text, such as a watermark, that suggests a user action for an element that is bound to the member.</summary>
      <returns>Either a resource name or the non-localized text that suggests a user action for an element that is bound to the member. The resource name is used with the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property to retrieve localized text that suggests a user action for an element that is bound to the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType">
      <summary>Gets or sets the type that contains the resources for other localizable property values.</summary>
      <returns>The type that contains the resources for other localizable property values.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName">
      <summary>Gets or sets either a resource name or non-localized text that is used as the column label for an element that is bound to the member.</summary>
      <returns>Either a resource name or the non-localized text that is used as the column label for an element that is bound to the member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
      <summary>Designates the property to display, the property to use for sorting, and the sort order when a table is used as a parent table in a foreign key relationship.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class with the specified column to display. </summary>
      <param name="displayColumn">The name of the column to display.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class with the specified display column and the specified sort column. </summary>
      <param name="displayColumn">The name of the column to display.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" /> class with the specified display column, sort column, and sort order. </summary>
      <param name="displayColumn">The name of the column to display.</param>
      <param name="sortColumn">The name of the column to use for sorting.</param>
      <param name="sortDescending">true to sort in descending order; otherwise, false.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.DisplayColumn">
      <summary>Gets the name of the column to the display.</summary>
      <returns>The name of the column to display.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortColumn">
      <summary>Gets the name of the column to use for sorting.</summary>
      <returns>The name of the column to use for sorting.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayColumnAttribute.SortDescending">
      <summary>Gets a value that indicates whether the data is sorted in descending order.</summary>
      <returns>true if the data is sorted in descending order; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
      <summary>Specifies how data fields are displayed and formatted.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
      <summary>Gets or sets a value that indicates whether the formatting string that is specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> property is applied to the member when in edit mode.</summary>
      <returns>true if the formatting string that is specified in the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" /> property is applied to the member when in edit mode; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty string values ("") are automatically converted to null.</summary>
      <returns>true if empty string values are automatically converted to null; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
      <summary>Gets or sets the string value that specifies how to display values for the member.</summary>
      <returns>The string value that specifies how to display values for the member.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
      <summary>Gets or sets the text to display for a member when the value of the member is null.</summary>
      <returns>The text to display for a member when the value of the member is null.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EditableAttribute">
      <summary>Specifies whether users should be able to change the value of the entity property.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute" /> class. </summary>
      <param name="allowEdit">The value that indicates whether users should be able to change the existing value of the property and set a value when inserting a new record.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit">
      <summary>Gets a value that indicates whether a client application should allow users to change the value of the property.</summary>
      <returns>true if users should be able to change the value of the property; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue">
      <summary>Gets or sets a value that indicates whether users should be able to set a value for the property when adding a new record in the data set.</summary>
      <returns>true if users should be able to set the value; otherwise, false. The default value is the value you set for the <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit" /> property.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute">
      <summary>Specifies that an entity member corresponds to an enumeration type. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" /> class. </summary>
      <param name="enumType">The enumeration type to associate with the entity member.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute.EnumType">
      <summary>Gets the enumeration type associated with the entity member.</summary>
      <returns>The enumeration type for the entity member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute">
      <summary>Designates the filtering behavior for a column.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class with the specified control to use for filtering. </summary>
      <param name="filterUIHint">The control to use for filtering.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class with the specified control to use for filtering and the presentation layer. </summary>
      <param name="filterUIHint">The control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports the control.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> class with the specified control to use for filtering, the presentation layer, and the collection of parameters to use when creating an instance of the control.</summary>
      <param name="filterUIHint">The control to use for filtering.</param>
      <param name="presentationLayer">The name of the presentation layer that supports the control.</param>
      <param name="controlParameters">The collection of parameters to use when creating an instance of the control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.ControlParameters">
      <summary>Gets the collection of values to use when creating an instance of the control used for filtering.</summary>
      <returns>The collection of values to use when creating an instance of the filtering control.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance has the same value as the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" /> object and its value is the same as this instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint">
      <summary>Gets the name of the control to use for filtering.</summary>
      <returns>The name of the control to use for filtering.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.PresentationLayer">
      <summary>Gets the name of the presentation layer that supports the filtering control type.</summary>
      <returns>The name of the presentation layer that supports the filtering control type.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
      <summary>Specifies one or more entity properties to use as the unique identity for the entity.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.KeyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> class. </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
      <summary>Designates the minimum and maximum constraints for the associated member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class with specified double values as the minimum and maximum limits. </summary>
      <param name="minimum">The minimum value.</param>
      <param name="maximum">The maximum value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class with specified integer values as the minimum and maximum limits.</summary>
      <param name="minimum">The minimum value.</param>
      <param name="maximum">The maximum value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class with the specified minimum and maximum values converted to the specified type.</summary>
      <param name="type">The type of <paramref name="minimum" /> and <paramref name="maximum" />. The type must implement the <see cref="T:System.IComparable" /> interface.</param>
      <param name="minimum">The minimum value.</param>
      <param name="maximum">The maximum value.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted string.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum" /> is null.-or-<see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum" /> is null.-or-<see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType" /> does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
      <summary>Gets the maximum allowed value for the range.</summary>
      <returns>The maximum allowed value for the range.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
      <summary>Gets the minimum allowed value for the range.</summary>
      <returns>The minimum allowed value for the range.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
      <summary>Gets the type of the <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum" /> and <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum" /> values.</summary>
      <returns>The type of the <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum" /> and <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum" /> values.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
      <summary>Designates a regular expression to use for validation of the associated member. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> class. </summary>
      <param name="pattern">The regular expression to use for validation.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message based on the data field where the error occurred.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted string.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern" /> does not contain a valid regular expression.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern" /> is null or an empty string ("").</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
      <summary>Gets the regular expression to use for validation of the associated member.</summary>
      <returns>The regular expression to use for validation of the associated member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
      <summary>Specifies that a value must be provided for a property. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> class. </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.RequiredAttribute.AllowEmptyStrings">
      <summary>Gets or sets a value that indicates whether an empty string is allowed.</summary>
      <returns>true if an empty string is allowed; otherwise, false. The default value is false.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
      <summary>Specifies the maximum and minimum number of characters that are allowed for an entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> class. </summary>
      <param name="maximumLength">The maximum length of a string.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to an error message that is displayed when the string value is not within the specified length.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted error message.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength" /> is less than zero.-or-<see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength" /> is less than <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength" />.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
      <summary>Gets the maximum length of a string.</summary>
      <returns>The maximum length of the input string.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength">
      <summary>Gets or sets the minimum length of a string.</summary>
      <returns>The minimum length of the input string. The default value is 0.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.TimestampAttribute">
      <summary>Designates a member as a time stamp value. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> class. </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
      <summary>Designates the control and values to use to display the associated entity member.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class with the specified name of the control to use to display the member. </summary>
      <param name="uiHint">The name of the control to use to display the member.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class with the specified name of the control to use to display the member and the presentation layer for the control. </summary>
      <param name="uiHint">The name of the control to use to display the member.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> class with the specified name of the control to use to display the member, the presentation layer for the control, and the parameters to use when creating an instance of the control.</summary>
      <param name="uiHint">The name of the control to use to display the member.</param>
      <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
      <param name="controlParameters">The list of parameters to use when creating an instance of the control.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
      <summary>Gets a collection of values to use as parameters when creating an instance of the presentation control.</summary>
      <returns>A collection of values to use as parameters when creating an instance of the presentation control.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance has the same value as the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> object and its value is the same as this instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
      <summary>Gets the name of the presentation layer that supports the control type in the <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint" /> property.</summary>
      <returns>A value that represents the name of the presentation layer.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
      <summary>Gets the name of the control to use to display the associated member.</summary>
      <returns>The name of the control to use to display the associated member.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationAttribute">
      <summary>Serves as the base class for all validation attributes.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.Func{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class with the specified function to retrieve the error message.</summary>
      <param name="errorMessageAccessor">A function to retrieve the error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> class with the specified error message.</summary>
      <param name="errorMessage">A non-localizable error message.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage">
      <summary>Gets or sets the non-localizable error message to display when validation fails.</summary>
      <returns>The non-localizable error message.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName">
      <summary>Gets or sets the property name on the resource type that provides the localizable error message.</summary>
      <returns>The property name on the resource type that provides the localizable error message.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType">
      <summary>Gets or sets the resource type that provides the localizable error message.</summary>
      <returns>The resource type that provides the localizable error message.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString">
      <summary>Gets the localized or non-localized error message.</summary>
      <returns>The localized or non-localized error message.</returns>
      <exception cref="T:System.InvalidOperationException">Both <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" /> are set.-or-Neither <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> nor <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" /> is set.-or-Either <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> or <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> is set, but the other is not.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)">
      <summary>Applies formatting to the error message.</summary>
      <returns>The formatted error message.</returns>
      <param name="name">The name to include in the formatted error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid and returns an object that includes the results of the validation check.</summary>
      <returns>
        <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success" /> if the value is valid; otherwise, an instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class with the error message.</returns>
      <param name="value">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validationContext" /> is null.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid.</summary>
      <returns>true if <paramref name="value" /> is valid; otherwise, false.</returns>
      <param name="value">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.NotImplementedException">The <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method is not overridden in the derived class.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the object is not valid.</summary>
      <param name="value">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationContext">
      <summary>Provides information about a type or member to validate.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> class with the specified object to validate, a service provider that enables validation methods to access external services, and a collection of values related to validation.</summary>
      <param name="instance">The object to validate.</param>
      <param name="serviceProvider">A service provider that enables validation methods to access external services. This value can be null.</param>
      <param name="items">A collection of values related to validation. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName">
      <summary>Gets or sets the name to display to users for the member to validate.</summary>
      <returns>The name of member to validate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null or an empty string ("").</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)">
      <summary>Retrieves an instance of the service to use during validation.</summary>
      <returns>An instance of that service or null if the service is not available.</returns>
      <param name="serviceType">The type of the service to use during validation.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.Items">
      <summary>Gets the collection of values associated with the validation request.</summary>
      <returns>The collection of values associated with the validation request</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName">
      <summary>Gets or sets the programmatic name of the member to validate.</summary>
      <returns>The programmatic name of the member to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance">
      <summary>Gets the object to validate.</summary>
      <returns>The object to validate.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType">
      <summary>Gets the type of the object to validate.</summary>
      <returns>The type of the object to validate.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
      <summary>Represents the exception that occurred during validation of a member that is marked with a validation attribute.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified validation result, the attribute that triggered the exception, and the invalid value.</summary>
      <param name="validationResult">An object containing information about the validation error.</param>
      <param name="validatingAttribute">The attribute that caused the validation exception.</param>
      <param name="value">The value that caused the validating attribute to trigger the exception.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified error message. </summary>
      <param name="message">The localized message describing the exception.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified error message, the attribute that triggered the exception, and the invalid value.</summary>
      <param name="errorMessage">The localized message describing the exception.</param>
      <param name="validatingAttribute">The attribute that caused the validation exception.</param>
      <param name="value">The value that caused the validating attribute to trigger the exception.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> class with the specified error message and an inner exception.</summary>
      <param name="message">The localized message describing the exception.</param>
      <param name="innerException">The object representing an exception that caused the current validation exception.</param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
      <summary>Gets the validation attribute that caused the validation exception.</summary>
      <returns>The validation attribute that caused the validation exception.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult">
      <summary>Gets the object containing information about the validation error.</summary>
      <returns>This object containing information about the validation error.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
      <summary>Gets the value that caused the validating attribute to trigger the exception.</summary>
      <returns>The value that caused the validating attribute to trigger the exception.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
      <summary>Contains the results of a validation request. </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class with the specified error message. </summary>
      <param name="errorMessage">The error message to display to the user. If null, the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method uses the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" /> method to create the error message.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class with the specified error message and a collection of member names that are associated with the validation result. </summary>
      <param name="errorMessage">The error message to display to the user. If null, the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> method uses the <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" /> method to create the error message.</param>
      <param name="memberNames">The collection of member names associated with the validation result. If empty, <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> will construct this list from the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName" /> property. </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
      <summary>Gets or sets the error message for the validation result.</summary>
      <returns>The error message for the validation result.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
      <summary>Gets the collection of member names associated with the validation result.</summary>
      <returns>The collection of member names associated with the validation result.</returns>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
      <summary>A value that indicates the entity member successfully validated.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.ToString">
      <summary>Returns a string value that represents the current validation result.</summary>
      <returns>A string value that represents the current validation result.</returns>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.Validator">
      <summary>Provides members to help validate objects and members using values from the associated <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Determines whether the specified object is valid.</summary>
      <returns>true if the object is valid; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
      <summary>Determines whether the specified object is valid and, if requested, validates all of the properties of the object.</summary>
      <returns>true if the object is valid; otherwise, false.</returns>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <param name="validateAllProperties">A value that indicates whether all immediate properties of the object are validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>Determines whether the specified property value is valid.</summary>
      <returns>true if the property is valid; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName" /> of <paramref name="validationContext" /> is not a valid property.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Determines whether a specified value is valid against a collection of validation attributes.</summary>
      <returns>true if <paramref name="value" /> is valid against the validation attributes; otherwise, false.</returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationResults">A collection to store validation results.</param>
      <param name="validationAttributes">The collection of validation attributes to use to determine if <paramref name="value" /> is valid.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified object is valid and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the object is not valid.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.-or-<paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="instance" /> is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
      <summary>Determines whether the specified object is valid and, if requested, whether all of the properties on the object are valid, and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the object is not valid.</summary>
      <param name="instance">The object to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validateAllProperties">A value that indicates whether all immediate properties of the object are validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.-or-<paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" /> does not equal the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="instance" /> or at least one of its properties is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>Determines whether the specified property value is valid and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the property is not valid.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName" /> of <paramref name="validationContext" /> is not a valid property.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
      <summary>Determines whether a specified value is valid against a collection of validation attributes and throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the value is not valid.</summary>
      <param name="value">The value to validate.</param>
      <param name="validationContext">An object that contains information about the validation request.</param>
      <param name="validationAttributes">The collection of validation attributes to use to determine if <paramref name="value" /> is valid.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validationContext" /> is null.</exception>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
        <paramref name="value" /> is not valid.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.Json.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Json</name>
  </assembly>
  <members>
    <member name="T:System.Json.JsonArray">
      <summary>A <see cref="T:System.Json.JsonArray" /> is an ordered sequence of zero or more <see cref="T:System.Json.JsonValue" /> objects.</summary>
    </member>
    <member name="M:System.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonArray" /> class initialized by an <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumeration of objects of type <see cref="T:System.Json.JsonValue" />.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumeration of objects of type <see cref="T:System.Json.JsonValue" /> used to initialize the JavaScript Object Notation (JSON) array.</param>
    </member>
    <member name="M:System.Json.JsonArray.#ctor(System.Json.JsonValue[])">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonArray" /> class, initialized by an array of type <see cref="T:System.Json.JsonValue" />.</summary>
      <param name="items">The array of type <see cref="T:System.Json.JsonValue" /> used to initialize the JavaScript Object Notation (JSON) array.</param>
    </member>
    <member name="M:System.Json.JsonArray.Add(System.Json.JsonValue)">
      <summary>Adds a <see cref="T:System.Json.JsonValue" /> object to the end of the array.</summary>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to add.</param>
    </member>
    <member name="M:System.Json.JsonArray.AddRange(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
      <summary>Adds the elements from a collection of type <see cref="T:System.Json.JsonValue" /> to the <see cref="T:System.Json.Array" />.</summary>
      <param name="items">Collection of types to add.</param>
    </member>
    <member name="M:System.Json.JsonArray.AddRange(System.Json.JsonValue[])">
      <summary>Adds the elements from an array of type <see cref="T:System.Json.JsonValue" /> to the <see cref="T:System.Json.Array" />.</summary>
      <param name="items">The array of type <see cref="T:System.Json.JsonValue" /> to be added to the <see cref="T:System.Json.Array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonArray.Clear">
      <summary>Removes all JSON CLR types from the <see cref="T:System.Json.JsonArray" />.</summary>
    </member>
    <member name="M:System.Json.JsonArray.Contains(System.Json.JsonValue)">
      <summary>Checks whether a specified JSON CLR type is in the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Json.JsonArray" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> to check for in the array. </param>
    </member>
    <member name="M:System.Json.JsonArray.CopyTo(System.Json.JsonValue[],System.Int32)">
      <summary>Copies the contents of the current JSON CLR array instance into a specified destination array beginning at the specified index.</summary>
      <param name="array">The destination <see cref="T:System.Json.JsonArray" /> to which the elements of the current <see cref="T:System.Json.JsonArray" /> object are copied</param>
      <param name="arrayIndex">The zero-based index in the destination array at which the copying of the elements of the JSON CLR array begins.</param>
    </member>
    <member name="P:System.Json.JsonArray.Count">
      <summary>Returns the number of <see cref="T:System.Json.JsonValue" /> elements in the array.</summary>
      <returns>The number of <see cref="T:System.Json.JsonValue" /> objects in the <see cref="T:System.Json.JsonArray" />.
</returns>
    </member>
    <member name="M:System.Json.JsonArray.IndexOf(System.Json.JsonValue)">
      <summary>Searches for a specified object and returns the zero-based index of its first occurrence within the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the <see cref="T:System.Json.JsonArray" />, if found; otherwise, –1.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to look up. </param>
    </member>
    <member name="M:System.Json.JsonArray.Insert(System.Int32,System.Json.JsonValue)">
      <summary>Insert a JSON CLR type into the array at a specified index.</summary>
      <param name="index">The zero-based index at which the item should be inserted.</param>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="items" /> is less than zero or larger than the size of the array.</exception>
    </member>
    <member name="P:System.Json.JsonArray.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Json.JsonArray" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Json.JsonArray" />is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Json.JsonArray.Item(System.Int32)">
      <summary>Gets or sets the JSON value at a specified index.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index for the array.</exception>
      <exception cref="T:System.ArgumentException">The property is set and the <paramref name="value" /> is of a type that is not assignable to the array.</exception>
    </member>
    <member name="P:System.Json.JsonArray.JsonType">
      <summary>Gets the JSON type of the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>Returns <see cref="F:System.Json.JsonType.Array" />.</returns>
    </member>
    <member name="M:System.Json.JsonArray.Remove(System.Json.JsonValue)">
      <summary>Removes the first occurrence of the specified JSON value from the array.</summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the <see cref="T:System.Json.JsonArray" />.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> to remove from the <see cref="T:System.Json.JsonArray" />.</param>
    </member>
    <member name="M:System.Json.JsonArray.RemoveAt(System.Int32)">
      <summary>Remove the JSON value at a specified index of <see cref="T:System.Json.JsonArray" />.</summary>
      <param name="index">The zero-based index at which to remove the <see cref="T:System.Json.JsonValue" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal or larger than the size of the array.</exception>
    </member>
    <member name="M:System.Json.JsonArray.Save(System.IO.Stream)">
      <summary>Serializes a JSON CLR array type into a stream of text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonArray.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Json.JsonValue" /> objects in the array.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that iterates through the <see cref="T:System.Json.JsonValue" /> elements in the <see cref="T:System.Json.JsonArray" />.</returns>
    </member>
    <member name="M:System.Json.JsonArray.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Json.JsonValue" /> objects in the array.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object that iterates through the <see cref="T:System.Json.JsonValue" /> elements in the <see cref="T:System.Json.JsonArray" />.
</returns>
    </member>
    <member name="T:System.Json.JsonObject">
      <summary>A <see cref="T:System.Json.JsonObject" /> is an unordered collection of zero or more key/value pairs.</summary>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of key/value pairs.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> used to initialize the key/value pairs</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a collection of key/value pairs.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> object used to initialize the key/value pairs.</param>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.DateTimeOffset)">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="dto">The <see cref="T:System.DateTimeOffset" /> used to initialize the object.</param>
    </member>
    <member name="M:System.Json.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
      <summary>Adds a key/value pair to the JSON CLR object.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to add.</param>
    </member>
    <member name="M:System.Json.JsonObject.Add(System.String,System.Json.JsonValue)">
      <summary>Adds a key/value pair to the JSON CLR object type.</summary>
      <param name="key">The key for the element added.</param>
      <param name="value">The <see cref="T:System.Json.JsonValue" /> for the element added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
      <summary>Adds a specified collection of key/value pairs to the current instance of the <see cref="T:System.Json.JsonObject" />.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of key/value pairs to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
      <summary>Adds a specified array of key/value pairs to the current instance of <see cref="T:System.Json.JsonObject" />.</summary>
      <param name="items">Collection of key/value pairs.</param>
    </member>
    <member name="M:System.Json.JsonObject.Clear">
      <summary>Removes all key/value pairs from the JSON CLR object.</summary>
    </member>
    <member name="M:System.Json.JsonObject.ContainsKey(System.String)">
      <summary>Checks whether a key/value pair with a specified key exists in the JSON CLR object type.</summary>
      <returns>true if the JSON CLR object contains the <paramref name="key" />; otherwise, false.
</returns>
      <param name="key">The key to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[],System.Int32)">
      <summary>Copies the contents of the JSON CLR object into a specified key/value destination array beginning at a specified index.</summary>
      <param name="array">The destination array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to which the elements of the <see cref="T:System.Json.JsonObject" /> are copied</param>
      <param name="arrayIndex">The zero-based index at which to begin the insertion of the contents from the JSON CLR object type.</param>
    </member>
    <member name="P:System.Json.JsonObject.Count">
      <summary>Returns the number of key/value pairs in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>The number of key/value pairs in the JSON CLR object.</returns>
    </member>
    <member name="M:System.Json.JsonObject.GetEnumerator">
      <summary>Returns an enumerator over the key/value pairs contained in the JSON CLR object type.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="P:System.Json.JsonObject.Item(System.String)">
      <summary>Gets or sets an indexer used to look up a key/value pair based on a specified key.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> that contains the key/value pair looked up.</returns>
      <param name="key">The key of the pair to look up.</param>
    </member>
    <member name="P:System.Json.JsonObject.JsonType">
      <summary>Gets the JSON type of the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>Returns <see cref="F:System.Json.JsonType.Object" />.</returns>
    </member>
    <member name="P:System.Json.JsonObject.Keys">
      <summary>Returns a collection that contains the keys in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys from the JSON CLR object.</returns>
    </member>
    <member name="M:System.Json.JsonObject.Remove(System.String)">
      <summary>Removes the key/value pair with a specified key from the JSON CLR object type.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if <paramref name="key" /> is not found in the JSON CLR object.</returns>
      <param name="key">The key of the item to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.Save(System.IO.Stream)">
      <summary>Serializes a JSON CLR object into text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
      <summary>Checks whether the <see cref="T:System.Json.JsonObject" /> contains a specified key/value pair.</summary>
      <returns>true if the <paramref name="item" /> is contained in the instance of the <see cref="T:System.Json.JsonObject" />; otherwise, false.</returns>
      <param name="item">The key/value pair to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether this JSON CLR object is read-only.</summary>
      <returns>true if it is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
      <summary>Removes the first occurrence of a specified key/value pair from the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Json.JsonObject" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the <see cref="T:System.Json.JsonObject" />.</returns>
      <param name="item">The key/value pair to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the key/value pairs in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>
an <see cref="T:System.Collections.IEnumerator" /> object that iterates through the key/value pairs in the <see cref="T:System.Json.JsonObject" />.
</returns>
    </member>
    <member name="M:System.Json.JsonObject.TryGetValue(System.String,System.Json.JsonValue@)">
      <summary>Attempts to get the value that corresponds to the specified key.</summary>
      <returns>true if the instance of the <see cref="T:System.Json.JsonObject" /> contains an element with the specified <paramref name="key" />; otherwise, false.</returns>
      <param name="key">The key of the value to retrieve.</param>
      <param name="value">The primitive or structured <see cref="T:System.Json.JsonValue" /> object that has the <paramref name="key" /> specified. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonObject.Values">
      <summary>Returns a collection that contains the values in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the set of <see cref="T:System.Json.JsonValues" /> from the JSON CLR object.</returns>
    </member>
    <member name="T:System.Json.JsonPrimitive">
      <summary>Represents a JavaScript Object Notation (JSON) primitive type in the common language runtime (CLR).</summary>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Boolean)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Boolean" /> type.</summary>
      <param name="value">The <see cref="T:System.Boolean" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Byte)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Byte" /> type.</summary>
      <param name="value">The <see cref="T:System.Byte" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Char)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Char" /> type.</summary>
      <param name="value">The <see cref="T:System.Char" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.DateTime)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.DateTime" /> type.</summary>
      <param name="value">The <see cref="T:System.DateTime" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Decimal)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Decimal" /> type.</summary>
      <param name="value">The <see cref="T:System.Decimal" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Double)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Double" /> type.</summary>
      <param name="value">The <see cref="T:System.Double" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Guid)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Guid" /> type.</summary>
      <param name="value">The <see cref="T:System.Guid" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int16)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int16" /> type.</summary>
      <param name="value">The <see cref="T:System.Int16" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int32)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int32" /> type.</summary>
      <param name="value">The <see cref="T:System.Int32" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int64)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int64" /> type.</summary>
      <param name="value">The <see cref="T:System.Int64" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.SByte)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.SByte" /> type.</summary>
      <param name="value">The <see cref="T:System.SByte" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Single)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Single" /> type.</summary>
      <param name="value">The <see cref="T:System.Single" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.String)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.String" /> type.</summary>
      <param name="value">The <see cref="T:System.String" /> object that initializes the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.TimeSpan" /> type.</summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt16)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt16" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt16" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt32)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt32" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt32" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt64)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt64" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt64" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Uri)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Uri" /> type.</summary>
      <param name="value">The <see cref="T:System.Uri" /> object that initializes the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonPrimitive.JsonType">
      <summary>Gets the <see cref="T:System.JsonType" /> that is associated with this <see cref="T:System.Json.JsonPrimitive" /> object.</summary>
      <returns>Each <see cref="T:System.Json.JsonPrimitive" /> object is associated with a <see cref="T:System.JsonType" /> that is determined by the type of common language runtime (CLR) object used to initiate it.
</returns>
    </member>
    <member name="M:System.Json.JsonPrimitive.Save(System.IO.Stream)">
      <summary>Serializes the <see cref="T:System.Json.JsonPrimitive" /> object into text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="T:System.Json.JsonType">
      <summary>An enumeration that specifies primitive and structured JavaScript Object Notation (JSON) common language runtime (CLR) types.</summary>
    </member>
    <member name="F:System.Json.JsonType.String">
      <summary>Specifies the JSON string CLR type.</summary>
    </member>
    <member name="F:System.Json.JsonType.Number">
      <summary>Specifies the JSON number CLR type.</summary>
    </member>
    <member name="F:System.Json.JsonType.Object">
      <summary>Specifies the JSON object CLR type that consists of an unordered collection of key/value pairs, where the key is of type <see cref="T:System.String" /> and the value is of type <see cref="T:System.Json.JsonValue" />, which can, in turn, be either a primitive or a structured JSON type. </summary>
    </member>
    <member name="F:System.Json.JsonType.Array">
      <summary>Specifies the JSON array CLR type that consists of an ordered collection of <see cref="T:System.Json.JsonValue" /> types, which can, in turn, be either primitive or structured JSON types.</summary>
    </member>
    <member name="F:System.Json.JsonType.Boolean">
      <summary>Specifies the JSON Boolean CLR type.</summary>
    </member>
    <member name="T:System.Json.JsonValue">
      <summary>This is the abstract base class for JavaScript Object Notation (JSON) common language runtime (CLR) types. </summary>
    </member>
    <member name="M:System.Json.JsonValue.ContainsKey(System.String)">
      <summary>Throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="key">The key to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonValue.Count">
      <summary>This method is not supported and throws an exception when called.</summary>
      <returns>
Returns <see cref="T:System.Int32" />. 
</returns>
    </member>
    <member name="P:System.Json.JsonValue.Item(System.Int32)">
      <summary>This indexer is not supported for this base class and throws an exception.</summary>
      <returns>
A <see cref="T:System.Json.JsonValue" />.
</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="P:System.Json.JsonValue.Item(System.String)">
      <summary>This indexer is not supported for this base class and throws an exception.</summary>
      <returns>
Returns <see cref="T:System.Json.JsonValue" />.
</returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Json.JsonValue.JsonType">
      <summary>When implemented in a derived class, indicates the JSON CLR type represented by the derived type.</summary>
      <returns>
Returns <see cref="T:System.Json.JsonType" /> .
</returns>
    </member>
    <member name="M:System.Json.JsonValue.Load(System.IO.Stream)">
      <summary>Deserializes text-based JSON from a stream into a JSON CLR type.</summary>
      <returns>
Returns a class derived from <see cref="T:System.Json.JsonValue" /> that contains the deserialized text-based JSON.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains text-based JSON content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.Load(System.IO.TextReader)">
      <summary>Deserializes text-based JSON from a text reader into a JSON CLR type.</summary>
      <returns>
Returns a class derived from <see cref="T:System.Json.JsonValue" /> that contains the deserialized text-based JSON.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> over text-based JSON content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Boolean)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Boolean" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Boolean" /> specified.</returns>
      <param name="value">The <see cref="T:System.Boolean" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Byte)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Byte" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Byte" /> specified.
</returns>
      <param name="value">The <see cref="T:System.Byte" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Char)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Char" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Char" /> specified.
</returns>
      <param name="value">The <see cref="T:System.Char" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.DateTime)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.DateTime" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.DateTime" /> specified.</returns>
      <param name="value">The <see cref="T:System.DateTime" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.DateTimeOffset)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.JsonObject" />.</summary>
      <returns>The <see cref="T:System.Json.JsonObject" /> initialized with the <see cref="T:System.DateTimeOffset" /> specified.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> instance used to initialize the <see cref="T:System.JsonObject" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Decimal)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Decimal" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Decimal" /> specified.</returns>
      <param name="value">The <see cref="T:System.Decimal" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Double)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Double" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Double" /> specified.</returns>
      <param name="value">The <see cref="T:System.Double" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Guid)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Guid" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Guid" /> specified.</returns>
      <param name="value">The <see cref="T:System.Guid" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int16)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int16" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int16" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int16" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int32)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int32" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int32" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int32" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int64)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int64" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int64" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int64" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.DateTime">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Datetime" /> object.</summary>
      <returns>The <see cref="T:System.DateTime" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.DateTime" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.TimeSpan">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.TimeSpan" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.TimeSpan" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Boolean">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The <see cref="T:System.Boolean" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Boolean" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Boolean" /> and so cannot be cast to <see cref="T:System.Boolean" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Char">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Char" /> object.</summary>
      <returns>The <see cref="T:System.Char" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Char" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Boolean" />, or there is not exactly one character in the <paramref name="value" /> parameter.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int64">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int64" /> object.</summary>
      <returns>The <see cref="T:System.Int64" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int64" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Decimal">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The <see cref="T:System.Decimal" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Decimal" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int32">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int32" /> object.</summary>
      <returns>The <see cref="T:System.Int32" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int32" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt64">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt64" /> object.</summary>
      <returns>The <see cref="T:System.UInt64" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt64" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.String">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.String" /> object.</summary>
      <returns>The <see cref="T:System.String" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified or null if <paramref name="value" /> is null.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.String" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.String" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.DateTimeOffset">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.DateTimeOffset" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Object" /> and the object does not contain two fields that are called “DateTime” and “OffsetMinutes”. </exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Single">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Single" /> object.</summary>
      <returns>The <see cref="T:System.Single" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Single" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Single" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Double">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Double" /> object.</summary>
      <returns>The <see cref="T:System.Double" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Double" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.SByte">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.SByte" /> object.</summary>
      <returns>The <see cref="T:System.SByte" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.SByte" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.SByte" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Byte">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Byte" /> object.</summary>
      <returns>The <see cref="T:System.Byte" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Byte" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Uri">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Uri" /> object.</summary>
      <returns>The <see cref="T:System.Uri" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Uri" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Uri" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt16">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt16" /> object.</summary>
      <returns>The <see cref="T:System.UInt16" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt16" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt32">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt32" /> object.</summary>
      <returns>The <see cref="T:System.UInt32" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt32" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int16">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int16" /> object.</summary>
      <returns>The <see cref="T:System.Int16" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int16" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Guid">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Guid" /> object.</summary>
      <returns>The <see cref="T:System.Guid" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Guid" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.SByte)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.SByte" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.SByte" /> specified.</returns>
      <param name="value">The <see cref="T:System.SByte" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Single)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Single" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Single" /> specified.</returns>
      <param name="value">The <see cref="T:System.Single" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.String)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.String" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.String" /> specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The <see cref="T:System.String" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.TimeSpan)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Timespan" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Timespan" /> specified.</returns>
      <param name="value">The <see cref="T:System.Timespan" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt16)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt16" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt16" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt16" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt32)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt32" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt32" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt32" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt64)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt64" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt64" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt64" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Uri)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Uri" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Uri" /> specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The <see cref="T:System.Uri" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.Parse(System.String)">
      <summary>Deserializes text-based JSON into a JSON CLR type.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> object that represents the parsed text-based JSON as a CLR type. </returns>
      <param name="jsonString">The text-based JSON to be parsed into a JSON CLR type.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="jsonString" /> is zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="jsonString" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.Save(System.IO.Stream)">
      <summary>When implemented in a derived class, serializes the <see cref="T:System.Json.JsonValue" /> CLR type into text-based JSON using a stream.</summary>
      <param name="stream">Stream to which to write text-based JSON.</param>
    </member>
    <member name="M:System.Json.JsonValue.Save(System.IO.TextWriter)">
      <summary>Serializes the <see cref="T:System.Json.JsonValue" /> CLR type into text-based JSON using a text writer.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write text-based JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.System#Collections#IEnumerable#GetEnumerator">
      <summary>This method is not supported for this base class and throws an exception. </summary>
      <returns>
An <see cref="T:System.Collections.IEnumerator" />.
</returns>
    </member>
    <member name="M:System.Json.JsonValue.ToString">
      <summary>Saves (serializes) this JSON CLR type into text-based JSON.</summary>
      <returns>
Returns <see cref="T:System.String" />, which contains text-based JSON.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ServiceModel.PollingDuplex.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.ServiceModel.PollingDuplex</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.ServiceModel.PollingDuplex.dll</relpath>
    <extension downloadUri="System.ServiceModel.PollingDuplex.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.ServiceModel.Extensions.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">

  <assembly>
    <name>System.ServiceModel.Extensions</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.ServiceModel.Extensions.dll</relpath>
    <extension downloadUri="System.ServiceModel.Extensions.zip" />
  </assembly>


</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Libraries\Client\System.Numerics.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>Represents an arbitrarily large signed integer.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</summary>
      <param name="value">An array of byte values in little-endian order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">A decimal number.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</summary>
      <param name="value">A double-precision floating-point value.</param>
      <exception cref="T:System.OverflowException">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</summary>
      <param name="value">A 32-bit signed integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</summary>
      <param name="value">A 64-bit signed integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</summary>
      <param name="value">A single-precision floating-point value.</param>
      <exception cref="T:System.OverflowException">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</summary>
      <param name="value">An unsigned 32-bit integer value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</summary>
      <param name="value">An unsigned 64-bit integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>The absolute value of <paramref name="value" />.</returns>
      <param name="value">A number.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</summary>
      <returns>A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.ValueConditionLess than zero<paramref name="left" /> is less than <paramref name="right" />.Zero<paramref name="left" /> equals <paramref name="right" />.Greater than zero<paramref name="left" /> is greater than <paramref name="right" />.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</summary>
      <returns>A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="other" />.ZeroThe current instance equals <paramref name="other" />.Greater than zeroThe current instance is greater than <paramref name="other" />.</returns>
      <param name="other">The signed 64-bit integer to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <returns>A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="other" />.ZeroThe current instance equals <paramref name="other" />.Greater than zeroThe current instance is greater than <paramref name="other" />.</returns>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <returns>A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="obj" />.ZeroThe current instance equals <paramref name="obj" />.Greater than zeroThe current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is null. </returns>
      <param name="obj">The object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />. </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</summary>
      <returns>A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="other" />.ZeroThe current instance equals <paramref name="other" />.Greater than zeroThe current instance is greater than <paramref name="other" />.</returns>
      <param name="other">The unsigned 64-bit integer to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</summary>
      <returns>The quotient of the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</summary>
      <returns>The quotient of the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <param name="remainder">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division. This parameter is passed uninitialized.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</summary>
      <returns>true if the signed 64-bit integer and the current instance have the same value; otherwise, false.</returns>
      <param name="other">The signed 64-bit integer value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</summary>
      <returns>true if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, false.</returns>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance and a specified object have the same value.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.BigInteger" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.BigInteger" /> value, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> object; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</summary>
      <returns>true if the current instance and the unsigned 64-bit integer have the same value; otherwise, false.</returns>
      <param name="other">The unsigned 64-bit integer to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, false.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, false.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>Returns the natural (base e) logarithm of a specified number.</summary>
      <returns>The natural (base e) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
      <param name="value">The number whose logarithm is to be found.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>Returns the logarithm of a specified number in a specified base.</summary>
      <returns>The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
      <param name="value">A number whose logarithm is to be found.</param>
      <param name="baseValue">The base of the logarithm.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>Returns the base 10 logarithm of a specified number.</summary>
      <returns>The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
      <param name="value">A number whose logarithm is to be found.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>Gets a value that represents the number negative one (-1).</summary>
      <returns>An integer whose value is negative one (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs modulus division on a number raised to the power of another number.</summary>
      <returns>The remainder after dividing <paramref name="value" />exponent by <paramref name="modulus" />.</returns>
      <param name="value">The number to raise to the <paramref name="exponent" /> power.</param>
      <param name="exponent">The exponent to raise <paramref name="value" /> by.</param>
      <param name="modulus">The value to divide <paramref name="value" />exponent by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> is negative.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
      <param name="left">The first number to multiply.</param>
      <param name="right">The second number to multiply.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</returns>
      <param name="value">The value to negate.</param>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>Gets a value that represents the number one (1).</summary>
      <returns>An object whose value is one (1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise And operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The result of the bitwise And operation.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise Or operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The result of the bitwise Or operation.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</summary>
      <returns>The value of the <paramref name="value" /> parameter decremented by 1.</returns>
      <param name="value">The value to decrement.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</summary>
      <returns>The integral result of the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise exclusive Or (XOr) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The result of the bitwise Or operation.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter</returns>
      <param name="value">The value to convert to an unsigned 16-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a 16-bit signed integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Byte" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />. -or-<paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a signed 8-bit value.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to an unsigned 32-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</summary>
      <returns>An object that contains the closest possible representation of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a single-precision floating-point value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to an unsigned 64-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a 64-bit signed integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Single" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is <see cref="F:System.Single.NaN" />.-or-<paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</summary>
      <returns>The value of the <paramref name="value" /> parameter incremented by 1.</returns>
      <param name="value">The value to increment.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</summary>
      <returns>A value that has been shifted to the left by the specified number of bits.</returns>
      <param name="value">The value whose bits are to be shifted.</param>
      <param name="shift">The number of bits to shift <paramref name="value" /> to the left.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The remainder that results from the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The product of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to multiply.</param>
      <param name="right">The second value to multiply.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>The bitwise one's complement of <paramref name="value" />.</returns>
      <param name="value">An integer value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</summary>
      <returns>A value that has been shifted to the right by the specified number of bits.</returns>
      <param name="value">The value whose bits are to be shifted.</param>
      <param name="shift">The number of bits to shift <paramref name="value" /> to the right.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>Negates a specified BigInteger value. </summary>
      <returns>The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</returns>
      <param name="value">The value to negate.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand. (The sign of the operand is unchanged.)</summary>
      <returns>The value of the <paramref name="value" /> operand.</returns>
      <param name="value">An integer value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</summary>
      <returns>The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</returns>
      <param name="value">The number to raise to the <paramref name="exponent" /> power.</param>
      <param name="exponent">The exponent to raise <paramref name="value" /> by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="exponent" /> parameter is negative.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</summary>
      <returns>The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.NumberDescription-1The value of this object is negative.0The value of this object is 0 (zero).1The value of this object is positive.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</summary>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</summary>
      <returns>The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>Gets a value that represents the number 0 (zero).</summary>
      <returns>An integer whose value is 0 (zero).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>Represents a complex number.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.Complex" /> structure using the specified real and imaginary values.</summary>
      <param name="real">The real part of the complex number.</param>
      <param name="imaginary">The imaginary part of the complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>Gets the absolute value (or magnitude) of a complex number.</summary>
      <returns>The absolute value of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc cosine of the specified complex number.</summary>
      <returns>The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</returns>
      <param name="value">A complex number that represents a cosine.</param>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adds two complex numbers and returns the result.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first complex number to add.</param>
      <param name="right">The second complex number to add.</param>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc sine of the specified complex number.</summary>
      <returns>The angle which is the arc sine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc tangent of the specified complex number.</summary>
      <returns>The angle that is the arc tangent of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>Computes the conjugate of a complex number and returns the result.</summary>
      <returns>The conjugate of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>Returns the cosine of the specified complex number.</summary>
      <returns>The cosine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>Returns the hyperbolic cosine of the specified complex number.</summary>
      <returns>The hyperbolic cosine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divides one complex number by another and returns the result.</summary>
      <returns>The quotient of the division.</returns>
      <param name="dividend">The complex number to be divided.</param>
      <param name="divisor">The complex number to divide by.</param>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>Returns a value that indicates whether the current instance and a specified complex number have the same value.</summary>
      <returns>true if this complex number and <paramref name="value" /> have the same value; otherwise, false.</returns>
      <param name="value">The complex number to compare.</param>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance and a specified object have the same value. </summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.Complex" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.Complex" /> object, and its value is equal to the current <see cref="T:System.Numerics.Complex" /> object; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>Returns e raised to the power specified by a complex number.</summary>
      <returns>The number e raised to the power <paramref name="value" />.</returns>
      <param name="value">A complex number that specifies a power.</param>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>Creates a complex number from a point's polar coordinates.</summary>
      <returns>A complex number.</returns>
      <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
      <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>Gets the imaginary component of the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>The imaginary component of a complex number.</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to one.</summary>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>Returns the natural (base e) logarithm of a specified complex number.</summary>
      <returns>The natural (base e) logarithm of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>Returns the logarithm of a specified complex number in a specified base.</summary>
      <returns>The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</returns>
      <param name="value">A complex number.</param>
      <param name="baseValue">The base of the logarithm.</param>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>Returns the base-10 logarithm of a specified complex number.</summary>
      <returns>The base-10 logarithm of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>Gets the magnitude (or absolute value) of a complex number.</summary>
      <returns>The magnitude of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns the product of two complex numbers.</summary>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
      <param name="left">The first complex number to multiply.</param>
      <param name="right">The second complex number to multiply.</param>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>Returns the additive inverse of a specified complex number.</summary>
      <returns>The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to one and an imaginary number equal to zero.</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adds two complex numbers.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divides a specified complex number by another specified complex number.</summary>
      <returns>The result of dividing <paramref name="left" /> by <paramref name="right" />.</returns>
      <param name="left">The value to be divided.</param>
      <param name="right">The value to divide by.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns a value that indicates whether two complex numbers are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first complex number to compare.</param>
      <param name="right">The second complex number to compare.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> value to a complex number.</summary>
      <returns>A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero. </returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> value to a complex number. </summary>
      <returns>A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero. </returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of an unsigned byte to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a double-precision floating-point number to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 16-bit signed integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 32-bit signed integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 64-bit signed integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a signed byte to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a single-precision floating-point number to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</summary>
      <returns>An 